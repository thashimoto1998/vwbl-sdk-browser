var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as AWS from "aws-sdk";
import { UploadToIPFS } from "../storage/ipfs/upload";
import { createRandomKey, decryptFile, encryptFile, encryptString, } from "../util/cryptoHelper";
import { toBase64FromBlob } from "../util/fileHelper";
import { VWBLApi } from "./api";
import { signToProtocol } from "./blockchain";
import { UploadContentType, UploadMetadataType } from "./types";
var VWBLBase = /** @class */ (function () {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    function VWBLBase(props) {
        var _this = this;
        /**
         * Sign to VWBL
         *
         * @remarks
         * You need to call this method before you send a transaction（eg. mint NFT）
         */
        this._sign = function (signer) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, signToProtocol(signer)];
                    case 1:
                        _a.signature = _b.sent();
                        console.log("signed");
                        return [2 /*return*/];
                }
            });
        }); };
        /**
         * Create a key used for encryption and decryption
         *
         * @returns Random string generated by uuid
         */
        this.createKey = function () {
            return createRandomKey();
        };
        /**
         * Set key to VWBL Network
         *
         * @param documentId - DocumentId
         * @param chainId - The indentifier of blockchain
         * @param key - The key generated by {@link VWBL.createKey}
         * @param hasNonce
         * @param autoMigration
         *
         */
        this._setKey = function (documentId, chainId, key, hasNonce, autoMigration) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.signature) {
                            throw "please sign first";
                        }
                        return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        /**
         * Encode `plainData` to Base64 and encrypt it
         *
         * @param plainData - The data that only NFT owner can view
         * @param key - The key generated by {@link VWBL.createKey}
         * @returns Encrypted file data
         */
        this.encryptDataViaBase64 = function (plainData, key) { return __awaiter(_this, void 0, void 0, function () {
            var content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, toBase64FromBlob(plainData)];
                    case 1:
                        content = _a.sent();
                        return [2 /*return*/, encryptString(content, key)];
                }
            });
        }); };
        /**
         * Encrypt `plainData`
         *
         * @param plainFile - The data that only NFT owner can view
         * @param key - The key generated by {@link VWBL.createKey}
         * @returns Encrypted file data
         */
        this.encryptFile = function (plainFile, key) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, encryptFile(plainFile, key)];
            });
        }); };
        /**
         * Decrypt `encryptFile`
         *
         * @param encryptFile - The data that only NFT owner can view
         * @param key - The key generated by {@link VWBL.createKey}
         * @returns Encrypted file data
         */
        this.decryptFile = function (encryptFile, key) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, decryptFile(encryptFile, key)];
            });
        }); };
        var uploadContentType = props.uploadContentType, uploadMetadataType = props.uploadMetadataType, awsConfig = props.awsConfig, vwblNetworkUrl = props.vwblNetworkUrl, ipfsNftStorageKey = props.ipfsNftStorageKey;
        this.api = new VWBLApi(vwblNetworkUrl);
        if (uploadContentType === UploadContentType.S3 || uploadMetadataType === UploadMetadataType.S3) {
            if (!awsConfig) {
                throw new Error("please specify S3 bucket.");
            }
            AWS.config.update({
                region: awsConfig.region,
                credentials: new AWS.CognitoIdentityCredentials({
                    IdentityPoolId: awsConfig.idPoolId,
                }),
            });
        }
        else if (uploadContentType === UploadContentType.IPFS || uploadMetadataType === UploadMetadataType.IPFS) {
            if (!ipfsNftStorageKey) {
                throw new Error("please specify nftstorage config of IPFS.");
            }
            this.uploadToIpfs = new UploadToIPFS(ipfsNftStorageKey);
        }
    }
    return VWBLBase;
}());
export { VWBLBase };
