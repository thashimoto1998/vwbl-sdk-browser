(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('aws-sdk')) :
	typeof define === 'function' && define.amd ? define(['aws-sdk'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.VWBL = factory(global.require$$0$4));
})(this, (function (require$$0$4) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getDefaultExportFromNamespaceIfPresent (n) {
		return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
	}

	function getDefaultExportFromNamespaceIfNotNamed (n) {
		return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
	}

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
					var args = [null];
					args.push.apply(args, arguments);
					var Ctor = Function.bind.apply(f, args);
					return new Ctor();
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var src$3 = {};

	var vwbl$2 = {};

	var VWBL$2 = {};

	var axiosExports$1 = {};
	var axios$2 = {
	  get exports(){ return axiosExports$1; },
	  set exports(v){ axiosExports$1 = v; },
	};

	var axiosExports = {};
	var axios$1 = {
	  get exports(){ return axiosExports; },
	  set exports(v){ axiosExports = v; },
	};

	'use strict';

	var bind$2 = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};

	'use strict';

	var bind$1 = bind$2;

	// utils is a library of generic helper functions non-specific to axios

	var toString$3 = Object.prototype.toString;

	// eslint-disable-next-line func-names
	var kindOf = (function(cache) {
	  // eslint-disable-next-line func-names
	  return function(thing) {
	    var str = toString$3.call(thing);
	    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
	  };
	})(Object.create(null));

	function kindOfTest(type) {
	  type = type.toLowerCase();
	  return function isKindOf(thing) {
	    return kindOf(thing) === type;
	  };
	}

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray$1(val) {
	  return Array.isArray(val);
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */
	function isBuffer$3(val) {
	  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
	    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @function
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	var isArrayBuffer = kindOfTest('ArrayBuffer');


	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject$1(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a plain Object
	 *
	 * @param {Object} val The value to test
	 * @return {boolean} True if value is a plain Object, otherwise false
	 */
	function isPlainObject(val) {
	  if (kindOf(val) !== 'object') {
	    return false;
	  }

	  var prototype = Object.getPrototypeOf(val);
	  return prototype === null || prototype === Object.prototype;
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @function
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	var isDate = kindOfTest('Date');

	/**
	 * Determine if a value is a File
	 *
	 * @function
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	var isFile = kindOfTest('File');

	/**
	 * Determine if a value is a Blob
	 *
	 * @function
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	var isBlob$3 = kindOfTest('Blob');

	/**
	 * Determine if a value is a FileList
	 *
	 * @function
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	var isFileList = kindOfTest('FileList');

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString$3.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject$1(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} thing The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(thing) {
	  var pattern = '[object FormData]';
	  return thing && (
	    (typeof FormData === 'function' && thing instanceof FormData) ||
	    toString$3.call(thing) === pattern ||
	    (isFunction(thing.toString) && thing.toString() === pattern)
	  );
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 * @function
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	var isURLSearchParams = kindOfTest('URLSearchParams');

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
	                                           navigator.product === 'NativeScript' ||
	                                           navigator.product === 'NS')) {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray$1(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge$2(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (isPlainObject(result[key]) && isPlainObject(val)) {
	      result[key] = merge$2(result[key], val);
	    } else if (isPlainObject(val)) {
	      result[key] = merge$2({}, val);
	    } else if (isArray$1(val)) {
	      result[key] = val.slice();
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind$1(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 * @return {string} content value without BOM
	 */
	function stripBOM(content) {
	  if (content.charCodeAt(0) === 0xFEFF) {
	    content = content.slice(1);
	  }
	  return content;
	}

	/**
	 * Inherit the prototype methods from one constructor into another
	 * @param {function} constructor
	 * @param {function} superConstructor
	 * @param {object} [props]
	 * @param {object} [descriptors]
	 */

	function inherits$6(constructor, superConstructor, props, descriptors) {
	  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
	  constructor.prototype.constructor = constructor;
	  props && Object.assign(constructor.prototype, props);
	}

	/**
	 * Resolve object with deep prototype chain to a flat object
	 * @param {Object} sourceObj source object
	 * @param {Object} [destObj]
	 * @param {Function} [filter]
	 * @returns {Object}
	 */

	function toFlatObject(sourceObj, destObj, filter) {
	  var props;
	  var i;
	  var prop;
	  var merged = {};

	  destObj = destObj || {};

	  do {
	    props = Object.getOwnPropertyNames(sourceObj);
	    i = props.length;
	    while (i-- > 0) {
	      prop = props[i];
	      if (!merged[prop]) {
	        destObj[prop] = sourceObj[prop];
	        merged[prop] = true;
	      }
	    }
	    sourceObj = Object.getPrototypeOf(sourceObj);
	  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

	  return destObj;
	}

	/*
	 * determines whether a string ends with the characters of a specified string
	 * @param {String} str
	 * @param {String} searchString
	 * @param {Number} [position= 0]
	 * @returns {boolean}
	 */
	function endsWith(str, searchString, position) {
	  str = String(str);
	  if (position === undefined || position > str.length) {
	    position = str.length;
	  }
	  position -= searchString.length;
	  var lastIndex = str.indexOf(searchString, position);
	  return lastIndex !== -1 && lastIndex === position;
	}


	/**
	 * Returns new array from array like object
	 * @param {*} [thing]
	 * @returns {Array}
	 */
	function toArray$1(thing) {
	  if (!thing) return null;
	  var i = thing.length;
	  if (isUndefined(i)) return null;
	  var arr = new Array(i);
	  while (i-- > 0) {
	    arr[i] = thing[i];
	  }
	  return arr;
	}

	// eslint-disable-next-line func-names
	var isTypedArray = (function(TypedArray) {
	  // eslint-disable-next-line func-names
	  return function(thing) {
	    return TypedArray && thing instanceof TypedArray;
	  };
	})(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

	var utils$z = {
	  isArray: isArray$1,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer$3,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject$1,
	  isPlainObject: isPlainObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob$3,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge$2,
	  extend: extend,
	  trim: trim,
	  stripBOM: stripBOM,
	  inherits: inherits$6,
	  toFlatObject: toFlatObject,
	  kindOf: kindOf,
	  kindOfTest: kindOfTest,
	  endsWith: endsWith,
	  toArray: toArray$1,
	  isTypedArray: isTypedArray,
	  isFileList: isFileList
	};

	'use strict';

	var utils$y = utils$z;

	function encode$g(val) {
	  return encodeURIComponent(val).
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	var buildURL$1 = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils$y.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils$y.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils$y.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }

	      utils$y.forEach(val, function parseValue(v) {
	        if (utils$y.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils$y.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode$g(key) + '=' + encode$g(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    var hashmarkIndex = url.indexOf('#');
	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }

	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};

	'use strict';

	var utils$x = utils$z;

	function InterceptorManager$1() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected,
	    synchronous: options ? options.synchronous : false,
	    runWhen: options ? options.runWhen : null
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager$1.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager$1.prototype.forEach = function forEach(fn) {
	  utils$x.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	var InterceptorManager_1 = InterceptorManager$1;

	var global$2 = (typeof global !== "undefined" ? global :
	  typeof self !== "undefined" ? self :
	  typeof window !== "undefined" ? window : {});

	var global$1 = (typeof global$2 !== "undefined" ? global$2 :
	            typeof self !== "undefined" ? self :
	            typeof window !== "undefined" ? window : {});

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser = true;
	var env = {};
	var argv = [];
	var version$t = ''; // empty string to avoid regexp issues
	var versions = {};
	var release = {};
	var config = {};

	function noop$2() {}

	var on = noop$2;
	var addListener = noop$2;
	var once = noop$2;
	var off = noop$2;
	var removeListener = noop$2;
	var removeAllListeners = noop$2;
	var emit = noop$2;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	};
	function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = global$1.performance || {};
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var process$1 = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser,
	  env: env,
	  argv: argv,
	  version: version$t,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	'use strict';

	var utils$w = utils$z;

	var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
	  utils$w.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};

	var AxiosError_1;
	var hasRequiredAxiosError;

	function requireAxiosError () {
		if (hasRequiredAxiosError) return AxiosError_1;
		hasRequiredAxiosError = 1;
		'use strict';

		var utils = utils$z;

		/**
		 * Create an Error with the specified message, config, error code, request and response.
		 *
		 * @param {string} message The error message.
		 * @param {string} [code] The error code (for example, 'ECONNABORTED').
		 * @param {Object} [config] The config.
		 * @param {Object} [request] The request.
		 * @param {Object} [response] The response.
		 * @returns {Error} The created error.
		 */
		function AxiosError(message, code, config, request, response) {
		  Error.call(this);
		  this.message = message;
		  this.name = 'AxiosError';
		  code && (this.code = code);
		  config && (this.config = config);
		  request && (this.request = request);
		  response && (this.response = response);
		}

		utils.inherits(AxiosError, Error, {
		  toJSON: function toJSON() {
		    return {
		      // Standard
		      message: this.message,
		      name: this.name,
		      // Microsoft
		      description: this.description,
		      number: this.number,
		      // Mozilla
		      fileName: this.fileName,
		      lineNumber: this.lineNumber,
		      columnNumber: this.columnNumber,
		      stack: this.stack,
		      // Axios
		      config: this.config,
		      code: this.code,
		      status: this.response && this.response.status ? this.response.status : null
		    };
		  }
		});

		var prototype = AxiosError.prototype;
		var descriptors = {};

		[
		  'ERR_BAD_OPTION_VALUE',
		  'ERR_BAD_OPTION',
		  'ECONNABORTED',
		  'ETIMEDOUT',
		  'ERR_NETWORK',
		  'ERR_FR_TOO_MANY_REDIRECTS',
		  'ERR_DEPRECATED',
		  'ERR_BAD_RESPONSE',
		  'ERR_BAD_REQUEST',
		  'ERR_CANCELED'
		// eslint-disable-next-line func-names
		].forEach(function(code) {
		  descriptors[code] = {value: code};
		});

		Object.defineProperties(AxiosError, descriptors);
		Object.defineProperty(prototype, 'isAxiosError', {value: true});

		// eslint-disable-next-line func-names
		AxiosError.from = function(error, code, config, request, response, customProps) {
		  var axiosError = Object.create(prototype);

		  utils.toFlatObject(error, axiosError, function filter(obj) {
		    return obj !== Error.prototype;
		  });

		  AxiosError.call(axiosError, error.message, code, config, request, response);

		  axiosError.name = error.name;

		  customProps && Object.assign(axiosError, customProps);

		  return axiosError;
		};

		AxiosError_1 = AxiosError;
		return AxiosError_1;
	}

	'use strict';

	var transitional = {
	  silentJSONParsing: true,
	  forcedJSONParsing: true,
	  clarifyTimeoutError: false
	};

	var lookup$2 = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup$2[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup$2[num >> 18 & 0x3F] + lookup$2[num >> 12 & 0x3F] + lookup$2[num >> 6 & 0x3F] + lookup$2[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup$2[tmp >> 2];
	    output += lookup$2[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup$2[tmp >> 10];
	    output += lookup$2[(tmp >> 4) & 0x3F];
	    output += lookup$2[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read$2 (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString$2 = {}.toString;

	var isArray = Array.isArray || function (arr) {
	  return toString$2.call(arr) == '[object Array]';
	};

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	var _kMaxLength = kMaxLength();
	function typedArraySupport () {
	  return true;
	  // rollup issues
	  // try {
	  //   var arr = new Uint8Array(1)
	  //   arr.__proto__ = {
	  //     __proto__: Uint8Array.prototype,
	  //     foo: function () { return 42 }
	  //   }
	  //   return arr.foo() === 42 && // typed array instances can be augmented
	  //       typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	  //       arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  // } catch (e) {
	  //   return false
	  // }
	}

	function kMaxLength () {
	  return Buffer$1.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer$1.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer$1(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer$1 (arg, encodingOrOffset, length) {
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
	    return new Buffer$1(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe$1(this, arg)
	  }
	  return from$2(this, arg, encodingOrOffset, length)
	}

	Buffer$1.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer$1._augment = function (arr) {
	  arr.__proto__ = Buffer$1.prototype;
	  return arr
	};

	function from$2 (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString$4(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer$1.from = function (value, encodingOrOffset, length) {
	  return from$2(null, value, encodingOrOffset, length)
	};

	if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	  Buffer$1.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$1.__proto__ = Uint8Array;
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer$1[Symbol.species] === Buffer$1) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    // Object.defineProperty(Buffer, Symbol.species, {
	    //   value: null,
	    //   configurable: true
	    // })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc$2 (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer$1.alloc = function (size, fill, encoding) {
	  return alloc$2(null, size, fill, encoding)
	};

	function allocUnsafe$1 (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer$1.allocUnsafe = function (size) {
	  return allocUnsafe$1(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer$1.allocUnsafeSlow = function (size) {
	  return allocUnsafe$1(null, size)
	};

	function fromString$4 (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer$1.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer$1.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer$1.alloc(+length)
	}
	Buffer$1.isBuffer = isBuffer$2;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer$1.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer$1.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer$1.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer$1.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer$1.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes$1(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes$1(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer$1.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice$1(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer$1.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer$1.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer$1.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer$1.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer$1.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice$1(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer$1.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer$1.compare(this, b) === 0
	};

	Buffer$1.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer$1.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer$1.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes$1(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer$1.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer$1.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice$1 (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray$1(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH$1 = 0x1000;

	function decodeCodePointsArray$1 (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH$1) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH$1)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex$4(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer$1.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer$1.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$1(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read$2(this, offset, true, 23, 4)
	};

	Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read$2(this, offset, false, 23, 4)
	};

	Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read$2(this, offset, true, 52, 8)
	};

	Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read$2(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes$1(new Buffer$1(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex$4 (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes$1 (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer$2(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	var bufferEs6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Buffer: Buffer$1,
		INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
		SlowBuffer: SlowBuffer,
		isBuffer: isBuffer$2,
		kMaxLength: _kMaxLength
	});

	var toFormData_1;
	var hasRequiredToFormData;

	function requireToFormData () {
		if (hasRequiredToFormData) return toFormData_1;
		hasRequiredToFormData = 1;
		'use strict';

		var utils = utils$z;

		/**
		 * Convert a data object to FormData
		 * @param {Object} obj
		 * @param {?Object} [formData]
		 * @returns {Object}
		 **/

		function toFormData(obj, formData) {
		  // eslint-disable-next-line no-param-reassign
		  formData = formData || new FormData();

		  var stack = [];

		  function convertValue(value) {
		    if (value === null) return '';

		    if (utils.isDate(value)) {
		      return value.toISOString();
		    }

		    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
		      return typeof Blob === 'function' ? new Blob([value]) : Buffer$1.from(value);
		    }

		    return value;
		  }

		  function build(data, parentKey) {
		    if (utils.isPlainObject(data) || utils.isArray(data)) {
		      if (stack.indexOf(data) !== -1) {
		        throw Error('Circular reference detected in ' + parentKey);
		      }

		      stack.push(data);

		      utils.forEach(data, function each(value, key) {
		        if (utils.isUndefined(value)) return;
		        var fullKey = parentKey ? parentKey + '.' + key : key;
		        var arr;

		        if (value && !parentKey && typeof value === 'object') {
		          if (utils.endsWith(key, '{}')) {
		            // eslint-disable-next-line no-param-reassign
		            value = JSON.stringify(value);
		          } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
		            // eslint-disable-next-line func-names
		            arr.forEach(function(el) {
		              !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
		            });
		            return;
		          }
		        }

		        build(value, fullKey);
		      });

		      stack.pop();
		    } else {
		      formData.append(parentKey, convertValue(data));
		    }
		  }

		  build(obj);

		  return formData;
		}

		toFormData_1 = toFormData;
		return toFormData_1;
	}

	var settle;
	var hasRequiredSettle;

	function requireSettle () {
		if (hasRequiredSettle) return settle;
		hasRequiredSettle = 1;
		'use strict';

		var AxiosError = requireAxiosError();

		/**
		 * Resolve or reject a Promise based on response status.
		 *
		 * @param {Function} resolve A function that resolves the promise.
		 * @param {Function} reject A function that rejects the promise.
		 * @param {object} response The response.
		 */
		settle = function settle(resolve, reject, response) {
		  var validateStatus = response.config.validateStatus;
		  if (!response.status || !validateStatus || validateStatus(response.status)) {
		    resolve(response);
		  } else {
		    reject(new AxiosError(
		      'Request failed with status code ' + response.status,
		      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
		      response.config,
		      response.request,
		      response
		    ));
		  }
		};
		return settle;
	}

	var cookies;
	var hasRequiredCookies;

	function requireCookies () {
		if (hasRequiredCookies) return cookies;
		hasRequiredCookies = 1;
		'use strict';

		var utils = utils$z;

		cookies = (
		  utils.isStandardBrowserEnv() ?

		  // Standard browser envs support document.cookie
		    (function standardBrowserEnv() {
		      return {
		        write: function write(name, value, expires, path, domain, secure) {
		          var cookie = [];
		          cookie.push(name + '=' + encodeURIComponent(value));

		          if (utils.isNumber(expires)) {
		            cookie.push('expires=' + new Date(expires).toGMTString());
		          }

		          if (utils.isString(path)) {
		            cookie.push('path=' + path);
		          }

		          if (utils.isString(domain)) {
		            cookie.push('domain=' + domain);
		          }

		          if (secure === true) {
		            cookie.push('secure');
		          }

		          document.cookie = cookie.join('; ');
		        },

		        read: function read(name) {
		          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
		          return (match ? decodeURIComponent(match[3]) : null);
		        },

		        remove: function remove(name) {
		          this.write(name, '', Date.now() - 86400000);
		        }
		      };
		    })() :

		  // Non standard browser env (web workers, react-native) lack needed support.
		    (function nonStandardBrowserEnv() {
		      return {
		        write: function write() {},
		        read: function read() { return null; },
		        remove: function remove() {}
		      };
		    })()
		);
		return cookies;
	}

	'use strict';

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	var isAbsoluteURL$1 = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
	};

	'use strict';

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};

	'use strict';

	var isAbsoluteURL = isAbsoluteURL$1;
	var combineURLs = combineURLs$1;

	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 * @returns {string} The combined full path
	 */
	var buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }
	  return requestedURL;
	};

	var parseHeaders;
	var hasRequiredParseHeaders;

	function requireParseHeaders () {
		if (hasRequiredParseHeaders) return parseHeaders;
		hasRequiredParseHeaders = 1;
		'use strict';

		var utils = utils$z;

		// Headers whose duplicates are ignored by node
		// c.f. https://nodejs.org/api/http.html#http_message_headers
		var ignoreDuplicateOf = [
		  'age', 'authorization', 'content-length', 'content-type', 'etag',
		  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
		  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
		  'referer', 'retry-after', 'user-agent'
		];

		/**
		 * Parse headers into an object
		 *
		 * ```
		 * Date: Wed, 27 Aug 2014 08:58:49 GMT
		 * Content-Type: application/json
		 * Connection: keep-alive
		 * Transfer-Encoding: chunked
		 * ```
		 *
		 * @param {String} headers Headers needing to be parsed
		 * @returns {Object} Headers parsed into an object
		 */
		parseHeaders = function parseHeaders(headers) {
		  var parsed = {};
		  var key;
		  var val;
		  var i;

		  if (!headers) { return parsed; }

		  utils.forEach(headers.split('\n'), function parser(line) {
		    i = line.indexOf(':');
		    key = utils.trim(line.substr(0, i)).toLowerCase();
		    val = utils.trim(line.substr(i + 1));

		    if (key) {
		      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
		        return;
		      }
		      if (key === 'set-cookie') {
		        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
		      } else {
		        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
		      }
		    }
		  });

		  return parsed;
		};
		return parseHeaders;
	}

	var isURLSameOrigin;
	var hasRequiredIsURLSameOrigin;

	function requireIsURLSameOrigin () {
		if (hasRequiredIsURLSameOrigin) return isURLSameOrigin;
		hasRequiredIsURLSameOrigin = 1;
		'use strict';

		var utils = utils$z;

		isURLSameOrigin = (
		  utils.isStandardBrowserEnv() ?

		  // Standard browser envs have full support of the APIs needed to test
		  // whether the request URL is of the same origin as current location.
		    (function standardBrowserEnv() {
		      var msie = /(msie|trident)/i.test(navigator.userAgent);
		      var urlParsingNode = document.createElement('a');
		      var originURL;

		      /**
		    * Parse a URL to discover it's components
		    *
		    * @param {String} url The URL to be parsed
		    * @returns {Object}
		    */
		      function resolveURL(url) {
		        var href = url;

		        if (msie) {
		        // IE needs attribute set twice to normalize properties
		          urlParsingNode.setAttribute('href', href);
		          href = urlParsingNode.href;
		        }

		        urlParsingNode.setAttribute('href', href);

		        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
		        return {
		          href: urlParsingNode.href,
		          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
		          host: urlParsingNode.host,
		          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
		          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
		          hostname: urlParsingNode.hostname,
		          port: urlParsingNode.port,
		          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
		            urlParsingNode.pathname :
		            '/' + urlParsingNode.pathname
		        };
		      }

		      originURL = resolveURL(window.location.href);

		      /**
		    * Determine if a URL shares the same origin as the current location
		    *
		    * @param {String} requestURL The URL to test
		    * @returns {boolean} True if URL shares the same origin, otherwise false
		    */
		      return function isURLSameOrigin(requestURL) {
		        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
		        return (parsed.protocol === originURL.protocol &&
		            parsed.host === originURL.host);
		      };
		    })() :

		  // Non standard browser envs (web workers, react-native) lack needed support.
		    (function nonStandardBrowserEnv() {
		      return function isURLSameOrigin() {
		        return true;
		      };
		    })()
		);
		return isURLSameOrigin;
	}

	var CanceledError_1;
	var hasRequiredCanceledError;

	function requireCanceledError () {
		if (hasRequiredCanceledError) return CanceledError_1;
		hasRequiredCanceledError = 1;
		'use strict';

		var AxiosError = requireAxiosError();
		var utils = utils$z;

		/**
		 * A `CanceledError` is an object that is thrown when an operation is canceled.
		 *
		 * @class
		 * @param {string=} message The message.
		 */
		function CanceledError(message) {
		  // eslint-disable-next-line no-eq-null,eqeqeq
		  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED);
		  this.name = 'CanceledError';
		}

		utils.inherits(CanceledError, AxiosError, {
		  __CANCEL__: true
		});

		CanceledError_1 = CanceledError;
		return CanceledError_1;
	}

	var parseProtocol;
	var hasRequiredParseProtocol;

	function requireParseProtocol () {
		if (hasRequiredParseProtocol) return parseProtocol;
		hasRequiredParseProtocol = 1;
		'use strict';

		parseProtocol = function parseProtocol(url) {
		  var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
		  return match && match[1] || '';
		};
		return parseProtocol;
	}

	var xhr;
	var hasRequiredXhr;

	function requireXhr () {
		if (hasRequiredXhr) return xhr;
		hasRequiredXhr = 1;
		'use strict';

		var utils = utils$z;
		var settle = requireSettle();
		var cookies = requireCookies();
		var buildURL = buildURL$1;
		var buildFullPath = buildFullPath$1;
		var parseHeaders = requireParseHeaders();
		var isURLSameOrigin = requireIsURLSameOrigin();
		var transitionalDefaults = transitional;
		var AxiosError = requireAxiosError();
		var CanceledError = requireCanceledError();
		var parseProtocol = requireParseProtocol();

		xhr = function xhrAdapter(config) {
		  return new Promise(function dispatchXhrRequest(resolve, reject) {
		    var requestData = config.data;
		    var requestHeaders = config.headers;
		    var responseType = config.responseType;
		    var onCanceled;
		    function done() {
		      if (config.cancelToken) {
		        config.cancelToken.unsubscribe(onCanceled);
		      }

		      if (config.signal) {
		        config.signal.removeEventListener('abort', onCanceled);
		      }
		    }

		    if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
		      delete requestHeaders['Content-Type']; // Let the browser set it
		    }

		    var request = new XMLHttpRequest();

		    // HTTP basic authentication
		    if (config.auth) {
		      var username = config.auth.username || '';
		      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
		      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
		    }

		    var fullPath = buildFullPath(config.baseURL, config.url);

		    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

		    // Set the request timeout in MS
		    request.timeout = config.timeout;

		    function onloadend() {
		      if (!request) {
		        return;
		      }
		      // Prepare the response
		      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
		      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
		        request.responseText : request.response;
		      var response = {
		        data: responseData,
		        status: request.status,
		        statusText: request.statusText,
		        headers: responseHeaders,
		        config: config,
		        request: request
		      };

		      settle(function _resolve(value) {
		        resolve(value);
		        done();
		      }, function _reject(err) {
		        reject(err);
		        done();
		      }, response);

		      // Clean up request
		      request = null;
		    }

		    if ('onloadend' in request) {
		      // Use onloadend if available
		      request.onloadend = onloadend;
		    } else {
		      // Listen for ready state to emulate onloadend
		      request.onreadystatechange = function handleLoad() {
		        if (!request || request.readyState !== 4) {
		          return;
		        }

		        // The request errored out and we didn't get a response, this will be
		        // handled by onerror instead
		        // With one exception: request that using file: protocol, most browsers
		        // will return status as 0 even though it's a successful request
		        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
		          return;
		        }
		        // readystate handler is calling before onerror or ontimeout handlers,
		        // so we should call onloadend on the next 'tick'
		        setTimeout(onloadend);
		      };
		    }

		    // Handle browser request cancellation (as opposed to a manual cancellation)
		    request.onabort = function handleAbort() {
		      if (!request) {
		        return;
		      }

		      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

		      // Clean up request
		      request = null;
		    };

		    // Handle low level network errors
		    request.onerror = function handleError() {
		      // Real errors are hidden from us by the browser
		      // onerror should only fire if it's a network error
		      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request, request));

		      // Clean up request
		      request = null;
		    };

		    // Handle timeout
		    request.ontimeout = function handleTimeout() {
		      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
		      var transitional = config.transitional || transitionalDefaults;
		      if (config.timeoutErrorMessage) {
		        timeoutErrorMessage = config.timeoutErrorMessage;
		      }
		      reject(new AxiosError(
		        timeoutErrorMessage,
		        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
		        config,
		        request));

		      // Clean up request
		      request = null;
		    };

		    // Add xsrf header
		    // This is only done if running in a standard browser environment.
		    // Specifically not if we're in a web worker, or react-native.
		    if (utils.isStandardBrowserEnv()) {
		      // Add xsrf header
		      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
		        cookies.read(config.xsrfCookieName) :
		        undefined;

		      if (xsrfValue) {
		        requestHeaders[config.xsrfHeaderName] = xsrfValue;
		      }
		    }

		    // Add headers to the request
		    if ('setRequestHeader' in request) {
		      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
		        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
		          // Remove Content-Type if data is undefined
		          delete requestHeaders[key];
		        } else {
		          // Otherwise add header to the request
		          request.setRequestHeader(key, val);
		        }
		      });
		    }

		    // Add withCredentials to request if needed
		    if (!utils.isUndefined(config.withCredentials)) {
		      request.withCredentials = !!config.withCredentials;
		    }

		    // Add responseType to request if needed
		    if (responseType && responseType !== 'json') {
		      request.responseType = config.responseType;
		    }

		    // Handle progress if needed
		    if (typeof config.onDownloadProgress === 'function') {
		      request.addEventListener('progress', config.onDownloadProgress);
		    }

		    // Not all browsers support upload events
		    if (typeof config.onUploadProgress === 'function' && request.upload) {
		      request.upload.addEventListener('progress', config.onUploadProgress);
		    }

		    if (config.cancelToken || config.signal) {
		      // Handle cancellation
		      // eslint-disable-next-line func-names
		      onCanceled = function(cancel) {
		        if (!request) {
		          return;
		        }
		        reject(!cancel || (cancel && cancel.type) ? new CanceledError() : cancel);
		        request.abort();
		        request = null;
		      };

		      config.cancelToken && config.cancelToken.subscribe(onCanceled);
		      if (config.signal) {
		        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
		      }
		    }

		    if (!requestData) {
		      requestData = null;
		    }

		    var protocol = parseProtocol(fullPath);

		    if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
		      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
		      return;
		    }


		    // Send the request
		    request.send(requestData);
		  });
		};
		return xhr;
	}

	var _null$1;
	var hasRequired_null;

	function require_null () {
		if (hasRequired_null) return _null$1;
		hasRequired_null = 1;
		// eslint-disable-next-line strict
		_null$1 = null;
		return _null$1;
	}

	'use strict';

	var utils$v = utils$z;
	var normalizeHeaderName = normalizeHeaderName$1;
	var AxiosError$1 = requireAxiosError();
	var transitionalDefaults = transitional;
	var toFormData = requireToFormData();

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils$v.isUndefined(headers) && utils$v.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = requireXhr();
	  } else if (typeof process$1 !== 'undefined' && Object.prototype.toString.call(process$1) === '[object process]') {
	    // For node use HTTP adapter
	    adapter = requireXhr();
	  }
	  return adapter;
	}

	function stringifySafely(rawValue, parser, encoder) {
	  if (utils$v.isString(rawValue)) {
	    try {
	      (parser || JSON.parse)(rawValue);
	      return utils$v.trim(rawValue);
	    } catch (e) {
	      if (e.name !== 'SyntaxError') {
	        throw e;
	      }
	    }
	  }

	  return (encoder || JSON.stringify)(rawValue);
	}

	var defaults$3 = {

	  transitional: transitionalDefaults,

	  adapter: getDefaultAdapter(),

	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Accept');
	    normalizeHeaderName(headers, 'Content-Type');

	    if (utils$v.isFormData(data) ||
	      utils$v.isArrayBuffer(data) ||
	      utils$v.isBuffer(data) ||
	      utils$v.isStream(data) ||
	      utils$v.isFile(data) ||
	      utils$v.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils$v.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils$v.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }

	    var isObjectPayload = utils$v.isObject(data);
	    var contentType = headers && headers['Content-Type'];

	    var isFileList;

	    if ((isFileList = utils$v.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
	      var _FormData = this.env && this.env.FormData;
	      return toFormData(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
	    } else if (isObjectPayload || contentType === 'application/json') {
	      setContentTypeIfUnset(headers, 'application/json');
	      return stringifySafely(data);
	    }

	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    var transitional = this.transitional || defaults$3.transitional;
	    var silentJSONParsing = transitional && transitional.silentJSONParsing;
	    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
	    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

	    if (strictJSONParsing || (forcedJSONParsing && utils$v.isString(data) && data.length)) {
	      try {
	        return JSON.parse(data);
	      } catch (e) {
	        if (strictJSONParsing) {
	          if (e.name === 'SyntaxError') {
	            throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
	          }
	          throw e;
	        }
	      }
	    }

	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,
	  maxBodyLength: -1,

	  env: {
	    FormData: require_null()
	  },

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  },

	  headers: {
	    common: {
	      'Accept': 'application/json, text/plain, */*'
	    }
	  }
	};

	utils$v.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults$3.headers[method] = {};
	});

	utils$v.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults$3.headers[method] = utils$v.merge(DEFAULT_CONTENT_TYPE);
	});

	var defaults_1 = defaults$3;

	'use strict';

	var utils$u = utils$z;
	var defaults$2 = defaults_1;

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	var transformData$1 = function transformData(data, headers, fns) {
	  var context = this || defaults$2;
	  /*eslint no-param-reassign:0*/
	  utils$u.forEach(fns, function transform(fn) {
	    data = fn.call(context, data, headers);
	  });

	  return data;
	};

	var isCancel$1;
	var hasRequiredIsCancel;

	function requireIsCancel () {
		if (hasRequiredIsCancel) return isCancel$1;
		hasRequiredIsCancel = 1;
		'use strict';

		isCancel$1 = function isCancel(value) {
		  return !!(value && value.__CANCEL__);
		};
		return isCancel$1;
	}

	'use strict';

	var utils$t = utils$z;
	var transformData = transformData$1;
	var isCancel = requireIsCancel();
	var defaults$1 = defaults_1;
	var CanceledError = requireCanceledError();

	/**
	 * Throws a `CanceledError` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }

	  if (config.signal && config.signal.aborted) {
	    throw new CanceledError();
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	var dispatchRequest$1 = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData.call(
	    config,
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils$t.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers
	  );

	  utils$t.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter = config.adapter || defaults$1.adapter;

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData.call(
	      config,
	      response.data,
	      response.headers,
	      config.transformResponse
	    );

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData.call(
	          config,
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }

	    return Promise.reject(reason);
	  });
	};

	'use strict';

	var utils$s = utils$z;

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 * @returns {Object} New object resulting from merging config2 to config1
	 */
	var mergeConfig$2 = function mergeConfig(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  var config = {};

	  function getMergedValue(target, source) {
	    if (utils$s.isPlainObject(target) && utils$s.isPlainObject(source)) {
	      return utils$s.merge(target, source);
	    } else if (utils$s.isPlainObject(source)) {
	      return utils$s.merge({}, source);
	    } else if (utils$s.isArray(source)) {
	      return source.slice();
	    }
	    return source;
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDeepProperties(prop) {
	    if (!utils$s.isUndefined(config2[prop])) {
	      return getMergedValue(config1[prop], config2[prop]);
	    } else if (!utils$s.isUndefined(config1[prop])) {
	      return getMergedValue(undefined, config1[prop]);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function valueFromConfig2(prop) {
	    if (!utils$s.isUndefined(config2[prop])) {
	      return getMergedValue(undefined, config2[prop]);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function defaultToConfig2(prop) {
	    if (!utils$s.isUndefined(config2[prop])) {
	      return getMergedValue(undefined, config2[prop]);
	    } else if (!utils$s.isUndefined(config1[prop])) {
	      return getMergedValue(undefined, config1[prop]);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDirectKeys(prop) {
	    if (prop in config2) {
	      return getMergedValue(config1[prop], config2[prop]);
	    } else if (prop in config1) {
	      return getMergedValue(undefined, config1[prop]);
	    }
	  }

	  var mergeMap = {
	    'url': valueFromConfig2,
	    'method': valueFromConfig2,
	    'data': valueFromConfig2,
	    'baseURL': defaultToConfig2,
	    'transformRequest': defaultToConfig2,
	    'transformResponse': defaultToConfig2,
	    'paramsSerializer': defaultToConfig2,
	    'timeout': defaultToConfig2,
	    'timeoutMessage': defaultToConfig2,
	    'withCredentials': defaultToConfig2,
	    'adapter': defaultToConfig2,
	    'responseType': defaultToConfig2,
	    'xsrfCookieName': defaultToConfig2,
	    'xsrfHeaderName': defaultToConfig2,
	    'onUploadProgress': defaultToConfig2,
	    'onDownloadProgress': defaultToConfig2,
	    'decompress': defaultToConfig2,
	    'maxContentLength': defaultToConfig2,
	    'maxBodyLength': defaultToConfig2,
	    'beforeRedirect': defaultToConfig2,
	    'transport': defaultToConfig2,
	    'httpAgent': defaultToConfig2,
	    'httpsAgent': defaultToConfig2,
	    'cancelToken': defaultToConfig2,
	    'socketPath': defaultToConfig2,
	    'responseEncoding': defaultToConfig2,
	    'validateStatus': mergeDirectKeys
	  };

	  utils$s.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
	    var merge = mergeMap[prop] || mergeDeepProperties;
	    var configValue = merge(prop);
	    (utils$s.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
	  });

	  return config;
	};

	var data$3;
	var hasRequiredData;

	function requireData () {
		if (hasRequiredData) return data$3;
		hasRequiredData = 1;
		data$3 = {
		  "version": "0.27.2"
		};
		return data$3;
	}

	'use strict';

	var VERSION = requireData().version;
	var AxiosError = requireAxiosError();

	var validators$1 = {};

	// eslint-disable-next-line func-names
	['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
	  validators$1[type] = function validator(thing) {
	    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
	  };
	});

	var deprecatedWarnings = {};

	/**
	 * Transitional option validator
	 * @param {function|boolean?} validator - set to false if the transitional option has been removed
	 * @param {string?} version - deprecated version / removed since version
	 * @param {string?} message - some message with additional info
	 * @returns {function}
	 */
	validators$1.transitional = function transitional(validator, version, message) {
	  function formatMessage(opt, desc) {
	    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
	  }

	  // eslint-disable-next-line func-names
	  return function(value, opt, opts) {
	    if (validator === false) {
	      throw new AxiosError(
	        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
	        AxiosError.ERR_DEPRECATED
	      );
	    }

	    if (version && !deprecatedWarnings[opt]) {
	      deprecatedWarnings[opt] = true;
	      // eslint-disable-next-line no-console
	      console.warn(
	        formatMessage(
	          opt,
	          ' has been deprecated since v' + version + ' and will be removed in the near future'
	        )
	      );
	    }

	    return validator ? validator(value, opt, opts) : true;
	  };
	};

	/**
	 * Assert object's properties type
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 */

	function assertOptions(options, schema, allowUnknown) {
	  if (typeof options !== 'object') {
	    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
	  }
	  var keys = Object.keys(options);
	  var i = keys.length;
	  while (i-- > 0) {
	    var opt = keys[i];
	    var validator = schema[opt];
	    if (validator) {
	      var value = options[opt];
	      var result = value === undefined || validator(value, opt, options);
	      if (result !== true) {
	        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
	      }
	      continue;
	    }
	    if (allowUnknown !== true) {
	      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
	    }
	  }
	}

	var validator$1 = {
	  assertOptions: assertOptions,
	  validators: validators$1
	};

	'use strict';

	var utils$r = utils$z;
	var buildURL = buildURL$1;
	var InterceptorManager = InterceptorManager_1;
	var dispatchRequest = dispatchRequest$1;
	var mergeConfig$1 = mergeConfig$2;
	var buildFullPath = buildFullPath$1;
	var validator = validator$1;

	var validators = validator.validators;
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios$1(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios$1.prototype.request = function request(configOrUrl, config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof configOrUrl === 'string') {
	    config = config || {};
	    config.url = configOrUrl;
	  } else {
	    config = configOrUrl || {};
	  }

	  config = mergeConfig$1(this.defaults, config);

	  // Set config.method
	  if (config.method) {
	    config.method = config.method.toLowerCase();
	  } else if (this.defaults.method) {
	    config.method = this.defaults.method.toLowerCase();
	  } else {
	    config.method = 'get';
	  }

	  var transitional = config.transitional;

	  if (transitional !== undefined) {
	    validator.assertOptions(transitional, {
	      silentJSONParsing: validators.transitional(validators.boolean),
	      forcedJSONParsing: validators.transitional(validators.boolean),
	      clarifyTimeoutError: validators.transitional(validators.boolean)
	    }, false);
	  }

	  // filter out skipped interceptors
	  var requestInterceptorChain = [];
	  var synchronousRequestInterceptors = true;
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
	      return;
	    }

	    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

	    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  var responseInterceptorChain = [];
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  var promise;

	  if (!synchronousRequestInterceptors) {
	    var chain = [dispatchRequest, undefined];

	    Array.prototype.unshift.apply(chain, requestInterceptorChain);
	    chain = chain.concat(responseInterceptorChain);

	    promise = Promise.resolve(config);
	    while (chain.length) {
	      promise = promise.then(chain.shift(), chain.shift());
	    }

	    return promise;
	  }


	  var newConfig = config;
	  while (requestInterceptorChain.length) {
	    var onFulfilled = requestInterceptorChain.shift();
	    var onRejected = requestInterceptorChain.shift();
	    try {
	      newConfig = onFulfilled(newConfig);
	    } catch (error) {
	      onRejected(error);
	      break;
	    }
	  }

	  try {
	    promise = dispatchRequest(newConfig);
	  } catch (error) {
	    return Promise.reject(error);
	  }

	  while (responseInterceptorChain.length) {
	    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
	  }

	  return promise;
	};

	Axios$1.prototype.getUri = function getUri(config) {
	  config = mergeConfig$1(this.defaults, config);
	  var fullPath = buildFullPath(config.baseURL, config.url);
	  return buildURL(fullPath, config.params, config.paramsSerializer);
	};

	// Provide aliases for supported request methods
	utils$r.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios$1.prototype[method] = function(url, config) {
	    return this.request(mergeConfig$1(config || {}, {
	      method: method,
	      url: url,
	      data: (config || {}).data
	    }));
	  };
	});

	utils$r.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/

	  function generateHTTPMethod(isForm) {
	    return function httpMethod(url, data, config) {
	      return this.request(mergeConfig$1(config || {}, {
	        method: method,
	        headers: isForm ? {
	          'Content-Type': 'multipart/form-data'
	        } : {},
	        url: url,
	        data: data
	      }));
	    };
	  }

	  Axios$1.prototype[method] = generateHTTPMethod();

	  Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
	});

	var Axios_1 = Axios$1;

	var CancelToken_1;
	var hasRequiredCancelToken;

	function requireCancelToken () {
		if (hasRequiredCancelToken) return CancelToken_1;
		hasRequiredCancelToken = 1;
		'use strict';

		var CanceledError = requireCanceledError();

		/**
		 * A `CancelToken` is an object that can be used to request cancellation of an operation.
		 *
		 * @class
		 * @param {Function} executor The executor function.
		 */
		function CancelToken(executor) {
		  if (typeof executor !== 'function') {
		    throw new TypeError('executor must be a function.');
		  }

		  var resolvePromise;

		  this.promise = new Promise(function promiseExecutor(resolve) {
		    resolvePromise = resolve;
		  });

		  var token = this;

		  // eslint-disable-next-line func-names
		  this.promise.then(function(cancel) {
		    if (!token._listeners) return;

		    var i;
		    var l = token._listeners.length;

		    for (i = 0; i < l; i++) {
		      token._listeners[i](cancel);
		    }
		    token._listeners = null;
		  });

		  // eslint-disable-next-line func-names
		  this.promise.then = function(onfulfilled) {
		    var _resolve;
		    // eslint-disable-next-line func-names
		    var promise = new Promise(function(resolve) {
		      token.subscribe(resolve);
		      _resolve = resolve;
		    }).then(onfulfilled);

		    promise.cancel = function reject() {
		      token.unsubscribe(_resolve);
		    };

		    return promise;
		  };

		  executor(function cancel(message) {
		    if (token.reason) {
		      // Cancellation has already been requested
		      return;
		    }

		    token.reason = new CanceledError(message);
		    resolvePromise(token.reason);
		  });
		}

		/**
		 * Throws a `CanceledError` if cancellation has been requested.
		 */
		CancelToken.prototype.throwIfRequested = function throwIfRequested() {
		  if (this.reason) {
		    throw this.reason;
		  }
		};

		/**
		 * Subscribe to the cancel signal
		 */

		CancelToken.prototype.subscribe = function subscribe(listener) {
		  if (this.reason) {
		    listener(this.reason);
		    return;
		  }

		  if (this._listeners) {
		    this._listeners.push(listener);
		  } else {
		    this._listeners = [listener];
		  }
		};

		/**
		 * Unsubscribe from the cancel signal
		 */

		CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
		  if (!this._listeners) {
		    return;
		  }
		  var index = this._listeners.indexOf(listener);
		  if (index !== -1) {
		    this._listeners.splice(index, 1);
		  }
		};

		/**
		 * Returns an object that contains a new `CancelToken` and a function that, when called,
		 * cancels the `CancelToken`.
		 */
		CancelToken.source = function source() {
		  var cancel;
		  var token = new CancelToken(function executor(c) {
		    cancel = c;
		  });
		  return {
		    token: token,
		    cancel: cancel
		  };
		};

		CancelToken_1 = CancelToken;
		return CancelToken_1;
	}

	var spread;
	var hasRequiredSpread;

	function requireSpread () {
		if (hasRequiredSpread) return spread;
		hasRequiredSpread = 1;
		'use strict';

		/**
		 * Syntactic sugar for invoking a function and expanding an array for arguments.
		 *
		 * Common use case would be to use `Function.prototype.apply`.
		 *
		 *  ```js
		 *  function f(x, y, z) {}
		 *  var args = [1, 2, 3];
		 *  f.apply(null, args);
		 *  ```
		 *
		 * With `spread` this example can be re-written.
		 *
		 *  ```js
		 *  spread(function(x, y, z) {})([1, 2, 3]);
		 *  ```
		 *
		 * @param {Function} callback
		 * @returns {Function}
		 */
		spread = function spread(callback) {
		  return function wrap(arr) {
		    return callback.apply(null, arr);
		  };
		};
		return spread;
	}

	var isAxiosError;
	var hasRequiredIsAxiosError;

	function requireIsAxiosError () {
		if (hasRequiredIsAxiosError) return isAxiosError;
		hasRequiredIsAxiosError = 1;
		'use strict';

		var utils = utils$z;

		/**
		 * Determines whether the payload is an error thrown by Axios
		 *
		 * @param {*} payload The value to test
		 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
		 */
		isAxiosError = function isAxiosError(payload) {
		  return utils.isObject(payload) && (payload.isAxiosError === true);
		};
		return isAxiosError;
	}

	'use strict';

	var utils$q = utils$z;
	var bind = bind$2;
	var Axios = Axios_1;
	var mergeConfig = mergeConfig$2;
	var defaults = defaults_1;

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils$q.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils$q.extend(instance, context);

	  // Factory for creating new instances
	  instance.create = function create(instanceConfig) {
	    return createInstance(mergeConfig(defaultConfig, instanceConfig));
	  };

	  return instance;
	}

	// Create the default instance to be exported
	var axios = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;

	// Expose Cancel & CancelToken
	axios.CanceledError = requireCanceledError();
	axios.CancelToken = requireCancelToken();
	axios.isCancel = requireIsCancel();
	axios.VERSION = requireData().version;
	axios.toFormData = requireToFormData();

	// Expose AxiosError class
	axios.AxiosError = requireAxiosError();

	// alias for CanceledError for backward compatibility
	axios.Cancel = axios.CanceledError;

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = requireSpread();

	// Expose isAxiosError
	axios.isAxiosError = requireIsAxiosError();

	axios$1.exports = axios;

	// Allow use of default import syntax in TypeScript
	var _default$1 = axiosExports.default = axios;

	(function (module) {
		module.exports = axiosExports;
	} (axios$2));

	var index$m = /*@__PURE__*/getDefaultExportFromCjs(axiosExports$1);

	var upload$1 = {};

	var fileHelper = {};

	"use strict";
	var __awaiter$w = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$w = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	Object.defineProperty(fileHelper, "__esModule", {
	  value: true
	});
	var toArrayBuffer_1 = fileHelper.toArrayBuffer = getMimeType_1 = fileHelper.getMimeType = toBase64FromBlob_1 = fileHelper.toBase64FromBlob = void 0;
	var toBase64FromBlob = function (blob) {
	  return new Promise(function (resolve, reject) {
	    var reader = new FileReader();
	    reader.readAsDataURL(blob);
	    reader.onload = function () {
	      var result = reader.result;
	      if (!result || typeof result !== "string") {
	        reject("cannot convert to base64 string");
	      } else {
	        resolve(result);
	      }
	    };
	    reader.onerror = function (error) {
	      return reject(error);
	    };
	  });
	};
	var toBase64FromBlob_1 = fileHelper.toBase64FromBlob = toBase64FromBlob;
	var getMimeType = function (file) {
	  return file.type;
	};
	var getMimeType_1 = fileHelper.getMimeType = getMimeType;
	var toArrayBuffer = function (blob) {
	  return __awaiter$w(void 0, void 0, void 0, function () {
	    return __generator$w(this, function (_a) {
	      return [2 /*return*/, new Promise(function (resolve, reject) {
	        var reader = new FileReader();
	        reader.readAsArrayBuffer(blob);
	        reader.onload = function () {
	          var result = reader.result;
	          if (!result || !(result instanceof Uint8Array)) {
	            reject("cannot convert to ArrayBuffer");
	          } else {
	            resolve(result);
	          }
	        };
	        reader.onerror = function (error) {
	          return reject(error);
	        };
	      })];
	    });
	  });
	};
	toArrayBuffer_1 = fileHelper.toArrayBuffer = toArrayBuffer;

	"use strict";
	var __createBinding$7 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$7 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$7 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$7(result, mod, k);
	  __setModuleDefault$7(result, mod);
	  return result;
	};
	var __awaiter$v = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$v = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	Object.defineProperty(upload$1, "__esModule", {
	  value: true
	});
	var uploadMetadata_1 = upload$1.uploadMetadata = uploadThumbnail_1 = upload$1.uploadThumbnail = uploadEncryptedFile_1 = upload$1.uploadEncryptedFile = void 0;
	var AWS$1 = __importStar$7(require$$0$4);
	var fileHelper_1$7 = fileHelper;
	var uploadEncryptedFile = function (fileName, encryptedContent, uuid, awsConfig) {
	  return __awaiter$v(void 0, void 0, void 0, function () {
	    var uploadEncrypted, encryptedData;
	    return __generator$v(this, function (_a) {
	      switch (_a.label) {
	        case 0:
	          if (!awsConfig || !awsConfig.bucketName.content) {
	            throw new Error("bucket is not specified.");
	          }
	          uploadEncrypted = new AWS$1.S3.ManagedUpload({
	            params: {
	              Bucket: awsConfig.bucketName.content,
	              Key: "data/".concat(uuid, "-").concat(fileName, ".vwbl"),
	              Body: encryptedContent,
	              ACL: "public-read"
	            }
	          });
	          return [4 /*yield*/, uploadEncrypted.promise()];
	        case 1:
	          encryptedData = _a.sent();
	          return [2 /*return*/, "".concat(awsConfig.cloudFrontUrl, "/").concat(encryptedData.Key)];
	      }
	    });
	  });
	};
	var uploadEncryptedFile_1 = upload$1.uploadEncryptedFile = uploadEncryptedFile;
	var uploadThumbnail = function (thumbnailImage, uuid, awsConfig) {
	  return __awaiter$v(void 0, void 0, void 0, function () {
	    var type, isRunningOnBrowser, uploadThumbnail, _a, _b, _c, thumbnailData;
	    var _d, _e;
	    return __generator$v(this, function (_f) {
	      switch (_f.label) {
	        case 0:
	          if (!awsConfig || !awsConfig.bucketName.content) {
	            throw new Error("bucket is not specified.");
	          }
	          type = (0, fileHelper_1$7.getMimeType)(thumbnailImage);
	          isRunningOnBrowser = typeof window !== "undefined";
	          _b = (_a = AWS$1.S3.ManagedUpload).bind;
	          _d = {};
	          _e = {
	            Bucket: awsConfig.bucketName.content,
	            Key: "data/".concat(uuid, "-").concat(thumbnailImage.name)
	          };
	          if (!isRunningOnBrowser) return [3 /*break*/, 1];
	          _c = thumbnailImage;
	          return [3 /*break*/, 3];
	        case 1:
	          return [4 /*yield*/, (0, fileHelper_1$7.toArrayBuffer)(thumbnailImage)];
	        case 2:
	          _c = _f.sent();
	          _f.label = 3;
	        case 3:
	          uploadThumbnail = new (_b.apply(_a, [void 0, (_d.params = (_e.Body = _c, _e.ContentType = type, _e.ACL = "public-read", _e), _d)]))();
	          return [4 /*yield*/, uploadThumbnail.promise()];
	        case 4:
	          thumbnailData = _f.sent();
	          return [2 /*return*/, "".concat(awsConfig.cloudFrontUrl.replace(/\/$/, ""), "/").concat(thumbnailData.Key)];
	      }
	    });
	  });
	};
	var uploadThumbnail_1 = upload$1.uploadThumbnail = uploadThumbnail;
	var uploadMetadata = function (tokenId, name, description, previewImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig) {
	  return __awaiter$v(void 0, void 0, void 0, function () {
	    var metadata, upload;
	    return __generator$v(this, function (_a) {
	      switch (_a.label) {
	        case 0:
	          if (!awsConfig || !awsConfig.bucketName.metadata) {
	            throw new Error("bucket is not specified.");
	          }
	          metadata = {
	            name: name,
	            description: description,
	            image: previewImageUrl,
	            encrypted_data: encryptedDataUrls,
	            mime_type: mimeType,
	            encrypt_logic: encryptLogic
	          };
	          upload = new AWS$1.S3.ManagedUpload({
	            params: {
	              Bucket: awsConfig.bucketName.metadata,
	              Key: "metadata/".concat(tokenId),
	              Body: JSON.stringify(metadata),
	              ContentType: "application/json",
	              ACL: "public-read"
	            }
	          });
	          return [4 /*yield*/, upload.promise()];
	        case 1:
	          _a.sent();
	          return [2 /*return*/];
	      }
	    });
	  });
	};

	uploadMetadata_1 = upload$1.uploadMetadata = uploadMetadata;

	var cryptoHelper$1 = {};

	var cryptoJsExports = {};
	var cryptoJs$1 = {
	  get exports(){ return cryptoJsExports; },
	  set exports(v){ cryptoJsExports = v; },
	};

	function commonjsRequire(path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var coreExports = {};
	var core = {
	  get exports(){ return coreExports; },
	  set exports(v){ coreExports = v; },
	};

	var empty$1 = {};

	var empty$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: empty$1
	});

	var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(empty$2);

	var hasRequiredCore;

	function requireCore () {
		if (hasRequiredCore) return coreExports;
		hasRequiredCore = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory();
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined([], factory);
				}
				else {
					// Global (browser)
					root.CryptoJS = factory();
				}
			}(commonjsGlobal, function () {

				/*globals window, global, require*/

				/**
				 * CryptoJS core components.
				 */
				var CryptoJS = CryptoJS || (function (Math, undefined$1) {

				    var crypto;

				    // Native crypto from window (Browser)
				    if (typeof window !== 'undefined' && window.crypto) {
				        crypto = window.crypto;
				    }

				    // Native crypto in web worker (Browser)
				    if (typeof self !== 'undefined' && self.crypto) {
				        crypto = self.crypto;
				    }

				    // Native crypto from worker
				    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
				        crypto = globalThis.crypto;
				    }

				    // Native (experimental IE 11) crypto from window (Browser)
				    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
				        crypto = window.msCrypto;
				    }

				    // Native crypto from global (NodeJS)
				    if (!crypto && typeof commonjsGlobal !== 'undefined' && commonjsGlobal.crypto) {
				        crypto = commonjsGlobal.crypto;
				    }

				    // Native crypto import via require (NodeJS)
				    if (!crypto && typeof commonjsRequire === 'function') {
				        try {
				            crypto = require$$0$3;
				        } catch (err) {}
				    }

				    /*
				     * Cryptographically secure pseudorandom number generator
				     *
				     * As Math.random() is cryptographically not safe to use
				     */
				    var cryptoSecureRandomInt = function () {
				        if (crypto) {
				            // Use getRandomValues method (Browser)
				            if (typeof crypto.getRandomValues === 'function') {
				                try {
				                    return crypto.getRandomValues(new Uint32Array(1))[0];
				                } catch (err) {}
				            }

				            // Use randomBytes method (NodeJS)
				            if (typeof crypto.randomBytes === 'function') {
				                try {
				                    return crypto.randomBytes(4).readInt32LE();
				                } catch (err) {}
				            }
				        }

				        throw new Error('Native crypto module could not be used to get secure random number.');
				    };

				    /*
				     * Local polyfill of Object.create

				     */
				    var create = Object.create || (function () {
				        function F() {}

				        return function (obj) {
				            var subtype;

				            F.prototype = obj;

				            subtype = new F();

				            F.prototype = null;

				            return subtype;
				        };
				    }());

				    /**
				     * CryptoJS namespace.
				     */
				    var C = {};

				    /**
				     * Library namespace.
				     */
				    var C_lib = C.lib = {};

				    /**
				     * Base object for prototypal inheritance.
				     */
				    var Base = C_lib.Base = (function () {


				        return {
				            /**
				             * Creates a new object that inherits from this object.
				             *
				             * @param {Object} overrides Properties to copy into the new object.
				             *
				             * @return {Object} The new object.
				             *
				             * @static
				             *
				             * @example
				             *
				             *     var MyType = CryptoJS.lib.Base.extend({
				             *         field: 'value',
				             *
				             *         method: function () {
				             *         }
				             *     });
				             */
				            extend: function (overrides) {
				                // Spawn
				                var subtype = create(this);

				                // Augment
				                if (overrides) {
				                    subtype.mixIn(overrides);
				                }

				                // Create default initializer
				                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
				                    subtype.init = function () {
				                        subtype.$super.init.apply(this, arguments);
				                    };
				                }

				                // Initializer's prototype is the subtype object
				                subtype.init.prototype = subtype;

				                // Reference supertype
				                subtype.$super = this;

				                return subtype;
				            },

				            /**
				             * Extends this object and runs the init method.
				             * Arguments to create() will be passed to init().
				             *
				             * @return {Object} The new object.
				             *
				             * @static
				             *
				             * @example
				             *
				             *     var instance = MyType.create();
				             */
				            create: function () {
				                var instance = this.extend();
				                instance.init.apply(instance, arguments);

				                return instance;
				            },

				            /**
				             * Initializes a newly created object.
				             * Override this method to add some logic when your objects are created.
				             *
				             * @example
				             *
				             *     var MyType = CryptoJS.lib.Base.extend({
				             *         init: function () {
				             *             // ...
				             *         }
				             *     });
				             */
				            init: function () {
				            },

				            /**
				             * Copies properties into this object.
				             *
				             * @param {Object} properties The properties to mix in.
				             *
				             * @example
				             *
				             *     MyType.mixIn({
				             *         field: 'value'
				             *     });
				             */
				            mixIn: function (properties) {
				                for (var propertyName in properties) {
				                    if (properties.hasOwnProperty(propertyName)) {
				                        this[propertyName] = properties[propertyName];
				                    }
				                }

				                // IE won't copy toString using the loop above
				                if (properties.hasOwnProperty('toString')) {
				                    this.toString = properties.toString;
				                }
				            },

				            /**
				             * Creates a copy of this object.
				             *
				             * @return {Object} The clone.
				             *
				             * @example
				             *
				             *     var clone = instance.clone();
				             */
				            clone: function () {
				                return this.init.prototype.extend(this);
				            }
				        };
				    }());

				    /**
				     * An array of 32-bit words.
				     *
				     * @property {Array} words The array of 32-bit words.
				     * @property {number} sigBytes The number of significant bytes in this word array.
				     */
				    var WordArray = C_lib.WordArray = Base.extend({
				        /**
				         * Initializes a newly created word array.
				         *
				         * @param {Array} words (Optional) An array of 32-bit words.
				         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.lib.WordArray.create();
				         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
				         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
				         */
				        init: function (words, sigBytes) {
				            words = this.words = words || [];

				            if (sigBytes != undefined$1) {
				                this.sigBytes = sigBytes;
				            } else {
				                this.sigBytes = words.length * 4;
				            }
				        },

				        /**
				         * Converts this word array to a string.
				         *
				         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
				         *
				         * @return {string} The stringified word array.
				         *
				         * @example
				         *
				         *     var string = wordArray + '';
				         *     var string = wordArray.toString();
				         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
				         */
				        toString: function (encoder) {
				            return (encoder || Hex).stringify(this);
				        },

				        /**
				         * Concatenates a word array to this word array.
				         *
				         * @param {WordArray} wordArray The word array to append.
				         *
				         * @return {WordArray} This word array.
				         *
				         * @example
				         *
				         *     wordArray1.concat(wordArray2);
				         */
				        concat: function (wordArray) {
				            // Shortcuts
				            var thisWords = this.words;
				            var thatWords = wordArray.words;
				            var thisSigBytes = this.sigBytes;
				            var thatSigBytes = wordArray.sigBytes;

				            // Clamp excess bits
				            this.clamp();

				            // Concat
				            if (thisSigBytes % 4) {
				                // Copy one byte at a time
				                for (var i = 0; i < thatSigBytes; i++) {
				                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
				                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
				                }
				            } else {
				                // Copy one word at a time
				                for (var j = 0; j < thatSigBytes; j += 4) {
				                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
				                }
				            }
				            this.sigBytes += thatSigBytes;

				            // Chainable
				            return this;
				        },

				        /**
				         * Removes insignificant bits.
				         *
				         * @example
				         *
				         *     wordArray.clamp();
				         */
				        clamp: function () {
				            // Shortcuts
				            var words = this.words;
				            var sigBytes = this.sigBytes;

				            // Clamp
				            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
				            words.length = Math.ceil(sigBytes / 4);
				        },

				        /**
				         * Creates a copy of this word array.
				         *
				         * @return {WordArray} The clone.
				         *
				         * @example
				         *
				         *     var clone = wordArray.clone();
				         */
				        clone: function () {
				            var clone = Base.clone.call(this);
				            clone.words = this.words.slice(0);

				            return clone;
				        },

				        /**
				         * Creates a word array filled with random bytes.
				         *
				         * @param {number} nBytes The number of random bytes to generate.
				         *
				         * @return {WordArray} The random word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.lib.WordArray.random(16);
				         */
				        random: function (nBytes) {
				            var words = [];

				            for (var i = 0; i < nBytes; i += 4) {
				                words.push(cryptoSecureRandomInt());
				            }

				            return new WordArray.init(words, nBytes);
				        }
				    });

				    /**
				     * Encoder namespace.
				     */
				    var C_enc = C.enc = {};

				    /**
				     * Hex encoding strategy.
				     */
				    var Hex = C_enc.Hex = {
				        /**
				         * Converts a word array to a hex string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The hex string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;

				            // Convert
				            var hexChars = [];
				            for (var i = 0; i < sigBytes; i++) {
				                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
				                hexChars.push((bite >>> 4).toString(16));
				                hexChars.push((bite & 0x0f).toString(16));
				            }

				            return hexChars.join('');
				        },

				        /**
				         * Converts a hex string to a word array.
				         *
				         * @param {string} hexStr The hex string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
				         */
				        parse: function (hexStr) {
				            // Shortcut
				            var hexStrLength = hexStr.length;

				            // Convert
				            var words = [];
				            for (var i = 0; i < hexStrLength; i += 2) {
				                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
				            }

				            return new WordArray.init(words, hexStrLength / 2);
				        }
				    };

				    /**
				     * Latin1 encoding strategy.
				     */
				    var Latin1 = C_enc.Latin1 = {
				        /**
				         * Converts a word array to a Latin1 string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The Latin1 string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;

				            // Convert
				            var latin1Chars = [];
				            for (var i = 0; i < sigBytes; i++) {
				                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
				                latin1Chars.push(String.fromCharCode(bite));
				            }

				            return latin1Chars.join('');
				        },

				        /**
				         * Converts a Latin1 string to a word array.
				         *
				         * @param {string} latin1Str The Latin1 string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
				         */
				        parse: function (latin1Str) {
				            // Shortcut
				            var latin1StrLength = latin1Str.length;

				            // Convert
				            var words = [];
				            for (var i = 0; i < latin1StrLength; i++) {
				                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
				            }

				            return new WordArray.init(words, latin1StrLength);
				        }
				    };

				    /**
				     * UTF-8 encoding strategy.
				     */
				    var Utf8 = C_enc.Utf8 = {
				        /**
				         * Converts a word array to a UTF-8 string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The UTF-8 string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            try {
				                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
				            } catch (e) {
				                throw new Error('Malformed UTF-8 data');
				            }
				        },

				        /**
				         * Converts a UTF-8 string to a word array.
				         *
				         * @param {string} utf8Str The UTF-8 string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
				         */
				        parse: function (utf8Str) {
				            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
				        }
				    };

				    /**
				     * Abstract buffered block algorithm template.
				     *
				     * The property blockSize must be implemented in a concrete subtype.
				     *
				     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
				     */
				    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
				        /**
				         * Resets this block algorithm's data buffer to its initial state.
				         *
				         * @example
				         *
				         *     bufferedBlockAlgorithm.reset();
				         */
				        reset: function () {
				            // Initial values
				            this._data = new WordArray.init();
				            this._nDataBytes = 0;
				        },

				        /**
				         * Adds new data to this block algorithm's buffer.
				         *
				         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
				         *
				         * @example
				         *
				         *     bufferedBlockAlgorithm._append('data');
				         *     bufferedBlockAlgorithm._append(wordArray);
				         */
				        _append: function (data) {
				            // Convert string to WordArray, else assume WordArray already
				            if (typeof data == 'string') {
				                data = Utf8.parse(data);
				            }

				            // Append
				            this._data.concat(data);
				            this._nDataBytes += data.sigBytes;
				        },

				        /**
				         * Processes available data blocks.
				         *
				         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
				         *
				         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
				         *
				         * @return {WordArray} The processed data.
				         *
				         * @example
				         *
				         *     var processedData = bufferedBlockAlgorithm._process();
				         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
				         */
				        _process: function (doFlush) {
				            var processedWords;

				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;
				            var dataSigBytes = data.sigBytes;
				            var blockSize = this.blockSize;
				            var blockSizeBytes = blockSize * 4;

				            // Count blocks ready
				            var nBlocksReady = dataSigBytes / blockSizeBytes;
				            if (doFlush) {
				                // Round up to include partial blocks
				                nBlocksReady = Math.ceil(nBlocksReady);
				            } else {
				                // Round down to include only full blocks,
				                // less the number of blocks that must remain in the buffer
				                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
				            }

				            // Count words ready
				            var nWordsReady = nBlocksReady * blockSize;

				            // Count bytes ready
				            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

				            // Process blocks
				            if (nWordsReady) {
				                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
				                    // Perform concrete-algorithm logic
				                    this._doProcessBlock(dataWords, offset);
				                }

				                // Remove processed words
				                processedWords = dataWords.splice(0, nWordsReady);
				                data.sigBytes -= nBytesReady;
				            }

				            // Return processed words
				            return new WordArray.init(processedWords, nBytesReady);
				        },

				        /**
				         * Creates a copy of this object.
				         *
				         * @return {Object} The clone.
				         *
				         * @example
				         *
				         *     var clone = bufferedBlockAlgorithm.clone();
				         */
				        clone: function () {
				            var clone = Base.clone.call(this);
				            clone._data = this._data.clone();

				            return clone;
				        },

				        _minBufferSize: 0
				    });

				    /**
				     * Abstract hasher template.
				     *
				     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
				     */
				    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
				        /**
				         * Configuration options.
				         */
				        cfg: Base.extend(),

				        /**
				         * Initializes a newly created hasher.
				         *
				         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
				         *
				         * @example
				         *
				         *     var hasher = CryptoJS.algo.SHA256.create();
				         */
				        init: function (cfg) {
				            // Apply config defaults
				            this.cfg = this.cfg.extend(cfg);

				            // Set initial values
				            this.reset();
				        },

				        /**
				         * Resets this hasher to its initial state.
				         *
				         * @example
				         *
				         *     hasher.reset();
				         */
				        reset: function () {
				            // Reset data buffer
				            BufferedBlockAlgorithm.reset.call(this);

				            // Perform concrete-hasher logic
				            this._doReset();
				        },

				        /**
				         * Updates this hasher with a message.
				         *
				         * @param {WordArray|string} messageUpdate The message to append.
				         *
				         * @return {Hasher} This hasher.
				         *
				         * @example
				         *
				         *     hasher.update('message');
				         *     hasher.update(wordArray);
				         */
				        update: function (messageUpdate) {
				            // Append
				            this._append(messageUpdate);

				            // Update the hash
				            this._process();

				            // Chainable
				            return this;
				        },

				        /**
				         * Finalizes the hash computation.
				         * Note that the finalize operation is effectively a destructive, read-once operation.
				         *
				         * @param {WordArray|string} messageUpdate (Optional) A final message update.
				         *
				         * @return {WordArray} The hash.
				         *
				         * @example
				         *
				         *     var hash = hasher.finalize();
				         *     var hash = hasher.finalize('message');
				         *     var hash = hasher.finalize(wordArray);
				         */
				        finalize: function (messageUpdate) {
				            // Final message update
				            if (messageUpdate) {
				                this._append(messageUpdate);
				            }

				            // Perform concrete-hasher logic
				            var hash = this._doFinalize();

				            return hash;
				        },

				        blockSize: 512/32,

				        /**
				         * Creates a shortcut function to a hasher's object interface.
				         *
				         * @param {Hasher} hasher The hasher to create a helper for.
				         *
				         * @return {Function} The shortcut function.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
				         */
				        _createHelper: function (hasher) {
				            return function (message, cfg) {
				                return new hasher.init(cfg).finalize(message);
				            };
				        },

				        /**
				         * Creates a shortcut function to the HMAC's object interface.
				         *
				         * @param {Hasher} hasher The hasher to use in this HMAC helper.
				         *
				         * @return {Function} The shortcut function.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
				         */
				        _createHmacHelper: function (hasher) {
				            return function (message, key) {
				                return new C_algo.HMAC.init(hasher, key).finalize(message);
				            };
				        }
				    });

				    /**
				     * Algorithm namespace.
				     */
				    var C_algo = C.algo = {};

				    return C;
				}(Math));


				return CryptoJS;

			}));
	} (core, coreExports));
		return coreExports;
	}

	var x64CoreExports = {};
	var x64Core = {
	  get exports(){ return x64CoreExports; },
	  set exports(v){ x64CoreExports = v; },
	};

	var hasRequiredX64Core;

	function requireX64Core () {
		if (hasRequiredX64Core) return x64CoreExports;
		hasRequiredX64Core = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (undefined$1) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var X32WordArray = C_lib.WordArray;

				    /**
				     * x64 namespace.
				     */
				    var C_x64 = C.x64 = {};

				    /**
				     * A 64-bit word.
				     */
				    var X64Word = C_x64.Word = Base.extend({
				        /**
				         * Initializes a newly created 64-bit word.
				         *
				         * @param {number} high The high 32 bits.
				         * @param {number} low The low 32 bits.
				         *
				         * @example
				         *
				         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
				         */
				        init: function (high, low) {
				            this.high = high;
				            this.low = low;
				        }

				        /**
				         * Bitwise NOTs this word.
				         *
				         * @return {X64Word} A new x64-Word object after negating.
				         *
				         * @example
				         *
				         *     var negated = x64Word.not();
				         */
				        // not: function () {
				            // var high = ~this.high;
				            // var low = ~this.low;

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Bitwise ANDs this word with the passed word.
				         *
				         * @param {X64Word} word The x64-Word to AND with this word.
				         *
				         * @return {X64Word} A new x64-Word object after ANDing.
				         *
				         * @example
				         *
				         *     var anded = x64Word.and(anotherX64Word);
				         */
				        // and: function (word) {
				            // var high = this.high & word.high;
				            // var low = this.low & word.low;

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Bitwise ORs this word with the passed word.
				         *
				         * @param {X64Word} word The x64-Word to OR with this word.
				         *
				         * @return {X64Word} A new x64-Word object after ORing.
				         *
				         * @example
				         *
				         *     var ored = x64Word.or(anotherX64Word);
				         */
				        // or: function (word) {
				            // var high = this.high | word.high;
				            // var low = this.low | word.low;

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Bitwise XORs this word with the passed word.
				         *
				         * @param {X64Word} word The x64-Word to XOR with this word.
				         *
				         * @return {X64Word} A new x64-Word object after XORing.
				         *
				         * @example
				         *
				         *     var xored = x64Word.xor(anotherX64Word);
				         */
				        // xor: function (word) {
				            // var high = this.high ^ word.high;
				            // var low = this.low ^ word.low;

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Shifts this word n bits to the left.
				         *
				         * @param {number} n The number of bits to shift.
				         *
				         * @return {X64Word} A new x64-Word object after shifting.
				         *
				         * @example
				         *
				         *     var shifted = x64Word.shiftL(25);
				         */
				        // shiftL: function (n) {
				            // if (n < 32) {
				                // var high = (this.high << n) | (this.low >>> (32 - n));
				                // var low = this.low << n;
				            // } else {
				                // var high = this.low << (n - 32);
				                // var low = 0;
				            // }

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Shifts this word n bits to the right.
				         *
				         * @param {number} n The number of bits to shift.
				         *
				         * @return {X64Word} A new x64-Word object after shifting.
				         *
				         * @example
				         *
				         *     var shifted = x64Word.shiftR(7);
				         */
				        // shiftR: function (n) {
				            // if (n < 32) {
				                // var low = (this.low >>> n) | (this.high << (32 - n));
				                // var high = this.high >>> n;
				            // } else {
				                // var low = this.high >>> (n - 32);
				                // var high = 0;
				            // }

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Rotates this word n bits to the left.
				         *
				         * @param {number} n The number of bits to rotate.
				         *
				         * @return {X64Word} A new x64-Word object after rotating.
				         *
				         * @example
				         *
				         *     var rotated = x64Word.rotL(25);
				         */
				        // rotL: function (n) {
				            // return this.shiftL(n).or(this.shiftR(64 - n));
				        // },

				        /**
				         * Rotates this word n bits to the right.
				         *
				         * @param {number} n The number of bits to rotate.
				         *
				         * @return {X64Word} A new x64-Word object after rotating.
				         *
				         * @example
				         *
				         *     var rotated = x64Word.rotR(7);
				         */
				        // rotR: function (n) {
				            // return this.shiftR(n).or(this.shiftL(64 - n));
				        // },

				        /**
				         * Adds this word with the passed word.
				         *
				         * @param {X64Word} word The x64-Word to add with this word.
				         *
				         * @return {X64Word} A new x64-Word object after adding.
				         *
				         * @example
				         *
				         *     var added = x64Word.add(anotherX64Word);
				         */
				        // add: function (word) {
				            // var low = (this.low + word.low) | 0;
				            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
				            // var high = (this.high + word.high + carry) | 0;

				            // return X64Word.create(high, low);
				        // }
				    });

				    /**
				     * An array of 64-bit words.
				     *
				     * @property {Array} words The array of CryptoJS.x64.Word objects.
				     * @property {number} sigBytes The number of significant bytes in this word array.
				     */
				    var X64WordArray = C_x64.WordArray = Base.extend({
				        /**
				         * Initializes a newly created word array.
				         *
				         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
				         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.x64.WordArray.create();
				         *
				         *     var wordArray = CryptoJS.x64.WordArray.create([
				         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
				         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
				         *     ]);
				         *
				         *     var wordArray = CryptoJS.x64.WordArray.create([
				         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
				         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
				         *     ], 10);
				         */
				        init: function (words, sigBytes) {
				            words = this.words = words || [];

				            if (sigBytes != undefined$1) {
				                this.sigBytes = sigBytes;
				            } else {
				                this.sigBytes = words.length * 8;
				            }
				        },

				        /**
				         * Converts this 64-bit word array to a 32-bit word array.
				         *
				         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
				         *
				         * @example
				         *
				         *     var x32WordArray = x64WordArray.toX32();
				         */
				        toX32: function () {
				            // Shortcuts
				            var x64Words = this.words;
				            var x64WordsLength = x64Words.length;

				            // Convert
				            var x32Words = [];
				            for (var i = 0; i < x64WordsLength; i++) {
				                var x64Word = x64Words[i];
				                x32Words.push(x64Word.high);
				                x32Words.push(x64Word.low);
				            }

				            return X32WordArray.create(x32Words, this.sigBytes);
				        },

				        /**
				         * Creates a copy of this word array.
				         *
				         * @return {X64WordArray} The clone.
				         *
				         * @example
				         *
				         *     var clone = x64WordArray.clone();
				         */
				        clone: function () {
				            var clone = Base.clone.call(this);

				            // Clone "words" array
				            var words = clone.words = this.words.slice(0);

				            // Clone each X64Word object
				            var wordsLength = words.length;
				            for (var i = 0; i < wordsLength; i++) {
				                words[i] = words[i].clone();
				            }

				            return clone;
				        }
				    });
				}());


				return CryptoJS;

			}));
	} (x64Core, x64CoreExports));
		return x64CoreExports;
	}

	var libTypedarraysExports = {};
	var libTypedarrays = {
	  get exports(){ return libTypedarraysExports; },
	  set exports(v){ libTypedarraysExports = v; },
	};

	var hasRequiredLibTypedarrays;

	function requireLibTypedarrays () {
		if (hasRequiredLibTypedarrays) return libTypedarraysExports;
		hasRequiredLibTypedarrays = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Check if typed arrays are supported
				    if (typeof ArrayBuffer != 'function') {
				        return;
				    }

				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;

				    // Reference original init
				    var superInit = WordArray.init;

				    // Augment WordArray.init to handle typed arrays
				    var subInit = WordArray.init = function (typedArray) {
				        // Convert buffers to uint8
				        if (typedArray instanceof ArrayBuffer) {
				            typedArray = new Uint8Array(typedArray);
				        }

				        // Convert other array views to uint8
				        if (
				            typedArray instanceof Int8Array ||
				            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
				            typedArray instanceof Int16Array ||
				            typedArray instanceof Uint16Array ||
				            typedArray instanceof Int32Array ||
				            typedArray instanceof Uint32Array ||
				            typedArray instanceof Float32Array ||
				            typedArray instanceof Float64Array
				        ) {
				            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
				        }

				        // Handle Uint8Array
				        if (typedArray instanceof Uint8Array) {
				            // Shortcut
				            var typedArrayByteLength = typedArray.byteLength;

				            // Extract bytes
				            var words = [];
				            for (var i = 0; i < typedArrayByteLength; i++) {
				                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
				            }

				            // Initialize this word array
				            superInit.call(this, words, typedArrayByteLength);
				        } else {
				            // Else call normal init
				            superInit.apply(this, arguments);
				        }
				    };

				    subInit.prototype = WordArray;
				}());


				return CryptoJS.lib.WordArray;

			}));
	} (libTypedarrays, libTypedarraysExports));
		return libTypedarraysExports;
	}

	var encUtf16Exports = {};
	var encUtf16 = {
	  get exports(){ return encUtf16Exports; },
	  set exports(v){ encUtf16Exports = v; },
	};

	var hasRequiredEncUtf16;

	function requireEncUtf16 () {
		if (hasRequiredEncUtf16) return encUtf16Exports;
		hasRequiredEncUtf16 = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var C_enc = C.enc;

				    /**
				     * UTF-16 BE encoding strategy.
				     */
				    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
				        /**
				         * Converts a word array to a UTF-16 BE string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The UTF-16 BE string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;

				            // Convert
				            var utf16Chars = [];
				            for (var i = 0; i < sigBytes; i += 2) {
				                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
				                utf16Chars.push(String.fromCharCode(codePoint));
				            }

				            return utf16Chars.join('');
				        },

				        /**
				         * Converts a UTF-16 BE string to a word array.
				         *
				         * @param {string} utf16Str The UTF-16 BE string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
				         */
				        parse: function (utf16Str) {
				            // Shortcut
				            var utf16StrLength = utf16Str.length;

				            // Convert
				            var words = [];
				            for (var i = 0; i < utf16StrLength; i++) {
				                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
				            }

				            return WordArray.create(words, utf16StrLength * 2);
				        }
				    };

				    /**
				     * UTF-16 LE encoding strategy.
				     */
				    C_enc.Utf16LE = {
				        /**
				         * Converts a word array to a UTF-16 LE string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The UTF-16 LE string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;

				            // Convert
				            var utf16Chars = [];
				            for (var i = 0; i < sigBytes; i += 2) {
				                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
				                utf16Chars.push(String.fromCharCode(codePoint));
				            }

				            return utf16Chars.join('');
				        },

				        /**
				         * Converts a UTF-16 LE string to a word array.
				         *
				         * @param {string} utf16Str The UTF-16 LE string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
				         */
				        parse: function (utf16Str) {
				            // Shortcut
				            var utf16StrLength = utf16Str.length;

				            // Convert
				            var words = [];
				            for (var i = 0; i < utf16StrLength; i++) {
				                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
				            }

				            return WordArray.create(words, utf16StrLength * 2);
				        }
				    };

				    function swapEndian(word) {
				        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
				    }
				}());


				return CryptoJS.enc.Utf16;

			}));
	} (encUtf16, encUtf16Exports));
		return encUtf16Exports;
	}

	var encBase64Exports = {};
	var encBase64 = {
	  get exports(){ return encBase64Exports; },
	  set exports(v){ encBase64Exports = v; },
	};

	var hasRequiredEncBase64;

	function requireEncBase64 () {
		if (hasRequiredEncBase64) return encBase64Exports;
		hasRequiredEncBase64 = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var C_enc = C.enc;

				    /**
				     * Base64 encoding strategy.
				     */
				    var Base64 = C_enc.Base64 = {
				        /**
				         * Converts a word array to a Base64 string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The Base64 string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;
				            var map = this._map;

				            // Clamp excess bits
				            wordArray.clamp();

				            // Convert
				            var base64Chars = [];
				            for (var i = 0; i < sigBytes; i += 3) {
				                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
				                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
				                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

				                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

				                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
				                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
				                }
				            }

				            // Add padding
				            var paddingChar = map.charAt(64);
				            if (paddingChar) {
				                while (base64Chars.length % 4) {
				                    base64Chars.push(paddingChar);
				                }
				            }

				            return base64Chars.join('');
				        },

				        /**
				         * Converts a Base64 string to a word array.
				         *
				         * @param {string} base64Str The Base64 string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
				         */
				        parse: function (base64Str) {
				            // Shortcuts
				            var base64StrLength = base64Str.length;
				            var map = this._map;
				            var reverseMap = this._reverseMap;

				            if (!reverseMap) {
				                    reverseMap = this._reverseMap = [];
				                    for (var j = 0; j < map.length; j++) {
				                        reverseMap[map.charCodeAt(j)] = j;
				                    }
				            }

				            // Ignore padding
				            var paddingChar = map.charAt(64);
				            if (paddingChar) {
				                var paddingIndex = base64Str.indexOf(paddingChar);
				                if (paddingIndex !== -1) {
				                    base64StrLength = paddingIndex;
				                }
				            }

				            // Convert
				            return parseLoop(base64Str, base64StrLength, reverseMap);

				        },

				        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
				    };

				    function parseLoop(base64Str, base64StrLength, reverseMap) {
				      var words = [];
				      var nBytes = 0;
				      for (var i = 0; i < base64StrLength; i++) {
				          if (i % 4) {
				              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
				              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
				              var bitsCombined = bits1 | bits2;
				              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
				              nBytes++;
				          }
				      }
				      return WordArray.create(words, nBytes);
				    }
				}());


				return CryptoJS.enc.Base64;

			}));
	} (encBase64, encBase64Exports));
		return encBase64Exports;
	}

	var encBase64urlExports = {};
	var encBase64url = {
	  get exports(){ return encBase64urlExports; },
	  set exports(v){ encBase64urlExports = v; },
	};

	var hasRequiredEncBase64url;

	function requireEncBase64url () {
		if (hasRequiredEncBase64url) return encBase64urlExports;
		hasRequiredEncBase64url = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var C_enc = C.enc;

				    /**
				     * Base64url encoding strategy.
				     */
				    var Base64url = C_enc.Base64url = {
				        /**
				         * Converts a word array to a Base64url string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @param {boolean} urlSafe Whether to use url safe
				         *
				         * @return {string} The Base64url string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
				         */
				        stringify: function (wordArray, urlSafe=true) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;
				            var map = urlSafe ? this._safe_map : this._map;

				            // Clamp excess bits
				            wordArray.clamp();

				            // Convert
				            var base64Chars = [];
				            for (var i = 0; i < sigBytes; i += 3) {
				                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
				                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
				                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

				                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

				                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
				                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
				                }
				            }

				            // Add padding
				            var paddingChar = map.charAt(64);
				            if (paddingChar) {
				                while (base64Chars.length % 4) {
				                    base64Chars.push(paddingChar);
				                }
				            }

				            return base64Chars.join('');
				        },

				        /**
				         * Converts a Base64url string to a word array.
				         *
				         * @param {string} base64Str The Base64url string.
				         *
				         * @param {boolean} urlSafe Whether to use url safe
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
				         */
				        parse: function (base64Str, urlSafe=true) {
				            // Shortcuts
				            var base64StrLength = base64Str.length;
				            var map = urlSafe ? this._safe_map : this._map;
				            var reverseMap = this._reverseMap;

				            if (!reverseMap) {
				                reverseMap = this._reverseMap = [];
				                for (var j = 0; j < map.length; j++) {
				                    reverseMap[map.charCodeAt(j)] = j;
				                }
				            }

				            // Ignore padding
				            var paddingChar = map.charAt(64);
				            if (paddingChar) {
				                var paddingIndex = base64Str.indexOf(paddingChar);
				                if (paddingIndex !== -1) {
				                    base64StrLength = paddingIndex;
				                }
				            }

				            // Convert
				            return parseLoop(base64Str, base64StrLength, reverseMap);

				        },

				        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
				        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
				    };

				    function parseLoop(base64Str, base64StrLength, reverseMap) {
				        var words = [];
				        var nBytes = 0;
				        for (var i = 0; i < base64StrLength; i++) {
				            if (i % 4) {
				                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
				                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
				                var bitsCombined = bits1 | bits2;
				                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
				                nBytes++;
				            }
				        }
				        return WordArray.create(words, nBytes);
				    }
				}());

				return CryptoJS.enc.Base64url;

			}));
	} (encBase64url, encBase64urlExports));
		return encBase64urlExports;
	}

	var md5Exports = {};
	var md5$1 = {
	  get exports(){ return md5Exports; },
	  set exports(v){ md5Exports = v; },
	};

	var hasRequiredMd5;

	function requireMd5 () {
		if (hasRequiredMd5) return md5Exports;
		hasRequiredMd5 = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (Math) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_algo = C.algo;

				    // Constants table
				    var T = [];

				    // Compute constants
				    (function () {
				        for (var i = 0; i < 64; i++) {
				            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
				        }
				    }());

				    /**
				     * MD5 hash algorithm.
				     */
				    var MD5 = C_algo.MD5 = Hasher.extend({
				        _doReset: function () {
				            this._hash = new WordArray.init([
				                0x67452301, 0xefcdab89,
				                0x98badcfe, 0x10325476
				            ]);
				        },

				        _doProcessBlock: function (M, offset) {
				            // Swap endian
				            for (var i = 0; i < 16; i++) {
				                // Shortcuts
				                var offset_i = offset + i;
				                var M_offset_i = M[offset_i];

				                M[offset_i] = (
				                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
				                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
				                );
				            }

				            // Shortcuts
				            var H = this._hash.words;

				            var M_offset_0  = M[offset + 0];
				            var M_offset_1  = M[offset + 1];
				            var M_offset_2  = M[offset + 2];
				            var M_offset_3  = M[offset + 3];
				            var M_offset_4  = M[offset + 4];
				            var M_offset_5  = M[offset + 5];
				            var M_offset_6  = M[offset + 6];
				            var M_offset_7  = M[offset + 7];
				            var M_offset_8  = M[offset + 8];
				            var M_offset_9  = M[offset + 9];
				            var M_offset_10 = M[offset + 10];
				            var M_offset_11 = M[offset + 11];
				            var M_offset_12 = M[offset + 12];
				            var M_offset_13 = M[offset + 13];
				            var M_offset_14 = M[offset + 14];
				            var M_offset_15 = M[offset + 15];

				            // Working varialbes
				            var a = H[0];
				            var b = H[1];
				            var c = H[2];
				            var d = H[3];

				            // Computation
				            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
				            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
				            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
				            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
				            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
				            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
				            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
				            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
				            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
				            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
				            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
				            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
				            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
				            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
				            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
				            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

				            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
				            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
				            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
				            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
				            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
				            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
				            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
				            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
				            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
				            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
				            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
				            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
				            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
				            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
				            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
				            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

				            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
				            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
				            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
				            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
				            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
				            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
				            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
				            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
				            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
				            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
				            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
				            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
				            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
				            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
				            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
				            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

				            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
				            d = II(d, a, b, c, M_offset_7,  10, T[49]);
				            c = II(c, d, a, b, M_offset_14, 15, T[50]);
				            b = II(b, c, d, a, M_offset_5,  21, T[51]);
				            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
				            d = II(d, a, b, c, M_offset_3,  10, T[53]);
				            c = II(c, d, a, b, M_offset_10, 15, T[54]);
				            b = II(b, c, d, a, M_offset_1,  21, T[55]);
				            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
				            d = II(d, a, b, c, M_offset_15, 10, T[57]);
				            c = II(c, d, a, b, M_offset_6,  15, T[58]);
				            b = II(b, c, d, a, M_offset_13, 21, T[59]);
				            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
				            d = II(d, a, b, c, M_offset_11, 10, T[61]);
				            c = II(c, d, a, b, M_offset_2,  15, T[62]);
				            b = II(b, c, d, a, M_offset_9,  21, T[63]);

				            // Intermediate hash value
				            H[0] = (H[0] + a) | 0;
				            H[1] = (H[1] + b) | 0;
				            H[2] = (H[2] + c) | 0;
				            H[3] = (H[3] + d) | 0;
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

				            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
				            var nBitsTotalL = nBitsTotal;
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
				                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
				                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
				            );
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
				                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
				                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
				            );

				            data.sigBytes = (dataWords.length + 1) * 4;

				            // Hash final blocks
				            this._process();

				            // Shortcuts
				            var hash = this._hash;
				            var H = hash.words;

				            // Swap endian
				            for (var i = 0; i < 4; i++) {
				                // Shortcut
				                var H_i = H[i];

				                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
				                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
				            }

				            // Return final computed hash
				            return hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        }
				    });

				    function FF(a, b, c, d, x, s, t) {
				        var n = a + ((b & c) | (~b & d)) + x + t;
				        return ((n << s) | (n >>> (32 - s))) + b;
				    }

				    function GG(a, b, c, d, x, s, t) {
				        var n = a + ((b & d) | (c & ~d)) + x + t;
				        return ((n << s) | (n >>> (32 - s))) + b;
				    }

				    function HH(a, b, c, d, x, s, t) {
				        var n = a + (b ^ c ^ d) + x + t;
				        return ((n << s) | (n >>> (32 - s))) + b;
				    }

				    function II(a, b, c, d, x, s, t) {
				        var n = a + (c ^ (b | ~d)) + x + t;
				        return ((n << s) | (n >>> (32 - s))) + b;
				    }

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.MD5('message');
				     *     var hash = CryptoJS.MD5(wordArray);
				     */
				    C.MD5 = Hasher._createHelper(MD5);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacMD5(message, key);
				     */
				    C.HmacMD5 = Hasher._createHmacHelper(MD5);
				}(Math));


				return CryptoJS.MD5;

			}));
	} (md5$1, md5Exports));
		return md5Exports;
	}

	var sha1Exports = {};
	var sha1$2 = {
	  get exports(){ return sha1Exports; },
	  set exports(v){ sha1Exports = v; },
	};

	var hasRequiredSha1;

	function requireSha1 () {
		if (hasRequiredSha1) return sha1Exports;
		hasRequiredSha1 = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_algo = C.algo;

				    // Reusable object
				    var W = [];

				    /**
				     * SHA-1 hash algorithm.
				     */
				    var SHA1 = C_algo.SHA1 = Hasher.extend({
				        _doReset: function () {
				            this._hash = new WordArray.init([
				                0x67452301, 0xefcdab89,
				                0x98badcfe, 0x10325476,
				                0xc3d2e1f0
				            ]);
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcut
				            var H = this._hash.words;

				            // Working variables
				            var a = H[0];
				            var b = H[1];
				            var c = H[2];
				            var d = H[3];
				            var e = H[4];

				            // Computation
				            for (var i = 0; i < 80; i++) {
				                if (i < 16) {
				                    W[i] = M[offset + i] | 0;
				                } else {
				                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
				                    W[i] = (n << 1) | (n >>> 31);
				                }

				                var t = ((a << 5) | (a >>> 27)) + e + W[i];
				                if (i < 20) {
				                    t += ((b & c) | (~b & d)) + 0x5a827999;
				                } else if (i < 40) {
				                    t += (b ^ c ^ d) + 0x6ed9eba1;
				                } else if (i < 60) {
				                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
				                } else /* if (i < 80) */ {
				                    t += (b ^ c ^ d) - 0x359d3e2a;
				                }

				                e = d;
				                d = c;
				                c = (b << 30) | (b >>> 2);
				                b = a;
				                a = t;
				            }

				            // Intermediate hash value
				            H[0] = (H[0] + a) | 0;
				            H[1] = (H[1] + b) | 0;
				            H[2] = (H[2] + c) | 0;
				            H[3] = (H[3] + d) | 0;
				            H[4] = (H[4] + e) | 0;
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
				            data.sigBytes = dataWords.length * 4;

				            // Hash final blocks
				            this._process();

				            // Return final computed hash
				            return this._hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA1('message');
				     *     var hash = CryptoJS.SHA1(wordArray);
				     */
				    C.SHA1 = Hasher._createHelper(SHA1);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA1(message, key);
				     */
				    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
				}());


				return CryptoJS.SHA1;

			}));
	} (sha1$2, sha1Exports));
		return sha1Exports;
	}

	var sha256Exports = {};
	var sha256$4 = {
	  get exports(){ return sha256Exports; },
	  set exports(v){ sha256Exports = v; },
	};

	var hasRequiredSha256;

	function requireSha256 () {
		if (hasRequiredSha256) return sha256Exports;
		hasRequiredSha256 = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (Math) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_algo = C.algo;

				    // Initialization and round constants tables
				    var H = [];
				    var K = [];

				    // Compute constants
				    (function () {
				        function isPrime(n) {
				            var sqrtN = Math.sqrt(n);
				            for (var factor = 2; factor <= sqrtN; factor++) {
				                if (!(n % factor)) {
				                    return false;
				                }
				            }

				            return true;
				        }

				        function getFractionalBits(n) {
				            return ((n - (n | 0)) * 0x100000000) | 0;
				        }

				        var n = 2;
				        var nPrime = 0;
				        while (nPrime < 64) {
				            if (isPrime(n)) {
				                if (nPrime < 8) {
				                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
				                }
				                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

				                nPrime++;
				            }

				            n++;
				        }
				    }());

				    // Reusable object
				    var W = [];

				    /**
				     * SHA-256 hash algorithm.
				     */
				    var SHA256 = C_algo.SHA256 = Hasher.extend({
				        _doReset: function () {
				            this._hash = new WordArray.init(H.slice(0));
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcut
				            var H = this._hash.words;

				            // Working variables
				            var a = H[0];
				            var b = H[1];
				            var c = H[2];
				            var d = H[3];
				            var e = H[4];
				            var f = H[5];
				            var g = H[6];
				            var h = H[7];

				            // Computation
				            for (var i = 0; i < 64; i++) {
				                if (i < 16) {
				                    W[i] = M[offset + i] | 0;
				                } else {
				                    var gamma0x = W[i - 15];
				                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
				                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
				                                   (gamma0x >>> 3);

				                    var gamma1x = W[i - 2];
				                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
				                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
				                                   (gamma1x >>> 10);

				                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
				                }

				                var ch  = (e & f) ^ (~e & g);
				                var maj = (a & b) ^ (a & c) ^ (b & c);

				                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
				                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

				                var t1 = h + sigma1 + ch + K[i] + W[i];
				                var t2 = sigma0 + maj;

				                h = g;
				                g = f;
				                f = e;
				                e = (d + t1) | 0;
				                d = c;
				                c = b;
				                b = a;
				                a = (t1 + t2) | 0;
				            }

				            // Intermediate hash value
				            H[0] = (H[0] + a) | 0;
				            H[1] = (H[1] + b) | 0;
				            H[2] = (H[2] + c) | 0;
				            H[3] = (H[3] + d) | 0;
				            H[4] = (H[4] + e) | 0;
				            H[5] = (H[5] + f) | 0;
				            H[6] = (H[6] + g) | 0;
				            H[7] = (H[7] + h) | 0;
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
				            data.sigBytes = dataWords.length * 4;

				            // Hash final blocks
				            this._process();

				            // Return final computed hash
				            return this._hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA256('message');
				     *     var hash = CryptoJS.SHA256(wordArray);
				     */
				    C.SHA256 = Hasher._createHelper(SHA256);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA256(message, key);
				     */
				    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
				}(Math));


				return CryptoJS.SHA256;

			}));
	} (sha256$4, sha256Exports));
		return sha256Exports;
	}

	var sha224Exports = {};
	var sha224$1 = {
	  get exports(){ return sha224Exports; },
	  set exports(v){ sha224Exports = v; },
	};

	var hasRequiredSha224;

	function requireSha224 () {
		if (hasRequiredSha224) return sha224Exports;
		hasRequiredSha224 = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireSha256());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./sha256"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var C_algo = C.algo;
				    var SHA256 = C_algo.SHA256;

				    /**
				     * SHA-224 hash algorithm.
				     */
				    var SHA224 = C_algo.SHA224 = SHA256.extend({
				        _doReset: function () {
				            this._hash = new WordArray.init([
				                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
				                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
				            ]);
				        },

				        _doFinalize: function () {
				            var hash = SHA256._doFinalize.call(this);

				            hash.sigBytes -= 4;

				            return hash;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA224('message');
				     *     var hash = CryptoJS.SHA224(wordArray);
				     */
				    C.SHA224 = SHA256._createHelper(SHA224);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA224(message, key);
				     */
				    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
				}());


				return CryptoJS.SHA224;

			}));
	} (sha224$1, sha224Exports));
		return sha224Exports;
	}

	var sha512Exports = {};
	var sha512$3 = {
	  get exports(){ return sha512Exports; },
	  set exports(v){ sha512Exports = v; },
	};

	var hasRequiredSha512;

	function requireSha512 () {
		if (hasRequiredSha512) return sha512Exports;
		hasRequiredSha512 = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireX64Core());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./x64-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Hasher = C_lib.Hasher;
				    var C_x64 = C.x64;
				    var X64Word = C_x64.Word;
				    var X64WordArray = C_x64.WordArray;
				    var C_algo = C.algo;

				    function X64Word_create() {
				        return X64Word.create.apply(X64Word, arguments);
				    }

				    // Constants
				    var K = [
				        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
				        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
				        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
				        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
				        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
				        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
				        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
				        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
				        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
				        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
				        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
				        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
				        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
				        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
				        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
				        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
				        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
				        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
				        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
				        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
				        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
				        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
				        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
				        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
				        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
				        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
				        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
				        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
				        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
				        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
				        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
				        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
				        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
				        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
				        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
				        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
				        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
				        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
				        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
				        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
				    ];

				    // Reusable objects
				    var W = [];
				    (function () {
				        for (var i = 0; i < 80; i++) {
				            W[i] = X64Word_create();
				        }
				    }());

				    /**
				     * SHA-512 hash algorithm.
				     */
				    var SHA512 = C_algo.SHA512 = Hasher.extend({
				        _doReset: function () {
				            this._hash = new X64WordArray.init([
				                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
				                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
				                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
				                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
				            ]);
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcuts
				            var H = this._hash.words;

				            var H0 = H[0];
				            var H1 = H[1];
				            var H2 = H[2];
				            var H3 = H[3];
				            var H4 = H[4];
				            var H5 = H[5];
				            var H6 = H[6];
				            var H7 = H[7];

				            var H0h = H0.high;
				            var H0l = H0.low;
				            var H1h = H1.high;
				            var H1l = H1.low;
				            var H2h = H2.high;
				            var H2l = H2.low;
				            var H3h = H3.high;
				            var H3l = H3.low;
				            var H4h = H4.high;
				            var H4l = H4.low;
				            var H5h = H5.high;
				            var H5l = H5.low;
				            var H6h = H6.high;
				            var H6l = H6.low;
				            var H7h = H7.high;
				            var H7l = H7.low;

				            // Working variables
				            var ah = H0h;
				            var al = H0l;
				            var bh = H1h;
				            var bl = H1l;
				            var ch = H2h;
				            var cl = H2l;
				            var dh = H3h;
				            var dl = H3l;
				            var eh = H4h;
				            var el = H4l;
				            var fh = H5h;
				            var fl = H5l;
				            var gh = H6h;
				            var gl = H6l;
				            var hh = H7h;
				            var hl = H7l;

				            // Rounds
				            for (var i = 0; i < 80; i++) {
				                var Wil;
				                var Wih;

				                // Shortcut
				                var Wi = W[i];

				                // Extend message
				                if (i < 16) {
				                    Wih = Wi.high = M[offset + i * 2]     | 0;
				                    Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
				                } else {
				                    // Gamma0
				                    var gamma0x  = W[i - 15];
				                    var gamma0xh = gamma0x.high;
				                    var gamma0xl = gamma0x.low;
				                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
				                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

				                    // Gamma1
				                    var gamma1x  = W[i - 2];
				                    var gamma1xh = gamma1x.high;
				                    var gamma1xl = gamma1x.low;
				                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
				                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

				                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
				                    var Wi7  = W[i - 7];
				                    var Wi7h = Wi7.high;
				                    var Wi7l = Wi7.low;

				                    var Wi16  = W[i - 16];
				                    var Wi16h = Wi16.high;
				                    var Wi16l = Wi16.low;

				                    Wil = gamma0l + Wi7l;
				                    Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
				                    Wil = Wil + gamma1l;
				                    Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
				                    Wil = Wil + Wi16l;
				                    Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

				                    Wi.high = Wih;
				                    Wi.low  = Wil;
				                }

				                var chh  = (eh & fh) ^ (~eh & gh);
				                var chl  = (el & fl) ^ (~el & gl);
				                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
				                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

				                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
				                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
				                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
				                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

				                // t1 = h + sigma1 + ch + K[i] + W[i]
				                var Ki  = K[i];
				                var Kih = Ki.high;
				                var Kil = Ki.low;

				                var t1l = hl + sigma1l;
				                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
				                var t1l = t1l + chl;
				                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
				                var t1l = t1l + Kil;
				                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
				                var t1l = t1l + Wil;
				                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

				                // t2 = sigma0 + maj
				                var t2l = sigma0l + majl;
				                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

				                // Update working variables
				                hh = gh;
				                hl = gl;
				                gh = fh;
				                gl = fl;
				                fh = eh;
				                fl = el;
				                el = (dl + t1l) | 0;
				                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
				                dh = ch;
				                dl = cl;
				                ch = bh;
				                cl = bl;
				                bh = ah;
				                bl = al;
				                al = (t1l + t2l) | 0;
				                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
				            }

				            // Intermediate hash value
				            H0l = H0.low  = (H0l + al);
				            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
				            H1l = H1.low  = (H1l + bl);
				            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
				            H2l = H2.low  = (H2l + cl);
				            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
				            H3l = H3.low  = (H3l + dl);
				            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
				            H4l = H4.low  = (H4l + el);
				            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
				            H5l = H5.low  = (H5l + fl);
				            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
				            H6l = H6.low  = (H6l + gl);
				            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
				            H7l = H7.low  = (H7l + hl);
				            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
				            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
				            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
				            data.sigBytes = dataWords.length * 4;

				            // Hash final blocks
				            this._process();

				            // Convert hash to 32-bit word array before returning
				            var hash = this._hash.toX32();

				            // Return final computed hash
				            return hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        },

				        blockSize: 1024/32
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA512('message');
				     *     var hash = CryptoJS.SHA512(wordArray);
				     */
				    C.SHA512 = Hasher._createHelper(SHA512);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA512(message, key);
				     */
				    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
				}());


				return CryptoJS.SHA512;

			}));
	} (sha512$3, sha512Exports));
		return sha512Exports;
	}

	var sha384Exports = {};
	var sha384$1 = {
	  get exports(){ return sha384Exports; },
	  set exports(v){ sha384Exports = v; },
	};

	var hasRequiredSha384;

	function requireSha384 () {
		if (hasRequiredSha384) return sha384Exports;
		hasRequiredSha384 = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireX64Core(), requireSha512());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./x64-core", "./sha512"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_x64 = C.x64;
				    var X64Word = C_x64.Word;
				    var X64WordArray = C_x64.WordArray;
				    var C_algo = C.algo;
				    var SHA512 = C_algo.SHA512;

				    /**
				     * SHA-384 hash algorithm.
				     */
				    var SHA384 = C_algo.SHA384 = SHA512.extend({
				        _doReset: function () {
				            this._hash = new X64WordArray.init([
				                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
				                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
				                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
				                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
				            ]);
				        },

				        _doFinalize: function () {
				            var hash = SHA512._doFinalize.call(this);

				            hash.sigBytes -= 16;

				            return hash;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA384('message');
				     *     var hash = CryptoJS.SHA384(wordArray);
				     */
				    C.SHA384 = SHA512._createHelper(SHA384);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA384(message, key);
				     */
				    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
				}());


				return CryptoJS.SHA384;

			}));
	} (sha384$1, sha384Exports));
		return sha384Exports;
	}

	var sha3Exports$1 = {};
	var sha3$2 = {
	  get exports(){ return sha3Exports$1; },
	  set exports(v){ sha3Exports$1 = v; },
	};

	var hasRequiredSha3;

	function requireSha3 () {
		if (hasRequiredSha3) return sha3Exports$1;
		hasRequiredSha3 = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireX64Core());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./x64-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (Math) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_x64 = C.x64;
				    var X64Word = C_x64.Word;
				    var C_algo = C.algo;

				    // Constants tables
				    var RHO_OFFSETS = [];
				    var PI_INDEXES  = [];
				    var ROUND_CONSTANTS = [];

				    // Compute Constants
				    (function () {
				        // Compute rho offset constants
				        var x = 1, y = 0;
				        for (var t = 0; t < 24; t++) {
				            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

				            var newX = y % 5;
				            var newY = (2 * x + 3 * y) % 5;
				            x = newX;
				            y = newY;
				        }

				        // Compute pi index constants
				        for (var x = 0; x < 5; x++) {
				            for (var y = 0; y < 5; y++) {
				                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
				            }
				        }

				        // Compute round constants
				        var LFSR = 0x01;
				        for (var i = 0; i < 24; i++) {
				            var roundConstantMsw = 0;
				            var roundConstantLsw = 0;

				            for (var j = 0; j < 7; j++) {
				                if (LFSR & 0x01) {
				                    var bitPosition = (1 << j) - 1;
				                    if (bitPosition < 32) {
				                        roundConstantLsw ^= 1 << bitPosition;
				                    } else /* if (bitPosition >= 32) */ {
				                        roundConstantMsw ^= 1 << (bitPosition - 32);
				                    }
				                }

				                // Compute next LFSR
				                if (LFSR & 0x80) {
				                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
				                    LFSR = (LFSR << 1) ^ 0x71;
				                } else {
				                    LFSR <<= 1;
				                }
				            }

				            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
				        }
				    }());

				    // Reusable objects for temporary values
				    var T = [];
				    (function () {
				        for (var i = 0; i < 25; i++) {
				            T[i] = X64Word.create();
				        }
				    }());

				    /**
				     * SHA-3 hash algorithm.
				     */
				    var SHA3 = C_algo.SHA3 = Hasher.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {number} outputLength
				         *   The desired number of bits in the output hash.
				         *   Only values permitted are: 224, 256, 384, 512.
				         *   Default: 512
				         */
				        cfg: Hasher.cfg.extend({
				            outputLength: 512
				        }),

				        _doReset: function () {
				            var state = this._state = [];
				            for (var i = 0; i < 25; i++) {
				                state[i] = new X64Word.init();
				            }

				            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcuts
				            var state = this._state;
				            var nBlockSizeLanes = this.blockSize / 2;

				            // Absorb
				            for (var i = 0; i < nBlockSizeLanes; i++) {
				                // Shortcuts
				                var M2i  = M[offset + 2 * i];
				                var M2i1 = M[offset + 2 * i + 1];

				                // Swap endian
				                M2i = (
				                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
				                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
				                );
				                M2i1 = (
				                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
				                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
				                );

				                // Absorb message into state
				                var lane = state[i];
				                lane.high ^= M2i1;
				                lane.low  ^= M2i;
				            }

				            // Rounds
				            for (var round = 0; round < 24; round++) {
				                // Theta
				                for (var x = 0; x < 5; x++) {
				                    // Mix column lanes
				                    var tMsw = 0, tLsw = 0;
				                    for (var y = 0; y < 5; y++) {
				                        var lane = state[x + 5 * y];
				                        tMsw ^= lane.high;
				                        tLsw ^= lane.low;
				                    }

				                    // Temporary values
				                    var Tx = T[x];
				                    Tx.high = tMsw;
				                    Tx.low  = tLsw;
				                }
				                for (var x = 0; x < 5; x++) {
				                    // Shortcuts
				                    var Tx4 = T[(x + 4) % 5];
				                    var Tx1 = T[(x + 1) % 5];
				                    var Tx1Msw = Tx1.high;
				                    var Tx1Lsw = Tx1.low;

				                    // Mix surrounding columns
				                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
				                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
				                    for (var y = 0; y < 5; y++) {
				                        var lane = state[x + 5 * y];
				                        lane.high ^= tMsw;
				                        lane.low  ^= tLsw;
				                    }
				                }

				                // Rho Pi
				                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
				                    var tMsw;
				                    var tLsw;

				                    // Shortcuts
				                    var lane = state[laneIndex];
				                    var laneMsw = lane.high;
				                    var laneLsw = lane.low;
				                    var rhoOffset = RHO_OFFSETS[laneIndex];

				                    // Rotate lanes
				                    if (rhoOffset < 32) {
				                        tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
				                        tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
				                    } else /* if (rhoOffset >= 32) */ {
				                        tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
				                        tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
				                    }

				                    // Transpose lanes
				                    var TPiLane = T[PI_INDEXES[laneIndex]];
				                    TPiLane.high = tMsw;
				                    TPiLane.low  = tLsw;
				                }

				                // Rho pi at x = y = 0
				                var T0 = T[0];
				                var state0 = state[0];
				                T0.high = state0.high;
				                T0.low  = state0.low;

				                // Chi
				                for (var x = 0; x < 5; x++) {
				                    for (var y = 0; y < 5; y++) {
				                        // Shortcuts
				                        var laneIndex = x + 5 * y;
				                        var lane = state[laneIndex];
				                        var TLane = T[laneIndex];
				                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
				                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

				                        // Mix rows
				                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
				                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
				                    }
				                }

				                // Iota
				                var lane = state[0];
				                var roundConstant = ROUND_CONSTANTS[round];
				                lane.high ^= roundConstant.high;
				                lane.low  ^= roundConstant.low;
				            }
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;
				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;
				            var blockSizeBits = this.blockSize * 32;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
				            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
				            data.sigBytes = dataWords.length * 4;

				            // Hash final blocks
				            this._process();

				            // Shortcuts
				            var state = this._state;
				            var outputLengthBytes = this.cfg.outputLength / 8;
				            var outputLengthLanes = outputLengthBytes / 8;

				            // Squeeze
				            var hashWords = [];
				            for (var i = 0; i < outputLengthLanes; i++) {
				                // Shortcuts
				                var lane = state[i];
				                var laneMsw = lane.high;
				                var laneLsw = lane.low;

				                // Swap endian
				                laneMsw = (
				                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
				                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
				                );
				                laneLsw = (
				                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
				                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
				                );

				                // Squeeze state to retrieve hash
				                hashWords.push(laneLsw);
				                hashWords.push(laneMsw);
				            }

				            // Return final computed hash
				            return new WordArray.init(hashWords, outputLengthBytes);
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);

				            var state = clone._state = this._state.slice(0);
				            for (var i = 0; i < 25; i++) {
				                state[i] = state[i].clone();
				            }

				            return clone;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA3('message');
				     *     var hash = CryptoJS.SHA3(wordArray);
				     */
				    C.SHA3 = Hasher._createHelper(SHA3);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA3(message, key);
				     */
				    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
				}(Math));


				return CryptoJS.SHA3;

			}));
	} (sha3$2, sha3Exports$1));
		return sha3Exports$1;
	}

	var ripemd160Exports = {};
	var ripemd160$2 = {
	  get exports(){ return ripemd160Exports; },
	  set exports(v){ ripemd160Exports = v; },
	};

	var hasRequiredRipemd160;

	function requireRipemd160 () {
		if (hasRequiredRipemd160) return ripemd160Exports;
		hasRequiredRipemd160 = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/** @preserve
				(c) 2012 by Cédric Mesnil. All rights reserved.

				Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

				    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
				    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

				THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*/

				(function (Math) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_algo = C.algo;

				    // Constants table
				    var _zl = WordArray.create([
				        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
				        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
				        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
				        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
				        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
				    var _zr = WordArray.create([
				        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
				        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
				        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
				        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
				        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
				    var _sl = WordArray.create([
				         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
				        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
				        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
				          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
				        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
				    var _sr = WordArray.create([
				        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
				        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
				        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
				        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
				        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

				    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
				    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

				    /**
				     * RIPEMD160 hash algorithm.
				     */
				    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
				        _doReset: function () {
				            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
				        },

				        _doProcessBlock: function (M, offset) {

				            // Swap endian
				            for (var i = 0; i < 16; i++) {
				                // Shortcuts
				                var offset_i = offset + i;
				                var M_offset_i = M[offset_i];

				                // Swap
				                M[offset_i] = (
				                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
				                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
				                );
				            }
				            // Shortcut
				            var H  = this._hash.words;
				            var hl = _hl.words;
				            var hr = _hr.words;
				            var zl = _zl.words;
				            var zr = _zr.words;
				            var sl = _sl.words;
				            var sr = _sr.words;

				            // Working variables
				            var al, bl, cl, dl, el;
				            var ar, br, cr, dr, er;

				            ar = al = H[0];
				            br = bl = H[1];
				            cr = cl = H[2];
				            dr = dl = H[3];
				            er = el = H[4];
				            // Computation
				            var t;
				            for (var i = 0; i < 80; i += 1) {
				                t = (al +  M[offset+zl[i]])|0;
				                if (i<16){
					            t +=  f1(bl,cl,dl) + hl[0];
				                } else if (i<32) {
					            t +=  f2(bl,cl,dl) + hl[1];
				                } else if (i<48) {
					            t +=  f3(bl,cl,dl) + hl[2];
				                } else if (i<64) {
					            t +=  f4(bl,cl,dl) + hl[3];
				                } else {// if (i<80) {
					            t +=  f5(bl,cl,dl) + hl[4];
				                }
				                t = t|0;
				                t =  rotl(t,sl[i]);
				                t = (t+el)|0;
				                al = el;
				                el = dl;
				                dl = rotl(cl, 10);
				                cl = bl;
				                bl = t;

				                t = (ar + M[offset+zr[i]])|0;
				                if (i<16){
					            t +=  f5(br,cr,dr) + hr[0];
				                } else if (i<32) {
					            t +=  f4(br,cr,dr) + hr[1];
				                } else if (i<48) {
					            t +=  f3(br,cr,dr) + hr[2];
				                } else if (i<64) {
					            t +=  f2(br,cr,dr) + hr[3];
				                } else {// if (i<80) {
					            t +=  f1(br,cr,dr) + hr[4];
				                }
				                t = t|0;
				                t =  rotl(t,sr[i]) ;
				                t = (t+er)|0;
				                ar = er;
				                er = dr;
				                dr = rotl(cr, 10);
				                cr = br;
				                br = t;
				            }
				            // Intermediate hash value
				            t    = (H[1] + cl + dr)|0;
				            H[1] = (H[2] + dl + er)|0;
				            H[2] = (H[3] + el + ar)|0;
				            H[3] = (H[4] + al + br)|0;
				            H[4] = (H[0] + bl + cr)|0;
				            H[0] =  t;
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
				                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
				                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
				            );
				            data.sigBytes = (dataWords.length + 1) * 4;

				            // Hash final blocks
				            this._process();

				            // Shortcuts
				            var hash = this._hash;
				            var H = hash.words;

				            // Swap endian
				            for (var i = 0; i < 5; i++) {
				                // Shortcut
				                var H_i = H[i];

				                // Swap
				                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
				                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
				            }

				            // Return final computed hash
				            return hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        }
				    });


				    function f1(x, y, z) {
				        return ((x) ^ (y) ^ (z));

				    }

				    function f2(x, y, z) {
				        return (((x)&(y)) | ((~x)&(z)));
				    }

				    function f3(x, y, z) {
				        return (((x) | (~(y))) ^ (z));
				    }

				    function f4(x, y, z) {
				        return (((x) & (z)) | ((y)&(~(z))));
				    }

				    function f5(x, y, z) {
				        return ((x) ^ ((y) |(~(z))));

				    }

				    function rotl(x,n) {
				        return (x<<n) | (x>>>(32-n));
				    }


				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.RIPEMD160('message');
				     *     var hash = CryptoJS.RIPEMD160(wordArray);
				     */
				    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
				     */
				    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
				}(Math));


				return CryptoJS.RIPEMD160;

			}));
	} (ripemd160$2, ripemd160Exports));
		return ripemd160Exports;
	}

	var hmacExports = {};
	var hmac$1 = {
	  get exports(){ return hmacExports; },
	  set exports(v){ hmacExports = v; },
	};

	var hasRequiredHmac;

	function requireHmac () {
		if (hasRequiredHmac) return hmacExports;
		hasRequiredHmac = 1;
		(function (module, exports) {
			;(function (root, factory) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var C_enc = C.enc;
				    var Utf8 = C_enc.Utf8;
				    var C_algo = C.algo;

				    /**
				     * HMAC algorithm.
				     */
				    var HMAC = C_algo.HMAC = Base.extend({
				        /**
				         * Initializes a newly created HMAC.
				         *
				         * @param {Hasher} hasher The hash algorithm to use.
				         * @param {WordArray|string} key The secret key.
				         *
				         * @example
				         *
				         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
				         */
				        init: function (hasher, key) {
				            // Init hasher
				            hasher = this._hasher = new hasher.init();

				            // Convert string to WordArray, else assume WordArray already
				            if (typeof key == 'string') {
				                key = Utf8.parse(key);
				            }

				            // Shortcuts
				            var hasherBlockSize = hasher.blockSize;
				            var hasherBlockSizeBytes = hasherBlockSize * 4;

				            // Allow arbitrary length keys
				            if (key.sigBytes > hasherBlockSizeBytes) {
				                key = hasher.finalize(key);
				            }

				            // Clamp excess bits
				            key.clamp();

				            // Clone key for inner and outer pads
				            var oKey = this._oKey = key.clone();
				            var iKey = this._iKey = key.clone();

				            // Shortcuts
				            var oKeyWords = oKey.words;
				            var iKeyWords = iKey.words;

				            // XOR keys with pad constants
				            for (var i = 0; i < hasherBlockSize; i++) {
				                oKeyWords[i] ^= 0x5c5c5c5c;
				                iKeyWords[i] ^= 0x36363636;
				            }
				            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

				            // Set initial values
				            this.reset();
				        },

				        /**
				         * Resets this HMAC to its initial state.
				         *
				         * @example
				         *
				         *     hmacHasher.reset();
				         */
				        reset: function () {
				            // Shortcut
				            var hasher = this._hasher;

				            // Reset
				            hasher.reset();
				            hasher.update(this._iKey);
				        },

				        /**
				         * Updates this HMAC with a message.
				         *
				         * @param {WordArray|string} messageUpdate The message to append.
				         *
				         * @return {HMAC} This HMAC instance.
				         *
				         * @example
				         *
				         *     hmacHasher.update('message');
				         *     hmacHasher.update(wordArray);
				         */
				        update: function (messageUpdate) {
				            this._hasher.update(messageUpdate);

				            // Chainable
				            return this;
				        },

				        /**
				         * Finalizes the HMAC computation.
				         * Note that the finalize operation is effectively a destructive, read-once operation.
				         *
				         * @param {WordArray|string} messageUpdate (Optional) A final message update.
				         *
				         * @return {WordArray} The HMAC.
				         *
				         * @example
				         *
				         *     var hmac = hmacHasher.finalize();
				         *     var hmac = hmacHasher.finalize('message');
				         *     var hmac = hmacHasher.finalize(wordArray);
				         */
				        finalize: function (messageUpdate) {
				            // Shortcut
				            var hasher = this._hasher;

				            // Compute HMAC
				            var innerHash = hasher.finalize(messageUpdate);
				            hasher.reset();
				            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

				            return hmac;
				        }
				    });
				}());


			}));
	} (hmac$1, hmacExports));
		return hmacExports;
	}

	var pbkdf2Exports = {};
	var pbkdf2$2 = {
	  get exports(){ return pbkdf2Exports; },
	  set exports(v){ pbkdf2Exports = v; },
	};

	var hasRequiredPbkdf2;

	function requirePbkdf2 () {
		if (hasRequiredPbkdf2) return pbkdf2Exports;
		hasRequiredPbkdf2 = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireSha1(), requireHmac());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./sha1", "./hmac"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var WordArray = C_lib.WordArray;
				    var C_algo = C.algo;
				    var SHA1 = C_algo.SHA1;
				    var HMAC = C_algo.HMAC;

				    /**
				     * Password-Based Key Derivation Function 2 algorithm.
				     */
				    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
				         * @property {Hasher} hasher The hasher to use. Default: SHA1
				         * @property {number} iterations The number of iterations to perform. Default: 1
				         */
				        cfg: Base.extend({
				            keySize: 128/32,
				            hasher: SHA1,
				            iterations: 1
				        }),

				        /**
				         * Initializes a newly created key derivation function.
				         *
				         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
				         *
				         * @example
				         *
				         *     var kdf = CryptoJS.algo.PBKDF2.create();
				         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
				         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
				         */
				        init: function (cfg) {
				            this.cfg = this.cfg.extend(cfg);
				        },

				        /**
				         * Computes the Password-Based Key Derivation Function 2.
				         *
				         * @param {WordArray|string} password The password.
				         * @param {WordArray|string} salt A salt.
				         *
				         * @return {WordArray} The derived key.
				         *
				         * @example
				         *
				         *     var key = kdf.compute(password, salt);
				         */
				        compute: function (password, salt) {
				            // Shortcut
				            var cfg = this.cfg;

				            // Init HMAC
				            var hmac = HMAC.create(cfg.hasher, password);

				            // Initial values
				            var derivedKey = WordArray.create();
				            var blockIndex = WordArray.create([0x00000001]);

				            // Shortcuts
				            var derivedKeyWords = derivedKey.words;
				            var blockIndexWords = blockIndex.words;
				            var keySize = cfg.keySize;
				            var iterations = cfg.iterations;

				            // Generate key
				            while (derivedKeyWords.length < keySize) {
				                var block = hmac.update(salt).finalize(blockIndex);
				                hmac.reset();

				                // Shortcuts
				                var blockWords = block.words;
				                var blockWordsLength = blockWords.length;

				                // Iterations
				                var intermediate = block;
				                for (var i = 1; i < iterations; i++) {
				                    intermediate = hmac.finalize(intermediate);
				                    hmac.reset();

				                    // Shortcut
				                    var intermediateWords = intermediate.words;

				                    // XOR intermediate with block
				                    for (var j = 0; j < blockWordsLength; j++) {
				                        blockWords[j] ^= intermediateWords[j];
				                    }
				                }

				                derivedKey.concat(block);
				                blockIndexWords[0]++;
				            }
				            derivedKey.sigBytes = keySize * 4;

				            return derivedKey;
				        }
				    });

				    /**
				     * Computes the Password-Based Key Derivation Function 2.
				     *
				     * @param {WordArray|string} password The password.
				     * @param {WordArray|string} salt A salt.
				     * @param {Object} cfg (Optional) The configuration options to use for this computation.
				     *
				     * @return {WordArray} The derived key.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var key = CryptoJS.PBKDF2(password, salt);
				     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
				     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
				     */
				    C.PBKDF2 = function (password, salt, cfg) {
				        return PBKDF2.create(cfg).compute(password, salt);
				    };
				}());


				return CryptoJS.PBKDF2;

			}));
	} (pbkdf2$2, pbkdf2Exports));
		return pbkdf2Exports;
	}

	var evpkdfExports = {};
	var evpkdf = {
	  get exports(){ return evpkdfExports; },
	  set exports(v){ evpkdfExports = v; },
	};

	var hasRequiredEvpkdf;

	function requireEvpkdf () {
		if (hasRequiredEvpkdf) return evpkdfExports;
		hasRequiredEvpkdf = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireSha1(), requireHmac());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./sha1", "./hmac"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var WordArray = C_lib.WordArray;
				    var C_algo = C.algo;
				    var MD5 = C_algo.MD5;

				    /**
				     * This key derivation function is meant to conform with EVP_BytesToKey.
				     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
				     */
				    var EvpKDF = C_algo.EvpKDF = Base.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
				         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
				         * @property {number} iterations The number of iterations to perform. Default: 1
				         */
				        cfg: Base.extend({
				            keySize: 128/32,
				            hasher: MD5,
				            iterations: 1
				        }),

				        /**
				         * Initializes a newly created key derivation function.
				         *
				         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
				         *
				         * @example
				         *
				         *     var kdf = CryptoJS.algo.EvpKDF.create();
				         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
				         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
				         */
				        init: function (cfg) {
				            this.cfg = this.cfg.extend(cfg);
				        },

				        /**
				         * Derives a key from a password.
				         *
				         * @param {WordArray|string} password The password.
				         * @param {WordArray|string} salt A salt.
				         *
				         * @return {WordArray} The derived key.
				         *
				         * @example
				         *
				         *     var key = kdf.compute(password, salt);
				         */
				        compute: function (password, salt) {
				            var block;

				            // Shortcut
				            var cfg = this.cfg;

				            // Init hasher
				            var hasher = cfg.hasher.create();

				            // Initial values
				            var derivedKey = WordArray.create();

				            // Shortcuts
				            var derivedKeyWords = derivedKey.words;
				            var keySize = cfg.keySize;
				            var iterations = cfg.iterations;

				            // Generate key
				            while (derivedKeyWords.length < keySize) {
				                if (block) {
				                    hasher.update(block);
				                }
				                block = hasher.update(password).finalize(salt);
				                hasher.reset();

				                // Iterations
				                for (var i = 1; i < iterations; i++) {
				                    block = hasher.finalize(block);
				                    hasher.reset();
				                }

				                derivedKey.concat(block);
				            }
				            derivedKey.sigBytes = keySize * 4;

				            return derivedKey;
				        }
				    });

				    /**
				     * Derives a key from a password.
				     *
				     * @param {WordArray|string} password The password.
				     * @param {WordArray|string} salt A salt.
				     * @param {Object} cfg (Optional) The configuration options to use for this computation.
				     *
				     * @return {WordArray} The derived key.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var key = CryptoJS.EvpKDF(password, salt);
				     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
				     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
				     */
				    C.EvpKDF = function (password, salt, cfg) {
				        return EvpKDF.create(cfg).compute(password, salt);
				    };
				}());


				return CryptoJS.EvpKDF;

			}));
	} (evpkdf, evpkdfExports));
		return evpkdfExports;
	}

	var cipherCoreExports = {};
	var cipherCore = {
	  get exports(){ return cipherCoreExports; },
	  set exports(v){ cipherCoreExports = v; },
	};

	var hasRequiredCipherCore;

	function requireCipherCore () {
		if (hasRequiredCipherCore) return cipherCoreExports;
		hasRequiredCipherCore = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireEvpkdf());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./evpkdf"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Cipher core components.
				 */
				CryptoJS.lib.Cipher || (function (undefined$1) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var WordArray = C_lib.WordArray;
				    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
				    var C_enc = C.enc;
				    var Utf8 = C_enc.Utf8;
				    var Base64 = C_enc.Base64;
				    var C_algo = C.algo;
				    var EvpKDF = C_algo.EvpKDF;

				    /**
				     * Abstract base cipher template.
				     *
				     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
				     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
				     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
				     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
				     */
				    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {WordArray} iv The IV to use for this operation.
				         */
				        cfg: Base.extend(),

				        /**
				         * Creates this cipher in encryption mode.
				         *
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {Cipher} A cipher instance.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
				         */
				        createEncryptor: function (key, cfg) {
				            return this.create(this._ENC_XFORM_MODE, key, cfg);
				        },

				        /**
				         * Creates this cipher in decryption mode.
				         *
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {Cipher} A cipher instance.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
				         */
				        createDecryptor: function (key, cfg) {
				            return this.create(this._DEC_XFORM_MODE, key, cfg);
				        },

				        /**
				         * Initializes a newly created cipher.
				         *
				         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @example
				         *
				         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
				         */
				        init: function (xformMode, key, cfg) {
				            // Apply config defaults
				            this.cfg = this.cfg.extend(cfg);

				            // Store transform mode and key
				            this._xformMode = xformMode;
				            this._key = key;

				            // Set initial values
				            this.reset();
				        },

				        /**
				         * Resets this cipher to its initial state.
				         *
				         * @example
				         *
				         *     cipher.reset();
				         */
				        reset: function () {
				            // Reset data buffer
				            BufferedBlockAlgorithm.reset.call(this);

				            // Perform concrete-cipher logic
				            this._doReset();
				        },

				        /**
				         * Adds data to be encrypted or decrypted.
				         *
				         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
				         *
				         * @return {WordArray} The data after processing.
				         *
				         * @example
				         *
				         *     var encrypted = cipher.process('data');
				         *     var encrypted = cipher.process(wordArray);
				         */
				        process: function (dataUpdate) {
				            // Append
				            this._append(dataUpdate);

				            // Process available blocks
				            return this._process();
				        },

				        /**
				         * Finalizes the encryption or decryption process.
				         * Note that the finalize operation is effectively a destructive, read-once operation.
				         *
				         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
				         *
				         * @return {WordArray} The data after final processing.
				         *
				         * @example
				         *
				         *     var encrypted = cipher.finalize();
				         *     var encrypted = cipher.finalize('data');
				         *     var encrypted = cipher.finalize(wordArray);
				         */
				        finalize: function (dataUpdate) {
				            // Final data update
				            if (dataUpdate) {
				                this._append(dataUpdate);
				            }

				            // Perform concrete-cipher logic
				            var finalProcessedData = this._doFinalize();

				            return finalProcessedData;
				        },

				        keySize: 128/32,

				        ivSize: 128/32,

				        _ENC_XFORM_MODE: 1,

				        _DEC_XFORM_MODE: 2,

				        /**
				         * Creates shortcut functions to a cipher's object interface.
				         *
				         * @param {Cipher} cipher The cipher to create a helper for.
				         *
				         * @return {Object} An object with encrypt and decrypt shortcut functions.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
				         */
				        _createHelper: (function () {
				            function selectCipherStrategy(key) {
				                if (typeof key == 'string') {
				                    return PasswordBasedCipher;
				                } else {
				                    return SerializableCipher;
				                }
				            }

				            return function (cipher) {
				                return {
				                    encrypt: function (message, key, cfg) {
				                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
				                    },

				                    decrypt: function (ciphertext, key, cfg) {
				                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
				                    }
				                };
				            };
				        }())
				    });

				    /**
				     * Abstract base stream cipher template.
				     *
				     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
				     */
				    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
				        _doFinalize: function () {
				            // Process partial blocks
				            var finalProcessedBlocks = this._process(!!'flush');

				            return finalProcessedBlocks;
				        },

				        blockSize: 1
				    });

				    /**
				     * Mode namespace.
				     */
				    var C_mode = C.mode = {};

				    /**
				     * Abstract base block cipher mode template.
				     */
				    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
				        /**
				         * Creates this mode for encryption.
				         *
				         * @param {Cipher} cipher A block cipher instance.
				         * @param {Array} iv The IV words.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
				         */
				        createEncryptor: function (cipher, iv) {
				            return this.Encryptor.create(cipher, iv);
				        },

				        /**
				         * Creates this mode for decryption.
				         *
				         * @param {Cipher} cipher A block cipher instance.
				         * @param {Array} iv The IV words.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
				         */
				        createDecryptor: function (cipher, iv) {
				            return this.Decryptor.create(cipher, iv);
				        },

				        /**
				         * Initializes a newly created mode.
				         *
				         * @param {Cipher} cipher A block cipher instance.
				         * @param {Array} iv The IV words.
				         *
				         * @example
				         *
				         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
				         */
				        init: function (cipher, iv) {
				            this._cipher = cipher;
				            this._iv = iv;
				        }
				    });

				    /**
				     * Cipher Block Chaining mode.
				     */
				    var CBC = C_mode.CBC = (function () {
				        /**
				         * Abstract base CBC mode.
				         */
				        var CBC = BlockCipherMode.extend();

				        /**
				         * CBC encryptor.
				         */
				        CBC.Encryptor = CBC.extend({
				            /**
				             * Processes the data block at offset.
				             *
				             * @param {Array} words The data words to operate on.
				             * @param {number} offset The offset where the block starts.
				             *
				             * @example
				             *
				             *     mode.processBlock(data.words, offset);
				             */
				            processBlock: function (words, offset) {
				                // Shortcuts
				                var cipher = this._cipher;
				                var blockSize = cipher.blockSize;

				                // XOR and encrypt
				                xorBlock.call(this, words, offset, blockSize);
				                cipher.encryptBlock(words, offset);

				                // Remember this block to use with next block
				                this._prevBlock = words.slice(offset, offset + blockSize);
				            }
				        });

				        /**
				         * CBC decryptor.
				         */
				        CBC.Decryptor = CBC.extend({
				            /**
				             * Processes the data block at offset.
				             *
				             * @param {Array} words The data words to operate on.
				             * @param {number} offset The offset where the block starts.
				             *
				             * @example
				             *
				             *     mode.processBlock(data.words, offset);
				             */
				            processBlock: function (words, offset) {
				                // Shortcuts
				                var cipher = this._cipher;
				                var blockSize = cipher.blockSize;

				                // Remember this block to use with next block
				                var thisBlock = words.slice(offset, offset + blockSize);

				                // Decrypt and XOR
				                cipher.decryptBlock(words, offset);
				                xorBlock.call(this, words, offset, blockSize);

				                // This block becomes the previous block
				                this._prevBlock = thisBlock;
				            }
				        });

				        function xorBlock(words, offset, blockSize) {
				            var block;

				            // Shortcut
				            var iv = this._iv;

				            // Choose mixing block
				            if (iv) {
				                block = iv;

				                // Remove IV for subsequent blocks
				                this._iv = undefined$1;
				            } else {
				                block = this._prevBlock;
				            }

				            // XOR blocks
				            for (var i = 0; i < blockSize; i++) {
				                words[offset + i] ^= block[i];
				            }
				        }

				        return CBC;
				    }());

				    /**
				     * Padding namespace.
				     */
				    var C_pad = C.pad = {};

				    /**
				     * PKCS #5/7 padding strategy.
				     */
				    var Pkcs7 = C_pad.Pkcs7 = {
				        /**
				         * Pads data using the algorithm defined in PKCS #5/7.
				         *
				         * @param {WordArray} data The data to pad.
				         * @param {number} blockSize The multiple that the data should be padded to.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
				         */
				        pad: function (data, blockSize) {
				            // Shortcut
				            var blockSizeBytes = blockSize * 4;

				            // Count padding bytes
				            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

				            // Create padding word
				            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

				            // Create padding
				            var paddingWords = [];
				            for (var i = 0; i < nPaddingBytes; i += 4) {
				                paddingWords.push(paddingWord);
				            }
				            var padding = WordArray.create(paddingWords, nPaddingBytes);

				            // Add padding
				            data.concat(padding);
				        },

				        /**
				         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
				         *
				         * @param {WordArray} data The data to unpad.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
				         */
				        unpad: function (data) {
				            // Get number of padding bytes from last byte
				            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

				            // Remove padding
				            data.sigBytes -= nPaddingBytes;
				        }
				    };

				    /**
				     * Abstract base block cipher template.
				     *
				     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
				     */
				    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {Mode} mode The block mode to use. Default: CBC
				         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
				         */
				        cfg: Cipher.cfg.extend({
				            mode: CBC,
				            padding: Pkcs7
				        }),

				        reset: function () {
				            var modeCreator;

				            // Reset cipher
				            Cipher.reset.call(this);

				            // Shortcuts
				            var cfg = this.cfg;
				            var iv = cfg.iv;
				            var mode = cfg.mode;

				            // Reset block mode
				            if (this._xformMode == this._ENC_XFORM_MODE) {
				                modeCreator = mode.createEncryptor;
				            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
				                modeCreator = mode.createDecryptor;
				                // Keep at least one block in the buffer for unpadding
				                this._minBufferSize = 1;
				            }

				            if (this._mode && this._mode.__creator == modeCreator) {
				                this._mode.init(this, iv && iv.words);
				            } else {
				                this._mode = modeCreator.call(mode, this, iv && iv.words);
				                this._mode.__creator = modeCreator;
				            }
				        },

				        _doProcessBlock: function (words, offset) {
				            this._mode.processBlock(words, offset);
				        },

				        _doFinalize: function () {
				            var finalProcessedBlocks;

				            // Shortcut
				            var padding = this.cfg.padding;

				            // Finalize
				            if (this._xformMode == this._ENC_XFORM_MODE) {
				                // Pad data
				                padding.pad(this._data, this.blockSize);

				                // Process final blocks
				                finalProcessedBlocks = this._process(!!'flush');
				            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
				                // Process final blocks
				                finalProcessedBlocks = this._process(!!'flush');

				                // Unpad data
				                padding.unpad(finalProcessedBlocks);
				            }

				            return finalProcessedBlocks;
				        },

				        blockSize: 128/32
				    });

				    /**
				     * A collection of cipher parameters.
				     *
				     * @property {WordArray} ciphertext The raw ciphertext.
				     * @property {WordArray} key The key to this ciphertext.
				     * @property {WordArray} iv The IV used in the ciphering operation.
				     * @property {WordArray} salt The salt used with a key derivation function.
				     * @property {Cipher} algorithm The cipher algorithm.
				     * @property {Mode} mode The block mode used in the ciphering operation.
				     * @property {Padding} padding The padding scheme used in the ciphering operation.
				     * @property {number} blockSize The block size of the cipher.
				     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
				     */
				    var CipherParams = C_lib.CipherParams = Base.extend({
				        /**
				         * Initializes a newly created cipher params object.
				         *
				         * @param {Object} cipherParams An object with any of the possible cipher parameters.
				         *
				         * @example
				         *
				         *     var cipherParams = CryptoJS.lib.CipherParams.create({
				         *         ciphertext: ciphertextWordArray,
				         *         key: keyWordArray,
				         *         iv: ivWordArray,
				         *         salt: saltWordArray,
				         *         algorithm: CryptoJS.algo.AES,
				         *         mode: CryptoJS.mode.CBC,
				         *         padding: CryptoJS.pad.PKCS7,
				         *         blockSize: 4,
				         *         formatter: CryptoJS.format.OpenSSL
				         *     });
				         */
				        init: function (cipherParams) {
				            this.mixIn(cipherParams);
				        },

				        /**
				         * Converts this cipher params object to a string.
				         *
				         * @param {Format} formatter (Optional) The formatting strategy to use.
				         *
				         * @return {string} The stringified cipher params.
				         *
				         * @throws Error If neither the formatter nor the default formatter is set.
				         *
				         * @example
				         *
				         *     var string = cipherParams + '';
				         *     var string = cipherParams.toString();
				         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
				         */
				        toString: function (formatter) {
				            return (formatter || this.formatter).stringify(this);
				        }
				    });

				    /**
				     * Format namespace.
				     */
				    var C_format = C.format = {};

				    /**
				     * OpenSSL formatting strategy.
				     */
				    var OpenSSLFormatter = C_format.OpenSSL = {
				        /**
				         * Converts a cipher params object to an OpenSSL-compatible string.
				         *
				         * @param {CipherParams} cipherParams The cipher params object.
				         *
				         * @return {string} The OpenSSL-compatible string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
				         */
				        stringify: function (cipherParams) {
				            var wordArray;

				            // Shortcuts
				            var ciphertext = cipherParams.ciphertext;
				            var salt = cipherParams.salt;

				            // Format
				            if (salt) {
				                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
				            } else {
				                wordArray = ciphertext;
				            }

				            return wordArray.toString(Base64);
				        },

				        /**
				         * Converts an OpenSSL-compatible string to a cipher params object.
				         *
				         * @param {string} openSSLStr The OpenSSL-compatible string.
				         *
				         * @return {CipherParams} The cipher params object.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
				         */
				        parse: function (openSSLStr) {
				            var salt;

				            // Parse base64
				            var ciphertext = Base64.parse(openSSLStr);

				            // Shortcut
				            var ciphertextWords = ciphertext.words;

				            // Test for salt
				            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
				                // Extract salt
				                salt = WordArray.create(ciphertextWords.slice(2, 4));

				                // Remove salt from ciphertext
				                ciphertextWords.splice(0, 4);
				                ciphertext.sigBytes -= 16;
				            }

				            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
				        }
				    };

				    /**
				     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
				     */
				    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
				         */
				        cfg: Base.extend({
				            format: OpenSSLFormatter
				        }),

				        /**
				         * Encrypts a message.
				         *
				         * @param {Cipher} cipher The cipher algorithm to use.
				         * @param {WordArray|string} message The message to encrypt.
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {CipherParams} A cipher params object.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
				         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
				         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
				         */
				        encrypt: function (cipher, message, key, cfg) {
				            // Apply config defaults
				            cfg = this.cfg.extend(cfg);

				            // Encrypt
				            var encryptor = cipher.createEncryptor(key, cfg);
				            var ciphertext = encryptor.finalize(message);

				            // Shortcut
				            var cipherCfg = encryptor.cfg;

				            // Create and return serializable cipher params
				            return CipherParams.create({
				                ciphertext: ciphertext,
				                key: key,
				                iv: cipherCfg.iv,
				                algorithm: cipher,
				                mode: cipherCfg.mode,
				                padding: cipherCfg.padding,
				                blockSize: cipher.blockSize,
				                formatter: cfg.format
				            });
				        },

				        /**
				         * Decrypts serialized ciphertext.
				         *
				         * @param {Cipher} cipher The cipher algorithm to use.
				         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {WordArray} The plaintext.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
				         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
				         */
				        decrypt: function (cipher, ciphertext, key, cfg) {
				            // Apply config defaults
				            cfg = this.cfg.extend(cfg);

				            // Convert string to CipherParams
				            ciphertext = this._parse(ciphertext, cfg.format);

				            // Decrypt
				            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

				            return plaintext;
				        },

				        /**
				         * Converts serialized ciphertext to CipherParams,
				         * else assumed CipherParams already and returns ciphertext unchanged.
				         *
				         * @param {CipherParams|string} ciphertext The ciphertext.
				         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
				         *
				         * @return {CipherParams} The unserialized ciphertext.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
				         */
				        _parse: function (ciphertext, format) {
				            if (typeof ciphertext == 'string') {
				                return format.parse(ciphertext, this);
				            } else {
				                return ciphertext;
				            }
				        }
				    });

				    /**
				     * Key derivation function namespace.
				     */
				    var C_kdf = C.kdf = {};

				    /**
				     * OpenSSL key derivation function.
				     */
				    var OpenSSLKdf = C_kdf.OpenSSL = {
				        /**
				         * Derives a key and IV from a password.
				         *
				         * @param {string} password The password to derive from.
				         * @param {number} keySize The size in words of the key to generate.
				         * @param {number} ivSize The size in words of the IV to generate.
				         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
				         *
				         * @return {CipherParams} A cipher params object with the key, IV, and salt.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
				         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
				         */
				        execute: function (password, keySize, ivSize, salt) {
				            // Generate random salt
				            if (!salt) {
				                salt = WordArray.random(64/8);
				            }

				            // Derive key and IV
				            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

				            // Separate key and IV
				            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
				            key.sigBytes = keySize * 4;

				            // Return params
				            return CipherParams.create({ key: key, iv: iv, salt: salt });
				        }
				    };

				    /**
				     * A serializable cipher wrapper that derives the key from a password,
				     * and returns ciphertext as a serializable cipher params object.
				     */
				    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
				         */
				        cfg: SerializableCipher.cfg.extend({
				            kdf: OpenSSLKdf
				        }),

				        /**
				         * Encrypts a message using a password.
				         *
				         * @param {Cipher} cipher The cipher algorithm to use.
				         * @param {WordArray|string} message The message to encrypt.
				         * @param {string} password The password.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {CipherParams} A cipher params object.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
				         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
				         */
				        encrypt: function (cipher, message, password, cfg) {
				            // Apply config defaults
				            cfg = this.cfg.extend(cfg);

				            // Derive key and other params
				            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

				            // Add IV to config
				            cfg.iv = derivedParams.iv;

				            // Encrypt
				            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

				            // Mix in derived params
				            ciphertext.mixIn(derivedParams);

				            return ciphertext;
				        },

				        /**
				         * Decrypts serialized ciphertext using a password.
				         *
				         * @param {Cipher} cipher The cipher algorithm to use.
				         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
				         * @param {string} password The password.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {WordArray} The plaintext.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
				         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
				         */
				        decrypt: function (cipher, ciphertext, password, cfg) {
				            // Apply config defaults
				            cfg = this.cfg.extend(cfg);

				            // Convert string to CipherParams
				            ciphertext = this._parse(ciphertext, cfg.format);

				            // Derive key and other params
				            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

				            // Add IV to config
				            cfg.iv = derivedParams.iv;

				            // Decrypt
				            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

				            return plaintext;
				        }
				    });
				}());


			}));
	} (cipherCore, cipherCoreExports));
		return cipherCoreExports;
	}

	var modeCfbExports = {};
	var modeCfb = {
	  get exports(){ return modeCfbExports; },
	  set exports(v){ modeCfbExports = v; },
	};

	var hasRequiredModeCfb;

	function requireModeCfb () {
		if (hasRequiredModeCfb) return modeCfbExports;
		hasRequiredModeCfb = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Cipher Feedback block mode.
				 */
				CryptoJS.mode.CFB = (function () {
				    var CFB = CryptoJS.lib.BlockCipherMode.extend();

				    CFB.Encryptor = CFB.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;

				            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

				            // Remember this block to use with next block
				            this._prevBlock = words.slice(offset, offset + blockSize);
				        }
				    });

				    CFB.Decryptor = CFB.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;

				            // Remember this block to use with next block
				            var thisBlock = words.slice(offset, offset + blockSize);

				            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

				            // This block becomes the previous block
				            this._prevBlock = thisBlock;
				        }
				    });

				    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
				        var keystream;

				        // Shortcut
				        var iv = this._iv;

				        // Generate keystream
				        if (iv) {
				            keystream = iv.slice(0);

				            // Remove IV for subsequent blocks
				            this._iv = undefined;
				        } else {
				            keystream = this._prevBlock;
				        }
				        cipher.encryptBlock(keystream, 0);

				        // Encrypt
				        for (var i = 0; i < blockSize; i++) {
				            words[offset + i] ^= keystream[i];
				        }
				    }

				    return CFB;
				}());


				return CryptoJS.mode.CFB;

			}));
	} (modeCfb, modeCfbExports));
		return modeCfbExports;
	}

	var modeCtrExports = {};
	var modeCtr = {
	  get exports(){ return modeCtrExports; },
	  set exports(v){ modeCtrExports = v; },
	};

	var hasRequiredModeCtr;

	function requireModeCtr () {
		if (hasRequiredModeCtr) return modeCtrExports;
		hasRequiredModeCtr = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Counter block mode.
				 */
				CryptoJS.mode.CTR = (function () {
				    var CTR = CryptoJS.lib.BlockCipherMode.extend();

				    var Encryptor = CTR.Encryptor = CTR.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;
				            var iv = this._iv;
				            var counter = this._counter;

				            // Generate keystream
				            if (iv) {
				                counter = this._counter = iv.slice(0);

				                // Remove IV for subsequent blocks
				                this._iv = undefined;
				            }
				            var keystream = counter.slice(0);
				            cipher.encryptBlock(keystream, 0);

				            // Increment counter
				            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;

				            // Encrypt
				            for (var i = 0; i < blockSize; i++) {
				                words[offset + i] ^= keystream[i];
				            }
				        }
				    });

				    CTR.Decryptor = Encryptor;

				    return CTR;
				}());


				return CryptoJS.mode.CTR;

			}));
	} (modeCtr, modeCtrExports));
		return modeCtrExports;
	}

	var modeCtrGladmanExports = {};
	var modeCtrGladman = {
	  get exports(){ return modeCtrGladmanExports; },
	  set exports(v){ modeCtrGladmanExports = v; },
	};

	var hasRequiredModeCtrGladman;

	function requireModeCtrGladman () {
		if (hasRequiredModeCtrGladman) return modeCtrGladmanExports;
		hasRequiredModeCtrGladman = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/** @preserve
				 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
				 * derived from CryptoJS.mode.CTR
				 * Jan Hruby jhruby.web@gmail.com
				 */
				CryptoJS.mode.CTRGladman = (function () {
				    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

					function incWord(word)
					{
						if (((word >> 24) & 0xff) === 0xff) { //overflow
						var b1 = (word >> 16)&0xff;
						var b2 = (word >> 8)&0xff;
						var b3 = word & 0xff;

						if (b1 === 0xff) // overflow b1
						{
						b1 = 0;
						if (b2 === 0xff)
						{
							b2 = 0;
							if (b3 === 0xff)
							{
								b3 = 0;
							}
							else
							{
								++b3;
							}
						}
						else
						{
							++b2;
						}
						}
						else
						{
						++b1;
						}

						word = 0;
						word += (b1 << 16);
						word += (b2 << 8);
						word += b3;
						}
						else
						{
						word += (0x01 << 24);
						}
						return word;
					}

					function incCounter(counter)
					{
						if ((counter[0] = incWord(counter[0])) === 0)
						{
							// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
							counter[1] = incWord(counter[1]);
						}
						return counter;
					}

				    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;
				            var iv = this._iv;
				            var counter = this._counter;

				            // Generate keystream
				            if (iv) {
				                counter = this._counter = iv.slice(0);

				                // Remove IV for subsequent blocks
				                this._iv = undefined;
				            }

							incCounter(counter);

							var keystream = counter.slice(0);
				            cipher.encryptBlock(keystream, 0);

				            // Encrypt
				            for (var i = 0; i < blockSize; i++) {
				                words[offset + i] ^= keystream[i];
				            }
				        }
				    });

				    CTRGladman.Decryptor = Encryptor;

				    return CTRGladman;
				}());




				return CryptoJS.mode.CTRGladman;

			}));
	} (modeCtrGladman, modeCtrGladmanExports));
		return modeCtrGladmanExports;
	}

	var modeOfbExports = {};
	var modeOfb = {
	  get exports(){ return modeOfbExports; },
	  set exports(v){ modeOfbExports = v; },
	};

	var hasRequiredModeOfb;

	function requireModeOfb () {
		if (hasRequiredModeOfb) return modeOfbExports;
		hasRequiredModeOfb = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Output Feedback block mode.
				 */
				CryptoJS.mode.OFB = (function () {
				    var OFB = CryptoJS.lib.BlockCipherMode.extend();

				    var Encryptor = OFB.Encryptor = OFB.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;
				            var iv = this._iv;
				            var keystream = this._keystream;

				            // Generate keystream
				            if (iv) {
				                keystream = this._keystream = iv.slice(0);

				                // Remove IV for subsequent blocks
				                this._iv = undefined;
				            }
				            cipher.encryptBlock(keystream, 0);

				            // Encrypt
				            for (var i = 0; i < blockSize; i++) {
				                words[offset + i] ^= keystream[i];
				            }
				        }
				    });

				    OFB.Decryptor = Encryptor;

				    return OFB;
				}());


				return CryptoJS.mode.OFB;

			}));
	} (modeOfb, modeOfbExports));
		return modeOfbExports;
	}

	var modeEcbExports = {};
	var modeEcb = {
	  get exports(){ return modeEcbExports; },
	  set exports(v){ modeEcbExports = v; },
	};

	var hasRequiredModeEcb;

	function requireModeEcb () {
		if (hasRequiredModeEcb) return modeEcbExports;
		hasRequiredModeEcb = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Electronic Codebook block mode.
				 */
				CryptoJS.mode.ECB = (function () {
				    var ECB = CryptoJS.lib.BlockCipherMode.extend();

				    ECB.Encryptor = ECB.extend({
				        processBlock: function (words, offset) {
				            this._cipher.encryptBlock(words, offset);
				        }
				    });

				    ECB.Decryptor = ECB.extend({
				        processBlock: function (words, offset) {
				            this._cipher.decryptBlock(words, offset);
				        }
				    });

				    return ECB;
				}());


				return CryptoJS.mode.ECB;

			}));
	} (modeEcb, modeEcbExports));
		return modeEcbExports;
	}

	var padAnsix923Exports = {};
	var padAnsix923 = {
	  get exports(){ return padAnsix923Exports; },
	  set exports(v){ padAnsix923Exports = v; },
	};

	var hasRequiredPadAnsix923;

	function requirePadAnsix923 () {
		if (hasRequiredPadAnsix923) return padAnsix923Exports;
		hasRequiredPadAnsix923 = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * ANSI X.923 padding strategy.
				 */
				CryptoJS.pad.AnsiX923 = {
				    pad: function (data, blockSize) {
				        // Shortcuts
				        var dataSigBytes = data.sigBytes;
				        var blockSizeBytes = blockSize * 4;

				        // Count padding bytes
				        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

				        // Compute last byte position
				        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

				        // Pad
				        data.clamp();
				        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
				        data.sigBytes += nPaddingBytes;
				    },

				    unpad: function (data) {
				        // Get number of padding bytes from last byte
				        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

				        // Remove padding
				        data.sigBytes -= nPaddingBytes;
				    }
				};


				return CryptoJS.pad.Ansix923;

			}));
	} (padAnsix923, padAnsix923Exports));
		return padAnsix923Exports;
	}

	var padIso10126Exports = {};
	var padIso10126 = {
	  get exports(){ return padIso10126Exports; },
	  set exports(v){ padIso10126Exports = v; },
	};

	var hasRequiredPadIso10126;

	function requirePadIso10126 () {
		if (hasRequiredPadIso10126) return padIso10126Exports;
		hasRequiredPadIso10126 = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * ISO 10126 padding strategy.
				 */
				CryptoJS.pad.Iso10126 = {
				    pad: function (data, blockSize) {
				        // Shortcut
				        var blockSizeBytes = blockSize * 4;

				        // Count padding bytes
				        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

				        // Pad
				        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
				             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
				    },

				    unpad: function (data) {
				        // Get number of padding bytes from last byte
				        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

				        // Remove padding
				        data.sigBytes -= nPaddingBytes;
				    }
				};


				return CryptoJS.pad.Iso10126;

			}));
	} (padIso10126, padIso10126Exports));
		return padIso10126Exports;
	}

	var padIso97971Exports = {};
	var padIso97971 = {
	  get exports(){ return padIso97971Exports; },
	  set exports(v){ padIso97971Exports = v; },
	};

	var hasRequiredPadIso97971;

	function requirePadIso97971 () {
		if (hasRequiredPadIso97971) return padIso97971Exports;
		hasRequiredPadIso97971 = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * ISO/IEC 9797-1 Padding Method 2.
				 */
				CryptoJS.pad.Iso97971 = {
				    pad: function (data, blockSize) {
				        // Add 0x80 byte
				        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

				        // Zero pad the rest
				        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
				    },

				    unpad: function (data) {
				        // Remove zero padding
				        CryptoJS.pad.ZeroPadding.unpad(data);

				        // Remove one more byte -- the 0x80 byte
				        data.sigBytes--;
				    }
				};


				return CryptoJS.pad.Iso97971;

			}));
	} (padIso97971, padIso97971Exports));
		return padIso97971Exports;
	}

	var padZeropaddingExports = {};
	var padZeropadding = {
	  get exports(){ return padZeropaddingExports; },
	  set exports(v){ padZeropaddingExports = v; },
	};

	var hasRequiredPadZeropadding;

	function requirePadZeropadding () {
		if (hasRequiredPadZeropadding) return padZeropaddingExports;
		hasRequiredPadZeropadding = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Zero padding strategy.
				 */
				CryptoJS.pad.ZeroPadding = {
				    pad: function (data, blockSize) {
				        // Shortcut
				        var blockSizeBytes = blockSize * 4;

				        // Pad
				        data.clamp();
				        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
				    },

				    unpad: function (data) {
				        // Shortcut
				        var dataWords = data.words;

				        // Unpad
				        var i = data.sigBytes - 1;
				        for (var i = data.sigBytes - 1; i >= 0; i--) {
				            if (((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
				                data.sigBytes = i + 1;
				                break;
				            }
				        }
				    }
				};


				return CryptoJS.pad.ZeroPadding;

			}));
	} (padZeropadding, padZeropaddingExports));
		return padZeropaddingExports;
	}

	var padNopaddingExports = {};
	var padNopadding = {
	  get exports(){ return padNopaddingExports; },
	  set exports(v){ padNopaddingExports = v; },
	};

	var hasRequiredPadNopadding;

	function requirePadNopadding () {
		if (hasRequiredPadNopadding) return padNopaddingExports;
		hasRequiredPadNopadding = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * A noop padding strategy.
				 */
				CryptoJS.pad.NoPadding = {
				    pad: function () {
				    },

				    unpad: function () {
				    }
				};


				return CryptoJS.pad.NoPadding;

			}));
	} (padNopadding, padNopaddingExports));
		return padNopaddingExports;
	}

	var formatHexExports = {};
	var formatHex = {
	  get exports(){ return formatHexExports; },
	  set exports(v){ formatHexExports = v; },
	};

	var hasRequiredFormatHex;

	function requireFormatHex () {
		if (hasRequiredFormatHex) return formatHexExports;
		hasRequiredFormatHex = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (undefined$1) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var CipherParams = C_lib.CipherParams;
				    var C_enc = C.enc;
				    var Hex = C_enc.Hex;
				    var C_format = C.format;

				    var HexFormatter = C_format.Hex = {
				        /**
				         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
				         *
				         * @param {CipherParams} cipherParams The cipher params object.
				         *
				         * @return {string} The hexadecimally encoded string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
				         */
				        stringify: function (cipherParams) {
				            return cipherParams.ciphertext.toString(Hex);
				        },

				        /**
				         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
				         *
				         * @param {string} input The hexadecimally encoded string.
				         *
				         * @return {CipherParams} The cipher params object.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
				         */
				        parse: function (input) {
				            var ciphertext = Hex.parse(input);
				            return CipherParams.create({ ciphertext: ciphertext });
				        }
				    };
				}());


				return CryptoJS.format.Hex;

			}));
	} (formatHex, formatHexExports));
		return formatHexExports;
	}

	var aesExports = {};
	var aes = {
	  get exports(){ return aesExports; },
	  set exports(v){ aesExports = v; },
	};

	var hasRequiredAes;

	function requireAes () {
		if (hasRequiredAes) return aesExports;
		hasRequiredAes = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var BlockCipher = C_lib.BlockCipher;
				    var C_algo = C.algo;

				    // Lookup tables
				    var SBOX = [];
				    var INV_SBOX = [];
				    var SUB_MIX_0 = [];
				    var SUB_MIX_1 = [];
				    var SUB_MIX_2 = [];
				    var SUB_MIX_3 = [];
				    var INV_SUB_MIX_0 = [];
				    var INV_SUB_MIX_1 = [];
				    var INV_SUB_MIX_2 = [];
				    var INV_SUB_MIX_3 = [];

				    // Compute lookup tables
				    (function () {
				        // Compute double table
				        var d = [];
				        for (var i = 0; i < 256; i++) {
				            if (i < 128) {
				                d[i] = i << 1;
				            } else {
				                d[i] = (i << 1) ^ 0x11b;
				            }
				        }

				        // Walk GF(2^8)
				        var x = 0;
				        var xi = 0;
				        for (var i = 0; i < 256; i++) {
				            // Compute sbox
				            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
				            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
				            SBOX[x] = sx;
				            INV_SBOX[sx] = x;

				            // Compute multiplication
				            var x2 = d[x];
				            var x4 = d[x2];
				            var x8 = d[x4];

				            // Compute sub bytes, mix columns tables
				            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
				            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
				            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
				            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
				            SUB_MIX_3[x] = t;

				            // Compute inv sub bytes, inv mix columns tables
				            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
				            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
				            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
				            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
				            INV_SUB_MIX_3[sx] = t;

				            // Compute next counter
				            if (!x) {
				                x = xi = 1;
				            } else {
				                x = x2 ^ d[d[d[x8 ^ x2]]];
				                xi ^= d[d[xi]];
				            }
				        }
				    }());

				    // Precomputed Rcon lookup
				    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

				    /**
				     * AES block cipher algorithm.
				     */
				    var AES = C_algo.AES = BlockCipher.extend({
				        _doReset: function () {
				            var t;

				            // Skip reset of nRounds has been set before and key did not change
				            if (this._nRounds && this._keyPriorReset === this._key) {
				                return;
				            }

				            // Shortcuts
				            var key = this._keyPriorReset = this._key;
				            var keyWords = key.words;
				            var keySize = key.sigBytes / 4;

				            // Compute number of rounds
				            var nRounds = this._nRounds = keySize + 6;

				            // Compute number of key schedule rows
				            var ksRows = (nRounds + 1) * 4;

				            // Compute key schedule
				            var keySchedule = this._keySchedule = [];
				            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
				                if (ksRow < keySize) {
				                    keySchedule[ksRow] = keyWords[ksRow];
				                } else {
				                    t = keySchedule[ksRow - 1];

				                    if (!(ksRow % keySize)) {
				                        // Rot word
				                        t = (t << 8) | (t >>> 24);

				                        // Sub word
				                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

				                        // Mix Rcon
				                        t ^= RCON[(ksRow / keySize) | 0] << 24;
				                    } else if (keySize > 6 && ksRow % keySize == 4) {
				                        // Sub word
				                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
				                    }

				                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
				                }
				            }

				            // Compute inv key schedule
				            var invKeySchedule = this._invKeySchedule = [];
				            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
				                var ksRow = ksRows - invKsRow;

				                if (invKsRow % 4) {
				                    var t = keySchedule[ksRow];
				                } else {
				                    var t = keySchedule[ksRow - 4];
				                }

				                if (invKsRow < 4 || ksRow <= 4) {
				                    invKeySchedule[invKsRow] = t;
				                } else {
				                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
				                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
				                }
				            }
				        },

				        encryptBlock: function (M, offset) {
				            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
				        },

				        decryptBlock: function (M, offset) {
				            // Swap 2nd and 4th rows
				            var t = M[offset + 1];
				            M[offset + 1] = M[offset + 3];
				            M[offset + 3] = t;

				            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

				            // Inv swap 2nd and 4th rows
				            var t = M[offset + 1];
				            M[offset + 1] = M[offset + 3];
				            M[offset + 3] = t;
				        },

				        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
				            // Shortcut
				            var nRounds = this._nRounds;

				            // Get input, add round key
				            var s0 = M[offset]     ^ keySchedule[0];
				            var s1 = M[offset + 1] ^ keySchedule[1];
				            var s2 = M[offset + 2] ^ keySchedule[2];
				            var s3 = M[offset + 3] ^ keySchedule[3];

				            // Key schedule row counter
				            var ksRow = 4;

				            // Rounds
				            for (var round = 1; round < nRounds; round++) {
				                // Shift rows, sub bytes, mix columns, add round key
				                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
				                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
				                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
				                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

				                // Update state
				                s0 = t0;
				                s1 = t1;
				                s2 = t2;
				                s3 = t3;
				            }

				            // Shift rows, sub bytes, add round key
				            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
				            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
				            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
				            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

				            // Set output
				            M[offset]     = t0;
				            M[offset + 1] = t1;
				            M[offset + 2] = t2;
				            M[offset + 3] = t3;
				        },

				        keySize: 256/32
				    });

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
				     */
				    C.AES = BlockCipher._createHelper(AES);
				}());


				return CryptoJS.AES;

			}));
	} (aes, aesExports));
		return aesExports;
	}

	var tripledesExports = {};
	var tripledes = {
	  get exports(){ return tripledesExports; },
	  set exports(v){ tripledesExports = v; },
	};

	var hasRequiredTripledes;

	function requireTripledes () {
		if (hasRequiredTripledes) return tripledesExports;
		hasRequiredTripledes = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var BlockCipher = C_lib.BlockCipher;
				    var C_algo = C.algo;

				    // Permuted Choice 1 constants
				    var PC1 = [
				        57, 49, 41, 33, 25, 17, 9,  1,
				        58, 50, 42, 34, 26, 18, 10, 2,
				        59, 51, 43, 35, 27, 19, 11, 3,
				        60, 52, 44, 36, 63, 55, 47, 39,
				        31, 23, 15, 7,  62, 54, 46, 38,
				        30, 22, 14, 6,  61, 53, 45, 37,
				        29, 21, 13, 5,  28, 20, 12, 4
				    ];

				    // Permuted Choice 2 constants
				    var PC2 = [
				        14, 17, 11, 24, 1,  5,
				        3,  28, 15, 6,  21, 10,
				        23, 19, 12, 4,  26, 8,
				        16, 7,  27, 20, 13, 2,
				        41, 52, 31, 37, 47, 55,
				        30, 40, 51, 45, 33, 48,
				        44, 49, 39, 56, 34, 53,
				        46, 42, 50, 36, 29, 32
				    ];

				    // Cumulative bit shift constants
				    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

				    // SBOXes and round permutation constants
				    var SBOX_P = [
				        {
				            0x0: 0x808200,
				            0x10000000: 0x8000,
				            0x20000000: 0x808002,
				            0x30000000: 0x2,
				            0x40000000: 0x200,
				            0x50000000: 0x808202,
				            0x60000000: 0x800202,
				            0x70000000: 0x800000,
				            0x80000000: 0x202,
				            0x90000000: 0x800200,
				            0xa0000000: 0x8200,
				            0xb0000000: 0x808000,
				            0xc0000000: 0x8002,
				            0xd0000000: 0x800002,
				            0xe0000000: 0x0,
				            0xf0000000: 0x8202,
				            0x8000000: 0x0,
				            0x18000000: 0x808202,
				            0x28000000: 0x8202,
				            0x38000000: 0x8000,
				            0x48000000: 0x808200,
				            0x58000000: 0x200,
				            0x68000000: 0x808002,
				            0x78000000: 0x2,
				            0x88000000: 0x800200,
				            0x98000000: 0x8200,
				            0xa8000000: 0x808000,
				            0xb8000000: 0x800202,
				            0xc8000000: 0x800002,
				            0xd8000000: 0x8002,
				            0xe8000000: 0x202,
				            0xf8000000: 0x800000,
				            0x1: 0x8000,
				            0x10000001: 0x2,
				            0x20000001: 0x808200,
				            0x30000001: 0x800000,
				            0x40000001: 0x808002,
				            0x50000001: 0x8200,
				            0x60000001: 0x200,
				            0x70000001: 0x800202,
				            0x80000001: 0x808202,
				            0x90000001: 0x808000,
				            0xa0000001: 0x800002,
				            0xb0000001: 0x8202,
				            0xc0000001: 0x202,
				            0xd0000001: 0x800200,
				            0xe0000001: 0x8002,
				            0xf0000001: 0x0,
				            0x8000001: 0x808202,
				            0x18000001: 0x808000,
				            0x28000001: 0x800000,
				            0x38000001: 0x200,
				            0x48000001: 0x8000,
				            0x58000001: 0x800002,
				            0x68000001: 0x2,
				            0x78000001: 0x8202,
				            0x88000001: 0x8002,
				            0x98000001: 0x800202,
				            0xa8000001: 0x202,
				            0xb8000001: 0x808200,
				            0xc8000001: 0x800200,
				            0xd8000001: 0x0,
				            0xe8000001: 0x8200,
				            0xf8000001: 0x808002
				        },
				        {
				            0x0: 0x40084010,
				            0x1000000: 0x4000,
				            0x2000000: 0x80000,
				            0x3000000: 0x40080010,
				            0x4000000: 0x40000010,
				            0x5000000: 0x40084000,
				            0x6000000: 0x40004000,
				            0x7000000: 0x10,
				            0x8000000: 0x84000,
				            0x9000000: 0x40004010,
				            0xa000000: 0x40000000,
				            0xb000000: 0x84010,
				            0xc000000: 0x80010,
				            0xd000000: 0x0,
				            0xe000000: 0x4010,
				            0xf000000: 0x40080000,
				            0x800000: 0x40004000,
				            0x1800000: 0x84010,
				            0x2800000: 0x10,
				            0x3800000: 0x40004010,
				            0x4800000: 0x40084010,
				            0x5800000: 0x40000000,
				            0x6800000: 0x80000,
				            0x7800000: 0x40080010,
				            0x8800000: 0x80010,
				            0x9800000: 0x0,
				            0xa800000: 0x4000,
				            0xb800000: 0x40080000,
				            0xc800000: 0x40000010,
				            0xd800000: 0x84000,
				            0xe800000: 0x40084000,
				            0xf800000: 0x4010,
				            0x10000000: 0x0,
				            0x11000000: 0x40080010,
				            0x12000000: 0x40004010,
				            0x13000000: 0x40084000,
				            0x14000000: 0x40080000,
				            0x15000000: 0x10,
				            0x16000000: 0x84010,
				            0x17000000: 0x4000,
				            0x18000000: 0x4010,
				            0x19000000: 0x80000,
				            0x1a000000: 0x80010,
				            0x1b000000: 0x40000010,
				            0x1c000000: 0x84000,
				            0x1d000000: 0x40004000,
				            0x1e000000: 0x40000000,
				            0x1f000000: 0x40084010,
				            0x10800000: 0x84010,
				            0x11800000: 0x80000,
				            0x12800000: 0x40080000,
				            0x13800000: 0x4000,
				            0x14800000: 0x40004000,
				            0x15800000: 0x40084010,
				            0x16800000: 0x10,
				            0x17800000: 0x40000000,
				            0x18800000: 0x40084000,
				            0x19800000: 0x40000010,
				            0x1a800000: 0x40004010,
				            0x1b800000: 0x80010,
				            0x1c800000: 0x0,
				            0x1d800000: 0x4010,
				            0x1e800000: 0x40080010,
				            0x1f800000: 0x84000
				        },
				        {
				            0x0: 0x104,
				            0x100000: 0x0,
				            0x200000: 0x4000100,
				            0x300000: 0x10104,
				            0x400000: 0x10004,
				            0x500000: 0x4000004,
				            0x600000: 0x4010104,
				            0x700000: 0x4010000,
				            0x800000: 0x4000000,
				            0x900000: 0x4010100,
				            0xa00000: 0x10100,
				            0xb00000: 0x4010004,
				            0xc00000: 0x4000104,
				            0xd00000: 0x10000,
				            0xe00000: 0x4,
				            0xf00000: 0x100,
				            0x80000: 0x4010100,
				            0x180000: 0x4010004,
				            0x280000: 0x0,
				            0x380000: 0x4000100,
				            0x480000: 0x4000004,
				            0x580000: 0x10000,
				            0x680000: 0x10004,
				            0x780000: 0x104,
				            0x880000: 0x4,
				            0x980000: 0x100,
				            0xa80000: 0x4010000,
				            0xb80000: 0x10104,
				            0xc80000: 0x10100,
				            0xd80000: 0x4000104,
				            0xe80000: 0x4010104,
				            0xf80000: 0x4000000,
				            0x1000000: 0x4010100,
				            0x1100000: 0x10004,
				            0x1200000: 0x10000,
				            0x1300000: 0x4000100,
				            0x1400000: 0x100,
				            0x1500000: 0x4010104,
				            0x1600000: 0x4000004,
				            0x1700000: 0x0,
				            0x1800000: 0x4000104,
				            0x1900000: 0x4000000,
				            0x1a00000: 0x4,
				            0x1b00000: 0x10100,
				            0x1c00000: 0x4010000,
				            0x1d00000: 0x104,
				            0x1e00000: 0x10104,
				            0x1f00000: 0x4010004,
				            0x1080000: 0x4000000,
				            0x1180000: 0x104,
				            0x1280000: 0x4010100,
				            0x1380000: 0x0,
				            0x1480000: 0x10004,
				            0x1580000: 0x4000100,
				            0x1680000: 0x100,
				            0x1780000: 0x4010004,
				            0x1880000: 0x10000,
				            0x1980000: 0x4010104,
				            0x1a80000: 0x10104,
				            0x1b80000: 0x4000004,
				            0x1c80000: 0x4000104,
				            0x1d80000: 0x4010000,
				            0x1e80000: 0x4,
				            0x1f80000: 0x10100
				        },
				        {
				            0x0: 0x80401000,
				            0x10000: 0x80001040,
				            0x20000: 0x401040,
				            0x30000: 0x80400000,
				            0x40000: 0x0,
				            0x50000: 0x401000,
				            0x60000: 0x80000040,
				            0x70000: 0x400040,
				            0x80000: 0x80000000,
				            0x90000: 0x400000,
				            0xa0000: 0x40,
				            0xb0000: 0x80001000,
				            0xc0000: 0x80400040,
				            0xd0000: 0x1040,
				            0xe0000: 0x1000,
				            0xf0000: 0x80401040,
				            0x8000: 0x80001040,
				            0x18000: 0x40,
				            0x28000: 0x80400040,
				            0x38000: 0x80001000,
				            0x48000: 0x401000,
				            0x58000: 0x80401040,
				            0x68000: 0x0,
				            0x78000: 0x80400000,
				            0x88000: 0x1000,
				            0x98000: 0x80401000,
				            0xa8000: 0x400000,
				            0xb8000: 0x1040,
				            0xc8000: 0x80000000,
				            0xd8000: 0x400040,
				            0xe8000: 0x401040,
				            0xf8000: 0x80000040,
				            0x100000: 0x400040,
				            0x110000: 0x401000,
				            0x120000: 0x80000040,
				            0x130000: 0x0,
				            0x140000: 0x1040,
				            0x150000: 0x80400040,
				            0x160000: 0x80401000,
				            0x170000: 0x80001040,
				            0x180000: 0x80401040,
				            0x190000: 0x80000000,
				            0x1a0000: 0x80400000,
				            0x1b0000: 0x401040,
				            0x1c0000: 0x80001000,
				            0x1d0000: 0x400000,
				            0x1e0000: 0x40,
				            0x1f0000: 0x1000,
				            0x108000: 0x80400000,
				            0x118000: 0x80401040,
				            0x128000: 0x0,
				            0x138000: 0x401000,
				            0x148000: 0x400040,
				            0x158000: 0x80000000,
				            0x168000: 0x80001040,
				            0x178000: 0x40,
				            0x188000: 0x80000040,
				            0x198000: 0x1000,
				            0x1a8000: 0x80001000,
				            0x1b8000: 0x80400040,
				            0x1c8000: 0x1040,
				            0x1d8000: 0x80401000,
				            0x1e8000: 0x400000,
				            0x1f8000: 0x401040
				        },
				        {
				            0x0: 0x80,
				            0x1000: 0x1040000,
				            0x2000: 0x40000,
				            0x3000: 0x20000000,
				            0x4000: 0x20040080,
				            0x5000: 0x1000080,
				            0x6000: 0x21000080,
				            0x7000: 0x40080,
				            0x8000: 0x1000000,
				            0x9000: 0x20040000,
				            0xa000: 0x20000080,
				            0xb000: 0x21040080,
				            0xc000: 0x21040000,
				            0xd000: 0x0,
				            0xe000: 0x1040080,
				            0xf000: 0x21000000,
				            0x800: 0x1040080,
				            0x1800: 0x21000080,
				            0x2800: 0x80,
				            0x3800: 0x1040000,
				            0x4800: 0x40000,
				            0x5800: 0x20040080,
				            0x6800: 0x21040000,
				            0x7800: 0x20000000,
				            0x8800: 0x20040000,
				            0x9800: 0x0,
				            0xa800: 0x21040080,
				            0xb800: 0x1000080,
				            0xc800: 0x20000080,
				            0xd800: 0x21000000,
				            0xe800: 0x1000000,
				            0xf800: 0x40080,
				            0x10000: 0x40000,
				            0x11000: 0x80,
				            0x12000: 0x20000000,
				            0x13000: 0x21000080,
				            0x14000: 0x1000080,
				            0x15000: 0x21040000,
				            0x16000: 0x20040080,
				            0x17000: 0x1000000,
				            0x18000: 0x21040080,
				            0x19000: 0x21000000,
				            0x1a000: 0x1040000,
				            0x1b000: 0x20040000,
				            0x1c000: 0x40080,
				            0x1d000: 0x20000080,
				            0x1e000: 0x0,
				            0x1f000: 0x1040080,
				            0x10800: 0x21000080,
				            0x11800: 0x1000000,
				            0x12800: 0x1040000,
				            0x13800: 0x20040080,
				            0x14800: 0x20000000,
				            0x15800: 0x1040080,
				            0x16800: 0x80,
				            0x17800: 0x21040000,
				            0x18800: 0x40080,
				            0x19800: 0x21040080,
				            0x1a800: 0x0,
				            0x1b800: 0x21000000,
				            0x1c800: 0x1000080,
				            0x1d800: 0x40000,
				            0x1e800: 0x20040000,
				            0x1f800: 0x20000080
				        },
				        {
				            0x0: 0x10000008,
				            0x100: 0x2000,
				            0x200: 0x10200000,
				            0x300: 0x10202008,
				            0x400: 0x10002000,
				            0x500: 0x200000,
				            0x600: 0x200008,
				            0x700: 0x10000000,
				            0x800: 0x0,
				            0x900: 0x10002008,
				            0xa00: 0x202000,
				            0xb00: 0x8,
				            0xc00: 0x10200008,
				            0xd00: 0x202008,
				            0xe00: 0x2008,
				            0xf00: 0x10202000,
				            0x80: 0x10200000,
				            0x180: 0x10202008,
				            0x280: 0x8,
				            0x380: 0x200000,
				            0x480: 0x202008,
				            0x580: 0x10000008,
				            0x680: 0x10002000,
				            0x780: 0x2008,
				            0x880: 0x200008,
				            0x980: 0x2000,
				            0xa80: 0x10002008,
				            0xb80: 0x10200008,
				            0xc80: 0x0,
				            0xd80: 0x10202000,
				            0xe80: 0x202000,
				            0xf80: 0x10000000,
				            0x1000: 0x10002000,
				            0x1100: 0x10200008,
				            0x1200: 0x10202008,
				            0x1300: 0x2008,
				            0x1400: 0x200000,
				            0x1500: 0x10000000,
				            0x1600: 0x10000008,
				            0x1700: 0x202000,
				            0x1800: 0x202008,
				            0x1900: 0x0,
				            0x1a00: 0x8,
				            0x1b00: 0x10200000,
				            0x1c00: 0x2000,
				            0x1d00: 0x10002008,
				            0x1e00: 0x10202000,
				            0x1f00: 0x200008,
				            0x1080: 0x8,
				            0x1180: 0x202000,
				            0x1280: 0x200000,
				            0x1380: 0x10000008,
				            0x1480: 0x10002000,
				            0x1580: 0x2008,
				            0x1680: 0x10202008,
				            0x1780: 0x10200000,
				            0x1880: 0x10202000,
				            0x1980: 0x10200008,
				            0x1a80: 0x2000,
				            0x1b80: 0x202008,
				            0x1c80: 0x200008,
				            0x1d80: 0x0,
				            0x1e80: 0x10000000,
				            0x1f80: 0x10002008
				        },
				        {
				            0x0: 0x100000,
				            0x10: 0x2000401,
				            0x20: 0x400,
				            0x30: 0x100401,
				            0x40: 0x2100401,
				            0x50: 0x0,
				            0x60: 0x1,
				            0x70: 0x2100001,
				            0x80: 0x2000400,
				            0x90: 0x100001,
				            0xa0: 0x2000001,
				            0xb0: 0x2100400,
				            0xc0: 0x2100000,
				            0xd0: 0x401,
				            0xe0: 0x100400,
				            0xf0: 0x2000000,
				            0x8: 0x2100001,
				            0x18: 0x0,
				            0x28: 0x2000401,
				            0x38: 0x2100400,
				            0x48: 0x100000,
				            0x58: 0x2000001,
				            0x68: 0x2000000,
				            0x78: 0x401,
				            0x88: 0x100401,
				            0x98: 0x2000400,
				            0xa8: 0x2100000,
				            0xb8: 0x100001,
				            0xc8: 0x400,
				            0xd8: 0x2100401,
				            0xe8: 0x1,
				            0xf8: 0x100400,
				            0x100: 0x2000000,
				            0x110: 0x100000,
				            0x120: 0x2000401,
				            0x130: 0x2100001,
				            0x140: 0x100001,
				            0x150: 0x2000400,
				            0x160: 0x2100400,
				            0x170: 0x100401,
				            0x180: 0x401,
				            0x190: 0x2100401,
				            0x1a0: 0x100400,
				            0x1b0: 0x1,
				            0x1c0: 0x0,
				            0x1d0: 0x2100000,
				            0x1e0: 0x2000001,
				            0x1f0: 0x400,
				            0x108: 0x100400,
				            0x118: 0x2000401,
				            0x128: 0x2100001,
				            0x138: 0x1,
				            0x148: 0x2000000,
				            0x158: 0x100000,
				            0x168: 0x401,
				            0x178: 0x2100400,
				            0x188: 0x2000001,
				            0x198: 0x2100000,
				            0x1a8: 0x0,
				            0x1b8: 0x2100401,
				            0x1c8: 0x100401,
				            0x1d8: 0x400,
				            0x1e8: 0x2000400,
				            0x1f8: 0x100001
				        },
				        {
				            0x0: 0x8000820,
				            0x1: 0x20000,
				            0x2: 0x8000000,
				            0x3: 0x20,
				            0x4: 0x20020,
				            0x5: 0x8020820,
				            0x6: 0x8020800,
				            0x7: 0x800,
				            0x8: 0x8020000,
				            0x9: 0x8000800,
				            0xa: 0x20800,
				            0xb: 0x8020020,
				            0xc: 0x820,
				            0xd: 0x0,
				            0xe: 0x8000020,
				            0xf: 0x20820,
				            0x80000000: 0x800,
				            0x80000001: 0x8020820,
				            0x80000002: 0x8000820,
				            0x80000003: 0x8000000,
				            0x80000004: 0x8020000,
				            0x80000005: 0x20800,
				            0x80000006: 0x20820,
				            0x80000007: 0x20,
				            0x80000008: 0x8000020,
				            0x80000009: 0x820,
				            0x8000000a: 0x20020,
				            0x8000000b: 0x8020800,
				            0x8000000c: 0x0,
				            0x8000000d: 0x8020020,
				            0x8000000e: 0x8000800,
				            0x8000000f: 0x20000,
				            0x10: 0x20820,
				            0x11: 0x8020800,
				            0x12: 0x20,
				            0x13: 0x800,
				            0x14: 0x8000800,
				            0x15: 0x8000020,
				            0x16: 0x8020020,
				            0x17: 0x20000,
				            0x18: 0x0,
				            0x19: 0x20020,
				            0x1a: 0x8020000,
				            0x1b: 0x8000820,
				            0x1c: 0x8020820,
				            0x1d: 0x20800,
				            0x1e: 0x820,
				            0x1f: 0x8000000,
				            0x80000010: 0x20000,
				            0x80000011: 0x800,
				            0x80000012: 0x8020020,
				            0x80000013: 0x20820,
				            0x80000014: 0x20,
				            0x80000015: 0x8020000,
				            0x80000016: 0x8000000,
				            0x80000017: 0x8000820,
				            0x80000018: 0x8020820,
				            0x80000019: 0x8000020,
				            0x8000001a: 0x8000800,
				            0x8000001b: 0x0,
				            0x8000001c: 0x20800,
				            0x8000001d: 0x820,
				            0x8000001e: 0x20020,
				            0x8000001f: 0x8020800
				        }
				    ];

				    // Masks that select the SBOX input
				    var SBOX_MASK = [
				        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
				        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
				    ];

				    /**
				     * DES block cipher algorithm.
				     */
				    var DES = C_algo.DES = BlockCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var key = this._key;
				            var keyWords = key.words;

				            // Select 56 bits according to PC1
				            var keyBits = [];
				            for (var i = 0; i < 56; i++) {
				                var keyBitPos = PC1[i] - 1;
				                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
				            }

				            // Assemble 16 subkeys
				            var subKeys = this._subKeys = [];
				            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
				                // Create subkey
				                var subKey = subKeys[nSubKey] = [];

				                // Shortcut
				                var bitShift = BIT_SHIFTS[nSubKey];

				                // Select 48 bits according to PC2
				                for (var i = 0; i < 24; i++) {
				                    // Select from the left 28 key bits
				                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

				                    // Select from the right 28 key bits
				                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
				                }

				                // Since each subkey is applied to an expanded 32-bit input,
				                // the subkey can be broken into 8 values scaled to 32-bits,
				                // which allows the key to be used without expansion
				                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
				                for (var i = 1; i < 7; i++) {
				                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
				                }
				                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
				            }

				            // Compute inverse subkeys
				            var invSubKeys = this._invSubKeys = [];
				            for (var i = 0; i < 16; i++) {
				                invSubKeys[i] = subKeys[15 - i];
				            }
				        },

				        encryptBlock: function (M, offset) {
				            this._doCryptBlock(M, offset, this._subKeys);
				        },

				        decryptBlock: function (M, offset) {
				            this._doCryptBlock(M, offset, this._invSubKeys);
				        },

				        _doCryptBlock: function (M, offset, subKeys) {
				            // Get input
				            this._lBlock = M[offset];
				            this._rBlock = M[offset + 1];

				            // Initial permutation
				            exchangeLR.call(this, 4,  0x0f0f0f0f);
				            exchangeLR.call(this, 16, 0x0000ffff);
				            exchangeRL.call(this, 2,  0x33333333);
				            exchangeRL.call(this, 8,  0x00ff00ff);
				            exchangeLR.call(this, 1,  0x55555555);

				            // Rounds
				            for (var round = 0; round < 16; round++) {
				                // Shortcuts
				                var subKey = subKeys[round];
				                var lBlock = this._lBlock;
				                var rBlock = this._rBlock;

				                // Feistel function
				                var f = 0;
				                for (var i = 0; i < 8; i++) {
				                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
				                }
				                this._lBlock = rBlock;
				                this._rBlock = lBlock ^ f;
				            }

				            // Undo swap from last round
				            var t = this._lBlock;
				            this._lBlock = this._rBlock;
				            this._rBlock = t;

				            // Final permutation
				            exchangeLR.call(this, 1,  0x55555555);
				            exchangeRL.call(this, 8,  0x00ff00ff);
				            exchangeRL.call(this, 2,  0x33333333);
				            exchangeLR.call(this, 16, 0x0000ffff);
				            exchangeLR.call(this, 4,  0x0f0f0f0f);

				            // Set output
				            M[offset] = this._lBlock;
				            M[offset + 1] = this._rBlock;
				        },

				        keySize: 64/32,

				        ivSize: 64/32,

				        blockSize: 64/32
				    });

				    // Swap bits across the left and right words
				    function exchangeLR(offset, mask) {
				        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
				        this._rBlock ^= t;
				        this._lBlock ^= t << offset;
				    }

				    function exchangeRL(offset, mask) {
				        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
				        this._lBlock ^= t;
				        this._rBlock ^= t << offset;
				    }

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
				     */
				    C.DES = BlockCipher._createHelper(DES);

				    /**
				     * Triple-DES block cipher algorithm.
				     */
				    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var key = this._key;
				            var keyWords = key.words;
				            // Make sure the key length is valid (64, 128 or >= 192 bit)
				            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
				                throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');
				            }

				            // Extend the key according to the keying options defined in 3DES standard
				            var key1 = keyWords.slice(0, 2);
				            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
				            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);

				            // Create DES instances
				            this._des1 = DES.createEncryptor(WordArray.create(key1));
				            this._des2 = DES.createEncryptor(WordArray.create(key2));
				            this._des3 = DES.createEncryptor(WordArray.create(key3));
				        },

				        encryptBlock: function (M, offset) {
				            this._des1.encryptBlock(M, offset);
				            this._des2.decryptBlock(M, offset);
				            this._des3.encryptBlock(M, offset);
				        },

				        decryptBlock: function (M, offset) {
				            this._des3.decryptBlock(M, offset);
				            this._des2.encryptBlock(M, offset);
				            this._des1.decryptBlock(M, offset);
				        },

				        keySize: 192/32,

				        ivSize: 64/32,

				        blockSize: 64/32
				    });

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
				     */
				    C.TripleDES = BlockCipher._createHelper(TripleDES);
				}());


				return CryptoJS.TripleDES;

			}));
	} (tripledes, tripledesExports));
		return tripledesExports;
	}

	var rc4Exports = {};
	var rc4 = {
	  get exports(){ return rc4Exports; },
	  set exports(v){ rc4Exports = v; },
	};

	var hasRequiredRc4;

	function requireRc4 () {
		if (hasRequiredRc4) return rc4Exports;
		hasRequiredRc4 = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var StreamCipher = C_lib.StreamCipher;
				    var C_algo = C.algo;

				    /**
				     * RC4 stream cipher algorithm.
				     */
				    var RC4 = C_algo.RC4 = StreamCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var key = this._key;
				            var keyWords = key.words;
				            var keySigBytes = key.sigBytes;

				            // Init sbox
				            var S = this._S = [];
				            for (var i = 0; i < 256; i++) {
				                S[i] = i;
				            }

				            // Key setup
				            for (var i = 0, j = 0; i < 256; i++) {
				                var keyByteIndex = i % keySigBytes;
				                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

				                j = (j + S[i] + keyByte) % 256;

				                // Swap
				                var t = S[i];
				                S[i] = S[j];
				                S[j] = t;
				            }

				            // Counters
				            this._i = this._j = 0;
				        },

				        _doProcessBlock: function (M, offset) {
				            M[offset] ^= generateKeystreamWord.call(this);
				        },

				        keySize: 256/32,

				        ivSize: 0
				    });

				    function generateKeystreamWord() {
				        // Shortcuts
				        var S = this._S;
				        var i = this._i;
				        var j = this._j;

				        // Generate keystream word
				        var keystreamWord = 0;
				        for (var n = 0; n < 4; n++) {
				            i = (i + 1) % 256;
				            j = (j + S[i]) % 256;

				            // Swap
				            var t = S[i];
				            S[i] = S[j];
				            S[j] = t;

				            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
				        }

				        // Update counters
				        this._i = i;
				        this._j = j;

				        return keystreamWord;
				    }

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
				     */
				    C.RC4 = StreamCipher._createHelper(RC4);

				    /**
				     * Modified RC4 stream cipher algorithm.
				     */
				    var RC4Drop = C_algo.RC4Drop = RC4.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {number} drop The number of keystream words to drop. Default 192
				         */
				        cfg: RC4.cfg.extend({
				            drop: 192
				        }),

				        _doReset: function () {
				            RC4._doReset.call(this);

				            // Drop
				            for (var i = this.cfg.drop; i > 0; i--) {
				                generateKeystreamWord.call(this);
				            }
				        }
				    });

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
				     */
				    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
				}());


				return CryptoJS.RC4;

			}));
	} (rc4, rc4Exports));
		return rc4Exports;
	}

	var rabbitExports = {};
	var rabbit = {
	  get exports(){ return rabbitExports; },
	  set exports(v){ rabbitExports = v; },
	};

	var hasRequiredRabbit;

	function requireRabbit () {
		if (hasRequiredRabbit) return rabbitExports;
		hasRequiredRabbit = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var StreamCipher = C_lib.StreamCipher;
				    var C_algo = C.algo;

				    // Reusable objects
				    var S  = [];
				    var C_ = [];
				    var G  = [];

				    /**
				     * Rabbit stream cipher algorithm
				     */
				    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var K = this._key.words;
				            var iv = this.cfg.iv;

				            // Swap endian
				            for (var i = 0; i < 4; i++) {
				                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
				                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
				            }

				            // Generate initial state values
				            var X = this._X = [
				                K[0], (K[3] << 16) | (K[2] >>> 16),
				                K[1], (K[0] << 16) | (K[3] >>> 16),
				                K[2], (K[1] << 16) | (K[0] >>> 16),
				                K[3], (K[2] << 16) | (K[1] >>> 16)
				            ];

				            // Generate initial counter values
				            var C = this._C = [
				                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
				                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
				                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
				                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
				            ];

				            // Carry bit
				            this._b = 0;

				            // Iterate the system four times
				            for (var i = 0; i < 4; i++) {
				                nextState.call(this);
				            }

				            // Modify the counters
				            for (var i = 0; i < 8; i++) {
				                C[i] ^= X[(i + 4) & 7];
				            }

				            // IV setup
				            if (iv) {
				                // Shortcuts
				                var IV = iv.words;
				                var IV_0 = IV[0];
				                var IV_1 = IV[1];

				                // Generate four subvectors
				                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
				                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
				                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
				                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

				                // Modify counter values
				                C[0] ^= i0;
				                C[1] ^= i1;
				                C[2] ^= i2;
				                C[3] ^= i3;
				                C[4] ^= i0;
				                C[5] ^= i1;
				                C[6] ^= i2;
				                C[7] ^= i3;

				                // Iterate the system four times
				                for (var i = 0; i < 4; i++) {
				                    nextState.call(this);
				                }
				            }
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcut
				            var X = this._X;

				            // Iterate the system
				            nextState.call(this);

				            // Generate four keystream words
				            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
				            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
				            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
				            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

				            for (var i = 0; i < 4; i++) {
				                // Swap endian
				                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
				                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

				                // Encrypt
				                M[offset + i] ^= S[i];
				            }
				        },

				        blockSize: 128/32,

				        ivSize: 64/32
				    });

				    function nextState() {
				        // Shortcuts
				        var X = this._X;
				        var C = this._C;

				        // Save old counter values
				        for (var i = 0; i < 8; i++) {
				            C_[i] = C[i];
				        }

				        // Calculate new counter values
				        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
				        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
				        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
				        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
				        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
				        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
				        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
				        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
				        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

				        // Calculate the g-values
				        for (var i = 0; i < 8; i++) {
				            var gx = X[i] + C[i];

				            // Construct high and low argument for squaring
				            var ga = gx & 0xffff;
				            var gb = gx >>> 16;

				            // Calculate high and low result of squaring
				            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
				            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

				            // High XOR low
				            G[i] = gh ^ gl;
				        }

				        // Calculate new state values
				        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
				        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
				        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
				        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
				        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
				        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
				        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
				        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
				    }

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
				     */
				    C.Rabbit = StreamCipher._createHelper(Rabbit);
				}());


				return CryptoJS.Rabbit;

			}));
	} (rabbit, rabbitExports));
		return rabbitExports;
	}

	var rabbitLegacyExports = {};
	var rabbitLegacy = {
	  get exports(){ return rabbitLegacyExports; },
	  set exports(v){ rabbitLegacyExports = v; },
	};

	var hasRequiredRabbitLegacy;

	function requireRabbitLegacy () {
		if (hasRequiredRabbitLegacy) return rabbitLegacyExports;
		hasRequiredRabbitLegacy = 1;
		(function (module, exports) {
			;(function (root, factory, undef) {
				if ('object' === "object") {
					// CommonJS
					module.exports = exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
				else if (typeof undefined === "function" && undefined.amd) {
					// AMD
					undefined(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
				}
				else {
					// Global (browser)
					factory(root.CryptoJS);
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var StreamCipher = C_lib.StreamCipher;
				    var C_algo = C.algo;

				    // Reusable objects
				    var S  = [];
				    var C_ = [];
				    var G  = [];

				    /**
				     * Rabbit stream cipher algorithm.
				     *
				     * This is a legacy version that neglected to convert the key to little-endian.
				     * This error doesn't affect the cipher's security,
				     * but it does affect its compatibility with other implementations.
				     */
				    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var K = this._key.words;
				            var iv = this.cfg.iv;

				            // Generate initial state values
				            var X = this._X = [
				                K[0], (K[3] << 16) | (K[2] >>> 16),
				                K[1], (K[0] << 16) | (K[3] >>> 16),
				                K[2], (K[1] << 16) | (K[0] >>> 16),
				                K[3], (K[2] << 16) | (K[1] >>> 16)
				            ];

				            // Generate initial counter values
				            var C = this._C = [
				                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
				                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
				                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
				                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
				            ];

				            // Carry bit
				            this._b = 0;

				            // Iterate the system four times
				            for (var i = 0; i < 4; i++) {
				                nextState.call(this);
				            }

				            // Modify the counters
				            for (var i = 0; i < 8; i++) {
				                C[i] ^= X[(i + 4) & 7];
				            }

				            // IV setup
				            if (iv) {
				                // Shortcuts
				                var IV = iv.words;
				                var IV_0 = IV[0];
				                var IV_1 = IV[1];

				                // Generate four subvectors
				                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
				                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
				                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
				                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

				                // Modify counter values
				                C[0] ^= i0;
				                C[1] ^= i1;
				                C[2] ^= i2;
				                C[3] ^= i3;
				                C[4] ^= i0;
				                C[5] ^= i1;
				                C[6] ^= i2;
				                C[7] ^= i3;

				                // Iterate the system four times
				                for (var i = 0; i < 4; i++) {
				                    nextState.call(this);
				                }
				            }
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcut
				            var X = this._X;

				            // Iterate the system
				            nextState.call(this);

				            // Generate four keystream words
				            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
				            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
				            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
				            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

				            for (var i = 0; i < 4; i++) {
				                // Swap endian
				                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
				                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

				                // Encrypt
				                M[offset + i] ^= S[i];
				            }
				        },

				        blockSize: 128/32,

				        ivSize: 64/32
				    });

				    function nextState() {
				        // Shortcuts
				        var X = this._X;
				        var C = this._C;

				        // Save old counter values
				        for (var i = 0; i < 8; i++) {
				            C_[i] = C[i];
				        }

				        // Calculate new counter values
				        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
				        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
				        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
				        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
				        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
				        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
				        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
				        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
				        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

				        // Calculate the g-values
				        for (var i = 0; i < 8; i++) {
				            var gx = X[i] + C[i];

				            // Construct high and low argument for squaring
				            var ga = gx & 0xffff;
				            var gb = gx >>> 16;

				            // Calculate high and low result of squaring
				            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
				            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

				            // High XOR low
				            G[i] = gh ^ gl;
				        }

				        // Calculate new state values
				        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
				        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
				        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
				        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
				        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
				        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
				        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
				        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
				    }

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
				     */
				    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
				}());


				return CryptoJS.RabbitLegacy;

			}));
	} (rabbitLegacy, rabbitLegacyExports));
		return rabbitLegacyExports;
	}

	(function (module, exports) {
		;(function (root, factory, undef) {
			if ('object' === "object") {
				// CommonJS
				module.exports = exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy());
			}
			else if (typeof undefined === "function" && undefined.amd) {
				// AMD
				undefined(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
			}
			else {
				// Global (browser)
				root.CryptoJS = factory(root.CryptoJS);
			}
		}(commonjsGlobal, function (CryptoJS) {

			return CryptoJS;

		}));
	} (cryptoJs$1, cryptoJsExports));

	var cryptoJs = cryptoJsExports;

	// Unique ID creation requires a high quality random # generator. In the browser we therefore
	// require the crypto API and do not support built-in fallback to lower quality random number
	// generators (like Math.random()).
	var getRandomValues;
	var rnds8 = new Uint8Array(16);
	function rng() {
	  // lazy load so that environments that need to polyfill have a chance to do so
	  if (!getRandomValues) {
	    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
	    // find the complete implementation of crypto (msCrypto) on IE11.
	    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

	    if (!getRandomValues) {
	      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
	    }
	  }

	  return getRandomValues(rnds8);
	}

	var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

	function validate$1(uuid) {
	  return typeof uuid === 'string' && REGEX.test(uuid);
	}

	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */

	var byteToHex = [];

	for (var i$1 = 0; i$1 < 256; ++i$1) {
	  byteToHex.push((i$1 + 0x100).toString(16).substr(1));
	}

	function stringify(arr) {
	  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  // Note: Be careful editing this code!  It's been tuned for performance
	  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
	  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
	  // of the following:
	  // - One or more input array values don't map to a hex octet (leading to
	  // "undefined" in the uuid)
	  // - Invalid input values for the RFC `version` or `variant` fields

	  if (!validate$1(uuid)) {
	    throw TypeError('Stringified UUID is invalid');
	  }

	  return uuid;
	}

	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html

	var _nodeId;

	var _clockseq; // Previous uuid creation time


	var _lastMSecs = 0;
	var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

	function v1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || new Array(16);
	  options = options || {};
	  var node = options.node || _nodeId;
	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
	  // specified.  We do this lazily to minimize issues related to insufficient
	  // system entropy.  See #189

	  if (node == null || clockseq == null) {
	    var seedBytes = options.random || (options.rng || rng)();

	    if (node == null) {
	      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
	    }

	    if (clockseq == null) {
	      // Per 4.2.2, randomize (14 bit) clockseq
	      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
	    }
	  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


	  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
	  // cycle to simulate higher resolution clock

	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

	  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	  // time interval


	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  } // Per 4.2.1.2 Throw error if too many uuids are requested


	  if (nsecs >= 10000) {
	    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
	  }

	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

	  msecs += 12219292800000; // `time_low`

	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff; // `time_mid`

	  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff; // `time_high_and_version`

	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

	  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

	  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

	  b[i++] = clockseq & 0xff; // `node`

	  for (var n = 0; n < 6; ++n) {
	    b[i + n] = node[n];
	  }

	  return buf || stringify(b);
	}

	function parse(uuid) {
	  if (!validate$1(uuid)) {
	    throw TypeError('Invalid UUID');
	  }

	  var v;
	  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

	  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
	  arr[1] = v >>> 16 & 0xff;
	  arr[2] = v >>> 8 & 0xff;
	  arr[3] = v & 0xff; // Parse ........-####-....-....-............

	  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
	  arr[5] = v & 0xff; // Parse ........-....-####-....-............

	  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
	  arr[7] = v & 0xff; // Parse ........-....-....-####-............

	  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
	  arr[9] = v & 0xff; // Parse ........-....-....-....-############
	  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

	  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
	  arr[11] = v / 0x100000000 & 0xff;
	  arr[12] = v >>> 24 & 0xff;
	  arr[13] = v >>> 16 & 0xff;
	  arr[14] = v >>> 8 & 0xff;
	  arr[15] = v & 0xff;
	  return arr;
	}

	function stringToBytes(str) {
	  str = unescape(encodeURIComponent(str)); // UTF8 escape

	  var bytes = [];

	  for (var i = 0; i < str.length; ++i) {
	    bytes.push(str.charCodeAt(i));
	  }

	  return bytes;
	}

	var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
	var URL$1 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
	function v35 (name, version, hashfunc) {
	  function generateUUID(value, namespace, buf, offset) {
	    if (typeof value === 'string') {
	      value = stringToBytes(value);
	    }

	    if (typeof namespace === 'string') {
	      namespace = parse(namespace);
	    }

	    if (namespace.length !== 16) {
	      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
	    } // Compute hash of namespace and value, Per 4.3
	    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
	    // hashfunc([...namespace, ... value])`


	    var bytes = new Uint8Array(16 + value.length);
	    bytes.set(namespace);
	    bytes.set(value, namespace.length);
	    bytes = hashfunc(bytes);
	    bytes[6] = bytes[6] & 0x0f | version;
	    bytes[8] = bytes[8] & 0x3f | 0x80;

	    if (buf) {
	      offset = offset || 0;

	      for (var i = 0; i < 16; ++i) {
	        buf[offset + i] = bytes[i];
	      }

	      return buf;
	    }

	    return stringify(bytes);
	  } // Function#name is not settable on some platforms (#270)


	  try {
	    generateUUID.name = name; // eslint-disable-next-line no-empty
	  } catch (err) {} // For CommonJS default export support


	  generateUUID.DNS = DNS;
	  generateUUID.URL = URL$1;
	  return generateUUID;
	}

	/*
	 * Browser-compatible JavaScript MD5
	 *
	 * Modification of JavaScript MD5
	 * https://github.com/blueimp/JavaScript-MD5
	 *
	 * Copyright 2011, Sebastian Tschan
	 * https://blueimp.net
	 *
	 * Licensed under the MIT license:
	 * https://opensource.org/licenses/MIT
	 *
	 * Based on
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */
	function md5(bytes) {
	  if (typeof bytes === 'string') {
	    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

	    bytes = new Uint8Array(msg.length);

	    for (var i = 0; i < msg.length; ++i) {
	      bytes[i] = msg.charCodeAt(i);
	    }
	  }

	  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
	}
	/*
	 * Convert an array of little-endian words to an array of bytes
	 */


	function md5ToHexEncodedArray(input) {
	  var output = [];
	  var length32 = input.length * 32;
	  var hexTab = '0123456789abcdef';

	  for (var i = 0; i < length32; i += 8) {
	    var x = input[i >> 5] >>> i % 32 & 0xff;
	    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
	    output.push(hex);
	  }

	  return output;
	}
	/**
	 * Calculate output length with padding and bit length
	 */


	function getOutputLength(inputLength8) {
	  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
	}
	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length.
	 */


	function wordsToMd5(x, len) {
	  /* append padding */
	  x[len >> 5] |= 0x80 << len % 32;
	  x[getOutputLength(len) - 1] = len;
	  var a = 1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d = 271733878;

	  for (var i = 0; i < x.length; i += 16) {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;
	    a = md5ff(a, b, c, d, x[i], 7, -680876936);
	    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
	    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
	    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
	    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
	    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
	    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
	    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
	    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
	    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
	    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
	    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
	    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
	    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
	    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
	    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
	    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
	    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
	    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
	    b = md5gg(b, c, d, a, x[i], 20, -373897302);
	    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
	    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
	    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
	    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
	    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
	    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
	    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
	    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
	    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
	    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
	    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
	    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
	    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
	    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
	    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
	    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
	    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
	    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
	    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
	    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
	    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
	    d = md5hh(d, a, b, c, x[i], 11, -358537222);
	    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
	    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
	    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
	    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
	    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
	    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
	    a = md5ii(a, b, c, d, x[i], 6, -198630844);
	    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
	    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
	    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
	    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
	    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
	    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
	    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
	    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
	    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
	    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
	    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
	    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
	    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
	    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
	    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
	    a = safeAdd(a, olda);
	    b = safeAdd(b, oldb);
	    c = safeAdd(c, oldc);
	    d = safeAdd(d, oldd);
	  }

	  return [a, b, c, d];
	}
	/*
	 * Convert an array bytes to an array of little-endian words
	 * Characters >255 have their high-byte silently ignored.
	 */


	function bytesToWords(input) {
	  if (input.length === 0) {
	    return [];
	  }

	  var length8 = input.length * 8;
	  var output = new Uint32Array(getOutputLength(length8));

	  for (var i = 0; i < length8; i += 8) {
	    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
	  }

	  return output;
	}
	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */


	function safeAdd(x, y) {
	  var lsw = (x & 0xffff) + (y & 0xffff);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return msw << 16 | lsw & 0xffff;
	}
	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */


	function bitRotateLeft(num, cnt) {
	  return num << cnt | num >>> 32 - cnt;
	}
	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */


	function md5cmn(q, a, b, x, s, t) {
	  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
	}

	function md5ff(a, b, c, d, x, s, t) {
	  return md5cmn(b & c | ~b & d, a, b, x, s, t);
	}

	function md5gg(a, b, c, d, x, s, t) {
	  return md5cmn(b & d | c & ~d, a, b, x, s, t);
	}

	function md5hh(a, b, c, d, x, s, t) {
	  return md5cmn(b ^ c ^ d, a, b, x, s, t);
	}

	function md5ii(a, b, c, d, x, s, t) {
	  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
	}

	var v3 = v35('v3', 0x30, md5);

	function v4(options, buf, offset) {
	  options = options || {};
	  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

	  rnds[6] = rnds[6] & 0x0f | 0x40;
	  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

	  if (buf) {
	    offset = offset || 0;

	    for (var i = 0; i < 16; ++i) {
	      buf[offset + i] = rnds[i];
	    }

	    return buf;
	  }

	  return stringify(rnds);
	}

	// Adapted from Chris Veness' SHA1 code at
	// http://www.movable-type.co.uk/scripts/sha1.html
	function f$1(s, x, y, z) {
	  switch (s) {
	    case 0:
	      return x & y ^ ~x & z;

	    case 1:
	      return x ^ y ^ z;

	    case 2:
	      return x & y ^ x & z ^ y & z;

	    case 3:
	      return x ^ y ^ z;
	  }
	}

	function ROTL(x, n) {
	  return x << n | x >>> 32 - n;
	}

	function sha1$1(bytes) {
	  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
	  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

	  if (typeof bytes === 'string') {
	    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

	    bytes = [];

	    for (var i = 0; i < msg.length; ++i) {
	      bytes.push(msg.charCodeAt(i));
	    }
	  } else if (!Array.isArray(bytes)) {
	    // Convert Array-like to Array
	    bytes = Array.prototype.slice.call(bytes);
	  }

	  bytes.push(0x80);
	  var l = bytes.length / 4 + 2;
	  var N = Math.ceil(l / 16);
	  var M = new Array(N);

	  for (var _i = 0; _i < N; ++_i) {
	    var arr = new Uint32Array(16);

	    for (var j = 0; j < 16; ++j) {
	      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
	    }

	    M[_i] = arr;
	  }

	  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
	  M[N - 1][14] = Math.floor(M[N - 1][14]);
	  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

	  for (var _i2 = 0; _i2 < N; ++_i2) {
	    var W = new Uint32Array(80);

	    for (var t = 0; t < 16; ++t) {
	      W[t] = M[_i2][t];
	    }

	    for (var _t = 16; _t < 80; ++_t) {
	      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
	    }

	    var a = H[0];
	    var b = H[1];
	    var c = H[2];
	    var d = H[3];
	    var e = H[4];

	    for (var _t2 = 0; _t2 < 80; ++_t2) {
	      var s = Math.floor(_t2 / 20);
	      var T = ROTL(a, 5) + f$1(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
	      e = d;
	      d = c;
	      c = ROTL(b, 30) >>> 0;
	      b = a;
	      a = T;
	    }

	    H[0] = H[0] + a >>> 0;
	    H[1] = H[1] + b >>> 0;
	    H[2] = H[2] + c >>> 0;
	    H[3] = H[3] + d >>> 0;
	    H[4] = H[4] + e >>> 0;
	  }

	  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
	}

	var v5 = v35('v5', 0x50, sha1$1);

	var nil = '00000000-0000-0000-0000-000000000000';

	function version$s(uuid) {
	  if (!validate$1(uuid)) {
	    throw TypeError('Invalid UUID');
	  }

	  return parseInt(uuid.substr(14, 1), 16);
	}

	var esmBrowser = /*#__PURE__*/Object.freeze({
		__proto__: null,
		NIL: nil,
		parse: parse,
		stringify: stringify,
		v1: v1,
		v3: v3,
		v4: v4,
		v5: v5,
		validate: validate$1,
		version: version$s
	});

	var require$$1$6 = /*@__PURE__*/getAugmentedNamespace(esmBrowser);

	(function (exports) {
	  "use strict";

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	    Object.defineProperty(o, "default", {
	      enumerable: true,
	      value: v
	    });
	  } : function (o, v) {
	    o["default"] = v;
	  });
	  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	  };
	  var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	    function adopt(value) {
	      return value instanceof P ? value : new P(function (resolve) {
	        resolve(value);
	      });
	    }
	    return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) {
	        try {
	          step(generator.next(value));
	        } catch (e) {
	          reject(e);
	        }
	      }
	      function rejected(value) {
	        try {
	          step(generator["throw"](value));
	        } catch (e) {
	          reject(e);
	        }
	      }
	      function step(result) {
	        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	      }
	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	  };
	  var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	    var _ = {
	        label: 0,
	        sent: function () {
	          if (t[0] & 1) throw t[1];
	          return t[1];
	        },
	        trys: [],
	        ops: []
	      },
	      f,
	      y,
	      t,
	      g;
	    return g = {
	      next: verb(0),
	      "throw": verb(1),
	      "return": verb(2)
	    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	      return this;
	    }), g;
	    function verb(n) {
	      return function (v) {
	        return step([n, v]);
	      };
	    }
	    function step(op) {
	      if (f) throw new TypeError("Generator is already executing.");
	      while (g && (g = 0, op[0] && (_ = 0)), _) try {
	        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	        if (y = 0, t) op = [op[0] & 2, t.value];
	        switch (op[0]) {
	          case 0:
	          case 1:
	            t = op;
	            break;
	          case 4:
	            _.label++;
	            return {
	              value: op[1],
	              done: false
	            };
	          case 5:
	            _.label++;
	            y = op[1];
	            op = [0];
	            continue;
	          case 7:
	            op = _.ops.pop();
	            _.trys.pop();
	            continue;
	          default:
	            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	              _ = 0;
	              continue;
	            }
	            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	              _.label = op[1];
	              break;
	            }
	            if (op[0] === 6 && _.label < t[1]) {
	              _.label = t[1];
	              t = op;
	              break;
	            }
	            if (t && _.label < t[2]) {
	              _.label = t[2];
	              _.ops.push(op);
	              break;
	            }
	            if (t[2]) _.ops.pop();
	            _.trys.pop();
	            continue;
	        }
	        op = body.call(thisArg, _);
	      } catch (e) {
	        op = [6, e];
	        y = 0;
	      } finally {
	        f = t = 0;
	      }
	      if (op[0] & 5) throw op[1];
	      return {
	        value: op[0] ? op[1] : void 0,
	        done: true
	      };
	    }
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.decryptFile = exports.encryptFile = exports.decryptFileOnBrowser = exports.encryptFileOnBrowser = exports.decryptString = exports.encryptString = exports.createRandomKey = void 0;
	  var crypto = __importStar(cryptoJsExports);
	  var uuid = __importStar(require$$1$6);
	  exports.createRandomKey = uuid.v4;
	  var encryptString = function (message, key) {
	    return crypto.AES.encrypt(message, key).toString();
	  };
	  exports.encryptString = encryptString;
	  var decryptString = function (cipherText, key) {
	    return crypto.AES.decrypt(cipherText, key).toString(crypto.enc.Utf8);
	  };
	  exports.decryptString = decryptString;
	  var encryptFileOnBrowser = function (file, key) {
	    return __awaiter(void 0, void 0, void 0, function () {
	      var crypto, subtle, aes, aesAlgorithmKeyGen, keyData, aesKey, _a, _b, _c;
	      return __generator(this, function (_d) {
	        switch (_d.label) {
	          case 0:
	            crypto = window.crypto;
	            subtle = crypto.subtle;
	            aes = {
	              name: "AES-CBC",
	              iv: new Uint8Array(16)
	            };
	            aesAlgorithmKeyGen = {
	              name: "AES-CBC",
	              length: 256
	            };
	            keyData = new TextEncoder().encode(key.replace(/-/g, ""));
	            return [4 /*yield*/, subtle.importKey("raw", keyData, aesAlgorithmKeyGen, true, ["encrypt"])];
	          case 1:
	            aesKey = _d.sent();
	            _b = (_a = subtle).encrypt;
	            _c = [aes, aesKey];
	            return [4 /*yield*/, file.arrayBuffer()];
	          case 2:
	            return [4 /*yield*/, _b.apply(_a, _c.concat([_d.sent()]))];
	          case 3:
	            return [2 /*return*/, _d.sent()];
	        }
	      });
	    });
	  };
	  exports.encryptFileOnBrowser = encryptFileOnBrowser;
	  var decryptFileOnBrowser = function (encryptedFile, key) {
	    return __awaiter(void 0, void 0, void 0, function () {
	      var crypto, subtle, aes, aesAlgorithmKeyGen, keyData, aesKey;
	      return __generator(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            crypto = window.crypto;
	            subtle = crypto.subtle;
	            aes = {
	              name: "AES-CBC",
	              iv: new Uint8Array(16)
	            };
	            aesAlgorithmKeyGen = {
	              name: "AES-CBC",
	              length: 256
	            };
	            keyData = new TextEncoder().encode(key.replace(/-/g, ""));
	            return [4 /*yield*/, subtle.importKey("raw", keyData, aesAlgorithmKeyGen, true, ["decrypt"])];
	          case 1:
	            aesKey = _a.sent();
	            return [4 /*yield*/, subtle.decrypt(aes, aesKey, encryptedFile)];
	          case 2:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  exports.decryptFileOnBrowser = decryptFileOnBrowser;
	  exports.encryptFile = exports.encryptFileOnBrowser;
	  exports.decryptFile = exports.decryptFileOnBrowser;
	})(cryptoHelper$1);
	var cryptoHelper = /*@__PURE__*/getDefaultExportFromCjs(cryptoHelper$1);

	var base$2 = {};

	var upload = {};

	async function* _batch(size, iterable) {
	    let dataBatch = [];
	    for await (const data of iterable) {
	        dataBatch.push(data);
	        if (dataBatch.length === size) {
	            yield dataBatch;
	            dataBatch = [];
	        }
	    }
	    if (dataBatch.length > 0) {
	        yield dataBatch;
	    }
	}
	function* _syncBatch(size, iterable) {
	    let dataBatch = [];
	    for (const data of iterable) {
	        dataBatch.push(data);
	        if (dataBatch.length === size) {
	            yield dataBatch;
	            dataBatch = [];
	        }
	    }
	    if (dataBatch.length > 0) {
	        yield dataBatch;
	    }
	}
	function batch$2(size, iterable) {
	    if (iterable === undefined) {
	        return curriedIterable => batch$2(size, curriedIterable);
	    }
	    if (iterable[Symbol.asyncIterator]) {
	        return _batch(size, iterable);
	    }
	    return _syncBatch(size, iterable);
	}

	const TIMEOUT = Symbol('TIMEOUT');
	const createTimer = (duration) => {
	    let timeoutId;
	    return [
	        new Promise(resolve => {
	            timeoutId = setTimeout(() => resolve(TIMEOUT), duration);
	        }),
	        () => {
	            clearTimeout(timeoutId);
	        },
	    ];
	};
	// Like `batch` but flushes early if the `timeout` is reached
	// NOTE: The strategy is to only hold onto a single item for a maximum of `timeout` ms.
	async function* _batchWithTimeout(size, timeout, iterable) {
	    const iterator = iterable[Symbol.asyncIterator]();
	    let pendingData;
	    let batchData = [];
	    let timer;
	    let clearTimer;
	    const startTimer = () => {
	        deleteTimer();
	        [timer, clearTimer] = createTimer(timeout);
	    };
	    const deleteTimer = () => {
	        if (clearTimer) {
	            clearTimer();
	        }
	        timer = undefined;
	    };
	    pendingData = iterator.next();
	    while (true) {
	        const res = await (timer ? Promise.race([pendingData, timer]) : pendingData);
	        if (res === TIMEOUT || res.done) {
	            // Flush early (before we reach the batch size)
	            if (batchData.length) {
	                yield batchData;
	                batchData = [];
	            }
	            deleteTimer();
	            // And exit appropriately
	            if (res !== TIMEOUT) {
	                // done
	                break;
	            }
	            continue;
	        }
	        // Fetch next item early doors (before we potentially yield)
	        pendingData = iterator.next();
	        // Then handle the value
	        batchData.push(res.value);
	        if (batchData.length === 1) {
	            // Start timer once we have at least 1 item ready to go
	            startTimer();
	        }
	        if (batchData.length === size) {
	            yield batchData;
	            batchData = [];
	            deleteTimer();
	            continue;
	        }
	    }
	}
	function batchWithTimeout(size, timeout, iterable) {
	    if (iterable === undefined) {
	        return curriedIterable => batchWithTimeout(size, timeout, curriedIterable);
	    }
	    if (iterable[Symbol.asyncIterator] && timeout !== Infinity) {
	        return _batchWithTimeout(size, timeout, iterable);
	    }
	    // For sync iterables or an infinite timeout, the timeout is irrelevant so just fallback to regular `batch`.
	    return batch$2(size, iterable);
	}

	function getIterator(iterable) {
	    if (typeof iterable.next === 'function') {
	        return iterable;
	    }
	    if (typeof iterable[Symbol.iterator] === 'function') {
	        return iterable[Symbol.iterator]();
	    }
	    if (typeof iterable[Symbol.asyncIterator] === 'function') {
	        return iterable[Symbol.asyncIterator]();
	    }
	    throw new TypeError('"values" does not to conform to any of the iterator or iterable protocols');
	}

	function defer() {
	    let reject;
	    let resolve;
	    const promise = new Promise((resolveFunc, rejectFunc) => {
	        resolve = resolveFunc;
	        reject = rejectFunc;
	    });
	    return {
	        promise,
	        reject,
	        resolve,
	    };
	}

	function _buffer(size, iterable) {
	    const iterator = getIterator(iterable);
	    const resultQueue = [];
	    const readQueue = [];
	    let reading = false;
	    let ended = false;
	    function fulfillReadQueue() {
	        while (readQueue.length > 0 && resultQueue.length > 0) {
	            const readDeferred = readQueue.shift();
	            const { error, value } = resultQueue.shift();
	            if (error) {
	                readDeferred.reject(error);
	            }
	            else {
	                readDeferred.resolve({ done: false, value });
	            }
	        }
	        while (readQueue.length > 0 && ended) {
	            const { resolve } = readQueue.shift();
	            resolve({ done: true, value: undefined });
	        }
	    }
	    async function fillQueue() {
	        if (ended) {
	            return;
	        }
	        if (reading) {
	            return;
	        }
	        if (resultQueue.length >= size) {
	            return;
	        }
	        reading = true;
	        try {
	            const { done, value } = await iterator.next();
	            if (done) {
	                ended = true;
	            }
	            else {
	                resultQueue.push({ value });
	            }
	        }
	        catch (error) {
	            ended = true;
	            resultQueue.push({ error });
	        }
	        fulfillReadQueue();
	        reading = false;
	        fillQueue();
	    }
	    async function next() {
	        if (resultQueue.length > 0) {
	            const { error, value } = resultQueue.shift();
	            if (error) {
	                throw error;
	            }
	            fillQueue();
	            return { done: false, value };
	        }
	        if (ended) {
	            return { done: true, value: undefined }; // stupid ts
	        }
	        const deferred = defer();
	        readQueue.push(deferred);
	        fillQueue();
	        return deferred.promise;
	    }
	    const asyncIterableIterator = {
	        next,
	        [Symbol.asyncIterator]: () => asyncIterableIterator,
	    };
	    return asyncIterableIterator;
	}
	function* syncBuffer(size, iterable) {
	    const valueQueue = [];
	    let e;
	    try {
	        for (const value of iterable) {
	            valueQueue.push(value);
	            if (valueQueue.length <= size) {
	                continue;
	            }
	            yield valueQueue.shift();
	        }
	    }
	    catch (error) {
	        e = error;
	    }
	    for (const value of valueQueue) {
	        yield value;
	    }
	    if (e) {
	        throw e;
	    }
	}
	function buffer$1(size, iterable) {
	    if (iterable === undefined) {
	        return curriedIterable => buffer$1(size, curriedIterable);
	    }
	    if (size === 0) {
	        return iterable;
	    }
	    if (iterable[Symbol.asyncIterator]) {
	        return _buffer(size, iterable);
	    }
	    return syncBuffer(size, iterable);
	}

	async function _collect(iterable) {
	    const values = [];
	    for await (const value of iterable) {
	        values.push(value);
	    }
	    return values;
	}
	function collect(iterable) {
	    if (iterable[Symbol.asyncIterator]) {
	        return _collect(iterable);
	    }
	    return Array.from(iterable);
	}

	async function* _concat(iterables) {
	    for await (const iterable of iterables) {
	        yield* iterable;
	    }
	}
	function* _syncConcat(iterables) {
	    for (const iterable of iterables) {
	        yield* iterable;
	    }
	}
	function concat$4(...iterables) {
	    const hasAnyAsync = iterables.find(itr => itr[Symbol.asyncIterator] !== undefined);
	    if (hasAnyAsync) {
	        return _concat(iterables);
	    }
	    else {
	        return _syncConcat(iterables);
	    }
	}

	async function _consume(iterable) {
	    for await (const val of iterable) {
	        // do nothing
	    }
	}
	function consume(iterable) {
	    if (iterable[Symbol.asyncIterator]) {
	        return _consume(iterable);
	    }
	    for (const val of iterable) {
	        // do nothing
	    }
	}

	async function* _filter(filterFunc, iterable) {
	    for await (const data of iterable) {
	        if (await filterFunc(data)) {
	            yield data;
	        }
	    }
	}
	function filter$1(filterFunc, iterable) {
	    if (iterable === undefined) {
	        return (curriedIterable) => _filter(filterFunc, curriedIterable);
	    }
	    return _filter(filterFunc, iterable);
	}

	async function* flatten$1(iterable) {
	    for await (const maybeItr of iterable) {
	        if (maybeItr && typeof maybeItr !== 'string' && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator])) {
	            yield* flatten$1(maybeItr);
	        }
	        else {
	            yield maybeItr;
	        }
	    }
	}

	async function* _map(func, iterable) {
	    for await (const val of iterable) {
	        yield await func(val);
	    }
	}
	function map$1(func, iterable) {
	    if (iterable === undefined) {
	        return curriedIterable => _map(func, curriedIterable);
	    }
	    return _map(func, iterable);
	}

	function flatMap(func, iterable) {
	    if (iterable === undefined) {
	        return curriedIterable => flatMap(func, curriedIterable);
	    }
	    return filter$1(i => i !== undefined && i !== null, flatten$1(map$1(func, iterable)));
	}

	function _flatTransform(concurrency, func, iterable) {
	    const iterator = getIterator(iterable);
	    const resultQueue = [];
	    const readQueue = [];
	    let ended = false;
	    let reading = false;
	    let inflightCount = 0;
	    let lastError = null;
	    function fulfillReadQueue() {
	        while (readQueue.length > 0 && resultQueue.length > 0) {
	            const { resolve } = readQueue.shift();
	            const value = resultQueue.shift();
	            resolve({ done: false, value });
	        }
	        while (readQueue.length > 0 && inflightCount === 0 && ended) {
	            const { resolve, reject } = readQueue.shift();
	            if (lastError) {
	                reject(lastError);
	                lastError = null;
	            }
	            else {
	                resolve({ done: true, value: undefined });
	            }
	        }
	    }
	    async function fillQueue() {
	        if (ended) {
	            fulfillReadQueue();
	            return;
	        }
	        if (reading) {
	            return;
	        }
	        if (inflightCount + resultQueue.length >= concurrency) {
	            return;
	        }
	        reading = true;
	        inflightCount++;
	        try {
	            const { done, value } = await iterator.next();
	            if (done) {
	                ended = true;
	                inflightCount--;
	                fulfillReadQueue();
	            }
	            else {
	                mapAndQueue(value);
	            }
	        }
	        catch (error) {
	            ended = true;
	            inflightCount--;
	            lastError = error;
	            fulfillReadQueue();
	        }
	        reading = false;
	        fillQueue();
	    }
	    async function mapAndQueue(itrValue) {
	        try {
	            const value = await func(itrValue);
	            if (value && value[Symbol.asyncIterator]) {
	                for await (const asyncVal of value) {
	                    resultQueue.push(asyncVal);
	                }
	            }
	            else {
	                resultQueue.push(value);
	            }
	        }
	        catch (error) {
	            ended = true;
	            lastError = error;
	        }
	        inflightCount--;
	        fulfillReadQueue();
	        fillQueue();
	    }
	    async function next() {
	        if (resultQueue.length === 0) {
	            const deferred = defer();
	            readQueue.push(deferred);
	            fillQueue();
	            return deferred.promise;
	        }
	        const value = resultQueue.shift();
	        fillQueue();
	        return { done: false, value };
	    }
	    const asyncIterableIterator = {
	        next,
	        [Symbol.asyncIterator]: () => asyncIterableIterator,
	    };
	    return asyncIterableIterator;
	}
	function flatTransform(concurrency, func, iterable) {
	    if (func === undefined) {
	        return (curriedFunc, curriedIterable) => curriedIterable
	            ? flatTransform(concurrency, curriedFunc, curriedIterable)
	            : flatTransform(concurrency, curriedFunc);
	    }
	    if (iterable === undefined) {
	        return (curriedIterable) => flatTransform(concurrency, func, curriedIterable);
	    }
	    return filter$1(i => i !== undefined && i !== null, flatten$1(_flatTransform(concurrency, func, iterable)));
	}

	async function onceReadable(stream) {
	    return new Promise(resolve => {
	        stream.once('readable', () => {
	            resolve();
	        });
	    });
	}
	async function* _fromStream(stream) {
	    while (true) {
	        const data = stream.read();
	        if (data !== null) {
	            yield data;
	            continue;
	        }
	        if (stream._readableState.ended) {
	            break;
	        }
	        await onceReadable(stream);
	    }
	}
	function fromStream(stream) {
	    if (typeof stream[Symbol.asyncIterator] === 'function') {
	        return stream;
	    }
	    return _fromStream(stream);
	}

	async function* merge$1(...iterables) {
	    const sources = new Set(iterables.map(getIterator));
	    while (sources.size > 0) {
	        for (const iterator of sources) {
	            const nextVal = await iterator.next();
	            if (nextVal.done) {
	                sources.delete(iterator);
	            }
	            else {
	                yield nextVal.value;
	            }
	        }
	    }
	}

	function pipeline(firstFn, ...fns) {
	    let previousFn = firstFn();
	    for (const func of fns) {
	        previousFn = func(previousFn);
	    }
	    return previousFn;
	}

	async function* _parallelMap(concurrency, func, iterable) {
	    let transformError = null;
	    const wrapFunc = value => ({
	        value: func(value),
	    });
	    const stopOnError = async function* (source) {
	        for await (const value of source) {
	            if (transformError) {
	                return;
	            }
	            yield value;
	        }
	    };
	    const output = pipeline(() => iterable, buffer$1(1), stopOnError, map$1(wrapFunc), buffer$1(concurrency - 1));
	    const itr = getIterator(output);
	    while (true) {
	        const { value, done } = await itr.next();
	        if (done) {
	            break;
	        }
	        try {
	            const val = await value.value;
	            if (!transformError) {
	                yield val;
	            }
	        }
	        catch (error) {
	            transformError = error;
	        }
	    }
	    if (transformError) {
	        throw transformError;
	    }
	}
	function parallelMap(concurrency, func, iterable) {
	    if (func === undefined) {
	        return (curriedFunc, curriedIterable) => parallelMap(concurrency, curriedFunc, curriedIterable);
	    }
	    if (iterable === undefined) {
	        return curriedIterable => parallelMap(concurrency, func, curriedIterable);
	    }
	    if (concurrency === 1) {
	        return map$1(func, iterable);
	    }
	    return _parallelMap(concurrency, func, iterable);
	}

	function parallelFlatMap(concurrency, func, iterable) {
	    if (func === undefined) {
	        return (curriedFunc, curriedIterable) => curriedIterable
	            ? parallelFlatMap(concurrency, curriedFunc, curriedIterable)
	            : parallelFlatMap(concurrency, curriedFunc);
	    }
	    if (iterable === undefined) {
	        return (curriedIterable) => parallelFlatMap(concurrency, func, curriedIterable);
	    }
	    return filter$1(i => i !== undefined && i !== null, flatten$1(parallelMap(concurrency, func, iterable)));
	}

	async function* parallelMerge(...iterables) {
	    const inputs = iterables.map(getIterator);
	    const concurrentWork = new Set();
	    const values = new Map();
	    let lastError = null;
	    let errCb = null;
	    let valueCb = null;
	    const notifyError = err => {
	        lastError = err;
	        if (errCb) {
	            errCb(err);
	        }
	    };
	    const notifyDone = value => {
	        if (valueCb) {
	            valueCb(value);
	        }
	    };
	    const waitForQueue = () => new Promise((resolve, reject) => {
	        if (lastError) {
	            reject(lastError);
	        }
	        if (values.size > 0) {
	            return resolve();
	        }
	        valueCb = resolve;
	        errCb = reject;
	    });
	    const queueNext = input => {
	        const nextVal = Promise.resolve(input.next()).then(async ({ done, value }) => {
	            if (!done) {
	                values.set(input, value);
	            }
	            concurrentWork.delete(nextVal);
	        });
	        concurrentWork.add(nextVal);
	        nextVal.then(notifyDone, notifyError);
	    };
	    for (const input of inputs) {
	        queueNext(input);
	    }
	    while (true) {
	        // We technically don't have to check `values.size` as the for loop should have emptied it
	        // However I haven't yet found specs verifying that behavior, only tests
	        // the guard in waitForQueue() checking for values is in place for the same reason
	        if (concurrentWork.size === 0 && values.size === 0) {
	            return;
	        }
	        await waitForQueue();
	        for (const [input, value] of values) {
	            values.delete(input);
	            yield value;
	            queueNext(input);
	        }
	    }
	}

	async function _reduce(func, start, iterable) {
	    let value = start;
	    for await (const nextItem of iterable) {
	        value = await func(value, nextItem);
	    }
	    return value;
	}
	function reduce$1(func, start, iterable) {
	    if (start === undefined) {
	        return (curriedStart, curriedIterable) => curriedIterable ? _reduce(func, curriedStart, curriedIterable) : reduce$1(func, curriedStart);
	    }
	    if (iterable === undefined) {
	        return (curriedIterable) => reduce$1(func, start, curriedIterable);
	    }
	    return _reduce(func, start, iterable);
	}

	async function* _take(count, iterable) {
	    let taken = 0;
	    for await (const val of iterable) {
	        yield await val;
	        taken++;
	        if (taken >= count) {
	            break;
	        }
	    }
	}
	function* _syncTake(count, iterable) {
	    let taken = 0;
	    for (const val of iterable) {
	        yield val;
	        taken++;
	        if (taken >= count) {
	            break;
	        }
	    }
	}
	function take$1(count, iterable) {
	    if (iterable === undefined) {
	        return curriedIterable => take$1(count, curriedIterable);
	    }
	    if (iterable[Symbol.asyncIterator]) {
	        return _take(count, iterable);
	    }
	    return _syncTake(count, iterable);
	}

	async function* _asyncTap(func, iterable) {
	    for await (const val of iterable) {
	        await func(val);
	        yield val;
	    }
	}
	function tap(func, iterable) {
	    if (iterable === undefined) {
	        return (curriedIterable) => _asyncTap(func, curriedIterable);
	    }
	    return _asyncTap(func, iterable);
	}

	const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
	function _throttle(limit, interval, iterable) {
	    if (!Number.isFinite(limit)) {
	        throw new TypeError('Expected `limit` to be a finite number');
	    }
	    if (limit <= 0) {
	        throw new TypeError('Expected `limit` to be greater than 0');
	    }
	    if (!Number.isFinite(interval)) {
	        throw new TypeError('Expected `interval` to be a finite number');
	    }
	    return (async function* __throttle() {
	        let sent = 0;
	        let time;
	        for await (const val of iterable) {
	            if (sent < limit) {
	                if (typeof time === 'undefined') {
	                    time = Date.now();
	                }
	                sent++;
	                yield val;
	                continue;
	            }
	            // Only wait if the interval hasn't already passed while we were
	            // yielding the previous values.
	            const elapsedMs = Date.now() - time;
	            const waitFor = interval - elapsedMs;
	            if (waitFor > 0) {
	                await sleep(waitFor);
	            }
	            time = Date.now();
	            sent = 1;
	            yield val;
	        }
	    })();
	}
	function throttle(limit, interval, iterable) {
	    if (iterable === undefined) {
	        return (curriedIterable) => _throttle(limit, interval, curriedIterable);
	    }
	    return _throttle(limit, interval, iterable);
	}

	function addTime(a, b) {
	    let seconds = a[0] + b[0];
	    let nanoseconds = a[1] + b[1];
	    if (nanoseconds >= 1000000000) {
	        const remainder = nanoseconds % 1000000000;
	        seconds += (nanoseconds - remainder) / 1000000000;
	        nanoseconds = remainder;
	    }
	    return [seconds, nanoseconds];
	}
	async function* _asyncTime(config, iterable) {
	    const itr = iterable[Symbol.asyncIterator]();
	    let total = [0, 0];
	    while (true) {
	        const start = process.hrtime();
	        const { value, done } = await itr.next();
	        const delta = process.hrtime(start);
	        total = addTime(total, delta);
	        if (config.progress) {
	            config.progress(delta, total);
	        }
	        if (done) {
	            if (config.total) {
	                config.total(total);
	            }
	            return value;
	        }
	        yield value;
	    }
	}
	function* _syncTime(config, iterable) {
	    const itr = iterable[Symbol.iterator]();
	    let total = [0, 0];
	    while (true) {
	        const start = process.hrtime();
	        const { value, done } = itr.next();
	        const delta = process.hrtime(start);
	        total = addTime(total, delta);
	        if (config.progress) {
	            config.progress(delta, total);
	        }
	        if (done) {
	            if (config.total) {
	                config.total(total);
	            }
	            return value;
	        }
	        yield value;
	    }
	}
	function time(config = {}, iterable) {
	    if (iterable === undefined) {
	        return curriedIterable => time(config, curriedIterable);
	    }
	    if (iterable[Symbol.asyncIterator] !== undefined) {
	        return _asyncTime(config, iterable);
	    }
	    else {
	        return _syncTime(config, iterable);
	    }
	}

	function _transform(concurrency, func, iterable) {
	    const iterator = getIterator(iterable);
	    const resultQueue = [];
	    const readQueue = [];
	    let ended = false;
	    let reading = false;
	    let inflightCount = 0;
	    let lastError = null;
	    function fulfillReadQueue() {
	        while (readQueue.length > 0 && resultQueue.length > 0) {
	            const { resolve } = readQueue.shift();
	            const value = resultQueue.shift();
	            resolve({ done: false, value });
	        }
	        while (readQueue.length > 0 && inflightCount === 0 && ended) {
	            const { resolve, reject } = readQueue.shift();
	            if (lastError) {
	                reject(lastError);
	                lastError = null;
	            }
	            else {
	                resolve({ done: true, value: undefined });
	            }
	        }
	    }
	    async function fillQueue() {
	        if (ended) {
	            fulfillReadQueue();
	            return;
	        }
	        if (reading) {
	            return;
	        }
	        if (inflightCount + resultQueue.length >= concurrency) {
	            return;
	        }
	        reading = true;
	        inflightCount++;
	        try {
	            const { done, value } = await iterator.next();
	            if (done) {
	                ended = true;
	                inflightCount--;
	                fulfillReadQueue();
	            }
	            else {
	                mapAndQueue(value);
	            }
	        }
	        catch (error) {
	            ended = true;
	            inflightCount--;
	            lastError = error;
	            fulfillReadQueue();
	        }
	        reading = false;
	        fillQueue();
	    }
	    async function mapAndQueue(itrValue) {
	        try {
	            const value = await func(itrValue);
	            resultQueue.push(value);
	        }
	        catch (error) {
	            ended = true;
	            lastError = error;
	        }
	        inflightCount--;
	        fulfillReadQueue();
	        fillQueue();
	    }
	    async function next() {
	        if (resultQueue.length === 0) {
	            const deferred = defer();
	            readQueue.push(deferred);
	            fillQueue();
	            return deferred.promise;
	        }
	        const value = resultQueue.shift();
	        fillQueue();
	        return { done: false, value };
	    }
	    const asyncIterableIterator = {
	        next,
	        [Symbol.asyncIterator]: () => asyncIterableIterator,
	    };
	    return asyncIterableIterator;
	}
	function transform(concurrency, func, iterable) {
	    if (func === undefined) {
	        return (curriedFunc, curriedIterable) => curriedIterable
	            ? transform(concurrency, curriedFunc, curriedIterable)
	            : transform(concurrency, curriedFunc);
	    }
	    if (iterable === undefined) {
	        return (curriedIterable) => transform(concurrency, func, curriedIterable);
	    }
	    return _transform(concurrency, func, iterable);
	}

	async function _writeToStream(stream, iterable) {
	    let lastError = null;
	    let errCb = null;
	    let drainCb = null;
	    const notifyError = err => {
	        lastError = err;
	        if (errCb) {
	            errCb(err);
	        }
	    };
	    const notifyDrain = () => {
	        if (drainCb) {
	            drainCb();
	        }
	    };
	    const cleanup = () => {
	        stream.removeListener('error', notifyError);
	        stream.removeListener('drain', notifyDrain);
	    };
	    stream.once('error', notifyError);
	    const waitForDrain = () => new Promise((resolve, reject) => {
	        if (lastError) {
	            return reject(lastError);
	        }
	        stream.once('drain', notifyDrain);
	        drainCb = resolve;
	        errCb = reject;
	    });
	    for await (const value of iterable) {
	        if (stream.write(value) === false) {
	            await waitForDrain();
	        }
	        if (lastError) {
	            break;
	        }
	    }
	    cleanup();
	    if (lastError) {
	        throw lastError;
	    }
	}
	function writeToStream(stream, iterable) {
	    if (iterable === undefined) {
	        return (curriedIterable) => _writeToStream(stream, curriedIterable);
	    }
	    return _writeToStream(stream, iterable);
	}

	var pRetryExports = {};
	var pRetry$1 = {
	  get exports(){ return pRetryExports; },
	  set exports(v){ pRetryExports = v; },
	};

	var retryExports = {};
	var retry$2 = {
	  get exports(){ return retryExports; },
	  set exports(v){ retryExports = v; },
	};

	var retry$1 = {};

	function RetryOperation(timeouts, options) {
	  // Compatibility for the old (timeouts, retryForever) signature
	  if (typeof options === 'boolean') {
	    options = { forever: options };
	  }

	  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
	  this._timeouts = timeouts;
	  this._options = options || {};
	  this._maxRetryTime = options && options.maxRetryTime || Infinity;
	  this._fn = null;
	  this._errors = [];
	  this._attempts = 1;
	  this._operationTimeout = null;
	  this._operationTimeoutCb = null;
	  this._timeout = null;
	  this._operationStart = null;
	  this._timer = null;

	  if (this._options.forever) {
	    this._cachedTimeouts = this._timeouts.slice(0);
	  }
	}
	var retry_operation = RetryOperation;

	RetryOperation.prototype.reset = function() {
	  this._attempts = 1;
	  this._timeouts = this._originalTimeouts.slice(0);
	};

	RetryOperation.prototype.stop = function() {
	  if (this._timeout) {
	    clearTimeout(this._timeout);
	  }
	  if (this._timer) {
	    clearTimeout(this._timer);
	  }

	  this._timeouts       = [];
	  this._cachedTimeouts = null;
	};

	RetryOperation.prototype.retry = function(err) {
	  if (this._timeout) {
	    clearTimeout(this._timeout);
	  }

	  if (!err) {
	    return false;
	  }
	  var currentTime = new Date().getTime();
	  if (err && currentTime - this._operationStart >= this._maxRetryTime) {
	    this._errors.push(err);
	    this._errors.unshift(new Error('RetryOperation timeout occurred'));
	    return false;
	  }

	  this._errors.push(err);

	  var timeout = this._timeouts.shift();
	  if (timeout === undefined) {
	    if (this._cachedTimeouts) {
	      // retry forever, only keep last error
	      this._errors.splice(0, this._errors.length - 1);
	      timeout = this._cachedTimeouts.slice(-1);
	    } else {
	      return false;
	    }
	  }

	  var self = this;
	  this._timer = setTimeout(function() {
	    self._attempts++;

	    if (self._operationTimeoutCb) {
	      self._timeout = setTimeout(function() {
	        self._operationTimeoutCb(self._attempts);
	      }, self._operationTimeout);

	      if (self._options.unref) {
	          self._timeout.unref();
	      }
	    }

	    self._fn(self._attempts);
	  }, timeout);

	  if (this._options.unref) {
	      this._timer.unref();
	  }

	  return true;
	};

	RetryOperation.prototype.attempt = function(fn, timeoutOps) {
	  this._fn = fn;

	  if (timeoutOps) {
	    if (timeoutOps.timeout) {
	      this._operationTimeout = timeoutOps.timeout;
	    }
	    if (timeoutOps.cb) {
	      this._operationTimeoutCb = timeoutOps.cb;
	    }
	  }

	  var self = this;
	  if (this._operationTimeoutCb) {
	    this._timeout = setTimeout(function() {
	      self._operationTimeoutCb();
	    }, self._operationTimeout);
	  }

	  this._operationStart = new Date().getTime();

	  this._fn(this._attempts);
	};

	RetryOperation.prototype.try = function(fn) {
	  console.log('Using RetryOperation.try() is deprecated');
	  this.attempt(fn);
	};

	RetryOperation.prototype.start = function(fn) {
	  console.log('Using RetryOperation.start() is deprecated');
	  this.attempt(fn);
	};

	RetryOperation.prototype.start = RetryOperation.prototype.try;

	RetryOperation.prototype.errors = function() {
	  return this._errors;
	};

	RetryOperation.prototype.attempts = function() {
	  return this._attempts;
	};

	RetryOperation.prototype.mainError = function() {
	  if (this._errors.length === 0) {
	    return null;
	  }

	  var counts = {};
	  var mainError = null;
	  var mainErrorCount = 0;

	  for (var i = 0; i < this._errors.length; i++) {
	    var error = this._errors[i];
	    var message = error.message;
	    var count = (counts[message] || 0) + 1;

	    counts[message] = count;

	    if (count >= mainErrorCount) {
	      mainError = error;
	      mainErrorCount = count;
	    }
	  }

	  return mainError;
	};

	(function (exports) {
		var RetryOperation = retry_operation;

		exports.operation = function(options) {
		  var timeouts = exports.timeouts(options);
		  return new RetryOperation(timeouts, {
		      forever: options && (options.forever || options.retries === Infinity),
		      unref: options && options.unref,
		      maxRetryTime: options && options.maxRetryTime
		  });
		};

		exports.timeouts = function(options) {
		  if (options instanceof Array) {
		    return [].concat(options);
		  }

		  var opts = {
		    retries: 10,
		    factor: 2,
		    minTimeout: 1 * 1000,
		    maxTimeout: Infinity,
		    randomize: false
		  };
		  for (var key in options) {
		    opts[key] = options[key];
		  }

		  if (opts.minTimeout > opts.maxTimeout) {
		    throw new Error('minTimeout is greater than maxTimeout');
		  }

		  var timeouts = [];
		  for (var i = 0; i < opts.retries; i++) {
		    timeouts.push(this.createTimeout(i, opts));
		  }

		  if (options && options.forever && !timeouts.length) {
		    timeouts.push(this.createTimeout(i, opts));
		  }

		  // sort the array numerically ascending
		  timeouts.sort(function(a,b) {
		    return a - b;
		  });

		  return timeouts;
		};

		exports.createTimeout = function(attempt, opts) {
		  var random = (opts.randomize)
		    ? (Math.random() + 1)
		    : 1;

		  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
		  timeout = Math.min(timeout, opts.maxTimeout);

		  return timeout;
		};

		exports.wrap = function(obj, options, methods) {
		  if (options instanceof Array) {
		    methods = options;
		    options = null;
		  }

		  if (!methods) {
		    methods = [];
		    for (var key in obj) {
		      if (typeof obj[key] === 'function') {
		        methods.push(key);
		      }
		    }
		  }

		  for (var i = 0; i < methods.length; i++) {
		    var method   = methods[i];
		    var original = obj[method];

		    obj[method] = function retryWrapper(original) {
		      var op       = exports.operation(options);
		      var args     = Array.prototype.slice.call(arguments, 1);
		      var callback = args.pop();

		      args.push(function(err) {
		        if (op.retry(err)) {
		          return;
		        }
		        if (err) {
		          arguments[0] = op.mainError();
		        }
		        callback.apply(this, arguments);
		      });

		      op.attempt(function() {
		        original.apply(obj, args);
		      });
		    }.bind(obj, original);
		    obj[method].options = options;
		  }
		};
	} (retry$1));

	(function (module) {
		module.exports = retry$1;
	} (retry$2));

	var index$l = /*@__PURE__*/getDefaultExportFromCjs(retryExports);

	'use strict';
	const retry = retryExports;

	const networkErrorMsgs = [
		'Failed to fetch', // Chrome
		'NetworkError when attempting to fetch resource.', // Firefox
		'The Internet connection appears to be offline.', // Safari
		'Network request failed' // `cross-fetch`
	];

	class AbortError extends Error {
		constructor(message) {
			super();

			if (message instanceof Error) {
				this.originalError = message;
				({message} = message);
			} else {
				this.originalError = new Error(message);
				this.originalError.stack = this.stack;
			}

			this.name = 'AbortError';
			this.message = message;
		}
	}

	const decorateErrorWithCounts = (error, attemptNumber, options) => {
		// Minus 1 from attemptNumber because the first attempt does not count as a retry
		const retriesLeft = options.retries - (attemptNumber - 1);

		error.attemptNumber = attemptNumber;
		error.retriesLeft = retriesLeft;
		return error;
	};

	const isNetworkError = errorMessage => networkErrorMsgs.includes(errorMessage);

	const pRetry = (input, options) => new Promise((resolve, reject) => {
		options = {
			onFailedAttempt: () => {},
			retries: 10,
			...options
		};

		const operation = retry.operation(options);

		operation.attempt(async attemptNumber => {
			try {
				resolve(await input(attemptNumber));
			} catch (error) {
				if (!(error instanceof Error)) {
					reject(new TypeError(`Non-error was thrown: "${error}". You should only throw errors.`));
					return;
				}

				if (error instanceof AbortError) {
					operation.stop();
					reject(error.originalError);
				} else if (error instanceof TypeError && !isNetworkError(error.message)) {
					operation.stop();
					reject(error);
				} else {
					decorateErrorWithCounts(error, attemptNumber, options);

					try {
						await options.onFailedAttempt(error);
					} catch (error) {
						reject(error);
						return;
					}

					if (!operation.retry(error)) {
						reject(operation.mainError());
					}
				}
			}
		});
	});

	pRetry$1.exports = pRetry;
	// TODO: remove this in the next major version
	var _default = pRetryExports.default = pRetry;

	var AbortError_1 = pRetryExports.AbortError = AbortError;

	var encode_1$3 = encode$f;

	var MSB$3 = 0x80
	  , REST$3 = 0x7F
	  , MSBALL$1 = ~REST$3
	  , INT$1 = Math.pow(2, 31);

	function encode$f(num, out, offset) {
	  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
	    encode$f.bytes = 0;
	    throw new RangeError('Could not encode varint')
	  }
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;

	  while(num >= INT$1) {
	    out[offset++] = (num & 0xFF) | MSB$3;
	    num /= 128;
	  }
	  while(num & MSBALL$1) {
	    out[offset++] = (num & 0xFF) | MSB$3;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  
	  encode$f.bytes = offset - oldOffset + 1;
	  
	  return out
	}

	var decode$g = read$1;

	var MSB$2 = 0x80
	  , REST$2 = 0x7F;

	function read$1(buf, offset) {
	  var res    = 0
	    , offset = offset || 0
	    , shift  = 0
	    , counter = offset
	    , b
	    , l = buf.length;

	  do {
	    if (counter >= l || shift > 49) {
	      read$1.bytes = 0;
	      throw new RangeError('Could not decode varint')
	    }
	    b = buf[counter++];
	    res += shift < 28
	      ? (b & REST$2) << shift
	      : (b & REST$2) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$2)

	  read$1.bytes = counter - offset;

	  return res
	}

	var N1$1 = Math.pow(2,  7);
	var N2$1 = Math.pow(2, 14);
	var N3$1 = Math.pow(2, 21);
	var N4$1 = Math.pow(2, 28);
	var N5$1 = Math.pow(2, 35);
	var N6$1 = Math.pow(2, 42);
	var N7$1 = Math.pow(2, 49);
	var N8$1 = Math.pow(2, 56);
	var N9$1 = Math.pow(2, 63);

	var length$1 = function (value) {
	  return (
	    value < N1$1 ? 1
	  : value < N2$1 ? 2
	  : value < N3$1 ? 3
	  : value < N4$1 ? 4
	  : value < N5$1 ? 5
	  : value < N6$1 ? 6
	  : value < N7$1 ? 7
	  : value < N8$1 ? 8
	  : value < N9$1 ? 9
	  :              10
	  )
	};

	var varint$2 = {
	    encode: encode_1$3
	  , decode: decode$g
	  , encodingLength: length$1
	};

	var encode_1$2 = encode$e;
	var MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);
	function encode$e(num, out, offset) {
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;
	  while (num >= INT) {
	    out[offset++] = num & 255 | MSB;
	    num /= 128;
	  }
	  while (num & MSBALL) {
	    out[offset++] = num & 255 | MSB;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  encode$e.bytes = offset - oldOffset + 1;
	  return out;
	}
	var decode$f = read;
	var MSB$1 = 128, REST$1 = 127;
	function read(buf, offset) {
	  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
	  do {
	    if (counter >= l) {
	      read.bytes = 0;
	      throw new RangeError('Could not decode varint');
	    }
	    b = buf[counter++];
	    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$1);
	  read.bytes = counter - offset;
	  return res;
	}
	var N1 = Math.pow(2, 7);
	var N2 = Math.pow(2, 14);
	var N3 = Math.pow(2, 21);
	var N4 = Math.pow(2, 28);
	var N5 = Math.pow(2, 35);
	var N6 = Math.pow(2, 42);
	var N7 = Math.pow(2, 49);
	var N8 = Math.pow(2, 56);
	var N9 = Math.pow(2, 63);
	var length = function (value) {
	  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
	};
	var varint$1 = {
	  encode: encode_1$2,
	  decode: decode$f,
	  encodingLength: length
	};
	var _brrp_varint = varint$1;

	const decode$e = (data, offset = 0) => {
	  const code = _brrp_varint.decode(data, offset);
	  return [
	    code,
	    _brrp_varint.decode.bytes
	  ];
	};
	const encodeTo = (int, target, offset = 0) => {
	  _brrp_varint.encode(int, target, offset);
	  return target;
	};
	const encodingLength = int => {
	  return _brrp_varint.encodingLength(int);
	};

	var varint = /*#__PURE__*/Object.freeze({
		__proto__: null,
		decode: decode$e,
		encodeTo: encodeTo,
		encodingLength: encodingLength
	});

	const empty = new Uint8Array(0);
	const toHex$3 = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');
	const fromHex$1 = hex => {
	  const hexes = hex.match(/../g);
	  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;
	};
	const equals$1 = (aa, bb) => {
	  if (aa === bb)
	    return true;
	  if (aa.byteLength !== bb.byteLength) {
	    return false;
	  }
	  for (let ii = 0; ii < aa.byteLength; ii++) {
	    if (aa[ii] !== bb[ii]) {
	      return false;
	    }
	  }
	  return true;
	};
	const coerce = o => {
	  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')
	    return o;
	  if (o instanceof ArrayBuffer)
	    return new Uint8Array(o);
	  if (ArrayBuffer.isView(o)) {
	    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
	  }
	  throw new Error('Unknown type, must be binary type');
	};
	const isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);
	const fromString$3 = str => new TextEncoder().encode(str);
	const toString$1 = b => new TextDecoder().decode(b);

	var bytes$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		coerce: coerce,
		empty: empty,
		equals: equals$1,
		fromHex: fromHex$1,
		fromString: fromString$3,
		isBinary: isBinary,
		toHex: toHex$3,
		toString: toString$1
	});

	const create$5 = (code, digest) => {
	  const size = digest.byteLength;
	  const sizeOffset = encodingLength(code);
	  const digestOffset = sizeOffset + encodingLength(size);
	  const bytes = new Uint8Array(digestOffset + size);
	  encodeTo(code, bytes, 0);
	  encodeTo(size, bytes, sizeOffset);
	  bytes.set(digest, digestOffset);
	  return new Digest(code, size, digest, bytes);
	};
	const decode$d = multihash => {
	  const bytes = coerce(multihash);
	  const [code, sizeOffset] = decode$e(bytes);
	  const [size, digestOffset] = decode$e(bytes.subarray(sizeOffset));
	  const digest = bytes.subarray(sizeOffset + digestOffset);
	  if (digest.byteLength !== size) {
	    throw new Error('Incorrect length');
	  }
	  return new Digest(code, size, digest, bytes);
	};
	const equals = (a, b) => {
	  if (a === b) {
	    return true;
	  } else {
	    return a.code === b.code && a.size === b.size && equals$1(a.bytes, b.bytes);
	  }
	};
	class Digest {
	  constructor(code, size, digest, bytes) {
	    this.code = code;
	    this.size = size;
	    this.digest = digest;
	    this.bytes = bytes;
	  }
	}

	var digest$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Digest: Digest,
		create: create$5,
		decode: decode$d,
		equals: equals
	});

	function base$1(ALPHABET, name) {
	  if (ALPHABET.length >= 255) {
	    throw new TypeError('Alphabet too long');
	  }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) {
	      throw new TypeError(x + ' is ambiguous');
	    }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256);
	  var iFACTOR = Math.log(256) / Math.log(BASE);
	  function encode(source) {
	    if (source instanceof Uint8Array);
	    else if (ArrayBuffer.isView(source)) {
	      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
	    } else if (Array.isArray(source)) {
	      source = Uint8Array.from(source);
	    }
	    if (!(source instanceof Uint8Array)) {
	      throw new TypeError('Expected Uint8Array');
	    }
	    if (source.length === 0) {
	      return '';
	    }
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
	    var b58 = new Uint8Array(size);
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
	        carry += 256 * b58[it1] >>> 0;
	        b58[it1] = carry % BASE >>> 0;
	        carry = carry / BASE >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      pbegin++;
	    }
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) {
	      str += ALPHABET.charAt(b58[it2]);
	    }
	    return str;
	  }
	  function decodeUnsafe(source) {
	    if (typeof source !== 'string') {
	      throw new TypeError('Expected String');
	    }
	    if (source.length === 0) {
	      return new Uint8Array();
	    }
	    var psz = 0;
	    if (source[psz] === ' ') {
	      return;
	    }
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	    var size = (source.length - psz) * FACTOR + 1 >>> 0;
	    var b256 = new Uint8Array(size);
	    while (source[psz]) {
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	      if (carry === 255) {
	        return;
	      }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
	        carry += BASE * b256[it3] >>> 0;
	        b256[it3] = carry % 256 >>> 0;
	        carry = carry / 256 >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      psz++;
	    }
	    if (source[psz] === ' ') {
	      return;
	    }
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = new Uint8Array(zeroes + (size - it4));
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch;
	  }
	  function decode(string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) {
	      return buffer;
	    }
	    throw new Error(`Non-${ name } character`);
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  };
	}
	var src$2 = base$1;
	var _brrp__multiformats_scope_baseX = src$2;

	class Encoder {
	  constructor(name, prefix, baseEncode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	  }
	  encode(bytes) {
	    if (bytes instanceof Uint8Array) {
	      return `${ this.prefix }${ this.baseEncode(bytes) }`;
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}
	class Decoder {
	  constructor(name, prefix, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    if (prefix.codePointAt(0) === undefined) {
	      throw new Error('Invalid prefix character');
	    }
	    this.prefixCodePoint = prefix.codePointAt(0);
	    this.baseDecode = baseDecode;
	  }
	  decode(text) {
	    if (typeof text === 'string') {
	      if (text.codePointAt(0) !== this.prefixCodePoint) {
	        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);
	      }
	      return this.baseDecode(text.slice(this.prefix.length));
	    } else {
	      throw Error('Can only multibase decode strings');
	    }
	  }
	  or(decoder) {
	    return or(this, decoder);
	  }
	}
	class ComposedDecoder {
	  constructor(decoders) {
	    this.decoders = decoders;
	  }
	  or(decoder) {
	    return or(this, decoder);
	  }
	  decode(input) {
	    const prefix = input[0];
	    const decoder = this.decoders[prefix];
	    if (decoder) {
	      return decoder.decode(input);
	    } else {
	      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);
	    }
	  }
	}
	const or = (left, right) => new ComposedDecoder({
	  ...left.decoders || { [left.prefix]: left },
	  ...right.decoders || { [right.prefix]: right }
	});
	class Codec {
	  constructor(name, prefix, baseEncode, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	    this.baseDecode = baseDecode;
	    this.encoder = new Encoder(name, prefix, baseEncode);
	    this.decoder = new Decoder(name, prefix, baseDecode);
	  }
	  encode(input) {
	    return this.encoder.encode(input);
	  }
	  decode(input) {
	    return this.decoder.decode(input);
	  }
	}
	const from$1 = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);
	const baseX = ({prefix, name, alphabet}) => {
	  const {encode, decode} = _brrp__multiformats_scope_baseX(alphabet, name);
	  return from$1({
	    prefix,
	    name,
	    encode,
	    decode: text => coerce(decode(text))
	  });
	};
	const decode$c = (string, alphabet, bitsPerChar, name) => {
	  const codes = {};
	  for (let i = 0; i < alphabet.length; ++i) {
	    codes[alphabet[i]] = i;
	  }
	  let end = string.length;
	  while (string[end - 1] === '=') {
	    --end;
	  }
	  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
	  let bits = 0;
	  let buffer = 0;
	  let written = 0;
	  for (let i = 0; i < end; ++i) {
	    const value = codes[string[i]];
	    if (value === undefined) {
	      throw new SyntaxError(`Non-${ name } character`);
	    }
	    buffer = buffer << bitsPerChar | value;
	    bits += bitsPerChar;
	    if (bits >= 8) {
	      bits -= 8;
	      out[written++] = 255 & buffer >> bits;
	    }
	  }
	  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
	    throw new SyntaxError('Unexpected end of data');
	  }
	  return out;
	};
	const encode$d = (data, alphabet, bitsPerChar) => {
	  const pad = alphabet[alphabet.length - 1] === '=';
	  const mask = (1 << bitsPerChar) - 1;
	  let out = '';
	  let bits = 0;
	  let buffer = 0;
	  for (let i = 0; i < data.length; ++i) {
	    buffer = buffer << 8 | data[i];
	    bits += 8;
	    while (bits > bitsPerChar) {
	      bits -= bitsPerChar;
	      out += alphabet[mask & buffer >> bits];
	    }
	  }
	  if (bits) {
	    out += alphabet[mask & buffer << bitsPerChar - bits];
	  }
	  if (pad) {
	    while (out.length * bitsPerChar & 7) {
	      out += '=';
	    }
	  }
	  return out;
	};
	const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {
	  return from$1({
	    prefix,
	    name,
	    encode(input) {
	      return encode$d(input, alphabet, bitsPerChar);
	    },
	    decode(input) {
	      return decode$c(input, alphabet, bitsPerChar, name);
	    }
	  });
	};

	const base58btc = baseX({
	  name: 'base58btc',
	  prefix: 'z',
	  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
	});
	const base58flickr = baseX({
	  name: 'base58flickr',
	  prefix: 'Z',
	  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
	});

	var base58 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base58btc: base58btc,
		base58flickr: base58flickr
	});

	const base32 = rfc4648({
	  prefix: 'b',
	  name: 'base32',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
	  bitsPerChar: 5
	});
	const base32upper = rfc4648({
	  prefix: 'B',
	  name: 'base32upper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
	  bitsPerChar: 5
	});
	const base32pad = rfc4648({
	  prefix: 'c',
	  name: 'base32pad',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
	  bitsPerChar: 5
	});
	const base32padupper = rfc4648({
	  prefix: 'C',
	  name: 'base32padupper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
	  bitsPerChar: 5
	});
	const base32hex = rfc4648({
	  prefix: 'v',
	  name: 'base32hex',
	  alphabet: '0123456789abcdefghijklmnopqrstuv',
	  bitsPerChar: 5
	});
	const base32hexupper = rfc4648({
	  prefix: 'V',
	  name: 'base32hexupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
	  bitsPerChar: 5
	});
	const base32hexpad = rfc4648({
	  prefix: 't',
	  name: 'base32hexpad',
	  alphabet: '0123456789abcdefghijklmnopqrstuv=',
	  bitsPerChar: 5
	});
	const base32hexpadupper = rfc4648({
	  prefix: 'T',
	  name: 'base32hexpadupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
	  bitsPerChar: 5
	});
	const base32z = rfc4648({
	  prefix: 'h',
	  name: 'base32z',
	  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
	  bitsPerChar: 5
	});

	var base32$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base32: base32,
		base32hex: base32hex,
		base32hexpad: base32hexpad,
		base32hexpadupper: base32hexpadupper,
		base32hexupper: base32hexupper,
		base32pad: base32pad,
		base32padupper: base32padupper,
		base32upper: base32upper,
		base32z: base32z
	});

	class CID {
	  constructor(version, code, multihash, bytes) {
	    this.code = code;
	    this.version = version;
	    this.multihash = multihash;
	    this.bytes = bytes;
	    this.byteOffset = bytes.byteOffset;
	    this.byteLength = bytes.byteLength;
	    this.asCID = this;
	    this._baseCache = new Map();
	    Object.defineProperties(this, {
	      byteOffset: hidden,
	      byteLength: hidden,
	      code: readonly$1,
	      version: readonly$1,
	      multihash: readonly$1,
	      bytes: readonly$1,
	      _baseCache: hidden,
	      asCID: hidden
	    });
	  }
	  toV0() {
	    switch (this.version) {
	    case 0: {
	        return this;
	      }
	    default: {
	        const {code, multihash} = this;
	        if (code !== DAG_PB_CODE) {
	          throw new Error('Cannot convert a non dag-pb CID to CIDv0');
	        }
	        if (multihash.code !== SHA_256_CODE) {
	          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
	        }
	        return CID.createV0(multihash);
	      }
	    }
	  }
	  toV1() {
	    switch (this.version) {
	    case 0: {
	        const {code, digest} = this.multihash;
	        const multihash = create$5(code, digest);
	        return CID.createV1(this.code, multihash);
	      }
	    case 1: {
	        return this;
	      }
	    default: {
	        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);
	      }
	    }
	  }
	  equals(other) {
	    return other && this.code === other.code && this.version === other.version && equals(this.multihash, other.multihash);
	  }
	  toString(base) {
	    const {bytes, version, _baseCache} = this;
	    switch (version) {
	    case 0:
	      return toStringV0(bytes, _baseCache, base || base58btc.encoder);
	    default:
	      return toStringV1(bytes, _baseCache, base || base32.encoder);
	    }
	  }
	  toJSON() {
	    return {
	      code: this.code,
	      version: this.version,
	      hash: this.multihash.bytes
	    };
	  }
	  get [Symbol.toStringTag]() {
	    return 'CID';
	  }
	  [Symbol.for('nodejs.util.inspect.custom')]() {
	    return 'CID(' + this.toString() + ')';
	  }
	  static isCID(value) {
	    deprecate(/^0\.0/, IS_CID_DEPRECATION);
	    return !!(value && (value[cidSymbol] || value.asCID === value));
	  }
	  get toBaseEncodedString() {
	    throw new Error('Deprecated, use .toString()');
	  }
	  get codec() {
	    throw new Error('"codec" property is deprecated, use integer "code" property instead');
	  }
	  get buffer() {
	    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');
	  }
	  get multibaseName() {
	    throw new Error('"multibaseName" property is deprecated');
	  }
	  get prefix() {
	    throw new Error('"prefix" property is deprecated');
	  }
	  static asCID(value) {
	    if (value instanceof CID) {
	      return value;
	    } else if (value != null && value.asCID === value) {
	      const {version, code, multihash, bytes} = value;
	      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));
	    } else if (value != null && value[cidSymbol] === true) {
	      const {version, multihash, code} = value;
	      const digest = decode$d(multihash);
	      return CID.create(version, code, digest);
	    } else {
	      return null;
	    }
	  }
	  static create(version, code, digest) {
	    if (typeof code !== 'number') {
	      throw new Error('String codecs are no longer supported');
	    }
	    switch (version) {
	    case 0: {
	        if (code !== DAG_PB_CODE) {
	          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);
	        } else {
	          return new CID(version, code, digest, digest.bytes);
	        }
	      }
	    case 1: {
	        const bytes = encodeCID(version, code, digest.bytes);
	        return new CID(version, code, digest, bytes);
	      }
	    default: {
	        throw new Error('Invalid version');
	      }
	    }
	  }
	  static createV0(digest) {
	    return CID.create(0, DAG_PB_CODE, digest);
	  }
	  static createV1(code, digest) {
	    return CID.create(1, code, digest);
	  }
	  static decode(bytes) {
	    const [cid, remainder] = CID.decodeFirst(bytes);
	    if (remainder.length) {
	      throw new Error('Incorrect length');
	    }
	    return cid;
	  }
	  static decodeFirst(bytes) {
	    const specs = CID.inspectBytes(bytes);
	    const prefixSize = specs.size - specs.multihashSize;
	    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
	    if (multihashBytes.byteLength !== specs.multihashSize) {
	      throw new Error('Incorrect length');
	    }
	    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
	    const digest = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
	    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);
	    return [
	      cid,
	      bytes.subarray(specs.size)
	    ];
	  }
	  static inspectBytes(initialBytes) {
	    let offset = 0;
	    const next = () => {
	      const [i, length] = decode$e(initialBytes.subarray(offset));
	      offset += length;
	      return i;
	    };
	    let version = next();
	    let codec = DAG_PB_CODE;
	    if (version === 18) {
	      version = 0;
	      offset = 0;
	    } else if (version === 1) {
	      codec = next();
	    }
	    if (version !== 0 && version !== 1) {
	      throw new RangeError(`Invalid CID version ${ version }`);
	    }
	    const prefixSize = offset;
	    const multihashCode = next();
	    const digestSize = next();
	    const size = offset + digestSize;
	    const multihashSize = size - prefixSize;
	    return {
	      version,
	      codec,
	      multihashCode,
	      digestSize,
	      multihashSize,
	      size
	    };
	  }
	  static parse(source, base) {
	    const [prefix, bytes] = parseCIDtoBytes(source, base);
	    const cid = CID.decode(bytes);
	    cid._baseCache.set(prefix, source);
	    return cid;
	  }
	}
	const parseCIDtoBytes = (source, base) => {
	  switch (source[0]) {
	  case 'Q': {
	      const decoder = base || base58btc;
	      return [
	        base58btc.prefix,
	        decoder.decode(`${ base58btc.prefix }${ source }`)
	      ];
	    }
	  case base58btc.prefix: {
	      const decoder = base || base58btc;
	      return [
	        base58btc.prefix,
	        decoder.decode(source)
	      ];
	    }
	  case base32.prefix: {
	      const decoder = base || base32;
	      return [
	        base32.prefix,
	        decoder.decode(source)
	      ];
	    }
	  default: {
	      if (base == null) {
	        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');
	      }
	      return [
	        source[0],
	        base.decode(source)
	      ];
	    }
	  }
	};
	const toStringV0 = (bytes, cache, base) => {
	  const {prefix} = base;
	  if (prefix !== base58btc.prefix) {
	    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);
	  }
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes).slice(1);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const toStringV1 = (bytes, cache, base) => {
	  const {prefix} = base;
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const DAG_PB_CODE = 112;
	const SHA_256_CODE = 18;
	const encodeCID = (version, code, multihash) => {
	  const codeOffset = encodingLength(version);
	  const hashOffset = codeOffset + encodingLength(code);
	  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
	  encodeTo(version, bytes, 0);
	  encodeTo(code, bytes, codeOffset);
	  bytes.set(multihash, hashOffset);
	  return bytes;
	};
	const cidSymbol = Symbol.for('@ipld/js-cid/CID');
	const readonly$1 = {
	  writable: false,
	  configurable: false,
	  enumerable: true
	};
	const hidden = {
	  writable: false,
	  enumerable: false,
	  configurable: false
	};
	const version$r = '0.0.0-dev';
	const deprecate = (range, message) => {
	  if (range.test(version$r)) {
	    console.warn(message);
	  } else {
	    throw new Error(message);
	  }
	};
	const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

	const typeofs = [
	  'string',
	  'number',
	  'bigint',
	  'symbol'
	];
	const objectTypeNames = [
	  'Function',
	  'Generator',
	  'AsyncGenerator',
	  'GeneratorFunction',
	  'AsyncGeneratorFunction',
	  'AsyncFunction',
	  'Observable',
	  'Array',
	  'Buffer',
	  'Object',
	  'RegExp',
	  'Date',
	  'Error',
	  'Map',
	  'Set',
	  'WeakMap',
	  'WeakSet',
	  'ArrayBuffer',
	  'SharedArrayBuffer',
	  'DataView',
	  'Promise',
	  'URL',
	  'HTMLElement',
	  'Int8Array',
	  'Uint8Array',
	  'Uint8ClampedArray',
	  'Int16Array',
	  'Uint16Array',
	  'Int32Array',
	  'Uint32Array',
	  'Float32Array',
	  'Float64Array',
	  'BigInt64Array',
	  'BigUint64Array'
	];
	function is(value) {
	  if (value === null) {
	    return 'null';
	  }
	  if (value === undefined) {
	    return 'undefined';
	  }
	  if (value === true || value === false) {
	    return 'boolean';
	  }
	  const typeOf = typeof value;
	  if (typeofs.includes(typeOf)) {
	    return typeOf;
	  }
	  if (typeOf === 'function') {
	    return 'Function';
	  }
	  if (Array.isArray(value)) {
	    return 'Array';
	  }
	  if (isBuffer$1(value)) {
	    return 'Buffer';
	  }
	  const objectType = getObjectType(value);
	  if (objectType) {
	    return objectType;
	  }
	  return 'Object';
	}
	function isBuffer$1(value) {
	  return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
	}
	function getObjectType(value) {
	  const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
	  if (objectTypeNames.includes(objectTypeName)) {
	    return objectTypeName;
	  }
	  return undefined;
	}

	class Type {
	  constructor(major, name, terminal) {
	    this.major = major;
	    this.majorEncoded = major << 5;
	    this.name = name;
	    this.terminal = terminal;
	  }
	  toString() {
	    return `Type[${ this.major }].${ this.name }`;
	  }
	  compare(typ) {
	    return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
	  }
	}
	Type.uint = new Type(0, 'uint', true);
	Type.negint = new Type(1, 'negint', true);
	Type.bytes = new Type(2, 'bytes', true);
	Type.string = new Type(3, 'string', true);
	Type.array = new Type(4, 'array', false);
	Type.map = new Type(5, 'map', false);
	Type.tag = new Type(6, 'tag', false);
	Type.float = new Type(7, 'float', true);
	Type.false = new Type(7, 'false', true);
	Type.true = new Type(7, 'true', true);
	Type.null = new Type(7, 'null', true);
	Type.undefined = new Type(7, 'undefined', true);
	Type.break = new Type(7, 'break', true);
	let Token$1 = class Token {
	  constructor(type, value, encodedLength) {
	    this.type = type;
	    this.value = value;
	    this.encodedLength = encodedLength;
	    this.encodedBytes = undefined;
	    this.byteValue = undefined;
	  }
	  toString() {
	    return `Token[${ this.type }].${ this.value }`;
	  }
	};

	const useBuffer = globalThis.process && !globalThis.process.browser && globalThis.Buffer && typeof globalThis.Buffer.isBuffer === 'function';
	const textDecoder$2 = new TextDecoder();
	const textEncoder$3 = new TextEncoder();
	function isBuffer(buf) {
	  return useBuffer && globalThis.Buffer.isBuffer(buf);
	}
	function asU8A(buf) {
	  if (!(buf instanceof Uint8Array)) {
	    return Uint8Array.from(buf);
	  }
	  return isBuffer(buf) ? new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength) : buf;
	}
	const toString = useBuffer ? (bytes, start, end) => {
	  return end - start > 64 ? globalThis.Buffer.from(bytes.subarray(start, end)).toString('utf8') : utf8Slice(bytes, start, end);
	} : (bytes, start, end) => {
	  return end - start > 64 ? textDecoder$2.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);
	};
	const fromString$2 = useBuffer ? string => {
	  return string.length > 64 ? globalThis.Buffer.from(string) : utf8ToBytes(string);
	} : string => {
	  return string.length > 64 ? textEncoder$3.encode(string) : utf8ToBytes(string);
	};
	const fromArray = arr => {
	  return Uint8Array.from(arr);
	};
	const slice = useBuffer ? (bytes, start, end) => {
	  if (isBuffer(bytes)) {
	    return new Uint8Array(bytes.subarray(start, end));
	  }
	  return bytes.slice(start, end);
	} : (bytes, start, end) => {
	  return bytes.slice(start, end);
	};
	const concat$3 = useBuffer ? (chunks, length) => {
	  chunks = chunks.map(c => c instanceof Uint8Array ? c : globalThis.Buffer.from(c));
	  return asU8A(globalThis.Buffer.concat(chunks, length));
	} : (chunks, length) => {
	  const out = new Uint8Array(length);
	  let off = 0;
	  for (let b of chunks) {
	    if (off + b.length > out.length) {
	      b = b.subarray(0, out.length - off);
	    }
	    out.set(b, off);
	    off += b.length;
	  }
	  return out;
	};
	const alloc$1 = useBuffer ? size => {
	  return globalThis.Buffer.allocUnsafe(size);
	} : size => {
	  return new Uint8Array(size);
	};
	const toHex$2 = useBuffer ? d => {
	  if (typeof d === 'string') {
	    return d;
	  }
	  return globalThis.Buffer.from(toBytes$1(d)).toString('hex');
	} : d => {
	  if (typeof d === 'string') {
	    return d;
	  }
	  return Array.prototype.reduce.call(toBytes$1(d), (p, c) => `${ p }${ c.toString(16).padStart(2, '0') }`, '');
	};
	const fromHex = useBuffer ? hex => {
	  if (hex instanceof Uint8Array) {
	    return hex;
	  }
	  return globalThis.Buffer.from(hex, 'hex');
	} : hex => {
	  if (hex instanceof Uint8Array) {
	    return hex;
	  }
	  if (!hex.length) {
	    return new Uint8Array(0);
	  }
	  return new Uint8Array(hex.split('').map((c, i, d) => i % 2 === 0 ? `0x${ c }${ d[i + 1] }` : '').filter(Boolean).map(e => parseInt(e, 16)));
	};
	function toBytes$1(obj) {
	  if (obj instanceof Uint8Array && obj.constructor.name === 'Uint8Array') {
	    return obj;
	  }
	  if (obj instanceof ArrayBuffer) {
	    return new Uint8Array(obj);
	  }
	  if (ArrayBuffer.isView(obj)) {
	    return new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength);
	  }
	  throw new Error('Unknown type, must be binary type');
	}
	function compare(b1, b2) {
	  if (isBuffer(b1) && isBuffer(b2)) {
	    return b1.compare(b2);
	  }
	  for (let i = 0; i < b1.length; i++) {
	    if (b1[i] === b2[i]) {
	      continue;
	    }
	    return b1[i] < b2[i] ? -1 : 1;
	  }
	  return 0;
	}
	function utf8ToBytes(string, units = Infinity) {
	  let codePoint;
	  const length = string.length;
	  let leadSurrogate = null;
	  const bytes = [];
	  for (let i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);
	    if (codePoint > 55295 && codePoint < 57344) {
	      if (!leadSurrogate) {
	        if (codePoint > 56319) {
	          if ((units -= 3) > -1)
	            bytes.push(239, 191, 189);
	          continue;
	        } else if (i + 1 === length) {
	          if ((units -= 3) > -1)
	            bytes.push(239, 191, 189);
	          continue;
	        }
	        leadSurrogate = codePoint;
	        continue;
	      }
	      if (codePoint < 56320) {
	        if ((units -= 3) > -1)
	          bytes.push(239, 191, 189);
	        leadSurrogate = codePoint;
	        continue;
	      }
	      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
	    } else if (leadSurrogate) {
	      if ((units -= 3) > -1)
	        bytes.push(239, 191, 189);
	    }
	    leadSurrogate = null;
	    if (codePoint < 128) {
	      if ((units -= 1) < 0)
	        break;
	      bytes.push(codePoint);
	    } else if (codePoint < 2048) {
	      if ((units -= 2) < 0)
	        break;
	      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
	    } else if (codePoint < 65536) {
	      if ((units -= 3) < 0)
	        break;
	      bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
	    } else if (codePoint < 1114112) {
	      if ((units -= 4) < 0)
	        break;
	      bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
	    } else {
	      throw new Error('Invalid code point');
	    }
	  }
	  return bytes;
	}
	function utf8Slice(buf, offset, end) {
	  const res = [];
	  while (offset < end) {
	    const firstByte = buf[offset];
	    let codePoint = null;
	    let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
	    if (offset + bytesPerSequence <= end) {
	      let secondByte, thirdByte, fourthByte, tempCodePoint;
	      switch (bytesPerSequence) {
	      case 1:
	        if (firstByte < 128) {
	          codePoint = firstByte;
	        }
	        break;
	      case 2:
	        secondByte = buf[offset + 1];
	        if ((secondByte & 192) === 128) {
	          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
	          if (tempCodePoint > 127) {
	            codePoint = tempCodePoint;
	          }
	        }
	        break;
	      case 3:
	        secondByte = buf[offset + 1];
	        thirdByte = buf[offset + 2];
	        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
	          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
	          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
	            codePoint = tempCodePoint;
	          }
	        }
	        break;
	      case 4:
	        secondByte = buf[offset + 1];
	        thirdByte = buf[offset + 2];
	        fourthByte = buf[offset + 3];
	        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
	          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
	          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
	            codePoint = tempCodePoint;
	          }
	        }
	      }
	    }
	    if (codePoint === null) {
	      codePoint = 65533;
	      bytesPerSequence = 1;
	    } else if (codePoint > 65535) {
	      codePoint -= 65536;
	      res.push(codePoint >>> 10 & 1023 | 55296);
	      codePoint = 56320 | codePoint & 1023;
	    }
	    res.push(codePoint);
	    offset += bytesPerSequence;
	  }
	  return decodeCodePointsArray(res);
	}
	const MAX_ARGUMENTS_LENGTH = 4096;
	function decodeCodePointsArray(codePoints) {
	  const len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints);
	  }
	  let res = '';
	  let i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
	  }
	  return res;
	}

	const defaultChunkSize = 256;
	class Bl {
	  constructor(chunkSize = defaultChunkSize) {
	    this.chunkSize = chunkSize;
	    this.cursor = 0;
	    this.maxCursor = -1;
	    this.chunks = [];
	    this._initReuseChunk = null;
	  }
	  reset() {
	    this.cursor = 0;
	    this.maxCursor = -1;
	    if (this.chunks.length) {
	      this.chunks = [];
	    }
	    if (this._initReuseChunk !== null) {
	      this.chunks.push(this._initReuseChunk);
	      this.maxCursor = this._initReuseChunk.length - 1;
	    }
	  }
	  push(bytes) {
	    let topChunk = this.chunks[this.chunks.length - 1];
	    const newMax = this.cursor + bytes.length;
	    if (newMax <= this.maxCursor + 1) {
	      const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
	      topChunk.set(bytes, chunkPos);
	    } else {
	      if (topChunk) {
	        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
	        if (chunkPos < topChunk.length) {
	          this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);
	          this.maxCursor = this.cursor - 1;
	        }
	      }
	      if (bytes.length < 64 && bytes.length < this.chunkSize) {
	        topChunk = alloc$1(this.chunkSize);
	        this.chunks.push(topChunk);
	        this.maxCursor += topChunk.length;
	        if (this._initReuseChunk === null) {
	          this._initReuseChunk = topChunk;
	        }
	        topChunk.set(bytes, 0);
	      } else {
	        this.chunks.push(bytes);
	        this.maxCursor += bytes.length;
	      }
	    }
	    this.cursor += bytes.length;
	  }
	  toBytes(reset = false) {
	    let byts;
	    if (this.chunks.length === 1) {
	      const chunk = this.chunks[0];
	      if (reset && this.cursor > chunk.length / 2) {
	        byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);
	        this._initReuseChunk = null;
	        this.chunks = [];
	      } else {
	        byts = slice(chunk, 0, this.cursor);
	      }
	    } else {
	      byts = concat$3(this.chunks, this.cursor);
	    }
	    if (reset) {
	      this.reset();
	    }
	    return byts;
	  }
	}

	const decodeErrPrefix = 'CBOR decode error:';
	const encodeErrPrefix = 'CBOR encode error:';
	const uintMinorPrefixBytes = [];
	uintMinorPrefixBytes[23] = 1;
	uintMinorPrefixBytes[24] = 2;
	uintMinorPrefixBytes[25] = 3;
	uintMinorPrefixBytes[26] = 5;
	uintMinorPrefixBytes[27] = 9;
	function assertEnoughData(data, pos, need) {
	  if (data.length - pos < need) {
	    throw new Error(`${ decodeErrPrefix } not enough data for type`);
	  }
	}

	const uintBoundaries = [
	  24,
	  256,
	  65536,
	  4294967296,
	  BigInt('18446744073709551616')
	];
	function readUint8(data, offset, options) {
	  assertEnoughData(data, offset, 1);
	  const value = data[offset];
	  if (options.strict === true && value < uintBoundaries[0]) {
	    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);
	  }
	  return value;
	}
	function readUint16(data, offset, options) {
	  assertEnoughData(data, offset, 2);
	  const value = data[offset] << 8 | data[offset + 1];
	  if (options.strict === true && value < uintBoundaries[1]) {
	    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);
	  }
	  return value;
	}
	function readUint32(data, offset, options) {
	  assertEnoughData(data, offset, 4);
	  const value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
	  if (options.strict === true && value < uintBoundaries[2]) {
	    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);
	  }
	  return value;
	}
	function readUint64(data, offset, options) {
	  assertEnoughData(data, offset, 8);
	  const hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
	  const lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];
	  const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
	  if (options.strict === true && value < uintBoundaries[3]) {
	    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);
	  }
	  if (value <= Number.MAX_SAFE_INTEGER) {
	    return Number(value);
	  }
	  if (options.allowBigInt === true) {
	    return value;
	  }
	  throw new Error(`${ decodeErrPrefix } integers outside of the safe integer range are not supported`);
	}
	function decodeUint8(data, pos, _minor, options) {
	  return new Token$1(Type.uint, readUint8(data, pos + 1, options), 2);
	}
	function decodeUint16(data, pos, _minor, options) {
	  return new Token$1(Type.uint, readUint16(data, pos + 1, options), 3);
	}
	function decodeUint32(data, pos, _minor, options) {
	  return new Token$1(Type.uint, readUint32(data, pos + 1, options), 5);
	}
	function decodeUint64(data, pos, _minor, options) {
	  return new Token$1(Type.uint, readUint64(data, pos + 1, options), 9);
	}
	function encodeUint(buf, token) {
	  return encodeUintValue(buf, 0, token.value);
	}
	function encodeUintValue(buf, major, uint) {
	  if (uint < uintBoundaries[0]) {
	    const nuint = Number(uint);
	    buf.push([major | nuint]);
	  } else if (uint < uintBoundaries[1]) {
	    const nuint = Number(uint);
	    buf.push([
	      major | 24,
	      nuint
	    ]);
	  } else if (uint < uintBoundaries[2]) {
	    const nuint = Number(uint);
	    buf.push([
	      major | 25,
	      nuint >>> 8,
	      nuint & 255
	    ]);
	  } else if (uint < uintBoundaries[3]) {
	    const nuint = Number(uint);
	    buf.push([
	      major | 26,
	      nuint >>> 24 & 255,
	      nuint >>> 16 & 255,
	      nuint >>> 8 & 255,
	      nuint & 255
	    ]);
	  } else {
	    const buint = BigInt(uint);
	    if (buint < uintBoundaries[4]) {
	      const set = [
	        major | 27,
	        0,
	        0,
	        0,
	        0,
	        0,
	        0,
	        0
	      ];
	      let lo = Number(buint & BigInt(4294967295));
	      let hi = Number(buint >> BigInt(32) & BigInt(4294967295));
	      set[8] = lo & 255;
	      lo = lo >> 8;
	      set[7] = lo & 255;
	      lo = lo >> 8;
	      set[6] = lo & 255;
	      lo = lo >> 8;
	      set[5] = lo & 255;
	      set[4] = hi & 255;
	      hi = hi >> 8;
	      set[3] = hi & 255;
	      hi = hi >> 8;
	      set[2] = hi & 255;
	      hi = hi >> 8;
	      set[1] = hi & 255;
	      buf.push(set);
	    } else {
	      throw new Error(`${ decodeErrPrefix } encountered BigInt larger than allowable range`);
	    }
	  }
	}
	encodeUint.encodedSize = function encodedSize(token) {
	  return encodeUintValue.encodedSize(token.value);
	};
	encodeUintValue.encodedSize = function encodedSize(uint) {
	  if (uint < uintBoundaries[0]) {
	    return 1;
	  }
	  if (uint < uintBoundaries[1]) {
	    return 2;
	  }
	  if (uint < uintBoundaries[2]) {
	    return 3;
	  }
	  if (uint < uintBoundaries[3]) {
	    return 5;
	  }
	  return 9;
	};
	encodeUint.compareTokens = function compareTokens(tok1, tok2) {
	  return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : 0;
	};

	function decodeNegint8(data, pos, _minor, options) {
	  return new Token$1(Type.negint, -1 - readUint8(data, pos + 1, options), 2);
	}
	function decodeNegint16(data, pos, _minor, options) {
	  return new Token$1(Type.negint, -1 - readUint16(data, pos + 1, options), 3);
	}
	function decodeNegint32(data, pos, _minor, options) {
	  return new Token$1(Type.negint, -1 - readUint32(data, pos + 1, options), 5);
	}
	const neg1b = BigInt(-1);
	const pos1b = BigInt(1);
	function decodeNegint64(data, pos, _minor, options) {
	  const int = readUint64(data, pos + 1, options);
	  if (typeof int !== 'bigint') {
	    const value = -1 - int;
	    if (value >= Number.MIN_SAFE_INTEGER) {
	      return new Token$1(Type.negint, value, 9);
	    }
	  }
	  if (options.allowBigInt !== true) {
	    throw new Error(`${ decodeErrPrefix } integers outside of the safe integer range are not supported`);
	  }
	  return new Token$1(Type.negint, neg1b - BigInt(int), 9);
	}
	function encodeNegint(buf, token) {
	  const negint = token.value;
	  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;
	  encodeUintValue(buf, token.type.majorEncoded, unsigned);
	}
	encodeNegint.encodedSize = function encodedSize(token) {
	  const negint = token.value;
	  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;
	  if (unsigned < uintBoundaries[0]) {
	    return 1;
	  }
	  if (unsigned < uintBoundaries[1]) {
	    return 2;
	  }
	  if (unsigned < uintBoundaries[2]) {
	    return 3;
	  }
	  if (unsigned < uintBoundaries[3]) {
	    return 5;
	  }
	  return 9;
	};
	encodeNegint.compareTokens = function compareTokens(tok1, tok2) {
	  return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;
	};

	function toToken$3(data, pos, prefix, length) {
	  assertEnoughData(data, pos, prefix + length);
	  const buf = slice(data, pos + prefix, pos + prefix + length);
	  return new Token$1(Type.bytes, buf, prefix + length);
	}
	function decodeBytesCompact(data, pos, minor, _options) {
	  return toToken$3(data, pos, 1, minor);
	}
	function decodeBytes8(data, pos, _minor, options) {
	  return toToken$3(data, pos, 2, readUint8(data, pos + 1, options));
	}
	function decodeBytes16(data, pos, _minor, options) {
	  return toToken$3(data, pos, 3, readUint16(data, pos + 1, options));
	}
	function decodeBytes32(data, pos, _minor, options) {
	  return toToken$3(data, pos, 5, readUint32(data, pos + 1, options));
	}
	function decodeBytes64(data, pos, _minor, options) {
	  const l = readUint64(data, pos + 1, options);
	  if (typeof l === 'bigint') {
	    throw new Error(`${ decodeErrPrefix } 64-bit integer bytes lengths not supported`);
	  }
	  return toToken$3(data, pos, 9, l);
	}
	function tokenBytes(token) {
	  if (token.encodedBytes === undefined) {
	    token.encodedBytes = token.type === Type.string ? fromString$2(token.value) : token.value;
	  }
	  return token.encodedBytes;
	}
	function encodeBytes$1(buf, token) {
	  const bytes = tokenBytes(token);
	  encodeUintValue(buf, token.type.majorEncoded, bytes.length);
	  buf.push(bytes);
	}
	encodeBytes$1.encodedSize = function encodedSize(token) {
	  const bytes = tokenBytes(token);
	  return encodeUintValue.encodedSize(bytes.length) + bytes.length;
	};
	encodeBytes$1.compareTokens = function compareTokens(tok1, tok2) {
	  return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
	};
	function compareBytes(b1, b2) {
	  return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare(b1, b2);
	}

	function toToken$2(data, pos, prefix, length, options) {
	  const totLength = prefix + length;
	  assertEnoughData(data, pos, totLength);
	  const tok = new Token$1(Type.string, toString(data, pos + prefix, pos + totLength), totLength);
	  if (options.retainStringBytes === true) {
	    tok.byteValue = slice(data, pos + prefix, pos + totLength);
	  }
	  return tok;
	}
	function decodeStringCompact(data, pos, minor, options) {
	  return toToken$2(data, pos, 1, minor, options);
	}
	function decodeString8(data, pos, _minor, options) {
	  return toToken$2(data, pos, 2, readUint8(data, pos + 1, options), options);
	}
	function decodeString16(data, pos, _minor, options) {
	  return toToken$2(data, pos, 3, readUint16(data, pos + 1, options), options);
	}
	function decodeString32(data, pos, _minor, options) {
	  return toToken$2(data, pos, 5, readUint32(data, pos + 1, options), options);
	}
	function decodeString64(data, pos, _minor, options) {
	  const l = readUint64(data, pos + 1, options);
	  if (typeof l === 'bigint') {
	    throw new Error(`${ decodeErrPrefix } 64-bit integer string lengths not supported`);
	  }
	  return toToken$2(data, pos, 9, l, options);
	}
	const encodeString = encodeBytes$1;

	function toToken$1(_data, _pos, prefix, length) {
	  return new Token$1(Type.array, length, prefix);
	}
	function decodeArrayCompact(data, pos, minor, _options) {
	  return toToken$1(data, pos, 1, minor);
	}
	function decodeArray8(data, pos, _minor, options) {
	  return toToken$1(data, pos, 2, readUint8(data, pos + 1, options));
	}
	function decodeArray16(data, pos, _minor, options) {
	  return toToken$1(data, pos, 3, readUint16(data, pos + 1, options));
	}
	function decodeArray32(data, pos, _minor, options) {
	  return toToken$1(data, pos, 5, readUint32(data, pos + 1, options));
	}
	function decodeArray64(data, pos, _minor, options) {
	  const l = readUint64(data, pos + 1, options);
	  if (typeof l === 'bigint') {
	    throw new Error(`${ decodeErrPrefix } 64-bit integer array lengths not supported`);
	  }
	  return toToken$1(data, pos, 9, l);
	}
	function decodeArrayIndefinite(data, pos, _minor, options) {
	  if (options.allowIndefinite === false) {
	    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);
	  }
	  return toToken$1(data, pos, 1, Infinity);
	}
	function encodeArray(buf, token) {
	  encodeUintValue(buf, Type.array.majorEncoded, token.value);
	}
	encodeArray.compareTokens = encodeUint.compareTokens;
	encodeArray.encodedSize = function encodedSize(token) {
	  return encodeUintValue.encodedSize(token.value);
	};

	function toToken(_data, _pos, prefix, length) {
	  return new Token$1(Type.map, length, prefix);
	}
	function decodeMapCompact(data, pos, minor, _options) {
	  return toToken(data, pos, 1, minor);
	}
	function decodeMap8(data, pos, _minor, options) {
	  return toToken(data, pos, 2, readUint8(data, pos + 1, options));
	}
	function decodeMap16(data, pos, _minor, options) {
	  return toToken(data, pos, 3, readUint16(data, pos + 1, options));
	}
	function decodeMap32(data, pos, _minor, options) {
	  return toToken(data, pos, 5, readUint32(data, pos + 1, options));
	}
	function decodeMap64(data, pos, _minor, options) {
	  const l = readUint64(data, pos + 1, options);
	  if (typeof l === 'bigint') {
	    throw new Error(`${ decodeErrPrefix } 64-bit integer map lengths not supported`);
	  }
	  return toToken(data, pos, 9, l);
	}
	function decodeMapIndefinite(data, pos, _minor, options) {
	  if (options.allowIndefinite === false) {
	    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);
	  }
	  return toToken(data, pos, 1, Infinity);
	}
	function encodeMap(buf, token) {
	  encodeUintValue(buf, Type.map.majorEncoded, token.value);
	}
	encodeMap.compareTokens = encodeUint.compareTokens;
	encodeMap.encodedSize = function encodedSize(token) {
	  return encodeUintValue.encodedSize(token.value);
	};

	function decodeTagCompact(_data, _pos, minor, _options) {
	  return new Token$1(Type.tag, minor, 1);
	}
	function decodeTag8(data, pos, _minor, options) {
	  return new Token$1(Type.tag, readUint8(data, pos + 1, options), 2);
	}
	function decodeTag16(data, pos, _minor, options) {
	  return new Token$1(Type.tag, readUint16(data, pos + 1, options), 3);
	}
	function decodeTag32(data, pos, _minor, options) {
	  return new Token$1(Type.tag, readUint32(data, pos + 1, options), 5);
	}
	function decodeTag64(data, pos, _minor, options) {
	  return new Token$1(Type.tag, readUint64(data, pos + 1, options), 9);
	}
	function encodeTag(buf, token) {
	  encodeUintValue(buf, Type.tag.majorEncoded, token.value);
	}
	encodeTag.compareTokens = encodeUint.compareTokens;
	encodeTag.encodedSize = function encodedSize(token) {
	  return encodeUintValue.encodedSize(token.value);
	};

	const MINOR_FALSE = 20;
	const MINOR_TRUE = 21;
	const MINOR_NULL = 22;
	const MINOR_UNDEFINED = 23;
	function decodeUndefined(_data, _pos, _minor, options) {
	  if (options.allowUndefined === false) {
	    throw new Error(`${ decodeErrPrefix } undefined values are not supported`);
	  } else if (options.coerceUndefinedToNull === true) {
	    return new Token$1(Type.null, null, 1);
	  }
	  return new Token$1(Type.undefined, undefined, 1);
	}
	function decodeBreak(_data, _pos, _minor, options) {
	  if (options.allowIndefinite === false) {
	    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);
	  }
	  return new Token$1(Type.break, undefined, 1);
	}
	function createToken(value, bytes, options) {
	  if (options) {
	    if (options.allowNaN === false && Number.isNaN(value)) {
	      throw new Error(`${ decodeErrPrefix } NaN values are not supported`);
	    }
	    if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {
	      throw new Error(`${ decodeErrPrefix } Infinity values are not supported`);
	    }
	  }
	  return new Token$1(Type.float, value, bytes);
	}
	function decodeFloat16(data, pos, _minor, options) {
	  return createToken(readFloat16(data, pos + 1), 3, options);
	}
	function decodeFloat32(data, pos, _minor, options) {
	  return createToken(readFloat32(data, pos + 1), 5, options);
	}
	function decodeFloat64(data, pos, _minor, options) {
	  return createToken(readFloat64(data, pos + 1), 9, options);
	}
	function encodeFloat(buf, token, options) {
	  const float = token.value;
	  if (float === false) {
	    buf.push([Type.float.majorEncoded | MINOR_FALSE]);
	  } else if (float === true) {
	    buf.push([Type.float.majorEncoded | MINOR_TRUE]);
	  } else if (float === null) {
	    buf.push([Type.float.majorEncoded | MINOR_NULL]);
	  } else if (float === undefined) {
	    buf.push([Type.float.majorEncoded | MINOR_UNDEFINED]);
	  } else {
	    let decoded;
	    let success = false;
	    if (!options || options.float64 !== true) {
	      encodeFloat16(float);
	      decoded = readFloat16(ui8a, 1);
	      if (float === decoded || Number.isNaN(float)) {
	        ui8a[0] = 249;
	        buf.push(ui8a.slice(0, 3));
	        success = true;
	      } else {
	        encodeFloat32(float);
	        decoded = readFloat32(ui8a, 1);
	        if (float === decoded) {
	          ui8a[0] = 250;
	          buf.push(ui8a.slice(0, 5));
	          success = true;
	        }
	      }
	    }
	    if (!success) {
	      encodeFloat64(float);
	      decoded = readFloat64(ui8a, 1);
	      ui8a[0] = 251;
	      buf.push(ui8a.slice(0, 9));
	    }
	  }
	}
	encodeFloat.encodedSize = function encodedSize(token, options) {
	  const float = token.value;
	  if (float === false || float === true || float === null || float === undefined) {
	    return 1;
	  }
	  if (!options || options.float64 !== true) {
	    encodeFloat16(float);
	    let decoded = readFloat16(ui8a, 1);
	    if (float === decoded || Number.isNaN(float)) {
	      return 3;
	    }
	    encodeFloat32(float);
	    decoded = readFloat32(ui8a, 1);
	    if (float === decoded) {
	      return 5;
	    }
	  }
	  return 9;
	};
	const buffer = new ArrayBuffer(9);
	const dataView = new DataView(buffer, 1);
	const ui8a = new Uint8Array(buffer, 0);
	function encodeFloat16(inp) {
	  if (inp === Infinity) {
	    dataView.setUint16(0, 31744, false);
	  } else if (inp === -Infinity) {
	    dataView.setUint16(0, 64512, false);
	  } else if (Number.isNaN(inp)) {
	    dataView.setUint16(0, 32256, false);
	  } else {
	    dataView.setFloat32(0, inp);
	    const valu32 = dataView.getUint32(0);
	    const exponent = (valu32 & 2139095040) >> 23;
	    const mantissa = valu32 & 8388607;
	    if (exponent === 255) {
	      dataView.setUint16(0, 31744, false);
	    } else if (exponent === 0) {
	      dataView.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);
	    } else {
	      const logicalExponent = exponent - 127;
	      if (logicalExponent < -24) {
	        dataView.setUint16(0, 0);
	      } else if (logicalExponent < -14) {
	        dataView.setUint16(0, (valu32 & 2147483648) >> 16 | 1 << 24 + logicalExponent, false);
	      } else {
	        dataView.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
	      }
	    }
	  }
	}
	function readFloat16(ui8a, pos) {
	  if (ui8a.length - pos < 2) {
	    throw new Error(`${ decodeErrPrefix } not enough data for float16`);
	  }
	  const half = (ui8a[pos] << 8) + ui8a[pos + 1];
	  if (half === 31744) {
	    return Infinity;
	  }
	  if (half === 64512) {
	    return -Infinity;
	  }
	  if (half === 32256) {
	    return NaN;
	  }
	  const exp = half >> 10 & 31;
	  const mant = half & 1023;
	  let val;
	  if (exp === 0) {
	    val = mant * 2 ** -24;
	  } else if (exp !== 31) {
	    val = (mant + 1024) * 2 ** (exp - 25);
	  } else {
	    val = mant === 0 ? Infinity : NaN;
	  }
	  return half & 32768 ? -val : val;
	}
	function encodeFloat32(inp) {
	  dataView.setFloat32(0, inp, false);
	}
	function readFloat32(ui8a, pos) {
	  if (ui8a.length - pos < 4) {
	    throw new Error(`${ decodeErrPrefix } not enough data for float32`);
	  }
	  const offset = (ui8a.byteOffset || 0) + pos;
	  return new DataView(ui8a.buffer, offset, 4).getFloat32(0, false);
	}
	function encodeFloat64(inp) {
	  dataView.setFloat64(0, inp, false);
	}
	function readFloat64(ui8a, pos) {
	  if (ui8a.length - pos < 8) {
	    throw new Error(`${ decodeErrPrefix } not enough data for float64`);
	  }
	  const offset = (ui8a.byteOffset || 0) + pos;
	  return new DataView(ui8a.buffer, offset, 8).getFloat64(0, false);
	}
	encodeFloat.compareTokens = encodeUint.compareTokens;

	function invalidMinor(data, pos, minor) {
	  throw new Error(`${ decodeErrPrefix } encountered invalid minor (${ minor }) for major ${ data[pos] >>> 5 }`);
	}
	function errorer(msg) {
	  return () => {
	    throw new Error(`${ decodeErrPrefix } ${ msg }`);
	  };
	}
	const jump = [];
	for (let i = 0; i <= 23; i++) {
	  jump[i] = invalidMinor;
	}
	jump[24] = decodeUint8;
	jump[25] = decodeUint16;
	jump[26] = decodeUint32;
	jump[27] = decodeUint64;
	jump[28] = invalidMinor;
	jump[29] = invalidMinor;
	jump[30] = invalidMinor;
	jump[31] = invalidMinor;
	for (let i = 32; i <= 55; i++) {
	  jump[i] = invalidMinor;
	}
	jump[56] = decodeNegint8;
	jump[57] = decodeNegint16;
	jump[58] = decodeNegint32;
	jump[59] = decodeNegint64;
	jump[60] = invalidMinor;
	jump[61] = invalidMinor;
	jump[62] = invalidMinor;
	jump[63] = invalidMinor;
	for (let i = 64; i <= 87; i++) {
	  jump[i] = decodeBytesCompact;
	}
	jump[88] = decodeBytes8;
	jump[89] = decodeBytes16;
	jump[90] = decodeBytes32;
	jump[91] = decodeBytes64;
	jump[92] = invalidMinor;
	jump[93] = invalidMinor;
	jump[94] = invalidMinor;
	jump[95] = errorer('indefinite length bytes/strings are not supported');
	for (let i = 96; i <= 119; i++) {
	  jump[i] = decodeStringCompact;
	}
	jump[120] = decodeString8;
	jump[121] = decodeString16;
	jump[122] = decodeString32;
	jump[123] = decodeString64;
	jump[124] = invalidMinor;
	jump[125] = invalidMinor;
	jump[126] = invalidMinor;
	jump[127] = errorer('indefinite length bytes/strings are not supported');
	for (let i = 128; i <= 151; i++) {
	  jump[i] = decodeArrayCompact;
	}
	jump[152] = decodeArray8;
	jump[153] = decodeArray16;
	jump[154] = decodeArray32;
	jump[155] = decodeArray64;
	jump[156] = invalidMinor;
	jump[157] = invalidMinor;
	jump[158] = invalidMinor;
	jump[159] = decodeArrayIndefinite;
	for (let i = 160; i <= 183; i++) {
	  jump[i] = decodeMapCompact;
	}
	jump[184] = decodeMap8;
	jump[185] = decodeMap16;
	jump[186] = decodeMap32;
	jump[187] = decodeMap64;
	jump[188] = invalidMinor;
	jump[189] = invalidMinor;
	jump[190] = invalidMinor;
	jump[191] = decodeMapIndefinite;
	for (let i = 192; i <= 215; i++) {
	  jump[i] = decodeTagCompact;
	}
	jump[216] = decodeTag8;
	jump[217] = decodeTag16;
	jump[218] = decodeTag32;
	jump[219] = decodeTag64;
	jump[220] = invalidMinor;
	jump[221] = invalidMinor;
	jump[222] = invalidMinor;
	jump[223] = invalidMinor;
	for (let i = 224; i <= 243; i++) {
	  jump[i] = errorer('simple values are not supported');
	}
	jump[244] = invalidMinor;
	jump[245] = invalidMinor;
	jump[246] = invalidMinor;
	jump[247] = decodeUndefined;
	jump[248] = errorer('simple values are not supported');
	jump[249] = decodeFloat16;
	jump[250] = decodeFloat32;
	jump[251] = decodeFloat64;
	jump[252] = invalidMinor;
	jump[253] = invalidMinor;
	jump[254] = invalidMinor;
	jump[255] = decodeBreak;
	const quick = [];
	for (let i = 0; i < 24; i++) {
	  quick[i] = new Token$1(Type.uint, i, 1);
	}
	for (let i = -1; i >= -24; i--) {
	  quick[31 - i] = new Token$1(Type.negint, i, 1);
	}
	quick[64] = new Token$1(Type.bytes, new Uint8Array(0), 1);
	quick[96] = new Token$1(Type.string, '', 1);
	quick[128] = new Token$1(Type.array, 0, 1);
	quick[160] = new Token$1(Type.map, 0, 1);
	quick[244] = new Token$1(Type.false, false, 1);
	quick[245] = new Token$1(Type.true, true, 1);
	quick[246] = new Token$1(Type.null, null, 1);
	function quickEncodeToken(token) {
	  switch (token.type) {
	  case Type.false:
	    return fromArray([244]);
	  case Type.true:
	    return fromArray([245]);
	  case Type.null:
	    return fromArray([246]);
	  case Type.bytes:
	    if (!token.value.length) {
	      return fromArray([64]);
	    }
	    return;
	  case Type.string:
	    if (token.value === '') {
	      return fromArray([96]);
	    }
	    return;
	  case Type.array:
	    if (token.value === 0) {
	      return fromArray([128]);
	    }
	    return;
	  case Type.map:
	    if (token.value === 0) {
	      return fromArray([160]);
	    }
	    return;
	  case Type.uint:
	    if (token.value < 24) {
	      return fromArray([Number(token.value)]);
	    }
	    return;
	  case Type.negint:
	    if (token.value >= -24) {
	      return fromArray([31 - Number(token.value)]);
	    }
	  }
	}

	const defaultEncodeOptions = {
	  float64: false,
	  mapSorter,
	  quickEncodeToken
	};
	function makeCborEncoders() {
	  const encoders = [];
	  encoders[Type.uint.major] = encodeUint;
	  encoders[Type.negint.major] = encodeNegint;
	  encoders[Type.bytes.major] = encodeBytes$1;
	  encoders[Type.string.major] = encodeString;
	  encoders[Type.array.major] = encodeArray;
	  encoders[Type.map.major] = encodeMap;
	  encoders[Type.tag.major] = encodeTag;
	  encoders[Type.float.major] = encodeFloat;
	  return encoders;
	}
	const cborEncoders = makeCborEncoders();
	const buf = new Bl();
	class Ref {
	  constructor(obj, parent) {
	    this.obj = obj;
	    this.parent = parent;
	  }
	  includes(obj) {
	    let p = this;
	    do {
	      if (p.obj === obj) {
	        return true;
	      }
	    } while (p = p.parent);
	    return false;
	  }
	  static createCheck(stack, obj) {
	    if (stack && stack.includes(obj)) {
	      throw new Error(`${ encodeErrPrefix } object contains circular references`);
	    }
	    return new Ref(obj, stack);
	  }
	}
	const simpleTokens = {
	  null: new Token$1(Type.null, null),
	  undefined: new Token$1(Type.undefined, undefined),
	  true: new Token$1(Type.true, true),
	  false: new Token$1(Type.false, false),
	  emptyArray: new Token$1(Type.array, 0),
	  emptyMap: new Token$1(Type.map, 0)
	};
	const typeEncoders = {
	  number(obj, _typ, _options, _refStack) {
	    if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {
	      return new Token$1(Type.float, obj);
	    } else if (obj >= 0) {
	      return new Token$1(Type.uint, obj);
	    } else {
	      return new Token$1(Type.negint, obj);
	    }
	  },
	  bigint(obj, _typ, _options, _refStack) {
	    if (obj >= BigInt(0)) {
	      return new Token$1(Type.uint, obj);
	    } else {
	      return new Token$1(Type.negint, obj);
	    }
	  },
	  Uint8Array(obj, _typ, _options, _refStack) {
	    return new Token$1(Type.bytes, obj);
	  },
	  string(obj, _typ, _options, _refStack) {
	    return new Token$1(Type.string, obj);
	  },
	  boolean(obj, _typ, _options, _refStack) {
	    return obj ? simpleTokens.true : simpleTokens.false;
	  },
	  null(_obj, _typ, _options, _refStack) {
	    return simpleTokens.null;
	  },
	  undefined(_obj, _typ, _options, _refStack) {
	    return simpleTokens.undefined;
	  },
	  ArrayBuffer(obj, _typ, _options, _refStack) {
	    return new Token$1(Type.bytes, new Uint8Array(obj));
	  },
	  DataView(obj, _typ, _options, _refStack) {
	    return new Token$1(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
	  },
	  Array(obj, _typ, options, refStack) {
	    if (!obj.length) {
	      if (options.addBreakTokens === true) {
	        return [
	          simpleTokens.emptyArray,
	          new Token$1(Type.break)
	        ];
	      }
	      return simpleTokens.emptyArray;
	    }
	    refStack = Ref.createCheck(refStack, obj);
	    const entries = [];
	    let i = 0;
	    for (const e of obj) {
	      entries[i++] = objectToTokens(e, options, refStack);
	    }
	    if (options.addBreakTokens) {
	      return [
	        new Token$1(Type.array, obj.length),
	        entries,
	        new Token$1(Type.break)
	      ];
	    }
	    return [
	      new Token$1(Type.array, obj.length),
	      entries
	    ];
	  },
	  Object(obj, typ, options, refStack) {
	    const isMap = typ !== 'Object';
	    const keys = isMap ? obj.keys() : Object.keys(obj);
	    const length = isMap ? obj.size : keys.length;
	    if (!length) {
	      if (options.addBreakTokens === true) {
	        return [
	          simpleTokens.emptyMap,
	          new Token$1(Type.break)
	        ];
	      }
	      return simpleTokens.emptyMap;
	    }
	    refStack = Ref.createCheck(refStack, obj);
	    const entries = [];
	    let i = 0;
	    for (const key of keys) {
	      entries[i++] = [
	        objectToTokens(key, options, refStack),
	        objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)
	      ];
	    }
	    sortMapEntries(entries, options);
	    if (options.addBreakTokens) {
	      return [
	        new Token$1(Type.map, length),
	        entries,
	        new Token$1(Type.break)
	      ];
	    }
	    return [
	      new Token$1(Type.map, length),
	      entries
	    ];
	  }
	};
	typeEncoders.Map = typeEncoders.Object;
	typeEncoders.Buffer = typeEncoders.Uint8Array;
	for (const typ of 'Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64'.split(' ')) {
	  typeEncoders[`${ typ }Array`] = typeEncoders.DataView;
	}
	function objectToTokens(obj, options = {}, refStack) {
	  const typ = is(obj);
	  const customTypeEncoder = options && options.typeEncoders && options.typeEncoders[typ] || typeEncoders[typ];
	  if (typeof customTypeEncoder === 'function') {
	    const tokens = customTypeEncoder(obj, typ, options, refStack);
	    if (tokens != null) {
	      return tokens;
	    }
	  }
	  const typeEncoder = typeEncoders[typ];
	  if (!typeEncoder) {
	    throw new Error(`${ encodeErrPrefix } unsupported type: ${ typ }`);
	  }
	  return typeEncoder(obj, typ, options, refStack);
	}
	function sortMapEntries(entries, options) {
	  if (options.mapSorter) {
	    entries.sort(options.mapSorter);
	  }
	}
	function mapSorter(e1, e2) {
	  const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];
	  const keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];
	  if (keyToken1.type !== keyToken2.type) {
	    return keyToken1.type.compare(keyToken2.type);
	  }
	  const major = keyToken1.type.major;
	  const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);
	  if (tcmp === 0) {
	    console.warn('WARNING: complex key types used, CBOR key sorting guarantees are gone');
	  }
	  return tcmp;
	}
	function tokensToEncoded(buf, tokens, encoders, options) {
	  if (Array.isArray(tokens)) {
	    for (const token of tokens) {
	      tokensToEncoded(buf, token, encoders, options);
	    }
	  } else {
	    encoders[tokens.type.major](buf, tokens, options);
	  }
	}
	function encodeCustom(data, encoders, options) {
	  const tokens = objectToTokens(data, options);
	  if (!Array.isArray(tokens) && options.quickEncodeToken) {
	    const quickBytes = options.quickEncodeToken(tokens);
	    if (quickBytes) {
	      return quickBytes;
	    }
	    const encoder = encoders[tokens.type.major];
	    if (encoder.encodedSize) {
	      const size = encoder.encodedSize(tokens, options);
	      const buf = new Bl(size);
	      encoder(buf, tokens, options);
	      if (buf.chunks.length !== 1) {
	        throw new Error(`Unexpected error: pre-calculated length for ${ tokens } was wrong`);
	      }
	      return asU8A(buf.chunks[0]);
	    }
	  }
	  buf.reset();
	  tokensToEncoded(buf, tokens, encoders, options);
	  return buf.toBytes(true);
	}
	function encode$c(data, options) {
	  options = Object.assign({}, defaultEncodeOptions, options);
	  return encodeCustom(data, cborEncoders, options);
	}

	const defaultDecodeOptions = {
	  strict: false,
	  allowIndefinite: true,
	  allowUndefined: true,
	  allowBigInt: true
	};
	class Tokeniser {
	  constructor(data, options = {}) {
	    this.pos = 0;
	    this.data = data;
	    this.options = options;
	  }
	  done() {
	    return this.pos >= this.data.length;
	  }
	  next() {
	    const byt = this.data[this.pos];
	    let token = quick[byt];
	    if (token === undefined) {
	      const decoder = jump[byt];
	      if (!decoder) {
	        throw new Error(`${ decodeErrPrefix } no decoder for major type ${ byt >>> 5 } (byte 0x${ byt.toString(16).padStart(2, '0') })`);
	      }
	      const minor = byt & 31;
	      token = decoder(this.data, this.pos, minor, this.options);
	    }
	    this.pos += token.encodedLength;
	    return token;
	  }
	}
	const DONE = Symbol.for('DONE');
	const BREAK = Symbol.for('BREAK');
	function tokenToArray(token, tokeniser, options) {
	  const arr = [];
	  for (let i = 0; i < token.value; i++) {
	    const value = tokensToObject(tokeniser, options);
	    if (value === BREAK) {
	      if (token.value === Infinity) {
	        break;
	      }
	      throw new Error(`${ decodeErrPrefix } got unexpected break to lengthed array`);
	    }
	    if (value === DONE) {
	      throw new Error(`${ decodeErrPrefix } found array but not enough entries (got ${ i }, expected ${ token.value })`);
	    }
	    arr[i] = value;
	  }
	  return arr;
	}
	function tokenToMap(token, tokeniser, options) {
	  const useMaps = options.useMaps === true;
	  const obj = useMaps ? undefined : {};
	  const m = useMaps ? new Map() : undefined;
	  for (let i = 0; i < token.value; i++) {
	    const key = tokensToObject(tokeniser, options);
	    if (key === BREAK) {
	      if (token.value === Infinity) {
	        break;
	      }
	      throw new Error(`${ decodeErrPrefix } got unexpected break to lengthed map`);
	    }
	    if (key === DONE) {
	      throw new Error(`${ decodeErrPrefix } found map but not enough entries (got ${ i } [no key], expected ${ token.value })`);
	    }
	    if (useMaps !== true && typeof key !== 'string') {
	      throw new Error(`${ decodeErrPrefix } non-string keys not supported (got ${ typeof key })`);
	    }
	    if (options.rejectDuplicateMapKeys === true) {
	      if (useMaps && m.has(key) || !useMaps && key in obj) {
	        throw new Error(`${ decodeErrPrefix } found repeat map key "${ key }"`);
	      }
	    }
	    const value = tokensToObject(tokeniser, options);
	    if (value === DONE) {
	      throw new Error(`${ decodeErrPrefix } found map but not enough entries (got ${ i } [no value], expected ${ token.value })`);
	    }
	    if (useMaps) {
	      m.set(key, value);
	    } else {
	      obj[key] = value;
	    }
	  }
	  return useMaps ? m : obj;
	}
	function tokensToObject(tokeniser, options) {
	  if (tokeniser.done()) {
	    return DONE;
	  }
	  const token = tokeniser.next();
	  if (token.type === Type.break) {
	    return BREAK;
	  }
	  if (token.type.terminal) {
	    return token.value;
	  }
	  if (token.type === Type.array) {
	    return tokenToArray(token, tokeniser, options);
	  }
	  if (token.type === Type.map) {
	    return tokenToMap(token, tokeniser, options);
	  }
	  if (token.type === Type.tag) {
	    if (options.tags && typeof options.tags[token.value] === 'function') {
	      const tagged = tokensToObject(tokeniser, options);
	      return options.tags[token.value](tagged);
	    }
	    throw new Error(`${ decodeErrPrefix } tag not supported (${ token.value })`);
	  }
	  throw new Error('unsupported');
	}
	function decode$b(data, options) {
	  if (!(data instanceof Uint8Array)) {
	    throw new Error(`${ decodeErrPrefix } data to decode must be a Uint8Array`);
	  }
	  options = Object.assign({}, defaultDecodeOptions, options);
	  const tokeniser = options.tokenizer || new Tokeniser(data, options);
	  const decoded = tokensToObject(tokeniser, options);
	  if (decoded === DONE) {
	    throw new Error(`${ decodeErrPrefix } did not find any content to decode`);
	  }
	  if (decoded === BREAK) {
	    throw new Error(`${ decodeErrPrefix } got unexpected break`);
	  }
	  if (!tokeniser.done()) {
	    throw new Error(`${ decodeErrPrefix } too many terminals, data makes no sense`);
	  }
	  return decoded;
	}

	const CID_CBOR_TAG$1 = 42;
	function cidEncoder$1(obj) {
	  if (obj.asCID !== obj) {
	    return null;
	  }
	  const cid = CID.asCID(obj);
	  if (!cid) {
	    return null;
	  }
	  const bytes = new Uint8Array(cid.bytes.byteLength + 1);
	  bytes.set(cid.bytes, 1);
	  return [
	    new Token$1(Type.tag, CID_CBOR_TAG$1),
	    new Token$1(Type.bytes, bytes)
	  ];
	}
	function undefinedEncoder$1() {
	  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');
	}
	function numberEncoder$1(num) {
	  if (Number.isNaN(num)) {
	    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  if (num === Infinity || num === -Infinity) {
	    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  return null;
	}
	const encodeOptions$1 = {
	  float64: true,
	  typeEncoders: {
	    Object: cidEncoder$1,
	    undefined: undefinedEncoder$1,
	    number: numberEncoder$1
	  }
	};
	function cidDecoder$1(bytes) {
	  if (bytes[0] !== 0) {
	    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');
	  }
	  return CID.decode(bytes.subarray(1));
	}
	const decodeOptions$1 = {
	  allowIndefinite: false,
	  coerceUndefinedToNull: true,
	  allowNaN: false,
	  allowInfinity: false,
	  allowBigInt: true,
	  strict: true,
	  useMaps: false,
	  tags: []
	};
	decodeOptions$1.tags[CID_CBOR_TAG$1] = cidDecoder$1;
	const name$6 = 'dag-cbor';
	const code$5 = 113;
	const encode$b = node => encode$c(node, encodeOptions$1);
	const decode$a = data => decode$b(data, decodeOptions$1);

	const CIDV0_BYTES = {
	  SHA2_256: 18,
	  LENGTH: 32,
	  DAG_PB: 112
	};
	async function readVarint(reader) {
	  const bytes = await reader.upTo(8);
	  const i = varint$2.decode(bytes);
	  reader.seek(varint$2.decode.bytes);
	  return i;
	}
	async function readHeader(reader) {
	  const length = await readVarint(reader);
	  if (length === 0) {
	    throw new Error('Invalid CAR header (zero length)');
	  }
	  const header = await reader.exactly(length);
	  reader.seek(length);
	  const block = decode$a(header);
	  if (block == null || Array.isArray(block) || typeof block !== 'object') {
	    throw new Error('Invalid CAR header format');
	  }
	  if (block.version !== 1) {
	    if (typeof block.version === 'string') {
	      throw new Error(`Invalid CAR version: "${ block.version }"`);
	    }
	    throw new Error(`Invalid CAR version: ${ block.version }`);
	  }
	  if (!Array.isArray(block.roots)) {
	    throw new Error('Invalid CAR header format');
	  }
	  if (Object.keys(block).filter(p => p !== 'roots' && p !== 'version').length) {
	    throw new Error('Invalid CAR header format');
	  }
	  return block;
	}
	async function readMultihash(reader) {
	  const bytes = await reader.upTo(8);
	  varint$2.decode(bytes);
	  const codeLength = varint$2.decode.bytes;
	  const length = varint$2.decode(bytes.subarray(varint$2.decode.bytes));
	  const lengthLength = varint$2.decode.bytes;
	  const mhLength = codeLength + lengthLength + length;
	  const multihash = await reader.exactly(mhLength);
	  reader.seek(mhLength);
	  return multihash;
	}
	async function readCid(reader) {
	  const first = await reader.exactly(2);
	  if (first[0] === CIDV0_BYTES.SHA2_256 && first[1] === CIDV0_BYTES.LENGTH) {
	    const bytes = await reader.exactly(34);
	    reader.seek(34);
	    const multihash = decode$d(bytes);
	    return CID.create(0, CIDV0_BYTES.DAG_PB, multihash);
	  }
	  const version = await readVarint(reader);
	  if (version !== 1) {
	    throw new Error(`Unexpected CID version (${ version })`);
	  }
	  const codec = await readVarint(reader);
	  const bytes = await readMultihash(reader);
	  const multihash = decode$d(bytes);
	  return CID.create(version, codec, multihash);
	}
	async function readBlockHead(reader) {
	  const start = reader.pos;
	  let length = await readVarint(reader);
	  if (length === 0) {
	    throw new Error('Invalid CAR section (zero length)');
	  }
	  length += reader.pos - start;
	  const cid = await readCid(reader);
	  const blockLength = length - (reader.pos - start);
	  return {
	    cid,
	    length,
	    blockLength
	  };
	}
	async function readBlock(reader) {
	  const {cid, blockLength} = await readBlockHead(reader);
	  const bytes = await reader.exactly(blockLength);
	  reader.seek(blockLength);
	  return {
	    bytes,
	    cid
	  };
	}
	async function readBlockIndex(reader) {
	  const offset = reader.pos;
	  const {cid, length, blockLength} = await readBlockHead(reader);
	  const index = {
	    cid,
	    length,
	    blockLength,
	    offset,
	    blockOffset: reader.pos
	  };
	  reader.seek(index.blockLength);
	  return index;
	}
	function createDecoder(reader) {
	  const headerPromise = readHeader(reader);
	  return {
	    header: () => headerPromise,
	    async *blocks() {
	      await headerPromise;
	      while ((await reader.upTo(8)).length > 0) {
	        yield await readBlock(reader);
	      }
	    },
	    async *blocksIndex() {
	      await headerPromise;
	      while ((await reader.upTo(8)).length > 0) {
	        yield await readBlockIndex(reader);
	      }
	    }
	  };
	}
	function bytesReader(bytes) {
	  let pos = 0;
	  return {
	    async upTo(length) {
	      return bytes.subarray(pos, pos + Math.min(length, bytes.length - pos));
	    },
	    async exactly(length) {
	      if (length > bytes.length - pos) {
	        throw new Error('Unexpected end of data');
	      }
	      return bytes.subarray(pos, pos + length);
	    },
	    seek(length) {
	      pos += length;
	    },
	    get pos() {
	      return pos;
	    }
	  };
	}
	function chunkReader(readChunk) {
	  let pos = 0;
	  let have = 0;
	  let offset = 0;
	  let currentChunk = new Uint8Array(0);
	  const read = async length => {
	    have = currentChunk.length - offset;
	    const bufa = [currentChunk.subarray(offset)];
	    while (have < length) {
	      const chunk = await readChunk();
	      if (chunk == null) {
	        break;
	      }
	      if (have < 0) {
	        if (chunk.length > have) {
	          bufa.push(chunk.subarray(-have));
	        }
	      } else {
	        bufa.push(chunk);
	      }
	      have += chunk.length;
	    }
	    currentChunk = new Uint8Array(bufa.reduce((p, c) => p + c.length, 0));
	    let off = 0;
	    for (const b of bufa) {
	      currentChunk.set(b, off);
	      off += b.length;
	    }
	    offset = 0;
	  };
	  return {
	    async upTo(length) {
	      if (currentChunk.length - offset < length) {
	        await read(length);
	      }
	      return currentChunk.subarray(offset, offset + Math.min(currentChunk.length - offset, length));
	    },
	    async exactly(length) {
	      if (currentChunk.length - offset < length) {
	        await read(length);
	      }
	      if (currentChunk.length - offset < length) {
	        throw new Error('Unexpected end of data');
	      }
	      return currentChunk.subarray(offset, offset + length);
	    },
	    seek(length) {
	      pos += length;
	      offset += length;
	    },
	    get pos() {
	      return pos;
	    }
	  };
	}
	function asyncIterableReader(asyncIterable) {
	  const iterator = asyncIterable[Symbol.asyncIterator]();
	  async function readChunk() {
	    const next = await iterator.next();
	    if (next.done) {
	      return null;
	    }
	    return next.value;
	  }
	  return chunkReader(readChunk);
	}

	class CarReader {
	  constructor(version, roots, blocks) {
	    this._version = version;
	    this._roots = roots;
	    this._blocks = blocks;
	    this._keys = blocks.map(b => b.cid.toString());
	  }
	  get version() {
	    return this._version;
	  }
	  async getRoots() {
	    return this._roots;
	  }
	  async has(key) {
	    return this._keys.indexOf(key.toString()) > -1;
	  }
	  async get(key) {
	    const index = this._keys.indexOf(key.toString());
	    return index > -1 ? this._blocks[index] : undefined;
	  }
	  async *blocks() {
	    for (const block of this._blocks) {
	      yield block;
	    }
	  }
	  async *cids() {
	    for (const block of this._blocks) {
	      yield block.cid;
	    }
	  }
	  static async fromBytes(bytes) {
	    if (!(bytes instanceof Uint8Array)) {
	      throw new TypeError('fromBytes() requires a Uint8Array');
	    }
	    return decodeReaderComplete(bytesReader(bytes));
	  }
	  static async fromIterable(asyncIterable) {
	    if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {
	      throw new TypeError('fromIterable() requires an async iterable');
	    }
	    return decodeReaderComplete(asyncIterableReader(asyncIterable));
	  }
	}
	async function decodeReaderComplete(reader) {
	  const decoder = createDecoder(reader);
	  const {version, roots} = await decoder.header();
	  const blocks = [];
	  for await (const block of decoder.blocks()) {
	    blocks.push(block);
	  }
	  return new CarReader(version, roots, blocks);
	}
	const __browser$2 = true;

	class CarIndexer {
	  constructor(version, roots, iterator) {
	    this._version = version;
	    this._roots = roots;
	    this._iterator = iterator;
	  }
	  get version() {
	    return this._version;
	  }
	  async getRoots() {
	    return this._roots;
	  }
	  [Symbol.asyncIterator]() {
	    return this._iterator;
	  }
	  static async fromBytes(bytes) {
	    if (!(bytes instanceof Uint8Array)) {
	      throw new TypeError('fromBytes() requires a Uint8Array');
	    }
	    return decodeIndexerComplete(bytesReader(bytes));
	  }
	  static async fromIterable(asyncIterable) {
	    if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {
	      throw new TypeError('fromIterable() requires an async iterable');
	    }
	    return decodeIndexerComplete(asyncIterableReader(asyncIterable));
	  }
	}
	async function decodeIndexerComplete(reader) {
	  const decoder = createDecoder(reader);
	  const {version, roots} = await decoder.header();
	  return new CarIndexer(version, roots, decoder.blocksIndex());
	}

	class CarIteratorBase {
	  constructor(version, roots, iterable) {
	    this._version = version;
	    this._roots = roots;
	    this._iterable = iterable;
	    this._decoded = false;
	  }
	  get version() {
	    return this._version;
	  }
	  async getRoots() {
	    return this._roots;
	  }
	}
	class CarBlockIterator extends CarIteratorBase {
	  [Symbol.asyncIterator]() {
	    if (this._decoded) {
	      throw new Error('Cannot decode more than once');
	    }
	    if (!this._iterable) {
	      throw new Error('Block iterable not found');
	    }
	    this._decoded = true;
	    return this._iterable[Symbol.asyncIterator]();
	  }
	  static async fromBytes(bytes) {
	    const {version, roots, iterator} = await fromBytes(bytes);
	    return new CarBlockIterator(version, roots, iterator);
	  }
	  static async fromIterable(asyncIterable) {
	    const {version, roots, iterator} = await fromIterable(asyncIterable);
	    return new CarBlockIterator(version, roots, iterator);
	  }
	}
	class CarCIDIterator extends CarIteratorBase {
	  [Symbol.asyncIterator]() {
	    if (this._decoded) {
	      throw new Error('Cannot decode more than once');
	    }
	    if (!this._iterable) {
	      throw new Error('Block iterable not found');
	    }
	    this._decoded = true;
	    const iterable = this._iterable[Symbol.asyncIterator]();
	    return {
	      async next() {
	        const next = await iterable.next();
	        if (next.done) {
	          return next;
	        }
	        return {
	          done: false,
	          value: next.value.cid
	        };
	      }
	    };
	  }
	  static async fromBytes(bytes) {
	    const {version, roots, iterator} = await fromBytes(bytes);
	    return new CarCIDIterator(version, roots, iterator);
	  }
	  static async fromIterable(asyncIterable) {
	    const {version, roots, iterator} = await fromIterable(asyncIterable);
	    return new CarCIDIterator(version, roots, iterator);
	  }
	}
	async function fromBytes(bytes) {
	  if (!(bytes instanceof Uint8Array)) {
	    throw new TypeError('fromBytes() requires a Uint8Array');
	  }
	  return decodeIterator(bytesReader(bytes));
	}
	async function fromIterable(asyncIterable) {
	  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {
	    throw new TypeError('fromIterable() requires an async iterable');
	  }
	  return decodeIterator(asyncIterableReader(asyncIterable));
	}
	async function decodeIterator(reader) {
	  const decoder = createDecoder(reader);
	  const {version, roots} = await decoder.header();
	  return {
	    version,
	    roots,
	    iterator: decoder.blocks()
	  };
	}

	function createHeader(roots) {
	  const headerBytes = encode$b({
	    version: 1,
	    roots
	  });
	  const varintBytes = varint$2.encode(headerBytes.length);
	  const header = new Uint8Array(varintBytes.length + headerBytes.length);
	  header.set(varintBytes, 0);
	  header.set(headerBytes, varintBytes.length);
	  return header;
	}
	function createEncoder(writer) {
	  return {
	    async setRoots(roots) {
	      const bytes = createHeader(roots);
	      await writer.write(bytes);
	    },
	    async writeBlock(block) {
	      const {cid, bytes} = block;
	      await writer.write(new Uint8Array(varint$2.encode(cid.bytes.length + bytes.length)));
	      await writer.write(cid.bytes);
	      if (bytes.length) {
	        await writer.write(bytes);
	      }
	    },
	    async close() {
	      return writer.end();
	    }
	  };
	}

	function noop$1() {
	}
	function create$4() {
	  const chunkQueue = [];
	  let drainer = null;
	  let drainerResolver = noop$1;
	  let ended = false;
	  let outWait = null;
	  let outWaitResolver = noop$1;
	  const makeDrainer = () => {
	    if (!drainer) {
	      drainer = new Promise(resolve => {
	        drainerResolver = () => {
	          drainer = null;
	          drainerResolver = noop$1;
	          resolve();
	        };
	      });
	    }
	    return drainer;
	  };
	  const writer = {
	    write(chunk) {
	      chunkQueue.push(chunk);
	      const drainer = makeDrainer();
	      outWaitResolver();
	      return drainer;
	    },
	    async end() {
	      ended = true;
	      const drainer = makeDrainer();
	      outWaitResolver();
	      return drainer;
	    }
	  };
	  const iterator = {
	    async next() {
	      const chunk = chunkQueue.shift();
	      if (chunk) {
	        if (chunkQueue.length === 0) {
	          drainerResolver();
	        }
	        return {
	          done: false,
	          value: chunk
	        };
	      }
	      if (ended) {
	        drainerResolver();
	        return {
	          done: true,
	          value: undefined
	        };
	      }
	      if (!outWait) {
	        outWait = new Promise(resolve => {
	          outWaitResolver = () => {
	            outWait = null;
	            outWaitResolver = noop$1;
	            return resolve(iterator.next());
	          };
	        });
	      }
	      return outWait;
	    }
	  };
	  return {
	    writer,
	    iterator
	  };
	}

	class CarWriter {
	  constructor(roots, encoder) {
	    this._encoder = encoder;
	    this._mutex = encoder.setRoots(roots);
	    this._ended = false;
	  }
	  async put(block) {
	    if (!(block.bytes instanceof Uint8Array) || !block.cid) {
	      throw new TypeError('Can only write {cid, bytes} objects');
	    }
	    if (this._ended) {
	      throw new Error('Already closed');
	    }
	    const cid = CID.asCID(block.cid);
	    if (!cid) {
	      throw new TypeError('Can only write {cid, bytes} objects');
	    }
	    this._mutex = this._mutex.then(() => this._encoder.writeBlock({
	      cid,
	      bytes: block.bytes
	    }));
	    return this._mutex;
	  }
	  async close() {
	    if (this._ended) {
	      throw new Error('Already closed');
	    }
	    await this._mutex;
	    this._ended = true;
	    return this._encoder.close();
	  }
	  static create(roots) {
	    roots = toRoots(roots);
	    const {encoder, iterator} = encodeWriter();
	    const writer = new CarWriter(roots, encoder);
	    const out = new CarWriterOut(iterator);
	    return {
	      writer,
	      out
	    };
	  }
	  static createAppender() {
	    const {encoder, iterator} = encodeWriter();
	    encoder.setRoots = () => Promise.resolve();
	    const writer = new CarWriter([], encoder);
	    const out = new CarWriterOut(iterator);
	    return {
	      writer,
	      out
	    };
	  }
	  static async updateRootsInBytes(bytes, roots) {
	    const reader = bytesReader(bytes);
	    await readHeader(reader);
	    const newHeader = createHeader(roots);
	    if (reader.pos !== newHeader.length) {
	      throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${ reader.pos } bytes, new header is ${ newHeader.length } bytes)`);
	    }
	    bytes.set(newHeader, 0);
	    return bytes;
	  }
	}
	class CarWriterOut {
	  constructor(iterator) {
	    this._iterator = iterator;
	  }
	  [Symbol.asyncIterator]() {
	    if (this._iterating) {
	      throw new Error('Multiple iterator not supported');
	    }
	    this._iterating = true;
	    return this._iterator;
	  }
	}
	function encodeWriter() {
	  const iw = create$4();
	  const {writer, iterator} = iw;
	  const encoder = createEncoder(writer);
	  return {
	    encoder,
	    iterator
	  };
	}
	function toRoots(roots) {
	  if (roots === undefined) {
	    return [];
	  }
	  if (!Array.isArray(roots)) {
	    const cid = CID.asCID(roots);
	    if (!cid) {
	      throw new TypeError('roots must be a single CID or an array of CIDs');
	    }
	    return [cid];
	  }
	  const _roots = [];
	  for (const root of roots) {
	    const _root = CID.asCID(root);
	    if (!_root) {
	      throw new TypeError('roots must be a single CID or an array of CIDs');
	    }
	    _roots.push(_root);
	  }
	  return _roots;
	}
	const __browser$1 = true;

	class CarIndexedReader {
	  static async fromFile() {
	    throw new Error('Unsupported in this environment');
	  }
	}
	const __browser = true;

	const from = ({name, code, encode}) => new Hasher(name, code, encode);
	class Hasher {
	  constructor(name, code, encode) {
	    this.name = name;
	    this.code = code;
	    this.encode = encode;
	  }
	  digest(input) {
	    if (input instanceof Uint8Array) {
	      const result = this.encode(input);
	      return result instanceof Uint8Array ? create$5(this.code, result) : result.then(digest => create$5(this.code, digest));
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}

	var hasher = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Hasher: Hasher,
		from: from
	});

	const readonly = ({enumerable = true, configurable = false} = {}) => ({
	  enumerable,
	  configurable,
	  writable: false
	});
	const links = function* (source, base) {
	  if (source == null)
	    return;
	  if (source instanceof Uint8Array)
	    return;
	  for (const [key, value] of Object.entries(source)) {
	    const path = [
	      ...base,
	      key
	    ];
	    if (value != null && typeof value === 'object') {
	      if (Array.isArray(value)) {
	        for (const [index, element] of value.entries()) {
	          const elementPath = [
	            ...path,
	            index
	          ];
	          const cid = CID.asCID(element);
	          if (cid) {
	            yield [
	              elementPath.join('/'),
	              cid
	            ];
	          } else if (typeof element === 'object') {
	            yield* links(element, elementPath);
	          }
	        }
	      } else {
	        const cid = CID.asCID(value);
	        if (cid) {
	          yield [
	            path.join('/'),
	            cid
	          ];
	        } else {
	          yield* links(value, path);
	        }
	      }
	    }
	  }
	};
	const tree = function* (source, base) {
	  if (source == null)
	    return;
	  for (const [key, value] of Object.entries(source)) {
	    const path = [
	      ...base,
	      key
	    ];
	    yield path.join('/');
	    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID.asCID(value)) {
	      if (Array.isArray(value)) {
	        for (const [index, element] of value.entries()) {
	          const elementPath = [
	            ...path,
	            index
	          ];
	          yield elementPath.join('/');
	          if (typeof element === 'object' && !CID.asCID(element)) {
	            yield* tree(element, elementPath);
	          }
	        }
	      } else {
	        yield* tree(value, path);
	      }
	    }
	  }
	};
	const get = (source, path) => {
	  let node = source;
	  for (const [index, key] of path.entries()) {
	    node = node[key];
	    if (node == null) {
	      throw new Error(`Object has no property at ${ path.slice(0, index + 1).map(part => `[${ JSON.stringify(part) }]`).join('') }`);
	    }
	    const cid = CID.asCID(node);
	    if (cid) {
	      return {
	        value: cid,
	        remaining: path.slice(index + 1).join('/')
	      };
	    }
	  }
	  return { value: node };
	};
	class Block {
	  constructor({cid, bytes, value}) {
	    if (!cid || !bytes || typeof value === 'undefined')
	      throw new Error('Missing required argument');
	    this.cid = cid;
	    this.bytes = bytes;
	    this.value = value;
	    this.asBlock = this;
	    Object.defineProperties(this, {
	      cid: readonly(),
	      bytes: readonly(),
	      value: readonly(),
	      asBlock: readonly()
	    });
	  }
	  links() {
	    return links(this.value, []);
	  }
	  tree() {
	    return tree(this.value, []);
	  }
	  get(path = '/') {
	    return get(this.value, path.split('/').filter(Boolean));
	  }
	}
	const encode$a = async ({value, codec, hasher}) => {
	  if (typeof value === 'undefined')
	    throw new Error('Missing required argument "value"');
	  if (!codec || !hasher)
	    throw new Error('Missing required argument: codec or hasher');
	  const bytes = codec.encode(value);
	  const hash = await hasher.digest(bytes);
	  const cid = CID.create(1, codec.code, hash);
	  return new Block({
	    value,
	    bytes,
	    cid
	  });
	};
	const decode$9 = async ({bytes, codec, hasher}) => {
	  if (!bytes)
	    throw new Error('Missing required argument "bytes"');
	  if (!codec || !hasher)
	    throw new Error('Missing required argument: codec or hasher');
	  const value = codec.decode(bytes);
	  const hash = await hasher.digest(bytes);
	  const cid = CID.create(1, codec.code, hash);
	  return new Block({
	    value,
	    bytes,
	    cid
	  });
	};
	const createUnsafe = ({
	  bytes,
	  cid,
	  value: maybeValue,
	  codec
	}) => {
	  const value = maybeValue !== undefined ? maybeValue : codec && codec.decode(bytes);
	  if (value === undefined)
	    throw new Error('Missing required argument, must either provide "value" or "codec"');
	  return new Block({
	    cid,
	    bytes,
	    value
	  });
	};
	const create$3 = async ({bytes, cid, hasher, codec}) => {
	  if (!bytes)
	    throw new Error('Missing required argument "bytes"');
	  if (!hasher)
	    throw new Error('Missing required argument "hasher"');
	  const value = codec.decode(bytes);
	  const hash = await hasher.digest(bytes);
	  if (!equals$1(cid.multihash.bytes, hash.bytes)) {
	    throw new Error('CID hash does not match bytes');
	  }
	  return createUnsafe({
	    bytes,
	    cid,
	    value,
	    codec
	  });
	};

	const name$5 = 'raw';
	const code$4 = 85;
	const encode$9 = node => coerce(node);
	const decode$8 = data => coerce(data);

	var raw = /*#__PURE__*/Object.freeze({
		__proto__: null,
		code: code$4,
		decode: decode$8,
		encode: encode$9,
		name: name$5
	});

	const CID_CBOR_TAG = 42;
	function cidEncoder(obj) {
	  if (obj.asCID !== obj) {
	    return null;
	  }
	  const cid = CID.asCID(obj);
	  if (!cid) {
	    return null;
	  }
	  const bytes = new Uint8Array(cid.bytes.byteLength + 1);
	  bytes.set(cid.bytes, 1);
	  return [
	    new Token$1(Type.tag, CID_CBOR_TAG),
	    new Token$1(Type.bytes, bytes)
	  ];
	}
	function undefinedEncoder() {
	  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');
	}
	function numberEncoder(num) {
	  if (Number.isNaN(num)) {
	    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  if (num === Infinity || num === -Infinity) {
	    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  return null;
	}
	const encodeOptions = {
	  float64: true,
	  typeEncoders: {
	    Object: cidEncoder,
	    undefined: undefinedEncoder,
	    number: numberEncoder
	  }
	};
	function cidDecoder(bytes) {
	  if (bytes[0] !== 0) {
	    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');
	  }
	  return CID.decode(bytes.subarray(1));
	}
	const decodeOptions = {
	  allowIndefinite: false,
	  allowUndefined: false,
	  allowNaN: false,
	  allowInfinity: false,
	  allowBigInt: true,
	  strict: true,
	  useMaps: false,
	  tags: []
	};
	decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;
	const name$4 = 'dag-cbor';
	const code$3 = 113;
	const encode$8 = node => encode$c(node, encodeOptions);
	const decode$7 = data => decode$b(data, decodeOptions);

	var dagCbor = /*#__PURE__*/Object.freeze({
		__proto__: null,
		code: code$3,
		decode: decode$7,
		encode: encode$8,
		name: name$4
	});

	const textDecoder$1 = new TextDecoder();
	function decodeVarint(bytes, offset) {
	  let v = 0;
	  for (let shift = 0;; shift += 7) {
	    if (shift >= 64) {
	      throw new Error('protobuf: varint overflow');
	    }
	    if (offset >= bytes.length) {
	      throw new Error('protobuf: unexpected end of data');
	    }
	    const b = bytes[offset++];
	    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;
	    if (b < 128) {
	      break;
	    }
	  }
	  return [
	    v,
	    offset
	  ];
	}
	function decodeBytes(bytes, offset) {
	  let byteLen;
	  [byteLen, offset] = decodeVarint(bytes, offset);
	  const postOffset = offset + byteLen;
	  if (byteLen < 0 || postOffset < 0) {
	    throw new Error('protobuf: invalid length');
	  }
	  if (postOffset > bytes.length) {
	    throw new Error('protobuf: unexpected end of data');
	  }
	  return [
	    bytes.subarray(offset, postOffset),
	    postOffset
	  ];
	}
	function decodeKey(bytes, index) {
	  let wire;
	  [wire, index] = decodeVarint(bytes, index);
	  return [
	    wire & 7,
	    wire >> 3,
	    index
	  ];
	}
	function decodeLink(bytes) {
	  const link = {};
	  const l = bytes.length;
	  let index = 0;
	  while (index < l) {
	    let wireType, fieldNum;
	    [wireType, fieldNum, index] = decodeKey(bytes, index);
	    if (fieldNum === 1) {
	      if (link.Hash) {
	        throw new Error('protobuf: (PBLink) duplicate Hash section');
	      }
	      if (wireType !== 2) {
	        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Hash`);
	      }
	      if (link.Name !== undefined) {
	        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');
	      }
	      if (link.Tsize !== undefined) {
	        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');
	      }
	      ;
	      [link.Hash, index] = decodeBytes(bytes, index);
	    } else if (fieldNum === 2) {
	      if (link.Name !== undefined) {
	        throw new Error('protobuf: (PBLink) duplicate Name section');
	      }
	      if (wireType !== 2) {
	        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Name`);
	      }
	      if (link.Tsize !== undefined) {
	        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');
	      }
	      let byts;
	      [byts, index] = decodeBytes(bytes, index);
	      link.Name = textDecoder$1.decode(byts);
	    } else if (fieldNum === 3) {
	      if (link.Tsize !== undefined) {
	        throw new Error('protobuf: (PBLink) duplicate Tsize section');
	      }
	      if (wireType !== 0) {
	        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Tsize`);
	      }
	      ;
	      [link.Tsize, index] = decodeVarint(bytes, index);
	    } else {
	      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${ fieldNum }`);
	    }
	  }
	  if (index > l) {
	    throw new Error('protobuf: (PBLink) unexpected end of data');
	  }
	  return link;
	}
	function decodeNode(bytes) {
	  const l = bytes.length;
	  let index = 0;
	  let links;
	  let linksBeforeData = false;
	  let data;
	  while (index < l) {
	    let wireType, fieldNum;
	    [wireType, fieldNum, index] = decodeKey(bytes, index);
	    if (wireType !== 2) {
	      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${ wireType }`);
	    }
	    if (fieldNum === 1) {
	      if (data) {
	        throw new Error('protobuf: (PBNode) duplicate Data section');
	      }
	      ;
	      [data, index] = decodeBytes(bytes, index);
	      if (links) {
	        linksBeforeData = true;
	      }
	    } else if (fieldNum === 2) {
	      if (linksBeforeData) {
	        throw new Error('protobuf: (PBNode) duplicate Links section');
	      } else if (!links) {
	        links = [];
	      }
	      let byts;
	      [byts, index] = decodeBytes(bytes, index);
	      links.push(decodeLink(byts));
	    } else {
	      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${ fieldNum }`);
	    }
	  }
	  if (index > l) {
	    throw new Error('protobuf: (PBNode) unexpected end of data');
	  }
	  const node = {};
	  if (data) {
	    node.Data = data;
	  }
	  node.Links = links || [];
	  return node;
	}

	const textEncoder$2 = new TextEncoder();
	const maxInt32 = 2 ** 32;
	const maxUInt32 = 2 ** 31;
	function encodeLink(link, bytes) {
	  let i = bytes.length;
	  if (typeof link.Tsize === 'number') {
	    if (link.Tsize < 0) {
	      throw new Error('Tsize cannot be negative');
	    }
	    if (!Number.isSafeInteger(link.Tsize)) {
	      throw new Error('Tsize too large for encoding');
	    }
	    i = encodeVarint(bytes, i, link.Tsize) - 1;
	    bytes[i] = 24;
	  }
	  if (typeof link.Name === 'string') {
	    const nameBytes = textEncoder$2.encode(link.Name);
	    i -= nameBytes.length;
	    bytes.set(nameBytes, i);
	    i = encodeVarint(bytes, i, nameBytes.length) - 1;
	    bytes[i] = 18;
	  }
	  if (link.Hash) {
	    i -= link.Hash.length;
	    bytes.set(link.Hash, i);
	    i = encodeVarint(bytes, i, link.Hash.length) - 1;
	    bytes[i] = 10;
	  }
	  return bytes.length - i;
	}
	function encodeNode(node) {
	  const size = sizeNode(node);
	  const bytes = new Uint8Array(size);
	  let i = size;
	  if (node.Data) {
	    i -= node.Data.length;
	    bytes.set(node.Data, i);
	    i = encodeVarint(bytes, i, node.Data.length) - 1;
	    bytes[i] = 10;
	  }
	  if (node.Links) {
	    for (let index = node.Links.length - 1; index >= 0; index--) {
	      const size = encodeLink(node.Links[index], bytes.subarray(0, i));
	      i -= size;
	      i = encodeVarint(bytes, i, size) - 1;
	      bytes[i] = 18;
	    }
	  }
	  return bytes;
	}
	function sizeLink(link) {
	  let n = 0;
	  if (link.Hash) {
	    const l = link.Hash.length;
	    n += 1 + l + sov(l);
	  }
	  if (typeof link.Name === 'string') {
	    const l = textEncoder$2.encode(link.Name).length;
	    n += 1 + l + sov(l);
	  }
	  if (typeof link.Tsize === 'number') {
	    n += 1 + sov(link.Tsize);
	  }
	  return n;
	}
	function sizeNode(node) {
	  let n = 0;
	  if (node.Data) {
	    const l = node.Data.length;
	    n += 1 + l + sov(l);
	  }
	  if (node.Links) {
	    for (const link of node.Links) {
	      const l = sizeLink(link);
	      n += 1 + l + sov(l);
	    }
	  }
	  return n;
	}
	function encodeVarint(bytes, offset, v) {
	  offset -= sov(v);
	  const base = offset;
	  while (v >= maxUInt32) {
	    bytes[offset++] = v & 127 | 128;
	    v /= 128;
	  }
	  while (v >= 128) {
	    bytes[offset++] = v & 127 | 128;
	    v >>>= 7;
	  }
	  bytes[offset] = v;
	  return base;
	}
	function sov(x) {
	  if (x % 2 === 0) {
	    x++;
	  }
	  return Math.floor((len64(x) + 6) / 7);
	}
	function len64(x) {
	  let n = 0;
	  if (x >= maxInt32) {
	    x = Math.floor(x / maxInt32);
	    n = 32;
	  }
	  if (x >= 1 << 16) {
	    x >>>= 16;
	    n += 16;
	  }
	  if (x >= 1 << 8) {
	    x >>>= 8;
	    n += 8;
	  }
	  return n + len8tab[x];
	}
	const len8tab = [
	  0,
	  1,
	  2,
	  2,
	  3,
	  3,
	  3,
	  3,
	  4,
	  4,
	  4,
	  4,
	  4,
	  4,
	  4,
	  4,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8
	];

	const pbNodeProperties = [
	  'Data',
	  'Links'
	];
	const pbLinkProperties = [
	  'Hash',
	  'Name',
	  'Tsize'
	];
	const textEncoder$1 = new TextEncoder();
	function linkComparator(a, b) {
	  if (a === b) {
	    return 0;
	  }
	  const abuf = a.Name ? textEncoder$1.encode(a.Name) : [];
	  const bbuf = b.Name ? textEncoder$1.encode(b.Name) : [];
	  let x = abuf.length;
	  let y = bbuf.length;
	  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (abuf[i] !== bbuf[i]) {
	      x = abuf[i];
	      y = bbuf[i];
	      break;
	    }
	  }
	  return x < y ? -1 : y < x ? 1 : 0;
	}
	function hasOnlyProperties(node, properties) {
	  return !Object.keys(node).some(p => !properties.includes(p));
	}
	function asLink(link) {
	  if (typeof link.asCID === 'object') {
	    const Hash = CID.asCID(link);
	    if (!Hash) {
	      throw new TypeError('Invalid DAG-PB form');
	    }
	    return { Hash };
	  }
	  if (typeof link !== 'object' || Array.isArray(link)) {
	    throw new TypeError('Invalid DAG-PB form');
	  }
	  const pbl = {};
	  if (link.Hash) {
	    let cid = CID.asCID(link.Hash);
	    try {
	      if (!cid) {
	        if (typeof link.Hash === 'string') {
	          cid = CID.parse(link.Hash);
	        } else if (link.Hash instanceof Uint8Array) {
	          cid = CID.decode(link.Hash);
	        }
	      }
	    } catch (e) {
	      throw new TypeError(`Invalid DAG-PB form: ${ e.message }`);
	    }
	    if (cid) {
	      pbl.Hash = cid;
	    }
	  }
	  if (!pbl.Hash) {
	    throw new TypeError('Invalid DAG-PB form');
	  }
	  if (typeof link.Name === 'string') {
	    pbl.Name = link.Name;
	  }
	  if (typeof link.Tsize === 'number') {
	    pbl.Tsize = link.Tsize;
	  }
	  return pbl;
	}
	function prepare(node) {
	  if (node instanceof Uint8Array || typeof node === 'string') {
	    node = { Data: node };
	  }
	  if (typeof node !== 'object' || Array.isArray(node)) {
	    throw new TypeError('Invalid DAG-PB form');
	  }
	  const pbn = {};
	  if (node.Data !== undefined) {
	    if (typeof node.Data === 'string') {
	      pbn.Data = textEncoder$1.encode(node.Data);
	    } else if (node.Data instanceof Uint8Array) {
	      pbn.Data = node.Data;
	    } else {
	      throw new TypeError('Invalid DAG-PB form');
	    }
	  }
	  if (node.Links !== undefined) {
	    if (Array.isArray(node.Links)) {
	      pbn.Links = node.Links.map(asLink);
	      pbn.Links.sort(linkComparator);
	    } else {
	      throw new TypeError('Invalid DAG-PB form');
	    }
	  } else {
	    pbn.Links = [];
	  }
	  return pbn;
	}
	function validate(node) {
	  if (!node || typeof node !== 'object' || Array.isArray(node)) {
	    throw new TypeError('Invalid DAG-PB form');
	  }
	  if (!hasOnlyProperties(node, pbNodeProperties)) {
	    throw new TypeError('Invalid DAG-PB form (extraneous properties)');
	  }
	  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {
	    throw new TypeError('Invalid DAG-PB form (Data must be a Uint8Array)');
	  }
	  if (!Array.isArray(node.Links)) {
	    throw new TypeError('Invalid DAG-PB form (Links must be an array)');
	  }
	  for (let i = 0; i < node.Links.length; i++) {
	    const link = node.Links[i];
	    if (!link || typeof link !== 'object' || Array.isArray(link)) {
	      throw new TypeError('Invalid DAG-PB form (bad link object)');
	    }
	    if (!hasOnlyProperties(link, pbLinkProperties)) {
	      throw new TypeError('Invalid DAG-PB form (extraneous properties on link object)');
	    }
	    if (!link.Hash) {
	      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');
	    }
	    if (link.Hash.asCID !== link.Hash) {
	      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');
	    }
	    if (link.Name !== undefined && typeof link.Name !== 'string') {
	      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');
	    }
	    if (link.Tsize !== undefined && (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0)) {
	      throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');
	    }
	    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {
	      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');
	    }
	  }
	}
	function createNode(data, links = []) {
	  return prepare({
	    Data: data,
	    Links: links
	  });
	}
	function createLink(name, size, cid) {
	  return asLink({
	    Hash: cid,
	    Name: name,
	    Tsize: size
	  });
	}

	const name$3 = 'dag-pb';
	const code$2 = 112;
	function encode$7(node) {
	  validate(node);
	  const pbn = {};
	  if (node.Links) {
	    pbn.Links = node.Links.map(l => {
	      const link = {};
	      if (l.Hash) {
	        link.Hash = l.Hash.bytes;
	      }
	      if (l.Name !== undefined) {
	        link.Name = l.Name;
	      }
	      if (l.Tsize !== undefined) {
	        link.Tsize = l.Tsize;
	      }
	      return link;
	    });
	  }
	  if (node.Data) {
	    pbn.Data = node.Data;
	  }
	  return encodeNode(pbn);
	}
	function decode$6(bytes) {
	  const pbn = decodeNode(bytes);
	  const node = {};
	  if (pbn.Data) {
	    node.Data = pbn.Data;
	  }
	  if (pbn.Links) {
	    node.Links = pbn.Links.map(l => {
	      const link = {};
	      try {
	        link.Hash = CID.decode(l.Hash);
	      } catch (e) {
	      }
	      if (!link.Hash) {
	        throw new Error('Invalid Hash field found in link, expected CID');
	      }
	      if (l.Name !== undefined) {
	        link.Name = l.Name;
	      }
	      if (l.Tsize !== undefined) {
	        link.Tsize = l.Tsize;
	      }
	      return link;
	    });
	  }
	  return node;
	}

	var dagPb = /*#__PURE__*/Object.freeze({
		__proto__: null,
		code: code$2,
		createLink: createLink,
		createNode: createNode,
		decode: decode$6,
		encode: encode$7,
		name: name$3,
		prepare: prepare,
		validate: validate
	});

	class TreewalkCarSplitter {
	  constructor(reader, targetSize, options = {}) {
	    if (typeof targetSize !== 'number' || targetSize <= 0) {
	      throw new Error('invalid target chunk size');
	    }
	    this._reader = reader;
	    this._targetSize = targetSize;
	    this._decoders = [
	      dagPb,
	      raw,
	      dagCbor,
	      ...options.decoders || []
	    ];
	  }
	  async *cars() {
	    const roots = await this._reader.getRoots();
	    if (roots.length !== 1)
	      throw new Error(`unexpected number of roots: ${ roots.length }`);
	    let channel;
	    for await (const val of this._cars(roots[0])) {
	      channel = val.channel;
	      if (val.out)
	        yield val.out;
	    }
	    if (!channel) {
	      throw new Error('missing CAR writer channel');
	    }
	    channel.writer.close();
	    yield channel.out;
	  }
	  async _get(cid) {
	    const rawBlock = await this._reader.get(cid);
	    if (!rawBlock)
	      throw new Error(`missing block for ${ cid }`);
	    const {bytes} = rawBlock;
	    const decoder = this._decoders.find(d => d.code === cid.code);
	    if (!decoder)
	      throw new Error(`missing decoder for ${ cid.code }`);
	    return new Block({
	      cid,
	      bytes,
	      value: decoder.decode(bytes)
	    });
	  }
	  async *_cars(cid, parents = [], channel = undefined) {
	    const block = await this._get(cid);
	    channel = channel || Object.assign(CarWriter.create(cid), { size: 0 });
	    if (channel.size > 0 && channel.size + block.bytes.byteLength >= this._targetSize) {
	      channel.writer.close();
	      const {out} = channel;
	      channel = newCar(parents);
	      yield {
	        channel,
	        out
	      };
	    }
	    parents = parents.concat(block);
	    channel.size += block.bytes.byteLength;
	    channel.writer.put(block);
	    for (const [, cid] of block.links()) {
	      for await (const val of this._cars(cid, parents, channel)) {
	        channel = val.channel;
	        yield val;
	      }
	    }
	    if (!channel) {
	      throw new Error('missing CAR writer channel');
	    }
	    yield { channel };
	  }
	  static async fromIterable(iterable, targetSize, options) {
	    const reader = await CarReader.fromIterable(iterable);
	    return new TreewalkCarSplitter(reader, targetSize, options);
	  }
	  static async fromBlob(blob, targetSize, options) {
	    const buffer = await blob.arrayBuffer();
	    const reader = await CarReader.fromBytes(new Uint8Array(buffer));
	    return new TreewalkCarSplitter(reader, targetSize, options);
	  }
	}
	function newCar(parents) {
	  const ch = Object.assign(CarWriter.create(parents[0].cid), { size: parents.reduce((size, b) => size + b.bytes.byteLength, 0) });
	  for (const b of parents) {
	    ch.writer.put(b);
	  }
	  return ch;
	}

	class TreewalkCarJoiner {
	  constructor(cars) {
	    this._cars = Array.from(cars);
	    if (!this._cars.length)
	      throw new Error('missing CARs');
	  }
	  async *car() {
	    const reader = this._cars[0];
	    const roots = await reader.getRoots();
	    const {writer, out} = CarWriter.create(roots);
	    const writeCar = async () => {
	      const written = new Set();
	      const writeBlocks = async reader => {
	        for await (const b of reader.blocks()) {
	          if (written.has(b.cid.toString()))
	            continue;
	          await writer.put(b);
	          written.add(b.cid.toString());
	        }
	      };
	      try {
	        await writeBlocks(reader);
	        for (const reader of this._cars.slice(1)) {
	          await writeBlocks(reader);
	        }
	      } catch (err) {
	        console.error(err);
	      } finally {
	        await writer.close();
	      }
	    };
	    writeCar();
	    yield* out;
	  }
	}

	'use strict';

	/**
	 * Returns the last item of an (async) iterable, unless empty, in which case
	 * return `undefined`.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 */
	const last = async (source) => {
	  let res;

	  for await (const entry of source) {
	    res = entry;
	  }

	  return res
	};

	var itLast = last;

	var itPipeExports = {};
	var itPipe = {
	  get exports(){ return itPipeExports; },
	  set exports(v){ itPipeExports = v; },
	};

	const rawPipe = (...fns) => {
	  let res;
	  while (fns.length) {
	    res = fns.shift()(res);
	  }
	  return res
	};

	const isIterable$1 = obj => obj && (
	  typeof obj[Symbol.asyncIterator] === 'function' ||
	  typeof obj[Symbol.iterator] === 'function' ||
	  typeof obj.next === 'function' // Probably, right?
	);

	const isDuplex = obj => obj && typeof obj.sink === 'function' && isIterable$1(obj.source);

	const duplexPipelineFn = duplex => source => {
	  duplex.sink(source); // TODO: error on sink side is unhandled rejection - this is the same as pull streams
	  return duplex.source
	};

	const pipe = (...fns) => {
	  // Duplex at start: wrap in function and return duplex source
	  if (isDuplex(fns[0])) {
	    const duplex = fns[0];
	    fns[0] = () => duplex.source;
	  // Iterable at start: wrap in function
	  } else if (isIterable$1(fns[0])) {
	    const source = fns[0];
	    fns[0] = () => source;
	  }

	  if (fns.length > 1) {
	    // Duplex at end: use duplex sink
	    if (isDuplex(fns[fns.length - 1])) {
	      fns[fns.length - 1] = fns[fns.length - 1].sink;
	    }
	  }

	  if (fns.length > 2) {
	    // Duplex in the middle, consume source with duplex sink and return duplex source
	    for (let i = 1; i < fns.length - 1; i++) {
	      if (isDuplex(fns[i])) {
	        fns[i] = duplexPipelineFn(fns[i]);
	      }
	    }
	  }

	  return rawPipe(...fns)
	};

	itPipe.exports = pipe;
	var pipe_1 = itPipeExports.pipe = pipe;
	var rawPipe_1 = itPipeExports.rawPipe = rawPipe;
	var isIterable_1 = itPipeExports.isIterable = isIterable$1;
	var isDuplex_1 = itPipeExports.isDuplex = isDuplex;

	'use strict';

	/**
	 * Takes an (async) iterable that emits things and returns an async iterable that
	 * emits those things in fixed-sized batches.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 * @param {number} [size=1]
	 * @returns {AsyncIterable<T[]>}
	 */
	async function * batch$1 (source, size = 1) {
	  /** @type {T[]} */
	  let things = [];

	  if (size < 1) {
	    size = 1;
	  }

	  for await (const thing of source) {
	    things.push(thing);

	    while (things.length >= size) {
	      yield things.slice(0, size);

	      things = things.slice(size);
	    }
	  }

	  while (things.length) {
	    yield things.slice(0, size);

	    things = things.slice(size);
	  }
	}

	var itBatch = batch$1;

	'use strict';

	const batch = itBatch;

	/**
	 * @template T
	 * @typedef {{ok:true, value:T}} Success
	 */

	/**
	 * @typedef {{ok:false, err:Error}} Failure
	 */

	/**
	 * Takes an (async) iterator that emits promise-returning functions,
	 * invokes them in parallel and emits the results as they become available but
	 * in the same order as the input
	 *
	 * @template T
	 * @param {AsyncIterable<() => Promise<T>>|Iterable<() => Promise<T>>} source
	 * @param {number} [size=1]
	 * @returns {AsyncIterable<T>}
	 */
	async function * parallelBatch (source, size = 1) {
	  for await (const tasks of batch(source, size)) {
	    /** @type {Promise<Success<T>|Failure>[]} */
	    const things = tasks.map(
	      /**
	       * @param {() => Promise<T>} p
	       */
	      p => {
	        return p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))
	      });

	    for (let i = 0; i < things.length; i++) {
	      const result = await things[i];

	      if (result.ok) {
	        yield result.value;
	      } else {
	        throw result.err
	      }
	    }
	  }
	}

	var itParallelBatch = parallelBatch;

	'use strict';

	var isPlainObj = value => {
		if (Object.prototype.toString.call(value) !== '[object Object]') {
			return false;
		}

		const prototype = Object.getPrototypeOf(value);
		return prototype === null || prototype === Object.prototype;
	};

	'use strict';
	const isOptionObject = isPlainObj;

	const {hasOwnProperty} = Object.prototype;
	const {propertyIsEnumerable} = Object;
	const defineProperty = (object, name, value) => Object.defineProperty(object, name, {
		value,
		writable: true,
		enumerable: true,
		configurable: true
	});

	const globalThis$1 = commonjsGlobal;
	const defaultMergeOptions = {
		concatArrays: false,
		ignoreUndefined: false
	};

	const getEnumerableOwnPropertyKeys = value => {
		const keys = [];

		for (const key in value) {
			if (hasOwnProperty.call(value, key)) {
				keys.push(key);
			}
		}

		/* istanbul ignore else  */
		if (Object.getOwnPropertySymbols) {
			const symbols = Object.getOwnPropertySymbols(value);

			for (const symbol of symbols) {
				if (propertyIsEnumerable.call(value, symbol)) {
					keys.push(symbol);
				}
			}
		}

		return keys;
	};

	function clone(value) {
		if (Array.isArray(value)) {
			return cloneArray(value);
		}

		if (isOptionObject(value)) {
			return cloneOptionObject(value);
		}

		return value;
	}

	function cloneArray(array) {
		const result = array.slice(0, 0);

		getEnumerableOwnPropertyKeys(array).forEach(key => {
			defineProperty(result, key, clone(array[key]));
		});

		return result;
	}

	function cloneOptionObject(object) {
		const result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};

		getEnumerableOwnPropertyKeys(object).forEach(key => {
			defineProperty(result, key, clone(object[key]));
		});

		return result;
	}

	/**
	 * @param {*} merged already cloned
	 * @param {*} source something to merge
	 * @param {string[]} keys keys to merge
	 * @param {Object} config Config Object
	 * @returns {*} cloned Object
	 */
	const mergeKeys = (merged, source, keys, config) => {
		keys.forEach(key => {
			if (typeof source[key] === 'undefined' && config.ignoreUndefined) {
				return;
			}

			// Do not recurse into prototype chain of merged
			if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {
				defineProperty(merged, key, merge(merged[key], source[key], config));
			} else {
				defineProperty(merged, key, clone(source[key]));
			}
		});

		return merged;
	};

	/**
	 * @param {*} merged already cloned
	 * @param {*} source something to merge
	 * @param {Object} config Config Object
	 * @returns {*} cloned Object
	 *
	 * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)
	 */
	const concatArrays = (merged, source, config) => {
		let result = merged.slice(0, 0);
		let resultIndex = 0;

		[merged, source].forEach(array => {
			const indices = [];

			// `result.concat(array)` with cloning
			for (let k = 0; k < array.length; k++) {
				if (!hasOwnProperty.call(array, k)) {
					continue;
				}

				indices.push(String(k));

				if (array === merged) {
					// Already cloned
					defineProperty(result, resultIndex++, array[k]);
				} else {
					defineProperty(result, resultIndex++, clone(array[k]));
				}
			}

			// Merge non-index keys
			result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);
		});

		return result;
	};

	/**
	 * @param {*} merged already cloned
	 * @param {*} source something to merge
	 * @param {Object} config Config Object
	 * @returns {*} cloned Object
	 */
	function merge(merged, source, config) {
		if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {
			return concatArrays(merged, source, config);
		}

		if (!isOptionObject(source) || !isOptionObject(merged)) {
			return clone(source);
		}

		return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);
	}

	var mergeOptions = function (...options) {
		const config = merge(clone(defaultMergeOptions), (this !== globalThis$1 && this) || {}, defaultMergeOptions);
		let merged = {_: {}};

		for (const option of options) {
			if (option === undefined) {
				continue;
			}

			if (!isOptionObject(option)) {
				throw new TypeError('`' + option + '` is not an Option Object');
			}

			merged = merge(merged, {_: option}, config);
		}

		return merged._;
	};

	/**
	 * Thin ESM wrapper for CJS named exports.
	 *
	 * Ref: https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1
	 */

	const sha$1 = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));
	const sha256$3 = from({
	  name: 'sha2-256',
	  code: 18,
	  encode: sha$1('SHA-256')
	});
	const sha512$2 = from({
	  name: 'sha2-512',
	  code: 19,
	  encode: sha$1('SHA-512')
	});

	var sha2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		sha256: sha256$3,
		sha512: sha512$2
	});

	var murmurhash3jsRevisitedExports = {};
	var murmurhash3jsRevisited = {
	  get exports(){ return murmurhash3jsRevisitedExports; },
	  set exports(v){ murmurhash3jsRevisitedExports = v; },
	};

	var murmurHash3jsExports = {};
	var murmurHash3js$1 = {
	  get exports(){ return murmurHash3jsExports; },
	  set exports(v){ murmurHash3jsExports = v; },
	};

	/* jshint -W086: true */

	(function (module, exports) {
		// +----------------------------------------------------------------------+
		// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js
		// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |
		// |----------------------------------------------------------------------|
		// | Copyright (c) 2012-2015 Karan Lyons                                       |
		// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |
		// | Freely distributable under the MIT license.                          |
		// +----------------------------------------------------------------------+

		;(function (root, undefined$1) {
		    'use strict';

		    // Create a local object that'll be exported or referenced globally.
		    var library = {
		        'version': '3.0.0',
		        'x86': {},
		        'x64': {},
		        'inputValidation': true
		    };

		    // PRIVATE FUNCTIONS
		    // -----------------

		    function _validBytes(bytes) {
		        // check the input is an array or a typed array
		        if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {
		            return false;
		        }

		        // check all bytes are actually bytes
		        for (var i = 0; i < bytes.length; i++) {
		            if (!Number.isInteger(bytes[i]) || bytes[i] < 0 || bytes[i] > 255) {
		                return false;
		            }
		        }
		        return true;
		    }

		    function _x86Multiply(m, n) {
		        //
		        // Given two 32bit ints, returns the two multiplied together as a
		        // 32bit int.
		        //

		        return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);
		    }

		    function _x86Rotl(m, n) {
		        //
		        // Given a 32bit int and an int representing a number of bit positions,
		        // returns the 32bit int rotated left by that number of positions.
		        //

		        return (m << n) | (m >>> (32 - n));
		    }

		    function _x86Fmix(h) {
		        //
		        // Given a block, returns murmurHash3's final x86 mix of that block.
		        //

		        h ^= h >>> 16;
		        h = _x86Multiply(h, 0x85ebca6b);
		        h ^= h >>> 13;
		        h = _x86Multiply(h, 0xc2b2ae35);
		        h ^= h >>> 16;

		        return h;
		    }

		    function _x64Add(m, n) {
		        //
		        // Given two 64bit ints (as an array of two 32bit ints) returns the two
		        // added together as a 64bit int (as an array of two 32bit ints).
		        //

		        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
		        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
		        var o = [0, 0, 0, 0];

		        o[3] += m[3] + n[3];
		        o[2] += o[3] >>> 16;
		        o[3] &= 0xffff;

		        o[2] += m[2] + n[2];
		        o[1] += o[2] >>> 16;
		        o[2] &= 0xffff;

		        o[1] += m[1] + n[1];
		        o[0] += o[1] >>> 16;
		        o[1] &= 0xffff;

		        o[0] += m[0] + n[0];
		        o[0] &= 0xffff;

		        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];
		    }

		    function _x64Multiply(m, n) {
		        //
		        // Given two 64bit ints (as an array of two 32bit ints) returns the two
		        // multiplied together as a 64bit int (as an array of two 32bit ints).
		        //

		        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
		        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
		        var o = [0, 0, 0, 0];

		        o[3] += m[3] * n[3];
		        o[2] += o[3] >>> 16;
		        o[3] &= 0xffff;

		        o[2] += m[2] * n[3];
		        o[1] += o[2] >>> 16;
		        o[2] &= 0xffff;

		        o[2] += m[3] * n[2];
		        o[1] += o[2] >>> 16;
		        o[2] &= 0xffff;

		        o[1] += m[1] * n[3];
		        o[0] += o[1] >>> 16;
		        o[1] &= 0xffff;

		        o[1] += m[2] * n[2];
		        o[0] += o[1] >>> 16;
		        o[1] &= 0xffff;

		        o[1] += m[3] * n[1];
		        o[0] += o[1] >>> 16;
		        o[1] &= 0xffff;

		        o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);
		        o[0] &= 0xffff;

		        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];
		    }

		    function _x64Rotl(m, n) {
		        //
		        // Given a 64bit int (as an array of two 32bit ints) and an int
		        // representing a number of bit positions, returns the 64bit int (as an
		        // array of two 32bit ints) rotated left by that number of positions.
		        //

		        n %= 64;

		        if (n === 32) {
		            return [m[1], m[0]];
		        } else if (n < 32) {
		            return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];
		        } else {
		            n -= 32;
		            return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];
		        }
		    }

		    function _x64LeftShift(m, n) {
		        //
		        // Given a 64bit int (as an array of two 32bit ints) and an int
		        // representing a number of bit positions, returns the 64bit int (as an
		        // array of two 32bit ints) shifted left by that number of positions.
		        //

		        n %= 64;

		        if (n === 0) {
		            return m;
		        } else if (n < 32) {
		            return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];
		        } else {
		            return [m[1] << (n - 32), 0];
		        }
		    }

		    function _x64Xor(m, n) {
		        //
		        // Given two 64bit ints (as an array of two 32bit ints) returns the two
		        // xored together as a 64bit int (as an array of two 32bit ints).
		        //

		        return [m[0] ^ n[0], m[1] ^ n[1]];
		    }

		    function _x64Fmix(h) {
		        //
		        // Given a block, returns murmurHash3's final x64 mix of that block.
		        // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the
		        // only place where we need to right shift 64bit ints.)
		        //

		        h = _x64Xor(h, [0, h[0] >>> 1]);
		        h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);
		        h = _x64Xor(h, [0, h[0] >>> 1]);
		        h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);
		        h = _x64Xor(h, [0, h[0] >>> 1]);

		        return h;
		    }

		    // PUBLIC FUNCTIONS
		    // ----------------

		    library.x86.hash32 = function (bytes, seed) {
		        //
		        // Given a string and an optional seed as an int, returns a 32 bit hash
		        // using the x86 flavor of MurmurHash3, as an unsigned int.
		        //
		        if (library.inputValidation && !_validBytes(bytes)) {
		            return undefined$1;
		        }
		        seed = seed || 0;

		        var remainder = bytes.length % 4;
		        var blocks = bytes.length - remainder;

		        var h1 = seed;

		        var k1 = 0;

		        var c1 = 0xcc9e2d51;
		        var c2 = 0x1b873593;

		        for (var i = 0; i < blocks; i = i + 4) {
		            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);

		            k1 = _x86Multiply(k1, c1);
		            k1 = _x86Rotl(k1, 15);
		            k1 = _x86Multiply(k1, c2);

		            h1 ^= k1;
		            h1 = _x86Rotl(h1, 13);
		            h1 = _x86Multiply(h1, 5) + 0xe6546b64;
		        }

		        k1 = 0;

		        switch (remainder) {
		            case 3:
		                k1 ^= bytes[i + 2] << 16;

		            case 2:
		                k1 ^= bytes[i + 1] << 8;

		            case 1:
		                k1 ^= bytes[i];
		                k1 = _x86Multiply(k1, c1);
		                k1 = _x86Rotl(k1, 15);
		                k1 = _x86Multiply(k1, c2);
		                h1 ^= k1;
		        }

		        h1 ^= bytes.length;
		        h1 = _x86Fmix(h1);

		        return h1 >>> 0;
		    };

		    library.x86.hash128 = function (bytes, seed) {
		        //
		        // Given a string and an optional seed as an int, returns a 128 bit
		        // hash using the x86 flavor of MurmurHash3, as an unsigned hex.
		        //
		        if (library.inputValidation && !_validBytes(bytes)) {
		            return undefined$1;
		        }

		        seed = seed || 0;
		        var remainder = bytes.length % 16;
		        var blocks = bytes.length - remainder;

		        var h1 = seed;
		        var h2 = seed;
		        var h3 = seed;
		        var h4 = seed;

		        var k1 = 0;
		        var k2 = 0;
		        var k3 = 0;
		        var k4 = 0;

		        var c1 = 0x239b961b;
		        var c2 = 0xab0e9789;
		        var c3 = 0x38b34ae5;
		        var c4 = 0xa1e38b93;

		        for (var i = 0; i < blocks; i = i + 16) {
		            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);
		            k2 = (bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24);
		            k3 = (bytes[i + 8]) | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24);
		            k4 = (bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24);

		            k1 = _x86Multiply(k1, c1);
		            k1 = _x86Rotl(k1, 15);
		            k1 = _x86Multiply(k1, c2);
		            h1 ^= k1;

		            h1 = _x86Rotl(h1, 19);
		            h1 += h2;
		            h1 = _x86Multiply(h1, 5) + 0x561ccd1b;

		            k2 = _x86Multiply(k2, c2);
		            k2 = _x86Rotl(k2, 16);
		            k2 = _x86Multiply(k2, c3);
		            h2 ^= k2;

		            h2 = _x86Rotl(h2, 17);
		            h2 += h3;
		            h2 = _x86Multiply(h2, 5) + 0x0bcaa747;

		            k3 = _x86Multiply(k3, c3);
		            k3 = _x86Rotl(k3, 17);
		            k3 = _x86Multiply(k3, c4);
		            h3 ^= k3;

		            h3 = _x86Rotl(h3, 15);
		            h3 += h4;
		            h3 = _x86Multiply(h3, 5) + 0x96cd1c35;

		            k4 = _x86Multiply(k4, c4);
		            k4 = _x86Rotl(k4, 18);
		            k4 = _x86Multiply(k4, c1);
		            h4 ^= k4;

		            h4 = _x86Rotl(h4, 13);
		            h4 += h1;
		            h4 = _x86Multiply(h4, 5) + 0x32ac3b17;
		        }

		        k1 = 0;
		        k2 = 0;
		        k3 = 0;
		        k4 = 0;

		        switch (remainder) {
		            case 15:
		                k4 ^= bytes[i + 14] << 16;

		            case 14:
		                k4 ^= bytes[i + 13] << 8;

		            case 13:
		                k4 ^= bytes[i + 12];
		                k4 = _x86Multiply(k4, c4);
		                k4 = _x86Rotl(k4, 18);
		                k4 = _x86Multiply(k4, c1);
		                h4 ^= k4;

		            case 12:
		                k3 ^= bytes[i + 11] << 24;

		            case 11:
		                k3 ^= bytes[i + 10] << 16;

		            case 10:
		                k3 ^= bytes[i + 9] << 8;

		            case 9:
		                k3 ^= bytes[i + 8];
		                k3 = _x86Multiply(k3, c3);
		                k3 = _x86Rotl(k3, 17);
		                k3 = _x86Multiply(k3, c4);
		                h3 ^= k3;

		            case 8:
		                k2 ^= bytes[i + 7] << 24;

		            case 7:
		                k2 ^= bytes[i + 6] << 16;

		            case 6:
		                k2 ^= bytes[i + 5] << 8;

		            case 5:
		                k2 ^= bytes[i + 4];
		                k2 = _x86Multiply(k2, c2);
		                k2 = _x86Rotl(k2, 16);
		                k2 = _x86Multiply(k2, c3);
		                h2 ^= k2;

		            case 4:
		                k1 ^= bytes[i + 3] << 24;

		            case 3:
		                k1 ^= bytes[i + 2] << 16;

		            case 2:
		                k1 ^= bytes[i + 1] << 8;

		            case 1:
		                k1 ^= bytes[i];
		                k1 = _x86Multiply(k1, c1);
		                k1 = _x86Rotl(k1, 15);
		                k1 = _x86Multiply(k1, c2);
		                h1 ^= k1;
		        }

		        h1 ^= bytes.length;
		        h2 ^= bytes.length;
		        h3 ^= bytes.length;
		        h4 ^= bytes.length;

		        h1 += h2;
		        h1 += h3;
		        h1 += h4;
		        h2 += h1;
		        h3 += h1;
		        h4 += h1;

		        h1 = _x86Fmix(h1);
		        h2 = _x86Fmix(h2);
		        h3 = _x86Fmix(h3);
		        h4 = _x86Fmix(h4);

		        h1 += h2;
		        h1 += h3;
		        h1 += h4;
		        h2 += h1;
		        h3 += h1;
		        h4 += h1;

		        return ("00000000" + (h1 >>> 0).toString(16)).slice(-8) + ("00000000" + (h2 >>> 0).toString(16)).slice(-8) + ("00000000" + (h3 >>> 0).toString(16)).slice(-8) + ("00000000" + (h4 >>> 0).toString(16)).slice(-8);
		    };

		    library.x64.hash128 = function (bytes, seed) {
		        //
		        // Given a string and an optional seed as an int, returns a 128 bit
		        // hash using the x64 flavor of MurmurHash3, as an unsigned hex.
		        //
		        if (library.inputValidation && !_validBytes(bytes)) {
		            return undefined$1;
		        }
		        seed = seed || 0;

		        var remainder = bytes.length % 16;
		        var blocks = bytes.length - remainder;

		        var h1 = [0, seed];
		        var h2 = [0, seed];

		        var k1 = [0, 0];
		        var k2 = [0, 0];

		        var c1 = [0x87c37b91, 0x114253d5];
		        var c2 = [0x4cf5ad43, 0x2745937f];

		        for (var i = 0; i < blocks; i = i + 16) {
		            k1 = [(bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24), (bytes[i]) |
		                (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24)];
		            k2 = [(bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24), (bytes[i + 8]) |
		                (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24)];

		            k1 = _x64Multiply(k1, c1);
		            k1 = _x64Rotl(k1, 31);
		            k1 = _x64Multiply(k1, c2);
		            h1 = _x64Xor(h1, k1);

		            h1 = _x64Rotl(h1, 27);
		            h1 = _x64Add(h1, h2);
		            h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);

		            k2 = _x64Multiply(k2, c2);
		            k2 = _x64Rotl(k2, 33);
		            k2 = _x64Multiply(k2, c1);
		            h2 = _x64Xor(h2, k2);

		            h2 = _x64Rotl(h2, 31);
		            h2 = _x64Add(h2, h1);
		            h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);
		        }

		        k1 = [0, 0];
		        k2 = [0, 0];

		        switch (remainder) {
		            case 15:
		                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 14]], 48));

		            case 14:
		                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 13]], 40));

		            case 13:
		                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 12]], 32));

		            case 12:
		                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 11]], 24));

		            case 11:
		                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 10]], 16));

		            case 10:
		                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 9]], 8));

		            case 9:
		                k2 = _x64Xor(k2, [0, bytes[i + 8]]);
		                k2 = _x64Multiply(k2, c2);
		                k2 = _x64Rotl(k2, 33);
		                k2 = _x64Multiply(k2, c1);
		                h2 = _x64Xor(h2, k2);

		            case 8:
		                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 7]], 56));

		            case 7:
		                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 6]], 48));

		            case 6:
		                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 5]], 40));

		            case 5:
		                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 4]], 32));

		            case 4:
		                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 3]], 24));

		            case 3:
		                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 2]], 16));

		            case 2:
		                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 1]], 8));

		            case 1:
		                k1 = _x64Xor(k1, [0, bytes[i]]);
		                k1 = _x64Multiply(k1, c1);
		                k1 = _x64Rotl(k1, 31);
		                k1 = _x64Multiply(k1, c2);
		                h1 = _x64Xor(h1, k1);
		        }

		        h1 = _x64Xor(h1, [0, bytes.length]);
		        h2 = _x64Xor(h2, [0, bytes.length]);

		        h1 = _x64Add(h1, h2);
		        h2 = _x64Add(h2, h1);

		        h1 = _x64Fmix(h1);
		        h2 = _x64Fmix(h2);

		        h1 = _x64Add(h1, h2);
		        h2 = _x64Add(h2, h1);

		        return ("00000000" + (h1[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h1[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[1] >>> 0).toString(16)).slice(-8);
		    };

		    // INITIALIZATION
		    // --------------

		    // Export murmurHash3 for CommonJS, either as an AMD module or just as part
		    // of the global object.
		    if ('object' !== 'undefined') {

		        if ('object' !== 'undefined' && module.exports) {
		            exports = module.exports = library;
		        }

		        exports.murmurHash3 = library;

		    } else if (typeof undefined$1 === 'function' && undefined$1.amd) {

		        undefined$1([], function () {
		            return library;
		        });
		    } else {

		        // Use murmurHash3.noConflict to restore `murmurHash3` back to its
		        // original value. Returns a reference to the library object, to allow
		        // it to be used under a different name.
		        library._murmurHash3 = root.murmurHash3;

		        library.noConflict = function () {
		            root.murmurHash3 = library._murmurHash3;
		            library._murmurHash3 = undefined$1;
		            library.noConflict = undefined$1;

		            return library;
		        };

		        root.murmurHash3 = library;
		    }
		})(commonjsGlobal);
	} (murmurHash3js$1, murmurHash3jsExports));

	var murmurHash3js = murmurHash3jsExports;

	(function (module) {
		module.exports = murmurHash3jsExports;
	} (murmurhash3jsRevisited));

	var mur = /*@__PURE__*/getDefaultExportFromCjs(murmurhash3jsRevisitedExports);

	function fromNumberTo32BitBuf(number) {
	  const bytes = new Array(4);
	  for (let i = 0; i < 4; i++) {
	    bytes[i] = number & 255;
	    number = number >> 8;
	  }
	  return new Uint8Array(bytes);
	}
	const murmur332 = from({
	  name: 'murmur3-32',
	  code: 35,
	  encode: input => fromNumberTo32BitBuf(mur.x86.hash32(input))
	});
	const murmur3128 = from({
	  name: 'murmur3-128',
	  code: 34,
	  encode: input => fromHex$1(mur.x64.hash128(input))
	});

	async function hamtHashFn(buf) {
	  return (await murmur3128.encode(buf)).slice(0, 8).reverse();
	}
	const defaultOptions = {
	  chunker: 'fixed',
	  strategy: 'balanced',
	  rawLeaves: false,
	  onlyHash: false,
	  reduceSingleLeafToSelf: true,
	  hasher: sha256$3,
	  leafType: 'file',
	  cidVersion: 0,
	  progress: () => () => {
	  },
	  shardSplitThreshold: 1000,
	  fileImportConcurrency: 50,
	  blockWriteConcurrency: 10,
	  minChunkSize: 262144,
	  maxChunkSize: 262144,
	  avgChunkSize: 262144,
	  window: 16,
	  polynomial: 17437180132763652,
	  maxChildrenPerNode: 174,
	  layerRepeat: 4,
	  wrapWithDirectory: false,
	  recursive: false,
	  hidden: false,
	  timeout: undefined,
	  hamtHashFn,
	  hamtHashCode: 34,
	  hamtBucketBits: 8
	};
	var defaultOptions$1 = (options = {}) => {
	  const defaults = mergeOptions.bind({ ignoreUndefined: true });
	  return defaults(defaultOptions, options);
	};

	'use strict';

	/**
	 * @typedef {{ [key: string]: any }} Extensions
	 * @typedef {Error} Err
	 * @property {string} message
	 */

	/**
	 *
	 * @param {Error} obj
	 * @param {Extensions} props
	 * @returns {Error & Extensions}
	 */
	function assign(obj, props) {
	    for (const key in props) {
	        Object.defineProperty(obj, key, {
	            value: props[key],
	            enumerable: true,
	            configurable: true,
	        });
	    }

	    return obj;
	}

	/**
	 *
	 * @param {any} err - An Error
	 * @param {string|Extensions} code - A string code or props to set on the error
	 * @param {Extensions} [props] - Props to set on the error
	 * @returns {Error & Extensions}
	 */
	function createError(err, code, props) {
	    if (!err || typeof err === 'string') {
	        throw new TypeError('Please pass an Error to err-code');
	    }

	    if (!props) {
	        props = {};
	    }

	    if (typeof code === 'object') {
	        props = code;
	        code = '';
	    }

	    if (code) {
	        props.code = code;
	    }

	    try {
	        return assign(err, props);
	    } catch (_) {
	        props.message = err.message;
	        props.stack = err.stack;

	        const ErrClass = function () {};

	        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));

	        // @ts-ignore
	        const output = assign(new ErrClass(), props);

	        return output;
	    }
	}

	var errCode = createError;

	var minimalExports = {};
	var minimal$1 = {
	  get exports(){ return minimalExports; },
	  set exports(v){ minimalExports = v; },
	};

	var indexMinimal = {};

	var minimal = {};

	var aspromise;
	var hasRequiredAspromise;

	function requireAspromise () {
		if (hasRequiredAspromise) return aspromise;
		hasRequiredAspromise = 1;
		"use strict";
		aspromise = asPromise;

		/**
		 * Callback as used by {@link util.asPromise}.
		 * @typedef asPromiseCallback
		 * @type {function}
		 * @param {Error|null} error Error, if any
		 * @param {...*} params Additional arguments
		 * @returns {undefined}
		 */

		/**
		 * Returns a promise from a node-style callback function.
		 * @memberof util
		 * @param {asPromiseCallback} fn Function to call
		 * @param {*} ctx Function context
		 * @param {...*} params Function arguments
		 * @returns {Promise<*>} Promisified function
		 */
		function asPromise(fn, ctx/*, varargs */) {
		    var params  = new Array(arguments.length - 1),
		        offset  = 0,
		        index   = 2,
		        pending = true;
		    while (index < arguments.length)
		        params[offset++] = arguments[index++];
		    return new Promise(function executor(resolve, reject) {
		        params[offset] = function callback(err/*, varargs */) {
		            if (pending) {
		                pending = false;
		                if (err)
		                    reject(err);
		                else {
		                    var params = new Array(arguments.length - 1),
		                        offset = 0;
		                    while (offset < params.length)
		                        params[offset++] = arguments[offset];
		                    resolve.apply(null, params);
		                }
		            }
		        };
		        try {
		            fn.apply(ctx || null, params);
		        } catch (err) {
		            if (pending) {
		                pending = false;
		                reject(err);
		            }
		        }
		    });
		}
		return aspromise;
	}

	var base64$3 = {};

	var hasRequiredBase64;

	function requireBase64 () {
		if (hasRequiredBase64) return base64$3;
		hasRequiredBase64 = 1;
		(function (exports) {
			"use strict";

			/**
			 * A minimal base64 implementation for number arrays.
			 * @memberof util
			 * @namespace
			 */
			var base64 = exports;

			/**
			 * Calculates the byte length of a base64 encoded string.
			 * @param {string} string Base64 encoded string
			 * @returns {number} Byte length
			 */
			base64.length = function length(string) {
			    var p = string.length;
			    if (!p)
			        return 0;
			    var n = 0;
			    while (--p % 4 > 1 && string.charAt(p) === "=")
			        ++n;
			    return Math.ceil(string.length * 3) / 4 - n;
			};

			// Base64 encoding table
			var b64 = new Array(64);

			// Base64 decoding table
			var s64 = new Array(123);

			// 65..90, 97..122, 48..57, 43, 47
			for (var i = 0; i < 64;)
			    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

			/**
			 * Encodes a buffer to a base64 encoded string.
			 * @param {Uint8Array} buffer Source buffer
			 * @param {number} start Source start
			 * @param {number} end Source end
			 * @returns {string} Base64 encoded string
			 */
			base64.encode = function encode(buffer, start, end) {
			    var parts = null,
			        chunk = [];
			    var i = 0, // output index
			        j = 0, // goto index
			        t;     // temporary
			    while (start < end) {
			        var b = buffer[start++];
			        switch (j) {
			            case 0:
			                chunk[i++] = b64[b >> 2];
			                t = (b & 3) << 4;
			                j = 1;
			                break;
			            case 1:
			                chunk[i++] = b64[t | b >> 4];
			                t = (b & 15) << 2;
			                j = 2;
			                break;
			            case 2:
			                chunk[i++] = b64[t | b >> 6];
			                chunk[i++] = b64[b & 63];
			                j = 0;
			                break;
			        }
			        if (i > 8191) {
			            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
			            i = 0;
			        }
			    }
			    if (j) {
			        chunk[i++] = b64[t];
			        chunk[i++] = 61;
			        if (j === 1)
			            chunk[i++] = 61;
			    }
			    if (parts) {
			        if (i)
			            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
			        return parts.join("");
			    }
			    return String.fromCharCode.apply(String, chunk.slice(0, i));
			};

			var invalidEncoding = "invalid encoding";

			/**
			 * Decodes a base64 encoded string to a buffer.
			 * @param {string} string Source string
			 * @param {Uint8Array} buffer Destination buffer
			 * @param {number} offset Destination offset
			 * @returns {number} Number of bytes written
			 * @throws {Error} If encoding is invalid
			 */
			base64.decode = function decode(string, buffer, offset) {
			    var start = offset;
			    var j = 0, // goto index
			        t;     // temporary
			    for (var i = 0; i < string.length;) {
			        var c = string.charCodeAt(i++);
			        if (c === 61 && j > 1)
			            break;
			        if ((c = s64[c]) === undefined)
			            throw Error(invalidEncoding);
			        switch (j) {
			            case 0:
			                t = c;
			                j = 1;
			                break;
			            case 1:
			                buffer[offset++] = t << 2 | (c & 48) >> 4;
			                t = c;
			                j = 2;
			                break;
			            case 2:
			                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
			                t = c;
			                j = 3;
			                break;
			            case 3:
			                buffer[offset++] = (t & 3) << 6 | c;
			                j = 0;
			                break;
			        }
			    }
			    if (j === 1)
			        throw Error(invalidEncoding);
			    return offset - start;
			};

			/**
			 * Tests if the specified string appears to be base64 encoded.
			 * @param {string} string String to test
			 * @returns {boolean} `true` if probably base64 encoded, otherwise false
			 */
			base64.test = function test(string) {
			    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
			};
	} (base64$3));
		return base64$3;
	}

	var eventemitter;
	var hasRequiredEventemitter;

	function requireEventemitter () {
		if (hasRequiredEventemitter) return eventemitter;
		hasRequiredEventemitter = 1;
		"use strict";
		eventemitter = EventEmitter;

		/**
		 * Constructs a new event emitter instance.
		 * @classdesc A minimal event emitter.
		 * @memberof util
		 * @constructor
		 */
		function EventEmitter() {

		    /**
		     * Registered listeners.
		     * @type {Object.<string,*>}
		     * @private
		     */
		    this._listeners = {};
		}

		/**
		 * Registers an event listener.
		 * @param {string} evt Event name
		 * @param {function} fn Listener
		 * @param {*} [ctx] Listener context
		 * @returns {util.EventEmitter} `this`
		 */
		EventEmitter.prototype.on = function on(evt, fn, ctx) {
		    (this._listeners[evt] || (this._listeners[evt] = [])).push({
		        fn  : fn,
		        ctx : ctx || this
		    });
		    return this;
		};

		/**
		 * Removes an event listener or any matching listeners if arguments are omitted.
		 * @param {string} [evt] Event name. Removes all listeners if omitted.
		 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
		 * @returns {util.EventEmitter} `this`
		 */
		EventEmitter.prototype.off = function off(evt, fn) {
		    if (evt === undefined)
		        this._listeners = {};
		    else {
		        if (fn === undefined)
		            this._listeners[evt] = [];
		        else {
		            var listeners = this._listeners[evt];
		            for (var i = 0; i < listeners.length;)
		                if (listeners[i].fn === fn)
		                    listeners.splice(i, 1);
		                else
		                    ++i;
		        }
		    }
		    return this;
		};

		/**
		 * Emits an event by calling its listeners with the specified arguments.
		 * @param {string} evt Event name
		 * @param {...*} args Arguments
		 * @returns {util.EventEmitter} `this`
		 */
		EventEmitter.prototype.emit = function emit(evt) {
		    var listeners = this._listeners[evt];
		    if (listeners) {
		        var args = [],
		            i = 1;
		        for (; i < arguments.length;)
		            args.push(arguments[i++]);
		        for (i = 0; i < listeners.length;)
		            listeners[i].fn.apply(listeners[i++].ctx, args);
		    }
		    return this;
		};
		return eventemitter;
	}

	var float;
	var hasRequiredFloat;

	function requireFloat () {
		if (hasRequiredFloat) return float;
		hasRequiredFloat = 1;
		"use strict";

		float = factory(factory);

		/**
		 * Reads / writes floats / doubles from / to buffers.
		 * @name util.float
		 * @namespace
		 */

		/**
		 * Writes a 32 bit float to a buffer using little endian byte order.
		 * @name util.float.writeFloatLE
		 * @function
		 * @param {number} val Value to write
		 * @param {Uint8Array} buf Target buffer
		 * @param {number} pos Target buffer offset
		 * @returns {undefined}
		 */

		/**
		 * Writes a 32 bit float to a buffer using big endian byte order.
		 * @name util.float.writeFloatBE
		 * @function
		 * @param {number} val Value to write
		 * @param {Uint8Array} buf Target buffer
		 * @param {number} pos Target buffer offset
		 * @returns {undefined}
		 */

		/**
		 * Reads a 32 bit float from a buffer using little endian byte order.
		 * @name util.float.readFloatLE
		 * @function
		 * @param {Uint8Array} buf Source buffer
		 * @param {number} pos Source buffer offset
		 * @returns {number} Value read
		 */

		/**
		 * Reads a 32 bit float from a buffer using big endian byte order.
		 * @name util.float.readFloatBE
		 * @function
		 * @param {Uint8Array} buf Source buffer
		 * @param {number} pos Source buffer offset
		 * @returns {number} Value read
		 */

		/**
		 * Writes a 64 bit double to a buffer using little endian byte order.
		 * @name util.float.writeDoubleLE
		 * @function
		 * @param {number} val Value to write
		 * @param {Uint8Array} buf Target buffer
		 * @param {number} pos Target buffer offset
		 * @returns {undefined}
		 */

		/**
		 * Writes a 64 bit double to a buffer using big endian byte order.
		 * @name util.float.writeDoubleBE
		 * @function
		 * @param {number} val Value to write
		 * @param {Uint8Array} buf Target buffer
		 * @param {number} pos Target buffer offset
		 * @returns {undefined}
		 */

		/**
		 * Reads a 64 bit double from a buffer using little endian byte order.
		 * @name util.float.readDoubleLE
		 * @function
		 * @param {Uint8Array} buf Source buffer
		 * @param {number} pos Source buffer offset
		 * @returns {number} Value read
		 */

		/**
		 * Reads a 64 bit double from a buffer using big endian byte order.
		 * @name util.float.readDoubleBE
		 * @function
		 * @param {Uint8Array} buf Source buffer
		 * @param {number} pos Source buffer offset
		 * @returns {number} Value read
		 */

		// Factory function for the purpose of node-based testing in modified global environments
		function factory(exports) {

		    // float: typed array
		    if (typeof Float32Array !== "undefined") (function() {

		        var f32 = new Float32Array([ -0 ]),
		            f8b = new Uint8Array(f32.buffer),
		            le  = f8b[3] === 128;

		        function writeFloat_f32_cpy(val, buf, pos) {
		            f32[0] = val;
		            buf[pos    ] = f8b[0];
		            buf[pos + 1] = f8b[1];
		            buf[pos + 2] = f8b[2];
		            buf[pos + 3] = f8b[3];
		        }

		        function writeFloat_f32_rev(val, buf, pos) {
		            f32[0] = val;
		            buf[pos    ] = f8b[3];
		            buf[pos + 1] = f8b[2];
		            buf[pos + 2] = f8b[1];
		            buf[pos + 3] = f8b[0];
		        }

		        /* istanbul ignore next */
		        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
		        /* istanbul ignore next */
		        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

		        function readFloat_f32_cpy(buf, pos) {
		            f8b[0] = buf[pos    ];
		            f8b[1] = buf[pos + 1];
		            f8b[2] = buf[pos + 2];
		            f8b[3] = buf[pos + 3];
		            return f32[0];
		        }

		        function readFloat_f32_rev(buf, pos) {
		            f8b[3] = buf[pos    ];
		            f8b[2] = buf[pos + 1];
		            f8b[1] = buf[pos + 2];
		            f8b[0] = buf[pos + 3];
		            return f32[0];
		        }

		        /* istanbul ignore next */
		        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
		        /* istanbul ignore next */
		        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

		    // float: ieee754
		    })(); else (function() {

		        function writeFloat_ieee754(writeUint, val, buf, pos) {
		            var sign = val < 0 ? 1 : 0;
		            if (sign)
		                val = -val;
		            if (val === 0)
		                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
		            else if (isNaN(val))
		                writeUint(2143289344, buf, pos);
		            else if (val > 3.4028234663852886e+38) // +-Infinity
		                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
		            else if (val < 1.1754943508222875e-38) // denormal
		                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
		            else {
		                var exponent = Math.floor(Math.log(val) / Math.LN2),
		                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
		                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
		            }
		        }

		        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
		        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

		        function readFloat_ieee754(readUint, buf, pos) {
		            var uint = readUint(buf, pos),
		                sign = (uint >> 31) * 2 + 1,
		                exponent = uint >>> 23 & 255,
		                mantissa = uint & 8388607;
		            return exponent === 255
		                ? mantissa
		                ? NaN
		                : sign * Infinity
		                : exponent === 0 // denormal
		                ? sign * 1.401298464324817e-45 * mantissa
		                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
		        }

		        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
		        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

		    })();

		    // double: typed array
		    if (typeof Float64Array !== "undefined") (function() {

		        var f64 = new Float64Array([-0]),
		            f8b = new Uint8Array(f64.buffer),
		            le  = f8b[7] === 128;

		        function writeDouble_f64_cpy(val, buf, pos) {
		            f64[0] = val;
		            buf[pos    ] = f8b[0];
		            buf[pos + 1] = f8b[1];
		            buf[pos + 2] = f8b[2];
		            buf[pos + 3] = f8b[3];
		            buf[pos + 4] = f8b[4];
		            buf[pos + 5] = f8b[5];
		            buf[pos + 6] = f8b[6];
		            buf[pos + 7] = f8b[7];
		        }

		        function writeDouble_f64_rev(val, buf, pos) {
		            f64[0] = val;
		            buf[pos    ] = f8b[7];
		            buf[pos + 1] = f8b[6];
		            buf[pos + 2] = f8b[5];
		            buf[pos + 3] = f8b[4];
		            buf[pos + 4] = f8b[3];
		            buf[pos + 5] = f8b[2];
		            buf[pos + 6] = f8b[1];
		            buf[pos + 7] = f8b[0];
		        }

		        /* istanbul ignore next */
		        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
		        /* istanbul ignore next */
		        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

		        function readDouble_f64_cpy(buf, pos) {
		            f8b[0] = buf[pos    ];
		            f8b[1] = buf[pos + 1];
		            f8b[2] = buf[pos + 2];
		            f8b[3] = buf[pos + 3];
		            f8b[4] = buf[pos + 4];
		            f8b[5] = buf[pos + 5];
		            f8b[6] = buf[pos + 6];
		            f8b[7] = buf[pos + 7];
		            return f64[0];
		        }

		        function readDouble_f64_rev(buf, pos) {
		            f8b[7] = buf[pos    ];
		            f8b[6] = buf[pos + 1];
		            f8b[5] = buf[pos + 2];
		            f8b[4] = buf[pos + 3];
		            f8b[3] = buf[pos + 4];
		            f8b[2] = buf[pos + 5];
		            f8b[1] = buf[pos + 6];
		            f8b[0] = buf[pos + 7];
		            return f64[0];
		        }

		        /* istanbul ignore next */
		        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
		        /* istanbul ignore next */
		        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

		    // double: ieee754
		    })(); else (function() {

		        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
		            var sign = val < 0 ? 1 : 0;
		            if (sign)
		                val = -val;
		            if (val === 0) {
		                writeUint(0, buf, pos + off0);
		                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
		            } else if (isNaN(val)) {
		                writeUint(0, buf, pos + off0);
		                writeUint(2146959360, buf, pos + off1);
		            } else if (val > 1.7976931348623157e+308) { // +-Infinity
		                writeUint(0, buf, pos + off0);
		                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
		            } else {
		                var mantissa;
		                if (val < 2.2250738585072014e-308) { // denormal
		                    mantissa = val / 5e-324;
		                    writeUint(mantissa >>> 0, buf, pos + off0);
		                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
		                } else {
		                    var exponent = Math.floor(Math.log(val) / Math.LN2);
		                    if (exponent === 1024)
		                        exponent = 1023;
		                    mantissa = val * Math.pow(2, -exponent);
		                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
		                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
		                }
		            }
		        }

		        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
		        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

		        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
		            var lo = readUint(buf, pos + off0),
		                hi = readUint(buf, pos + off1);
		            var sign = (hi >> 31) * 2 + 1,
		                exponent = hi >>> 20 & 2047,
		                mantissa = 4294967296 * (hi & 1048575) + lo;
		            return exponent === 2047
		                ? mantissa
		                ? NaN
		                : sign * Infinity
		                : exponent === 0 // denormal
		                ? sign * 5e-324 * mantissa
		                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
		        }

		        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
		        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

		    })();

		    return exports;
		}

		// uint helpers

		function writeUintLE(val, buf, pos) {
		    buf[pos    ] =  val        & 255;
		    buf[pos + 1] =  val >>> 8  & 255;
		    buf[pos + 2] =  val >>> 16 & 255;
		    buf[pos + 3] =  val >>> 24;
		}

		function writeUintBE(val, buf, pos) {
		    buf[pos    ] =  val >>> 24;
		    buf[pos + 1] =  val >>> 16 & 255;
		    buf[pos + 2] =  val >>> 8  & 255;
		    buf[pos + 3] =  val        & 255;
		}

		function readUintLE(buf, pos) {
		    return (buf[pos    ]
		          | buf[pos + 1] << 8
		          | buf[pos + 2] << 16
		          | buf[pos + 3] << 24) >>> 0;
		}

		function readUintBE(buf, pos) {
		    return (buf[pos    ] << 24
		          | buf[pos + 1] << 16
		          | buf[pos + 2] << 8
		          | buf[pos + 3]) >>> 0;
		}
		return float;
	}

	var inquire_1;
	var hasRequiredInquire;

	function requireInquire () {
		if (hasRequiredInquire) return inquire_1;
		hasRequiredInquire = 1;
		"use strict";
		inquire_1 = inquire;

		/**
		 * Requires a module only if available.
		 * @memberof util
		 * @param {string} moduleName Module to require
		 * @returns {?Object} Required module if available and not empty, otherwise `null`
		 */
		function inquire(moduleName) {
		    try {
		        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
		        if (mod && (mod.length || Object.keys(mod).length))
		            return mod;
		    } catch (e) {} // eslint-disable-line no-empty
		    return null;
		}
		return inquire_1;
	}

	var utf8$4 = {};

	var hasRequiredUtf8;

	function requireUtf8 () {
		if (hasRequiredUtf8) return utf8$4;
		hasRequiredUtf8 = 1;
		(function (exports) {
			"use strict";

			/**
			 * A minimal UTF8 implementation for number arrays.
			 * @memberof util
			 * @namespace
			 */
			var utf8 = exports;

			/**
			 * Calculates the UTF8 byte length of a string.
			 * @param {string} string String
			 * @returns {number} Byte length
			 */
			utf8.length = function utf8_length(string) {
			    var len = 0,
			        c = 0;
			    for (var i = 0; i < string.length; ++i) {
			        c = string.charCodeAt(i);
			        if (c < 128)
			            len += 1;
			        else if (c < 2048)
			            len += 2;
			        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
			            ++i;
			            len += 4;
			        } else
			            len += 3;
			    }
			    return len;
			};

			/**
			 * Reads UTF8 bytes as a string.
			 * @param {Uint8Array} buffer Source buffer
			 * @param {number} start Source start
			 * @param {number} end Source end
			 * @returns {string} String read
			 */
			utf8.read = function utf8_read(buffer, start, end) {
			    var len = end - start;
			    if (len < 1)
			        return "";
			    var parts = null,
			        chunk = [],
			        i = 0, // char offset
			        t;     // temporary
			    while (start < end) {
			        t = buffer[start++];
			        if (t < 128)
			            chunk[i++] = t;
			        else if (t > 191 && t < 224)
			            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
			        else if (t > 239 && t < 365) {
			            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
			            chunk[i++] = 0xD800 + (t >> 10);
			            chunk[i++] = 0xDC00 + (t & 1023);
			        } else
			            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
			        if (i > 8191) {
			            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
			            i = 0;
			        }
			    }
			    if (parts) {
			        if (i)
			            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
			        return parts.join("");
			    }
			    return String.fromCharCode.apply(String, chunk.slice(0, i));
			};

			/**
			 * Writes a string as UTF8 bytes.
			 * @param {string} string Source string
			 * @param {Uint8Array} buffer Destination buffer
			 * @param {number} offset Destination offset
			 * @returns {number} Bytes written
			 */
			utf8.write = function utf8_write(string, buffer, offset) {
			    var start = offset,
			        c1, // character 1
			        c2; // character 2
			    for (var i = 0; i < string.length; ++i) {
			        c1 = string.charCodeAt(i);
			        if (c1 < 128) {
			            buffer[offset++] = c1;
			        } else if (c1 < 2048) {
			            buffer[offset++] = c1 >> 6       | 192;
			            buffer[offset++] = c1       & 63 | 128;
			        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
			            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
			            ++i;
			            buffer[offset++] = c1 >> 18      | 240;
			            buffer[offset++] = c1 >> 12 & 63 | 128;
			            buffer[offset++] = c1 >> 6  & 63 | 128;
			            buffer[offset++] = c1       & 63 | 128;
			        } else {
			            buffer[offset++] = c1 >> 12      | 224;
			            buffer[offset++] = c1 >> 6  & 63 | 128;
			            buffer[offset++] = c1       & 63 | 128;
			        }
			    }
			    return offset - start;
			};
	} (utf8$4));
		return utf8$4;
	}

	var pool_1;
	var hasRequiredPool;

	function requirePool () {
		if (hasRequiredPool) return pool_1;
		hasRequiredPool = 1;
		"use strict";
		pool_1 = pool;

		/**
		 * An allocator as used by {@link util.pool}.
		 * @typedef PoolAllocator
		 * @type {function}
		 * @param {number} size Buffer size
		 * @returns {Uint8Array} Buffer
		 */

		/**
		 * A slicer as used by {@link util.pool}.
		 * @typedef PoolSlicer
		 * @type {function}
		 * @param {number} start Start offset
		 * @param {number} end End offset
		 * @returns {Uint8Array} Buffer slice
		 * @this {Uint8Array}
		 */

		/**
		 * A general purpose buffer pool.
		 * @memberof util
		 * @function
		 * @param {PoolAllocator} alloc Allocator
		 * @param {PoolSlicer} slice Slicer
		 * @param {number} [size=8192] Slab size
		 * @returns {PoolAllocator} Pooled allocator
		 */
		function pool(alloc, slice, size) {
		    var SIZE   = size || 8192;
		    var MAX    = SIZE >>> 1;
		    var slab   = null;
		    var offset = SIZE;
		    return function pool_alloc(size) {
		        if (size < 1 || size > MAX)
		            return alloc(size);
		        if (offset + size > SIZE) {
		            slab = alloc(SIZE);
		            offset = 0;
		        }
		        var buf = slice.call(slab, offset, offset += size);
		        if (offset & 7) // align to 32 bit
		            offset = (offset | 7) + 1;
		        return buf;
		    };
		}
		return pool_1;
	}

	var longbits;
	var hasRequiredLongbits;

	function requireLongbits () {
		if (hasRequiredLongbits) return longbits;
		hasRequiredLongbits = 1;
		"use strict";
		longbits = LongBits;

		var util = requireMinimal();

		/**
		 * Constructs new long bits.
		 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
		 * @memberof util
		 * @constructor
		 * @param {number} lo Low 32 bits, unsigned
		 * @param {number} hi High 32 bits, unsigned
		 */
		function LongBits(lo, hi) {

		    // note that the casts below are theoretically unnecessary as of today, but older statically
		    // generated converter code might still call the ctor with signed 32bits. kept for compat.

		    /**
		     * Low bits.
		     * @type {number}
		     */
		    this.lo = lo >>> 0;

		    /**
		     * High bits.
		     * @type {number}
		     */
		    this.hi = hi >>> 0;
		}

		/**
		 * Zero bits.
		 * @memberof util.LongBits
		 * @type {util.LongBits}
		 */
		var zero = LongBits.zero = new LongBits(0, 0);

		zero.toNumber = function() { return 0; };
		zero.zzEncode = zero.zzDecode = function() { return this; };
		zero.length = function() { return 1; };

		/**
		 * Zero hash.
		 * @memberof util.LongBits
		 * @type {string}
		 */
		var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

		/**
		 * Constructs new long bits from the specified number.
		 * @param {number} value Value
		 * @returns {util.LongBits} Instance
		 */
		LongBits.fromNumber = function fromNumber(value) {
		    if (value === 0)
		        return zero;
		    var sign = value < 0;
		    if (sign)
		        value = -value;
		    var lo = value >>> 0,
		        hi = (value - lo) / 4294967296 >>> 0;
		    if (sign) {
		        hi = ~hi >>> 0;
		        lo = ~lo >>> 0;
		        if (++lo > 4294967295) {
		            lo = 0;
		            if (++hi > 4294967295)
		                hi = 0;
		        }
		    }
		    return new LongBits(lo, hi);
		};

		/**
		 * Constructs new long bits from a number, long or string.
		 * @param {Long|number|string} value Value
		 * @returns {util.LongBits} Instance
		 */
		LongBits.from = function from(value) {
		    if (typeof value === "number")
		        return LongBits.fromNumber(value);
		    if (util.isString(value)) {
		        /* istanbul ignore else */
		        if (util.Long)
		            value = util.Long.fromString(value);
		        else
		            return LongBits.fromNumber(parseInt(value, 10));
		    }
		    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
		};

		/**
		 * Converts this long bits to a possibly unsafe JavaScript number.
		 * @param {boolean} [unsigned=false] Whether unsigned or not
		 * @returns {number} Possibly unsafe number
		 */
		LongBits.prototype.toNumber = function toNumber(unsigned) {
		    if (!unsigned && this.hi >>> 31) {
		        var lo = ~this.lo + 1 >>> 0,
		            hi = ~this.hi     >>> 0;
		        if (!lo)
		            hi = hi + 1 >>> 0;
		        return -(lo + hi * 4294967296);
		    }
		    return this.lo + this.hi * 4294967296;
		};

		/**
		 * Converts this long bits to a long.
		 * @param {boolean} [unsigned=false] Whether unsigned or not
		 * @returns {Long} Long
		 */
		LongBits.prototype.toLong = function toLong(unsigned) {
		    return util.Long
		        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
		        /* istanbul ignore next */
		        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
		};

		var charCodeAt = String.prototype.charCodeAt;

		/**
		 * Constructs new long bits from the specified 8 characters long hash.
		 * @param {string} hash Hash
		 * @returns {util.LongBits} Bits
		 */
		LongBits.fromHash = function fromHash(hash) {
		    if (hash === zeroHash)
		        return zero;
		    return new LongBits(
		        ( charCodeAt.call(hash, 0)
		        | charCodeAt.call(hash, 1) << 8
		        | charCodeAt.call(hash, 2) << 16
		        | charCodeAt.call(hash, 3) << 24) >>> 0
		    ,
		        ( charCodeAt.call(hash, 4)
		        | charCodeAt.call(hash, 5) << 8
		        | charCodeAt.call(hash, 6) << 16
		        | charCodeAt.call(hash, 7) << 24) >>> 0
		    );
		};

		/**
		 * Converts this long bits to a 8 characters long hash.
		 * @returns {string} Hash
		 */
		LongBits.prototype.toHash = function toHash() {
		    return String.fromCharCode(
		        this.lo        & 255,
		        this.lo >>> 8  & 255,
		        this.lo >>> 16 & 255,
		        this.lo >>> 24      ,
		        this.hi        & 255,
		        this.hi >>> 8  & 255,
		        this.hi >>> 16 & 255,
		        this.hi >>> 24
		    );
		};

		/**
		 * Zig-zag encodes this long bits.
		 * @returns {util.LongBits} `this`
		 */
		LongBits.prototype.zzEncode = function zzEncode() {
		    var mask =   this.hi >> 31;
		    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
		    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
		    return this;
		};

		/**
		 * Zig-zag decodes this long bits.
		 * @returns {util.LongBits} `this`
		 */
		LongBits.prototype.zzDecode = function zzDecode() {
		    var mask = -(this.lo & 1);
		    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
		    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
		    return this;
		};

		/**
		 * Calculates the length of this longbits when encoded as a varint.
		 * @returns {number} Length
		 */
		LongBits.prototype.length = function length() {
		    var part0 =  this.lo,
		        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
		        part2 =  this.hi >>> 24;
		    return part2 === 0
		         ? part1 === 0
		           ? part0 < 16384
		             ? part0 < 128 ? 1 : 2
		             : part0 < 2097152 ? 3 : 4
		           : part1 < 16384
		             ? part1 < 128 ? 5 : 6
		             : part1 < 2097152 ? 7 : 8
		         : part2 < 128 ? 9 : 10;
		};
		return longbits;
	}

	var hasRequiredMinimal;

	function requireMinimal () {
		if (hasRequiredMinimal) return minimal;
		hasRequiredMinimal = 1;
		(function (exports) {
			"use strict";
			var util = exports;

			// used to return a Promise where callback is omitted
			util.asPromise = requireAspromise();

			// converts to / from base64 encoded strings
			util.base64 = requireBase64();

			// base class of rpc.Service
			util.EventEmitter = requireEventemitter();

			// float handling accross browsers
			util.float = requireFloat();

			// requires modules optionally and hides the call from bundlers
			util.inquire = requireInquire();

			// converts to / from utf8 encoded strings
			util.utf8 = requireUtf8();

			// provides a node-like buffer pool in the browser
			util.pool = requirePool();

			// utility to work with the low and high bits of a 64 bit value
			util.LongBits = requireLongbits();

			/**
			 * Whether running within node or not.
			 * @memberof util
			 * @type {boolean}
			 */
			util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
			                   && commonjsGlobal
			                   && commonjsGlobal.process
			                   && commonjsGlobal.process.versions
			                   && commonjsGlobal.process.versions.node);

			/**
			 * Global object reference.
			 * @memberof util
			 * @type {Object}
			 */
			util.global = util.isNode && commonjsGlobal
			           || typeof window !== "undefined" && window
			           || typeof self   !== "undefined" && self
			           || commonjsGlobal; // eslint-disable-line no-invalid-this

			/**
			 * An immuable empty array.
			 * @memberof util
			 * @type {Array.<*>}
			 * @const
			 */
			util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

			/**
			 * An immutable empty object.
			 * @type {Object}
			 * @const
			 */
			util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

			/**
			 * Tests if the specified value is an integer.
			 * @function
			 * @param {*} value Value to test
			 * @returns {boolean} `true` if the value is an integer
			 */
			util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
			    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
			};

			/**
			 * Tests if the specified value is a string.
			 * @param {*} value Value to test
			 * @returns {boolean} `true` if the value is a string
			 */
			util.isString = function isString(value) {
			    return typeof value === "string" || value instanceof String;
			};

			/**
			 * Tests if the specified value is a non-null object.
			 * @param {*} value Value to test
			 * @returns {boolean} `true` if the value is a non-null object
			 */
			util.isObject = function isObject(value) {
			    return value && typeof value === "object";
			};

			/**
			 * Checks if a property on a message is considered to be present.
			 * This is an alias of {@link util.isSet}.
			 * @function
			 * @param {Object} obj Plain object or message instance
			 * @param {string} prop Property name
			 * @returns {boolean} `true` if considered to be present, otherwise `false`
			 */
			util.isset =

			/**
			 * Checks if a property on a message is considered to be present.
			 * @param {Object} obj Plain object or message instance
			 * @param {string} prop Property name
			 * @returns {boolean} `true` if considered to be present, otherwise `false`
			 */
			util.isSet = function isSet(obj, prop) {
			    var value = obj[prop];
			    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
			        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
			    return false;
			};

			/**
			 * Any compatible Buffer instance.
			 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
			 * @interface Buffer
			 * @extends Uint8Array
			 */

			/**
			 * Node's Buffer class if available.
			 * @type {Constructor<Buffer>}
			 */
			util.Buffer = (function() {
			    try {
			        var Buffer = util.inquire("buffer").Buffer;
			        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
			        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
			    } catch (e) {
			        /* istanbul ignore next */
			        return null;
			    }
			})();

			// Internal alias of or polyfull for Buffer.from.
			util._Buffer_from = null;

			// Internal alias of or polyfill for Buffer.allocUnsafe.
			util._Buffer_allocUnsafe = null;

			/**
			 * Creates a new buffer of whatever type supported by the environment.
			 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
			 * @returns {Uint8Array|Buffer} Buffer
			 */
			util.newBuffer = function newBuffer(sizeOrArray) {
			    /* istanbul ignore next */
			    return typeof sizeOrArray === "number"
			        ? util.Buffer
			            ? util._Buffer_allocUnsafe(sizeOrArray)
			            : new util.Array(sizeOrArray)
			        : util.Buffer
			            ? util._Buffer_from(sizeOrArray)
			            : typeof Uint8Array === "undefined"
			                ? sizeOrArray
			                : new Uint8Array(sizeOrArray);
			};

			/**
			 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
			 * @type {Constructor<Uint8Array>}
			 */
			util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

			/**
			 * Any compatible Long instance.
			 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
			 * @interface Long
			 * @property {number} low Low bits
			 * @property {number} high High bits
			 * @property {boolean} unsigned Whether unsigned or not
			 */

			/**
			 * Long.js's Long class if available.
			 * @type {Constructor<Long>}
			 */
			util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
			         || /* istanbul ignore next */ util.global.Long
			         || util.inquire("long");

			/**
			 * Regular expression used to verify 2 bit (`bool`) map keys.
			 * @type {RegExp}
			 * @const
			 */
			util.key2Re = /^true|false|0|1$/;

			/**
			 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
			 * @type {RegExp}
			 * @const
			 */
			util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

			/**
			 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
			 * @type {RegExp}
			 * @const
			 */
			util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

			/**
			 * Converts a number or long to an 8 characters long hash string.
			 * @param {Long|number} value Value to convert
			 * @returns {string} Hash
			 */
			util.longToHash = function longToHash(value) {
			    return value
			        ? util.LongBits.from(value).toHash()
			        : util.LongBits.zeroHash;
			};

			/**
			 * Converts an 8 characters long hash string to a long or number.
			 * @param {string} hash Hash
			 * @param {boolean} [unsigned=false] Whether unsigned or not
			 * @returns {Long|number} Original value
			 */
			util.longFromHash = function longFromHash(hash, unsigned) {
			    var bits = util.LongBits.fromHash(hash);
			    if (util.Long)
			        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
			    return bits.toNumber(Boolean(unsigned));
			};

			/**
			 * Merges the properties of the source object into the destination object.
			 * @memberof util
			 * @param {Object.<string,*>} dst Destination object
			 * @param {Object.<string,*>} src Source object
			 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
			 * @returns {Object.<string,*>} Destination object
			 */
			function merge(dst, src, ifNotSet) { // used by converters
			    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
			        if (dst[keys[i]] === undefined || !ifNotSet)
			            dst[keys[i]] = src[keys[i]];
			    return dst;
			}

			util.merge = merge;

			/**
			 * Converts the first character of a string to lower case.
			 * @param {string} str String to convert
			 * @returns {string} Converted string
			 */
			util.lcFirst = function lcFirst(str) {
			    return str.charAt(0).toLowerCase() + str.substring(1);
			};

			/**
			 * Creates a custom error constructor.
			 * @memberof util
			 * @param {string} name Error name
			 * @returns {Constructor<Error>} Custom error constructor
			 */
			function newError(name) {

			    function CustomError(message, properties) {

			        if (!(this instanceof CustomError))
			            return new CustomError(message, properties);

			        // Error.call(this, message);
			        // ^ just returns a new error instance because the ctor can be called as a function

			        Object.defineProperty(this, "message", { get: function() { return message; } });

			        /* istanbul ignore next */
			        if (Error.captureStackTrace) // node
			            Error.captureStackTrace(this, CustomError);
			        else
			            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

			        if (properties)
			            merge(this, properties);
			    }

			    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

			    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

			    CustomError.prototype.toString = function toString() {
			        return this.name + ": " + this.message;
			    };

			    return CustomError;
			}

			util.newError = newError;

			/**
			 * Constructs a new protocol error.
			 * @classdesc Error subclass indicating a protocol specifc error.
			 * @memberof util
			 * @extends Error
			 * @template T extends Message<T>
			 * @constructor
			 * @param {string} message Error message
			 * @param {Object.<string,*>} [properties] Additional properties
			 * @example
			 * try {
			 *     MyMessage.decode(someBuffer); // throws if required fields are missing
			 * } catch (e) {
			 *     if (e instanceof ProtocolError && e.instance)
			 *         console.log("decoded so far: " + JSON.stringify(e.instance));
			 * }
			 */
			util.ProtocolError = newError("ProtocolError");

			/**
			 * So far decoded message instance.
			 * @name util.ProtocolError#instance
			 * @type {Message<T>}
			 */

			/**
			 * A OneOf getter as returned by {@link util.oneOfGetter}.
			 * @typedef OneOfGetter
			 * @type {function}
			 * @returns {string|undefined} Set field name, if any
			 */

			/**
			 * Builds a getter for a oneof's present field name.
			 * @param {string[]} fieldNames Field names
			 * @returns {OneOfGetter} Unbound getter
			 */
			util.oneOfGetter = function getOneOf(fieldNames) {
			    var fieldMap = {};
			    for (var i = 0; i < fieldNames.length; ++i)
			        fieldMap[fieldNames[i]] = 1;

			    /**
			     * @returns {string|undefined} Set field name, if any
			     * @this Object
			     * @ignore
			     */
			    return function() { // eslint-disable-line consistent-return
			        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
			            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
			                return keys[i];
			    };
			};

			/**
			 * A OneOf setter as returned by {@link util.oneOfSetter}.
			 * @typedef OneOfSetter
			 * @type {function}
			 * @param {string|undefined} value Field name
			 * @returns {undefined}
			 */

			/**
			 * Builds a setter for a oneof's present field name.
			 * @param {string[]} fieldNames Field names
			 * @returns {OneOfSetter} Unbound setter
			 */
			util.oneOfSetter = function setOneOf(fieldNames) {

			    /**
			     * @param {string} name Field name
			     * @returns {undefined}
			     * @this Object
			     * @ignore
			     */
			    return function(name) {
			        for (var i = 0; i < fieldNames.length; ++i)
			            if (fieldNames[i] !== name)
			                delete this[fieldNames[i]];
			    };
			};

			/**
			 * Default conversion options used for {@link Message#toJSON} implementations.
			 *
			 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
			 *
			 * - Longs become strings
			 * - Enums become string keys
			 * - Bytes become base64 encoded strings
			 * - (Sub-)Messages become plain objects
			 * - Maps become plain objects with all string keys
			 * - Repeated fields become arrays
			 * - NaN and Infinity for float and double fields become strings
			 *
			 * @type {IConversionOptions}
			 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
			 */
			util.toJSONOptions = {
			    longs: String,
			    enums: String,
			    bytes: String,
			    json: true
			};

			// Sets up buffer utility according to the environment (called in index-minimal)
			util._configure = function() {
			    var Buffer = util.Buffer;
			    /* istanbul ignore if */
			    if (!Buffer) {
			        util._Buffer_from = util._Buffer_allocUnsafe = null;
			        return;
			    }
			    // because node 4.x buffers are incompatible & immutable
			    // see: https://github.com/dcodeIO/protobuf.js/pull/665
			    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
			        /* istanbul ignore next */
			        function Buffer_from(value, encoding) {
			            return new Buffer(value, encoding);
			        };
			    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
			        /* istanbul ignore next */
			        function Buffer_allocUnsafe(size) {
			            return new Buffer(size);
			        };
			};
	} (minimal));
		return minimal;
	}

	"use strict";
	var writer = Writer$2;

	var util$4      = requireMinimal();

	var BufferWriter$1; // cyclic

	var LongBits$1  = util$4.LongBits,
	    base64$2    = util$4.base64,
	    utf8$3      = util$4.utf8;

	/**
	 * Constructs a new writer operation instance.
	 * @classdesc Scheduled writer operation.
	 * @constructor
	 * @param {function(*, Uint8Array, number)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {*} val Value to write
	 * @ignore
	 */
	function Op(fn, len, val) {

	    /**
	     * Function to call.
	     * @type {function(Uint8Array, number, *)}
	     */
	    this.fn = fn;

	    /**
	     * Value byte length.
	     * @type {number}
	     */
	    this.len = len;

	    /**
	     * Next operation.
	     * @type {Writer.Op|undefined}
	     */
	    this.next = undefined;

	    /**
	     * Value to write.
	     * @type {*}
	     */
	    this.val = val; // type varies
	}

	/* istanbul ignore next */
	function noop() {} // eslint-disable-line no-empty-function

	/**
	 * Constructs a new writer state instance.
	 * @classdesc Copied writer state.
	 * @memberof Writer
	 * @constructor
	 * @param {Writer} writer Writer to copy state from
	 * @ignore
	 */
	function State(writer) {

	    /**
	     * Current head.
	     * @type {Writer.Op}
	     */
	    this.head = writer.head;

	    /**
	     * Current tail.
	     * @type {Writer.Op}
	     */
	    this.tail = writer.tail;

	    /**
	     * Current buffer length.
	     * @type {number}
	     */
	    this.len = writer.len;

	    /**
	     * Next state.
	     * @type {State|null}
	     */
	    this.next = writer.states;
	}

	/**
	 * Constructs a new writer instance.
	 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 */
	function Writer$2() {

	    /**
	     * Current length.
	     * @type {number}
	     */
	    this.len = 0;

	    /**
	     * Operations head.
	     * @type {Object}
	     */
	    this.head = new Op(noop, 0, 0);

	    /**
	     * Operations tail
	     * @type {Object}
	     */
	    this.tail = this.head;

	    /**
	     * Linked forked states.
	     * @type {Object|null}
	     */
	    this.states = null;

	    // When a value is written, the writer calculates its byte length and puts it into a linked
	    // list of operations to perform when finish() is called. This both allows us to allocate
	    // buffers of the exact required size and reduces the amount of work we have to do compared
	    // to first calculating over objects and then encoding over objects. In our case, the encoding
	    // part is just a linked list walk calling operations with already prepared values.
	}

	var create$2 = function create() {
	    return util$4.Buffer
	        ? function create_buffer_setup() {
	            return (Writer$2.create = function create_buffer() {
	                return new BufferWriter$1();
	            })();
	        }
	        /* istanbul ignore next */
	        : function create_array() {
	            return new Writer$2();
	        };
	};

	/**
	 * Creates a new writer.
	 * @function
	 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
	 */
	Writer$2.create = create$2();

	/**
	 * Allocates a buffer of the specified size.
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */
	Writer$2.alloc = function alloc(size) {
	    return new util$4.Array(size);
	};

	// Use Uint8Array buffer pool in the browser, just like node does with buffers
	/* istanbul ignore else */
	if (util$4.Array !== Array)
	    Writer$2.alloc = util$4.pool(Writer$2.alloc, util$4.Array.prototype.subarray);

	/**
	 * Pushes a new operation to the queue.
	 * @param {function(Uint8Array, number, *)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @returns {Writer} `this`
	 * @private
	 */
	Writer$2.prototype._push = function push(fn, len, val) {
	    this.tail = this.tail.next = new Op(fn, len, val);
	    this.len += len;
	    return this;
	};

	function writeByte(val, buf, pos) {
	    buf[pos] = val & 255;
	}

	function writeVarint32(val, buf, pos) {
	    while (val > 127) {
	        buf[pos++] = val & 127 | 128;
	        val >>>= 7;
	    }
	    buf[pos] = val;
	}

	/**
	 * Constructs a new varint writer operation instance.
	 * @classdesc Scheduled varint writer operation.
	 * @extends Op
	 * @constructor
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @ignore
	 */
	function VarintOp(len, val) {
	    this.len = len;
	    this.next = undefined;
	    this.val = val;
	}

	VarintOp.prototype = Object.create(Op.prototype);
	VarintOp.prototype.fn = writeVarint32;

	/**
	 * Writes an unsigned 32 bit value as a varint.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.uint32 = function write_uint32(value) {
	    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
	    // uint32 is by far the most frequently used operation and benefits significantly from this.
	    this.len += (this.tail = this.tail.next = new VarintOp(
	        (value = value >>> 0)
	                < 128       ? 1
	        : value < 16384     ? 2
	        : value < 2097152   ? 3
	        : value < 268435456 ? 4
	        :                     5,
	    value)).len;
	    return this;
	};

	/**
	 * Writes a signed 32 bit value as a varint.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.int32 = function write_int32(value) {
	    return value < 0
	        ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec
	        : this.uint32(value);
	};

	/**
	 * Writes a 32 bit value as a varint, zig-zag encoded.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.sint32 = function write_sint32(value) {
	    return this.uint32((value << 1 ^ value >> 31) >>> 0);
	};

	function writeVarint64(val, buf, pos) {
	    while (val.hi) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
	        val.hi >>>= 7;
	    }
	    while (val.lo > 127) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = val.lo >>> 7;
	    }
	    buf[pos++] = val.lo;
	}

	/**
	 * Writes an unsigned 64 bit value as a varint.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.uint64 = function write_uint64(value) {
	    var bits = LongBits$1.from(value);
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a signed 64 bit value as a varint.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.int64 = Writer$2.prototype.uint64;

	/**
	 * Writes a signed 64 bit value as a varint, zig-zag encoded.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.sint64 = function write_sint64(value) {
	    var bits = LongBits$1.from(value).zzEncode();
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a boolish value as a varint.
	 * @param {boolean} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.bool = function write_bool(value) {
	    return this._push(writeByte, 1, value ? 1 : 0);
	};

	function writeFixed32(val, buf, pos) {
	    buf[pos    ] =  val         & 255;
	    buf[pos + 1] =  val >>> 8   & 255;
	    buf[pos + 2] =  val >>> 16  & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	/**
	 * Writes an unsigned 32 bit value as fixed 32 bits.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.fixed32 = function write_fixed32(value) {
	    return this._push(writeFixed32, 4, value >>> 0);
	};

	/**
	 * Writes a signed 32 bit value as fixed 32 bits.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.sfixed32 = Writer$2.prototype.fixed32;

	/**
	 * Writes an unsigned 64 bit value as fixed 64 bits.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.fixed64 = function write_fixed64(value) {
	    var bits = LongBits$1.from(value);
	    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
	};

	/**
	 * Writes a signed 64 bit value as fixed 64 bits.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.sfixed64 = Writer$2.prototype.fixed64;

	/**
	 * Writes a float (32 bit).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.float = function write_float(value) {
	    return this._push(util$4.float.writeFloatLE, 4, value);
	};

	/**
	 * Writes a double (64 bit float).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.double = function write_double(value) {
	    return this._push(util$4.float.writeDoubleLE, 8, value);
	};

	var writeBytes = util$4.Array.prototype.set
	    ? function writeBytes_set(val, buf, pos) {
	        buf.set(val, pos); // also works for plain array values
	    }
	    /* istanbul ignore next */
	    : function writeBytes_for(val, buf, pos) {
	        for (var i = 0; i < val.length; ++i)
	            buf[pos + i] = val[i];
	    };

	/**
	 * Writes a sequence of bytes.
	 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.bytes = function write_bytes(value) {
	    var len = value.length >>> 0;
	    if (!len)
	        return this._push(writeByte, 1, 0);
	    if (util$4.isString(value)) {
	        var buf = Writer$2.alloc(len = base64$2.length(value));
	        base64$2.decode(value, buf, 0);
	        value = buf;
	    }
	    return this.uint32(len)._push(writeBytes, len, value);
	};

	/**
	 * Writes a string.
	 * @param {string} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.string = function write_string(value) {
	    var len = utf8$3.length(value);
	    return len
	        ? this.uint32(len)._push(utf8$3.write, len, value)
	        : this._push(writeByte, 1, 0);
	};

	/**
	 * Forks this writer's state by pushing it to a stack.
	 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.fork = function fork() {
	    this.states = new State(this);
	    this.head = this.tail = new Op(noop, 0, 0);
	    this.len = 0;
	    return this;
	};

	/**
	 * Resets this instance to the last state.
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.reset = function reset() {
	    if (this.states) {
	        this.head   = this.states.head;
	        this.tail   = this.states.tail;
	        this.len    = this.states.len;
	        this.states = this.states.next;
	    } else {
	        this.head = this.tail = new Op(noop, 0, 0);
	        this.len  = 0;
	    }
	    return this;
	};

	/**
	 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.ldelim = function ldelim() {
	    var head = this.head,
	        tail = this.tail,
	        len  = this.len;
	    this.reset().uint32(len);
	    if (len) {
	        this.tail.next = head.next; // skip noop
	        this.tail = tail;
	        this.len += len;
	    }
	    return this;
	};

	/**
	 * Finishes the write operation.
	 * @returns {Uint8Array} Finished buffer
	 */
	Writer$2.prototype.finish = function finish() {
	    var head = this.head.next, // skip noop
	        buf  = this.constructor.alloc(this.len),
	        pos  = 0;
	    while (head) {
	        head.fn(head.val, buf, pos);
	        pos += head.len;
	        head = head.next;
	    }
	    // this.head = this.tail = null;
	    return buf;
	};

	Writer$2._configure = function(BufferWriter_) {
	    BufferWriter$1 = BufferWriter_;
	    Writer$2.create = create$2();
	    BufferWriter$1._configure();
	};

	"use strict";
	var writer_buffer = BufferWriter;

	// extends Writer
	var Writer$1 = writer;
	(BufferWriter.prototype = Object.create(Writer$1.prototype)).constructor = BufferWriter;

	var util$3 = requireMinimal();

	/**
	 * Constructs a new buffer writer instance.
	 * @classdesc Wire format writer using node buffers.
	 * @extends Writer
	 * @constructor
	 */
	function BufferWriter() {
	    Writer$1.call(this);
	}

	BufferWriter._configure = function () {
	    /**
	     * Allocates a buffer of the specified size.
	     * @function
	     * @param {number} size Buffer size
	     * @returns {Buffer} Buffer
	     */
	    BufferWriter.alloc = util$3._Buffer_allocUnsafe;

	    BufferWriter.writeBytesBuffer = util$3.Buffer && util$3.Buffer.prototype instanceof Uint8Array && util$3.Buffer.prototype.set.name === "set"
	        ? function writeBytesBuffer_set(val, buf, pos) {
	          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
	          // also works for plain array values
	        }
	        /* istanbul ignore next */
	        : function writeBytesBuffer_copy(val, buf, pos) {
	          if (val.copy) // Buffer values
	            val.copy(buf, pos, 0, val.length);
	          else for (var i = 0; i < val.length;) // plain array values
	            buf[pos++] = val[i++];
	        };
	};


	/**
	 * @override
	 */
	BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
	    if (util$3.isString(value))
	        value = util$3._Buffer_from(value, "base64");
	    var len = value.length >>> 0;
	    this.uint32(len);
	    if (len)
	        this._push(BufferWriter.writeBytesBuffer, len, value);
	    return this;
	};

	function writeStringBuffer(val, buf, pos) {
	    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
	        util$3.utf8.write(val, buf, pos);
	    else if (buf.utf8Write)
	        buf.utf8Write(val, pos);
	    else
	        buf.write(val, pos);
	}

	/**
	 * @override
	 */
	BufferWriter.prototype.string = function write_string_buffer(value) {
	    var len = util$3.Buffer.byteLength(value);
	    this.uint32(len);
	    if (len)
	        this._push(writeStringBuffer, len, value);
	    return this;
	};


	/**
	 * Finishes the write operation.
	 * @name BufferWriter#finish
	 * @function
	 * @returns {Buffer} Finished buffer
	 */

	BufferWriter._configure();

	"use strict";
	var reader = Reader$2;

	var util$2      = requireMinimal();

	var BufferReader$1; // cyclic

	var LongBits  = util$2.LongBits,
	    utf8$2      = util$2.utf8;

	/* istanbul ignore next */
	function indexOutOfRange(reader, writeLength) {
	    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
	}

	/**
	 * Constructs a new reader instance using the specified buffer.
	 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 * @param {Uint8Array} buffer Buffer to read from
	 */
	function Reader$2(buffer) {

	    /**
	     * Read buffer.
	     * @type {Uint8Array}
	     */
	    this.buf = buffer;

	    /**
	     * Read buffer position.
	     * @type {number}
	     */
	    this.pos = 0;

	    /**
	     * Read buffer length.
	     * @type {number}
	     */
	    this.len = buffer.length;
	}

	var create_array = typeof Uint8Array !== "undefined"
	    ? function create_typed_array(buffer) {
	        if (buffer instanceof Uint8Array || Array.isArray(buffer))
	            return new Reader$2(buffer);
	        throw Error("illegal buffer");
	    }
	    /* istanbul ignore next */
	    : function create_array(buffer) {
	        if (Array.isArray(buffer))
	            return new Reader$2(buffer);
	        throw Error("illegal buffer");
	    };

	var create$1 = function create() {
	    return util$2.Buffer
	        ? function create_buffer_setup(buffer) {
	            return (Reader$2.create = function create_buffer(buffer) {
	                return util$2.Buffer.isBuffer(buffer)
	                    ? new BufferReader$1(buffer)
	                    /* istanbul ignore next */
	                    : create_array(buffer);
	            })(buffer);
	        }
	        /* istanbul ignore next */
	        : create_array;
	};

	/**
	 * Creates a new reader using the specified buffer.
	 * @function
	 * @param {Uint8Array|Buffer} buffer Buffer to read from
	 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
	 * @throws {Error} If `buffer` is not a valid buffer
	 */
	Reader$2.create = create$1();

	Reader$2.prototype._slice = util$2.Array.prototype.subarray || /* istanbul ignore next */ util$2.Array.prototype.slice;

	/**
	 * Reads a varint as an unsigned 32 bit value.
	 * @function
	 * @returns {number} Value read
	 */
	Reader$2.prototype.uint32 = (function read_uint32_setup() {
	    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
	    return function read_uint32() {
	        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

	        /* istanbul ignore if */
	        if ((this.pos += 5) > this.len) {
	            this.pos = this.len;
	            throw indexOutOfRange(this, 10);
	        }
	        return value;
	    };
	})();

	/**
	 * Reads a varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader$2.prototype.int32 = function read_int32() {
	    return this.uint32() | 0;
	};

	/**
	 * Reads a zig-zag encoded varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader$2.prototype.sint32 = function read_sint32() {
	    var value = this.uint32();
	    return value >>> 1 ^ -(value & 1) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readLongVarint() {
	    // tends to deopt with local vars for octet etc.
	    var bits = new LongBits(0, 0);
	    var i = 0;
	    if (this.len - this.pos > 4) { // fast route (lo)
	        for (; i < 4; ++i) {
	            // 1st..4th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 5th
	        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
	        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
	        if (this.buf[this.pos++] < 128)
	            return bits;
	        i = 0;
	    } else {
	        for (; i < 3; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 1st..3th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 4th
	        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
	        return bits;
	    }
	    if (this.len - this.pos > 4) { // fast route (hi)
	        for (; i < 5; ++i) {
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    } else {
	        for (; i < 5; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    }
	    /* istanbul ignore next */
	    throw Error("invalid varint encoding");
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads a varint as a signed 64 bit value.
	 * @name Reader#int64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as an unsigned 64 bit value.
	 * @name Reader#uint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a zig-zag encoded varint as a signed 64 bit value.
	 * @name Reader#sint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as a boolean.
	 * @returns {boolean} Value read
	 */
	Reader$2.prototype.bool = function read_bool() {
	    return this.uint32() !== 0;
	};

	function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
	    return (buf[end - 4]
	          | buf[end - 3] << 8
	          | buf[end - 2] << 16
	          | buf[end - 1] << 24) >>> 0;
	}

	/**
	 * Reads fixed 32 bits as an unsigned 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader$2.prototype.fixed32 = function read_fixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4);
	};

	/**
	 * Reads fixed 32 bits as a signed 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader$2.prototype.sfixed32 = function read_sfixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readFixed64(/* this: Reader */) {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 8);

	    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads fixed 64 bits.
	 * @name Reader#fixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads zig-zag encoded fixed 64 bits.
	 * @name Reader#sfixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a float (32 bit) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader$2.prototype.float = function read_float() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util$2.float.readFloatLE(this.buf, this.pos);
	    this.pos += 4;
	    return value;
	};

	/**
	 * Reads a double (64 bit float) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader$2.prototype.double = function read_double() {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util$2.float.readDoubleLE(this.buf, this.pos);
	    this.pos += 8;
	    return value;
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @returns {Uint8Array} Value read
	 */
	Reader$2.prototype.bytes = function read_bytes() {
	    var length = this.uint32(),
	        start  = this.pos,
	        end    = this.pos + length;

	    /* istanbul ignore if */
	    if (end > this.len)
	        throw indexOutOfRange(this, length);

	    this.pos += length;
	    if (Array.isArray(this.buf)) // plain array
	        return this.buf.slice(start, end);
	    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
	        ? new this.buf.constructor(0)
	        : this._slice.call(this.buf, start, end);
	};

	/**
	 * Reads a string preceeded by its byte length as a varint.
	 * @returns {string} Value read
	 */
	Reader$2.prototype.string = function read_string() {
	    var bytes = this.bytes();
	    return utf8$2.read(bytes, 0, bytes.length);
	};

	/**
	 * Skips the specified number of bytes if specified, otherwise skips a varint.
	 * @param {number} [length] Length if known, otherwise a varint is assumed
	 * @returns {Reader} `this`
	 */
	Reader$2.prototype.skip = function skip(length) {
	    if (typeof length === "number") {
	        /* istanbul ignore if */
	        if (this.pos + length > this.len)
	            throw indexOutOfRange(this, length);
	        this.pos += length;
	    } else {
	        do {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	        } while (this.buf[this.pos++] & 128);
	    }
	    return this;
	};

	/**
	 * Skips the next element of the specified wire type.
	 * @param {number} wireType Wire type received
	 * @returns {Reader} `this`
	 */
	Reader$2.prototype.skipType = function(wireType) {
	    switch (wireType) {
	        case 0:
	            this.skip();
	            break;
	        case 1:
	            this.skip(8);
	            break;
	        case 2:
	            this.skip(this.uint32());
	            break;
	        case 3:
	            while ((wireType = this.uint32() & 7) !== 4) {
	                this.skipType(wireType);
	            }
	            break;
	        case 5:
	            this.skip(4);
	            break;

	        /* istanbul ignore next */
	        default:
	            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
	    }
	    return this;
	};

	Reader$2._configure = function(BufferReader_) {
	    BufferReader$1 = BufferReader_;
	    Reader$2.create = create$1();
	    BufferReader$1._configure();

	    var fn = util$2.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
	    util$2.merge(Reader$2.prototype, {

	        int64: function read_int64() {
	            return readLongVarint.call(this)[fn](false);
	        },

	        uint64: function read_uint64() {
	            return readLongVarint.call(this)[fn](true);
	        },

	        sint64: function read_sint64() {
	            return readLongVarint.call(this).zzDecode()[fn](false);
	        },

	        fixed64: function read_fixed64() {
	            return readFixed64.call(this)[fn](true);
	        },

	        sfixed64: function read_sfixed64() {
	            return readFixed64.call(this)[fn](false);
	        }

	    });
	};

	"use strict";
	var reader_buffer = BufferReader;

	// extends Reader
	var Reader$1 = reader;
	(BufferReader.prototype = Object.create(Reader$1.prototype)).constructor = BufferReader;

	var util$1 = requireMinimal();

	/**
	 * Constructs a new buffer reader instance.
	 * @classdesc Wire format reader using node buffers.
	 * @extends Reader
	 * @constructor
	 * @param {Buffer} buffer Buffer to read from
	 */
	function BufferReader(buffer) {
	    Reader$1.call(this, buffer);

	    /**
	     * Read buffer.
	     * @name BufferReader#buf
	     * @type {Buffer}
	     */
	}

	BufferReader._configure = function () {
	    /* istanbul ignore else */
	    if (util$1.Buffer)
	        BufferReader.prototype._slice = util$1.Buffer.prototype.slice;
	};


	/**
	 * @override
	 */
	BufferReader.prototype.string = function read_string_buffer() {
	    var len = this.uint32(); // modifies pos
	    return this.buf.utf8Slice
	        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
	        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @name BufferReader#bytes
	 * @function
	 * @returns {Buffer} Value read
	 */

	BufferReader._configure();

	var rpc = {};

	"use strict";
	var service = Service;

	var util = requireMinimal();

	// Extends EventEmitter
	(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

	/**
	 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
	 *
	 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
	 * @typedef rpc.ServiceMethodCallback
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {TRes} [response] Response message
	 * @returns {undefined}
	 */

	/**
	 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
	 * @typedef rpc.ServiceMethod
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
	 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
	 */

	/**
	 * Constructs a new RPC service instance.
	 * @classdesc An RPC service as returned by {@link Service#create}.
	 * @exports rpc.Service
	 * @extends util.EventEmitter
	 * @constructor
	 * @param {RPCImpl} rpcImpl RPC implementation
	 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	 */
	function Service(rpcImpl, requestDelimited, responseDelimited) {

	    if (typeof rpcImpl !== "function")
	        throw TypeError("rpcImpl must be a function");

	    util.EventEmitter.call(this);

	    /**
	     * RPC implementation. Becomes `null` once the service is ended.
	     * @type {RPCImpl|null}
	     */
	    this.rpcImpl = rpcImpl;

	    /**
	     * Whether requests are length-delimited.
	     * @type {boolean}
	     */
	    this.requestDelimited = Boolean(requestDelimited);

	    /**
	     * Whether responses are length-delimited.
	     * @type {boolean}
	     */
	    this.responseDelimited = Boolean(responseDelimited);
	}

	/**
	 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
	 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
	 * @param {Constructor<TReq>} requestCtor Request constructor
	 * @param {Constructor<TRes>} responseCtor Response constructor
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
	 * @returns {undefined}
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 */
	Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

	    if (!request)
	        throw TypeError("request must be specified");

	    var self = this;
	    if (!callback)
	        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

	    if (!self.rpcImpl) {
	        setTimeout(function() { callback(Error("already ended")); }, 0);
	        return undefined;
	    }

	    try {
	        return self.rpcImpl(
	            method,
	            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
	            function rpcCallback(err, response) {

	                if (err) {
	                    self.emit("error", err, method);
	                    return callback(err);
	                }

	                if (response === null) {
	                    self.end(/* endedByRPC */ true);
	                    return undefined;
	                }

	                if (!(response instanceof responseCtor)) {
	                    try {
	                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
	                    } catch (err) {
	                        self.emit("error", err, method);
	                        return callback(err);
	                    }
	                }

	                self.emit("data", response, method);
	                return callback(null, response);
	            }
	        );
	    } catch (err) {
	        self.emit("error", err, method);
	        setTimeout(function() { callback(err); }, 0);
	        return undefined;
	    }
	};

	/**
	 * Ends this service and emits the `end` event.
	 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
	 * @returns {rpc.Service} `this`
	 */
	Service.prototype.end = function end(endedByRPC) {
	    if (this.rpcImpl) {
	        if (!endedByRPC) // signal end to rpcImpl
	            this.rpcImpl(null, null, null);
	        this.rpcImpl = null;
	        this.emit("end").off();
	    }
	    return this;
	};

	(function (exports) {
		"use strict";

		/**
		 * Streaming RPC helpers.
		 * @namespace
		 */
		var rpc = exports;

		/**
		 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
		 * @typedef RPCImpl
		 * @type {function}
		 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
		 * @param {Uint8Array} requestData Request data
		 * @param {RPCImplCallback} callback Callback function
		 * @returns {undefined}
		 * @example
		 * function rpcImpl(method, requestData, callback) {
		 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
		 *         throw Error("no such method");
		 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
		 *         callback(err, responseData);
		 *     });
		 * }
		 */

		/**
		 * Node-style callback as used by {@link RPCImpl}.
		 * @typedef RPCImplCallback
		 * @type {function}
		 * @param {Error|null} error Error, if any, otherwise `null`
		 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
		 * @returns {undefined}
		 */

		rpc.Service = service;
	} (rpc));

	"use strict";
	var roots = {};

	(function (exports) {
		"use strict";
		var protobuf = exports;

		/**
		 * Build type, one of `"full"`, `"light"` or `"minimal"`.
		 * @name build
		 * @type {string}
		 * @const
		 */
		protobuf.build = "minimal";

		// Serialization
		protobuf.Writer       = writer;
		protobuf.BufferWriter = writer_buffer;
		protobuf.Reader       = reader;
		protobuf.BufferReader = reader_buffer;

		// Utility
		protobuf.util         = requireMinimal();
		protobuf.rpc          = rpc;
		protobuf.roots        = roots;
		protobuf.configure    = configure;

		/* istanbul ignore next */
		/**
		 * Reconfigures the library according to the environment.
		 * @returns {undefined}
		 */
		function configure() {
		    protobuf.util._configure();
		    protobuf.Writer._configure(protobuf.BufferWriter);
		    protobuf.Reader._configure(protobuf.BufferReader);
		}

		// Set up buffer utility according to the environment
		configure();
	} (indexMinimal));

	(function (module) {
		// minimal library entry point.

		"use strict";
		module.exports = indexMinimal;
	} (minimal$1));

	var $protobuf = /*@__PURE__*/getDefaultExportFromCjs(minimalExports);

	const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
	const $root = $protobuf.roots['ipfs-unixfs'] || ($protobuf.roots['ipfs-unixfs'] = {});
	const Data = $root.Data = (() => {
	  function Data(p) {
	    this.blocksizes = [];
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Data.prototype.Type = 0;
	  Data.prototype.Data = $util.newBuffer([]);
	  Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
	  Data.prototype.blocksizes = $util.emptyArray;
	  Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
	  Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
	  Data.prototype.mode = 0;
	  Data.prototype.mtime = null;
	  Data.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer.create();
	    w.uint32(8).int32(m.Type);
	    if (m.Data != null && Object.hasOwnProperty.call(m, 'Data'))
	      w.uint32(18).bytes(m.Data);
	    if (m.filesize != null && Object.hasOwnProperty.call(m, 'filesize'))
	      w.uint32(24).uint64(m.filesize);
	    if (m.blocksizes != null && m.blocksizes.length) {
	      for (var i = 0; i < m.blocksizes.length; ++i)
	        w.uint32(32).uint64(m.blocksizes[i]);
	    }
	    if (m.hashType != null && Object.hasOwnProperty.call(m, 'hashType'))
	      w.uint32(40).uint64(m.hashType);
	    if (m.fanout != null && Object.hasOwnProperty.call(m, 'fanout'))
	      w.uint32(48).uint64(m.fanout);
	    if (m.mode != null && Object.hasOwnProperty.call(m, 'mode'))
	      w.uint32(56).uint32(m.mode);
	    if (m.mtime != null && Object.hasOwnProperty.call(m, 'mtime'))
	      $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();
	    return w;
	  };
	  Data.decode = function decode(r, l) {
	    if (!(r instanceof $Reader))
	      r = $Reader.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.Type = r.int32();
	        break;
	      case 2:
	        m.Data = r.bytes();
	        break;
	      case 3:
	        m.filesize = r.uint64();
	        break;
	      case 4:
	        if (!(m.blocksizes && m.blocksizes.length))
	          m.blocksizes = [];
	        if ((t & 7) === 2) {
	          var c2 = r.uint32() + r.pos;
	          while (r.pos < c2)
	            m.blocksizes.push(r.uint64());
	        } else
	          m.blocksizes.push(r.uint64());
	        break;
	      case 5:
	        m.hashType = r.uint64();
	        break;
	      case 6:
	        m.fanout = r.uint64();
	        break;
	      case 7:
	        m.mode = r.uint32();
	        break;
	      case 8:
	        m.mtime = $root.UnixTime.decode(r, r.uint32());
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    if (!m.hasOwnProperty('Type'))
	      throw $util.ProtocolError('missing required \'Type\'', { instance: m });
	    return m;
	  };
	  Data.fromObject = function fromObject(d) {
	    if (d instanceof $root.Data)
	      return d;
	    var m = new $root.Data();
	    switch (d.Type) {
	    case 'Raw':
	    case 0:
	      m.Type = 0;
	      break;
	    case 'Directory':
	    case 1:
	      m.Type = 1;
	      break;
	    case 'File':
	    case 2:
	      m.Type = 2;
	      break;
	    case 'Metadata':
	    case 3:
	      m.Type = 3;
	      break;
	    case 'Symlink':
	    case 4:
	      m.Type = 4;
	      break;
	    case 'HAMTShard':
	    case 5:
	      m.Type = 5;
	      break;
	    }
	    if (d.Data != null) {
	      if (typeof d.Data === 'string')
	        $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);
	      else if (d.Data.length)
	        m.Data = d.Data;
	    }
	    if (d.filesize != null) {
	      if ($util.Long)
	        (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;
	      else if (typeof d.filesize === 'string')
	        m.filesize = parseInt(d.filesize, 10);
	      else if (typeof d.filesize === 'number')
	        m.filesize = d.filesize;
	      else if (typeof d.filesize === 'object')
	        m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);
	    }
	    if (d.blocksizes) {
	      if (!Array.isArray(d.blocksizes))
	        throw TypeError('.Data.blocksizes: array expected');
	      m.blocksizes = [];
	      for (var i = 0; i < d.blocksizes.length; ++i) {
	        if ($util.Long)
	          (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;
	        else if (typeof d.blocksizes[i] === 'string')
	          m.blocksizes[i] = parseInt(d.blocksizes[i], 10);
	        else if (typeof d.blocksizes[i] === 'number')
	          m.blocksizes[i] = d.blocksizes[i];
	        else if (typeof d.blocksizes[i] === 'object')
	          m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);
	      }
	    }
	    if (d.hashType != null) {
	      if ($util.Long)
	        (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;
	      else if (typeof d.hashType === 'string')
	        m.hashType = parseInt(d.hashType, 10);
	      else if (typeof d.hashType === 'number')
	        m.hashType = d.hashType;
	      else if (typeof d.hashType === 'object')
	        m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);
	    }
	    if (d.fanout != null) {
	      if ($util.Long)
	        (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;
	      else if (typeof d.fanout === 'string')
	        m.fanout = parseInt(d.fanout, 10);
	      else if (typeof d.fanout === 'number')
	        m.fanout = d.fanout;
	      else if (typeof d.fanout === 'object')
	        m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);
	    }
	    if (d.mode != null) {
	      m.mode = d.mode >>> 0;
	    }
	    if (d.mtime != null) {
	      if (typeof d.mtime !== 'object')
	        throw TypeError('.Data.mtime: object expected');
	      m.mtime = $root.UnixTime.fromObject(d.mtime);
	    }
	    return m;
	  };
	  Data.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.arrays || o.defaults) {
	      d.blocksizes = [];
	    }
	    if (o.defaults) {
	      d.Type = o.enums === String ? 'Raw' : 0;
	      if (o.bytes === String)
	        d.Data = '';
	      else {
	        d.Data = [];
	        if (o.bytes !== Array)
	          d.Data = $util.newBuffer(d.Data);
	      }
	      if ($util.Long) {
	        var n = new $util.Long(0, 0, true);
	        d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.filesize = o.longs === String ? '0' : 0;
	      if ($util.Long) {
	        var n = new $util.Long(0, 0, true);
	        d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.hashType = o.longs === String ? '0' : 0;
	      if ($util.Long) {
	        var n = new $util.Long(0, 0, true);
	        d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.fanout = o.longs === String ? '0' : 0;
	      d.mode = 0;
	      d.mtime = null;
	    }
	    if (m.Type != null && m.hasOwnProperty('Type')) {
	      d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;
	    }
	    if (m.Data != null && m.hasOwnProperty('Data')) {
	      d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;
	    }
	    if (m.filesize != null && m.hasOwnProperty('filesize')) {
	      if (typeof m.filesize === 'number')
	        d.filesize = o.longs === String ? String(m.filesize) : m.filesize;
	      else
	        d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;
	    }
	    if (m.blocksizes && m.blocksizes.length) {
	      d.blocksizes = [];
	      for (var j = 0; j < m.blocksizes.length; ++j) {
	        if (typeof m.blocksizes[j] === 'number')
	          d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];
	        else
	          d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];
	      }
	    }
	    if (m.hashType != null && m.hasOwnProperty('hashType')) {
	      if (typeof m.hashType === 'number')
	        d.hashType = o.longs === String ? String(m.hashType) : m.hashType;
	      else
	        d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;
	    }
	    if (m.fanout != null && m.hasOwnProperty('fanout')) {
	      if (typeof m.fanout === 'number')
	        d.fanout = o.longs === String ? String(m.fanout) : m.fanout;
	      else
	        d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;
	    }
	    if (m.mode != null && m.hasOwnProperty('mode')) {
	      d.mode = m.mode;
	    }
	    if (m.mtime != null && m.hasOwnProperty('mtime')) {
	      d.mtime = $root.UnixTime.toObject(m.mtime, o);
	    }
	    return d;
	  };
	  Data.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	  };
	  Data.DataType = function () {
	    const valuesById = {}, values = Object.create(valuesById);
	    values[valuesById[0] = 'Raw'] = 0;
	    values[valuesById[1] = 'Directory'] = 1;
	    values[valuesById[2] = 'File'] = 2;
	    values[valuesById[3] = 'Metadata'] = 3;
	    values[valuesById[4] = 'Symlink'] = 4;
	    values[valuesById[5] = 'HAMTShard'] = 5;
	    return values;
	  }();
	  return Data;
	})();
	const UnixTime = $root.UnixTime = (() => {
	  function UnixTime(p) {
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
	  UnixTime.prototype.FractionalNanoseconds = 0;
	  UnixTime.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer.create();
	    w.uint32(8).int64(m.Seconds);
	    if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, 'FractionalNanoseconds'))
	      w.uint32(21).fixed32(m.FractionalNanoseconds);
	    return w;
	  };
	  UnixTime.decode = function decode(r, l) {
	    if (!(r instanceof $Reader))
	      r = $Reader.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.Seconds = r.int64();
	        break;
	      case 2:
	        m.FractionalNanoseconds = r.fixed32();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    if (!m.hasOwnProperty('Seconds'))
	      throw $util.ProtocolError('missing required \'Seconds\'', { instance: m });
	    return m;
	  };
	  UnixTime.fromObject = function fromObject(d) {
	    if (d instanceof $root.UnixTime)
	      return d;
	    var m = new $root.UnixTime();
	    if (d.Seconds != null) {
	      if ($util.Long)
	        (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;
	      else if (typeof d.Seconds === 'string')
	        m.Seconds = parseInt(d.Seconds, 10);
	      else if (typeof d.Seconds === 'number')
	        m.Seconds = d.Seconds;
	      else if (typeof d.Seconds === 'object')
	        m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();
	    }
	    if (d.FractionalNanoseconds != null) {
	      m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;
	    }
	    return m;
	  };
	  UnixTime.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.defaults) {
	      if ($util.Long) {
	        var n = new $util.Long(0, 0, false);
	        d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.Seconds = o.longs === String ? '0' : 0;
	      d.FractionalNanoseconds = 0;
	    }
	    if (m.Seconds != null && m.hasOwnProperty('Seconds')) {
	      if (typeof m.Seconds === 'number')
	        d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;
	      else
	        d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;
	    }
	    if (m.FractionalNanoseconds != null && m.hasOwnProperty('FractionalNanoseconds')) {
	      d.FractionalNanoseconds = m.FractionalNanoseconds;
	    }
	    return d;
	  };
	  UnixTime.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	  };
	  return UnixTime;
	})();
	const Metadata = $root.Metadata = (() => {
	  function Metadata(p) {
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Metadata.prototype.MimeType = '';
	  Metadata.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer.create();
	    if (m.MimeType != null && Object.hasOwnProperty.call(m, 'MimeType'))
	      w.uint32(10).string(m.MimeType);
	    return w;
	  };
	  Metadata.decode = function decode(r, l) {
	    if (!(r instanceof $Reader))
	      r = $Reader.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.MimeType = r.string();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  Metadata.fromObject = function fromObject(d) {
	    if (d instanceof $root.Metadata)
	      return d;
	    var m = new $root.Metadata();
	    if (d.MimeType != null) {
	      m.MimeType = String(d.MimeType);
	    }
	    return m;
	  };
	  Metadata.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.defaults) {
	      d.MimeType = '';
	    }
	    if (m.MimeType != null && m.hasOwnProperty('MimeType')) {
	      d.MimeType = m.MimeType;
	    }
	    return d;
	  };
	  Metadata.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	  };
	  return Metadata;
	})();

	const PBData = Data;
	const types$3 = [
	  'raw',
	  'directory',
	  'file',
	  'metadata',
	  'symlink',
	  'hamt-sharded-directory'
	];
	const dirTypes = [
	  'directory',
	  'hamt-sharded-directory'
	];
	const DEFAULT_FILE_MODE = parseInt('0644', 8);
	const DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);
	function parseMode(mode) {
	  if (mode == null) {
	    return undefined;
	  }
	  if (typeof mode === 'number') {
	    return mode & 4095;
	  }
	  mode = mode.toString();
	  if (mode.substring(0, 1) === '0') {
	    return parseInt(mode, 8) & 4095;
	  }
	  return parseInt(mode, 10) & 4095;
	}
	function parseMtime(input) {
	  if (input == null) {
	    return undefined;
	  }
	  let mtime;
	  if (input.secs != null) {
	    mtime = {
	      secs: input.secs,
	      nsecs: input.nsecs
	    };
	  }
	  if (input.Seconds != null) {
	    mtime = {
	      secs: input.Seconds,
	      nsecs: input.FractionalNanoseconds
	    };
	  }
	  if (Array.isArray(input)) {
	    mtime = {
	      secs: input[0],
	      nsecs: input[1]
	    };
	  }
	  if (input instanceof Date) {
	    const ms = input.getTime();
	    const secs = Math.floor(ms / 1000);
	    mtime = {
	      secs: secs,
	      nsecs: (ms - secs * 1000) * 1000
	    };
	  }
	  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {
	    return undefined;
	  }
	  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {
	    throw errCode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');
	  }
	  return mtime;
	}
	class UnixFS {
	  static unmarshal(marshaled) {
	    const message = PBData.decode(marshaled);
	    const decoded = PBData.toObject(message, {
	      defaults: false,
	      arrays: true,
	      longs: Number,
	      objects: false
	    });
	    const data = new UnixFS({
	      type: types$3[decoded.Type],
	      data: decoded.Data,
	      blockSizes: decoded.blocksizes,
	      mode: decoded.mode,
	      mtime: decoded.mtime ? {
	        secs: decoded.mtime.Seconds,
	        nsecs: decoded.mtime.FractionalNanoseconds
	      } : undefined
	    });
	    data._originalMode = decoded.mode || 0;
	    return data;
	  }
	  constructor(options = { type: 'file' }) {
	    const {type, data, blockSizes, hashType, fanout, mtime, mode} = options;
	    if (type && !types$3.includes(type)) {
	      throw errCode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');
	    }
	    this.type = type || 'file';
	    this.data = data;
	    this.hashType = hashType;
	    this.fanout = fanout;
	    this.blockSizes = blockSizes || [];
	    this._originalMode = 0;
	    this.mode = parseMode(mode);
	    if (mtime) {
	      this.mtime = parseMtime(mtime);
	      if (this.mtime && !this.mtime.nsecs) {
	        this.mtime.nsecs = 0;
	      }
	    }
	  }
	  set mode(mode) {
	    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;
	    const parsedMode = parseMode(mode);
	    if (parsedMode !== undefined) {
	      this._mode = parsedMode;
	    }
	  }
	  get mode() {
	    return this._mode;
	  }
	  isDirectory() {
	    return Boolean(this.type && dirTypes.includes(this.type));
	  }
	  addBlockSize(size) {
	    this.blockSizes.push(size);
	  }
	  removeBlockSize(index) {
	    this.blockSizes.splice(index, 1);
	  }
	  fileSize() {
	    if (this.isDirectory()) {
	      return 0;
	    }
	    let sum = 0;
	    this.blockSizes.forEach(size => {
	      sum += size;
	    });
	    if (this.data) {
	      sum += this.data.length;
	    }
	    return sum;
	  }
	  marshal() {
	    let type;
	    switch (this.type) {
	    case 'raw':
	      type = PBData.DataType.Raw;
	      break;
	    case 'directory':
	      type = PBData.DataType.Directory;
	      break;
	    case 'file':
	      type = PBData.DataType.File;
	      break;
	    case 'metadata':
	      type = PBData.DataType.Metadata;
	      break;
	    case 'symlink':
	      type = PBData.DataType.Symlink;
	      break;
	    case 'hamt-sharded-directory':
	      type = PBData.DataType.HAMTShard;
	      break;
	    default:
	      throw errCode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');
	    }
	    let data = this.data;
	    if (!this.data || !this.data.length) {
	      data = undefined;
	    }
	    let mode;
	    if (this.mode != null) {
	      mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);
	      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {
	        mode = undefined;
	      }
	      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {
	        mode = undefined;
	      }
	    }
	    let mtime;
	    if (this.mtime != null) {
	      const parsed = parseMtime(this.mtime);
	      if (parsed) {
	        mtime = {
	          Seconds: parsed.secs,
	          FractionalNanoseconds: parsed.nsecs
	        };
	        if (mtime.FractionalNanoseconds === 0) {
	          delete mtime.FractionalNanoseconds;
	        }
	      }
	    }
	    const pbData = {
	      Type: type,
	      Data: data,
	      filesize: this.isDirectory() ? undefined : this.fileSize(),
	      blocksizes: this.blockSizes,
	      hashType: this.hashType,
	      fanout: this.fanout,
	      mode,
	      mtime
	    };
	    return PBData.encode(pbData).finish();
	  }
	}

	const persist = async (buffer, blockstore, options) => {
	  if (!options.codec) {
	    options.codec = dagPb;
	  }
	  if (!options.hasher) {
	    options.hasher = sha256$3;
	  }
	  if (options.cidVersion === undefined) {
	    options.cidVersion = 1;
	  }
	  if (options.codec === dagPb && options.hasher !== sha256$3) {
	    options.cidVersion = 1;
	  }
	  const multihash = await options.hasher.digest(buffer);
	  const cid = CID.create(options.cidVersion, options.codec.code, multihash);
	  if (!options.onlyHash) {
	    await blockstore.put(cid, buffer, { signal: options.signal });
	  }
	  return cid;
	};

	const dirBuilder = async (item, blockstore, options) => {
	  const unixfs = new UnixFS({
	    type: 'directory',
	    mtime: item.mtime,
	    mode: item.mode
	  });
	  const buffer = encode$7(prepare({ Data: unixfs.marshal() }));
	  const cid = await persist(buffer, blockstore, options);
	  const path = item.path;
	  return {
	    cid,
	    path,
	    unixfs,
	    size: buffer.length
	  };
	};

	'use strict';

	/**
	 * Collects all values from an (async) iterable into an array and returns it.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 */
	const all = async (source) => {
	  const arr = [];

	  for await (const entry of source) {
	    arr.push(entry);
	  }

	  return arr
	};

	var itAll = all;

	async function flat$1(source, reduce) {
	  return reduce(await itAll(source));
	}

	function balanced(source, reduce, options) {
	  return reduceToParents(source, reduce, options);
	}
	async function reduceToParents(source, reduce, options) {
	  const roots = [];
	  for await (const chunked of itBatch(source, options.maxChildrenPerNode)) {
	    roots.push(await reduce(chunked));
	  }
	  if (roots.length > 1) {
	    return reduceToParents(roots, reduce, options);
	  }
	  return roots[0];
	}

	async function trickleStream(source, reduce, options) {
	  const root = new Root(options.layerRepeat);
	  let iteration = 0;
	  let maxDepth = 1;
	  let subTree = root;
	  for await (const layer of itBatch(source, options.maxChildrenPerNode)) {
	    if (subTree.isFull()) {
	      if (subTree !== root) {
	        root.addChild(await subTree.reduce(reduce));
	      }
	      if (iteration && iteration % options.layerRepeat === 0) {
	        maxDepth++;
	      }
	      subTree = new SubTree(maxDepth, options.layerRepeat, iteration);
	      iteration++;
	    }
	    subTree.append(layer);
	  }
	  if (subTree && subTree !== root) {
	    root.addChild(await subTree.reduce(reduce));
	  }
	  return root.reduce(reduce);
	}
	class SubTree {
	  constructor(maxDepth, layerRepeat, iteration = 0) {
	    this.maxDepth = maxDepth;
	    this.layerRepeat = layerRepeat;
	    this.currentDepth = 1;
	    this.iteration = iteration;
	    this.root = this.node = this.parent = {
	      children: [],
	      depth: this.currentDepth,
	      maxDepth,
	      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat
	    };
	  }
	  isFull() {
	    if (!this.root.data) {
	      return false;
	    }
	    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {
	      this._addNextNodeToParent(this.node);
	      return false;
	    }
	    const distantRelative = this._findParent(this.node, this.currentDepth);
	    if (distantRelative) {
	      this._addNextNodeToParent(distantRelative);
	      return false;
	    }
	    return true;
	  }
	  _addNextNodeToParent(parent) {
	    this.parent = parent;
	    const nextNode = {
	      children: [],
	      depth: parent.depth + 1,
	      parent,
	      maxDepth: this.maxDepth,
	      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat
	    };
	    parent.children.push(nextNode);
	    this.currentDepth = nextNode.depth;
	    this.node = nextNode;
	  }
	  append(layer) {
	    this.node.data = layer;
	  }
	  reduce(reduce) {
	    return this._reduce(this.root, reduce);
	  }
	  async _reduce(node, reduce) {
	    let children = [];
	    if (node.children.length) {
	      children = await Promise.all(node.children.filter(child => child.data).map(child => this._reduce(child, reduce)));
	    }
	    return reduce((node.data || []).concat(children));
	  }
	  _findParent(node, depth) {
	    const parent = node.parent;
	    if (!parent || parent.depth === 0) {
	      return;
	    }
	    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {
	      return this._findParent(parent, depth);
	    }
	    return parent;
	  }
	}
	class Root extends SubTree {
	  constructor(layerRepeat) {
	    super(0, layerRepeat);
	    this.root.depth = 0;
	    this.currentDepth = 1;
	  }
	  addChild(child) {
	    this.root.children.push(child);
	  }
	  reduce(reduce) {
	    return reduce((this.root.data || []).concat(this.root.children));
	  }
	}

	async function* bufferImporter(file, block, options) {
	  for await (let buffer of file.content) {
	    yield async () => {
	      options.progress(buffer.length, file.path);
	      let unixfs;
	      const opts = {
	        codec: dagPb,
	        cidVersion: options.cidVersion,
	        hasher: options.hasher,
	        onlyHash: options.onlyHash
	      };
	      if (options.rawLeaves) {
	        opts.codec = raw;
	        opts.cidVersion = 1;
	      } else {
	        unixfs = new UnixFS({
	          type: options.leafType,
	          data: buffer
	        });
	        buffer = encode$7({
	          Data: unixfs.marshal(),
	          Links: []
	        });
	      }
	      return {
	        cid: await persist(buffer, block, opts),
	        unixfs,
	        size: buffer.length
	      };
	    };
	  }
	}

	const dagBuilders = {
	  flat: flat$1,
	  balanced: balanced,
	  trickle: trickleStream
	};
	async function* buildFileBatch(file, blockstore, options) {
	  let count = -1;
	  let previous;
	  let bufferImporter$1;
	  if (typeof options.bufferImporter === 'function') {
	    bufferImporter$1 = options.bufferImporter;
	  } else {
	    bufferImporter$1 = bufferImporter;
	  }
	  for await (const entry of itParallelBatch(bufferImporter$1(file, blockstore, options), options.blockWriteConcurrency)) {
	    count++;
	    if (count === 0) {
	      previous = entry;
	      continue;
	    } else if (count === 1 && previous) {
	      yield previous;
	      previous = null;
	    }
	    yield entry;
	  }
	  if (previous) {
	    previous.single = true;
	    yield previous;
	  }
	}
	const reduce = (file, blockstore, options) => {
	  async function reducer(leaves) {
	    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {
	      const leaf = leaves[0];
	      if (file.mtime !== undefined || file.mode !== undefined) {
	        let buffer = await blockstore.get(leaf.cid);
	        leaf.unixfs = new UnixFS({
	          type: 'file',
	          mtime: file.mtime,
	          mode: file.mode,
	          data: buffer
	        });
	        buffer = encode$7(prepare({ Data: leaf.unixfs.marshal() }));
	        leaf.cid = await persist(buffer, blockstore, {
	          ...options,
	          codec: dagPb,
	          hasher: options.hasher,
	          cidVersion: options.cidVersion
	        });
	        leaf.size = buffer.length;
	      }
	      return {
	        cid: leaf.cid,
	        path: file.path,
	        unixfs: leaf.unixfs,
	        size: leaf.size
	      };
	    }
	    const f = new UnixFS({
	      type: 'file',
	      mtime: file.mtime,
	      mode: file.mode
	    });
	    const links = leaves.filter(leaf => {
	      if (leaf.cid.code === code$4 && leaf.size) {
	        return true;
	      }
	      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {
	        return true;
	      }
	      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);
	    }).map(leaf => {
	      if (leaf.cid.code === code$4) {
	        f.addBlockSize(leaf.size);
	        return {
	          Name: '',
	          Tsize: leaf.size,
	          Hash: leaf.cid
	        };
	      }
	      if (!leaf.unixfs || !leaf.unixfs.data) {
	        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);
	      } else {
	        f.addBlockSize(leaf.unixfs.data.length);
	      }
	      return {
	        Name: '',
	        Tsize: leaf.size,
	        Hash: leaf.cid
	      };
	    });
	    const node = {
	      Data: f.marshal(),
	      Links: links
	    };
	    const buffer = encode$7(prepare(node));
	    const cid = await persist(buffer, blockstore, options);
	    return {
	      cid,
	      path: file.path,
	      unixfs: f,
	      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)
	    };
	  }
	  return reducer;
	};
	function fileBuilder(file, block, options) {
	  const dagBuilder = dagBuilders[options.strategy];
	  if (!dagBuilder) {
	    throw errCode(new Error(`Unknown importer build strategy name: ${ options.strategy }`), 'ERR_BAD_STRATEGY');
	  }
	  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);
	}

	var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

	'use strict';

	const { Buffer } = require$$0$2;
	const symbol = Symbol.for('BufferList');

	function BufferList (buf) {
	  if (!(this instanceof BufferList)) {
	    return new BufferList(buf)
	  }

	  BufferList._init.call(this, buf);
	}

	BufferList._init = function _init (buf) {
	  Object.defineProperty(this, symbol, { value: true });

	  this._bufs = [];
	  this.length = 0;

	  if (buf) {
	    this.append(buf);
	  }
	};

	BufferList.prototype._new = function _new (buf) {
	  return new BufferList(buf)
	};

	BufferList.prototype._offset = function _offset (offset) {
	  if (offset === 0) {
	    return [0, 0]
	  }

	  let tot = 0;

	  for (let i = 0; i < this._bufs.length; i++) {
	    const _t = tot + this._bufs[i].length;
	    if (offset < _t || i === this._bufs.length - 1) {
	      return [i, offset - tot]
	    }
	    tot = _t;
	  }
	};

	BufferList.prototype._reverseOffset = function (blOffset) {
	  const bufferId = blOffset[0];
	  let offset = blOffset[1];

	  for (let i = 0; i < bufferId; i++) {
	    offset += this._bufs[i].length;
	  }

	  return offset
	};

	BufferList.prototype.get = function get (index) {
	  if (index > this.length || index < 0) {
	    return undefined
	  }

	  const offset = this._offset(index);

	  return this._bufs[offset[0]][offset[1]]
	};

	BufferList.prototype.slice = function slice (start, end) {
	  if (typeof start === 'number' && start < 0) {
	    start += this.length;
	  }

	  if (typeof end === 'number' && end < 0) {
	    end += this.length;
	  }

	  return this.copy(null, 0, start, end)
	};

	BufferList.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {
	  if (typeof srcStart !== 'number' || srcStart < 0) {
	    srcStart = 0;
	  }

	  if (typeof srcEnd !== 'number' || srcEnd > this.length) {
	    srcEnd = this.length;
	  }

	  if (srcStart >= this.length) {
	    return dst || Buffer.alloc(0)
	  }

	  if (srcEnd <= 0) {
	    return dst || Buffer.alloc(0)
	  }

	  const copy = !!dst;
	  const off = this._offset(srcStart);
	  const len = srcEnd - srcStart;
	  let bytes = len;
	  let bufoff = (copy && dstStart) || 0;
	  let start = off[1];

	  // copy/slice everything
	  if (srcStart === 0 && srcEnd === this.length) {
	    if (!copy) {
	      // slice, but full concat if multiple buffers
	      return this._bufs.length === 1
	        ? this._bufs[0]
	        : Buffer.concat(this._bufs, this.length)
	    }

	    // copy, need to copy individual buffers
	    for (let i = 0; i < this._bufs.length; i++) {
	      this._bufs[i].copy(dst, bufoff);
	      bufoff += this._bufs[i].length;
	    }

	    return dst
	  }

	  // easy, cheap case where it's a subset of one of the buffers
	  if (bytes <= this._bufs[off[0]].length - start) {
	    return copy
	      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
	      : this._bufs[off[0]].slice(start, start + bytes)
	  }

	  if (!copy) {
	    // a slice, we need something to copy in to
	    dst = Buffer.allocUnsafe(len);
	  }

	  for (let i = off[0]; i < this._bufs.length; i++) {
	    const l = this._bufs[i].length - start;

	    if (bytes > l) {
	      this._bufs[i].copy(dst, bufoff, start);
	      bufoff += l;
	    } else {
	      this._bufs[i].copy(dst, bufoff, start, start + bytes);
	      bufoff += l;
	      break
	    }

	    bytes -= l;

	    if (start) {
	      start = 0;
	    }
	  }

	  // safeguard so that we don't return uninitialized memory
	  if (dst.length > bufoff) return dst.slice(0, bufoff)

	  return dst
	};

	BufferList.prototype.shallowSlice = function shallowSlice (start, end) {
	  start = start || 0;
	  end = typeof end !== 'number' ? this.length : end;

	  if (start < 0) {
	    start += this.length;
	  }

	  if (end < 0) {
	    end += this.length;
	  }

	  if (start === end) {
	    return this._new()
	  }

	  const startOffset = this._offset(start);
	  const endOffset = this._offset(end);
	  const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);

	  if (endOffset[1] === 0) {
	    buffers.pop();
	  } else {
	    buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
	  }

	  if (startOffset[1] !== 0) {
	    buffers[0] = buffers[0].slice(startOffset[1]);
	  }

	  return this._new(buffers)
	};

	BufferList.prototype.toString = function toString (encoding, start, end) {
	  return this.slice(start, end).toString(encoding)
	};

	BufferList.prototype.consume = function consume (bytes) {
	  // first, normalize the argument, in accordance with how Buffer does it
	  bytes = Math.trunc(bytes);
	  // do nothing if not a positive number
	  if (Number.isNaN(bytes) || bytes <= 0) return this

	  while (this._bufs.length) {
	    if (bytes >= this._bufs[0].length) {
	      bytes -= this._bufs[0].length;
	      this.length -= this._bufs[0].length;
	      this._bufs.shift();
	    } else {
	      this._bufs[0] = this._bufs[0].slice(bytes);
	      this.length -= bytes;
	      break
	    }
	  }

	  return this
	};

	BufferList.prototype.duplicate = function duplicate () {
	  const copy = this._new();

	  for (let i = 0; i < this._bufs.length; i++) {
	    copy.append(this._bufs[i]);
	  }

	  return copy
	};

	BufferList.prototype.append = function append (buf) {
	  if (buf == null) {
	    return this
	  }

	  if (buf.buffer) {
	    // append a view of the underlying ArrayBuffer
	    this._appendBuffer(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength));
	  } else if (Array.isArray(buf)) {
	    for (let i = 0; i < buf.length; i++) {
	      this.append(buf[i]);
	    }
	  } else if (this._isBufferList(buf)) {
	    // unwrap argument into individual BufferLists
	    for (let i = 0; i < buf._bufs.length; i++) {
	      this.append(buf._bufs[i]);
	    }
	  } else {
	    // coerce number arguments to strings, since Buffer(number) does
	    // uninitialized memory allocation
	    if (typeof buf === 'number') {
	      buf = buf.toString();
	    }

	    this._appendBuffer(Buffer.from(buf));
	  }

	  return this
	};

	BufferList.prototype._appendBuffer = function appendBuffer (buf) {
	  this._bufs.push(buf);
	  this.length += buf.length;
	};

	BufferList.prototype.indexOf = function (search, offset, encoding) {
	  if (encoding === undefined && typeof offset === 'string') {
	    encoding = offset;
	    offset = undefined;
	  }

	  if (typeof search === 'function' || Array.isArray(search)) {
	    throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.')
	  } else if (typeof search === 'number') {
	    search = Buffer.from([search]);
	  } else if (typeof search === 'string') {
	    search = Buffer.from(search, encoding);
	  } else if (this._isBufferList(search)) {
	    search = search.slice();
	  } else if (Array.isArray(search.buffer)) {
	    search = Buffer.from(search.buffer, search.byteOffset, search.byteLength);
	  } else if (!Buffer.isBuffer(search)) {
	    search = Buffer.from(search);
	  }

	  offset = Number(offset || 0);

	  if (isNaN(offset)) {
	    offset = 0;
	  }

	  if (offset < 0) {
	    offset = this.length + offset;
	  }

	  if (offset < 0) {
	    offset = 0;
	  }

	  if (search.length === 0) {
	    return offset > this.length ? this.length : offset
	  }

	  const blOffset = this._offset(offset);
	  let blIndex = blOffset[0]; // index of which internal buffer we're working on
	  let buffOffset = blOffset[1]; // offset of the internal buffer we're working on

	  // scan over each buffer
	  for (; blIndex < this._bufs.length; blIndex++) {
	    const buff = this._bufs[blIndex];

	    while (buffOffset < buff.length) {
	      const availableWindow = buff.length - buffOffset;

	      if (availableWindow >= search.length) {
	        const nativeSearchResult = buff.indexOf(search, buffOffset);

	        if (nativeSearchResult !== -1) {
	          return this._reverseOffset([blIndex, nativeSearchResult])
	        }

	        buffOffset = buff.length - search.length + 1; // end of native search window
	      } else {
	        const revOffset = this._reverseOffset([blIndex, buffOffset]);

	        if (this._match(revOffset, search)) {
	          return revOffset
	        }

	        buffOffset++;
	      }
	    }

	    buffOffset = 0;
	  }

	  return -1
	};

	BufferList.prototype._match = function (offset, search) {
	  if (this.length - offset < search.length) {
	    return false
	  }

	  for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
	    if (this.get(offset + searchOffset) !== search[searchOffset]) {
	      return false
	    }
	  }
	  return true
	}

	;(function () {
	  const methods = {
	    readDoubleBE: 8,
	    readDoubleLE: 8,
	    readFloatBE: 4,
	    readFloatLE: 4,
	    readInt32BE: 4,
	    readInt32LE: 4,
	    readUInt32BE: 4,
	    readUInt32LE: 4,
	    readInt16BE: 2,
	    readInt16LE: 2,
	    readUInt16BE: 2,
	    readUInt16LE: 2,
	    readInt8: 1,
	    readUInt8: 1,
	    readIntBE: null,
	    readIntLE: null,
	    readUIntBE: null,
	    readUIntLE: null
	  };

	  for (const m in methods) {
	    (function (m) {
	      if (methods[m] === null) {
	        BufferList.prototype[m] = function (offset, byteLength) {
	          return this.slice(offset, offset + byteLength)[m](0, byteLength)
	        };
	      } else {
	        BufferList.prototype[m] = function (offset = 0) {
	          return this.slice(offset, offset + methods[m])[m](0)
	        };
	      }
	    }(m));
	  }
	}());

	// Used internally by the class and also as an indicator of this object being
	// a `BufferList`. It's not possible to use `instanceof BufferList` in a browser
	// environment because there could be multiple different copies of the
	// BufferList class and some `BufferList`s might be `BufferList`s.
	BufferList.prototype._isBufferList = function _isBufferList (b) {
	  return b instanceof BufferList || BufferList.isBufferList(b)
	};

	BufferList.isBufferList = function isBufferList (b) {
	  return b != null && b[symbol]
	};

	var BufferList_1 = BufferList;

	/**
	 * Rabin fingerprinting
	 *
	 * @class Rabin
	 */

	let Rabin$1 = class Rabin {
	    /**
	     * Creates an instance of Rabin.
	     * @param { import("./../dist/rabin-wasm") } asModule
	     * @param {number} [bits=12]
	     * @param {number} [min=8 * 1024]
	     * @param {number} [max=32 * 1024]
	     * @param {number} polynomial
	     * @memberof Rabin
	     */
	    constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {
	        this.bits = bits;
	        this.min = min;
	        this.max = max;
	        this.asModule = asModule;
	        this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial);
	        this.polynomial = polynomial;
	    }

	    /**
	     * Fingerprints the buffer
	     *
	     * @param {Uint8Array} buf
	     * @returns {Array<number>}
	     * @memberof Rabin
	     */
	    fingerprint(buf) {
	        const {
	            __retain,
	            __release,
	            __allocArray,
	            __getInt32Array,
	            Int32Array_ID,
	            Uint8Array_ID
	        } = this.asModule;

	        const lengths = new Int32Array(Math.ceil(buf.length/this.min));
	        const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths));
	        const pointer = __retain(__allocArray(Uint8Array_ID, buf));

	        const out = this.rabin.fingerprint(pointer, lengthsPtr);
	        const processed = __getInt32Array(out);

	        __release(pointer);
	        __release(lengthsPtr);

	        const end = processed.indexOf(0);
	        return end >= 0 ? processed.subarray(0, end) : processed;
	    }
	};

	var rabin$1 = Rabin$1;

	var loader = {};

	"use strict";

	// Runtime header offsets
	const ID_OFFSET = -8;
	const SIZE_OFFSET = -4;

	// Runtime ids
	const ARRAYBUFFER_ID = 0;
	const STRING_ID = 1;
	const ARRAYBUFFERVIEW_ID = 2;

	// Runtime type information
	const ARRAYBUFFERVIEW = 1 << 0;
	const ARRAY = 1 << 1;
	const SET = 1 << 2;
	const MAP = 1 << 3;
	const VAL_ALIGN_OFFSET = 5;
	const VAL_ALIGN = 1 << VAL_ALIGN_OFFSET;
	const VAL_SIGNED = 1 << 10;
	const VAL_FLOAT = 1 << 11;
	const VAL_NULLABLE = 1 << 12;
	const VAL_MANAGED = 1 << 13;
	const KEY_ALIGN_OFFSET = 14;
	const KEY_ALIGN = 1 << KEY_ALIGN_OFFSET;
	const KEY_SIGNED = 1 << 19;
	const KEY_FLOAT = 1 << 20;
	const KEY_NULLABLE = 1 << 21;
	const KEY_MANAGED = 1 << 22;

	// Array(BufferView) layout
	const ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;
	const ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;
	const ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;
	const ARRAYBUFFERVIEW_SIZE = 12;
	const ARRAY_LENGTH_OFFSET = 12;
	const ARRAY_SIZE = 16;

	const BIGINT = typeof BigUint64Array !== "undefined";
	const THIS = Symbol();
	const CHUNKSIZE = 1024;

	/** Gets a string from an U32 and an U16 view on a memory. */
	function getStringImpl(buffer, ptr) {
	  const U32 = new Uint32Array(buffer);
	  const U16 = new Uint16Array(buffer);
	  var length = U32[(ptr + SIZE_OFFSET) >>> 2] >>> 1;
	  var offset = ptr >>> 1;
	  if (length <= CHUNKSIZE) return String.fromCharCode.apply(String, U16.subarray(offset, offset + length));
	  const parts = [];
	  do {
	    const last = U16[offset + CHUNKSIZE - 1];
	    const size = last >= 0xD800 && last < 0xDC00 ? CHUNKSIZE - 1 : CHUNKSIZE;
	    parts.push(String.fromCharCode.apply(String, U16.subarray(offset, offset += size)));
	    length -= size;
	  } while (length > CHUNKSIZE);
	  return parts.join("") + String.fromCharCode.apply(String, U16.subarray(offset, offset + length));
	}

	/** Prepares the base module prior to instantiation. */
	function preInstantiate(imports) {
	  const baseModule = {};

	  function getString(memory, ptr) {
	    if (!memory) return "<yet unknown>";
	    return getStringImpl(memory.buffer, ptr);
	  }

	  // add common imports used by stdlib for convenience
	  const env = (imports.env = imports.env || {});
	  env.abort = env.abort || function abort(mesg, file, line, colm) {
	    const memory = baseModule.memory || env.memory; // prefer exported, otherwise try imported
	    throw Error("abort: " + getString(memory, mesg) + " at " + getString(memory, file) + ":" + line + ":" + colm);
	  };
	  env.trace = env.trace || function trace(mesg, n) {
	    const memory = baseModule.memory || env.memory;
	    console.log("trace: " + getString(memory, mesg) + (n ? " " : "") + Array.prototype.slice.call(arguments, 2, 2 + n).join(", "));
	  };
	  imports.Math = imports.Math || Math;
	  imports.Date = imports.Date || Date;

	  return baseModule;
	}

	/** Prepares the final module once instantiation is complete. */
	function postInstantiate(baseModule, instance) {
	  const rawExports = instance.exports;
	  const memory = rawExports.memory;
	  const table = rawExports.table;
	  const alloc = rawExports["__alloc"];
	  const retain = rawExports["__retain"];
	  const rttiBase = rawExports["__rtti_base"] || ~0; // oob if not present

	  /** Gets the runtime type info for the given id. */
	  function getInfo(id) {
	    const U32 = new Uint32Array(memory.buffer);
	    const count = U32[rttiBase >>> 2];
	    if ((id >>>= 0) >= count) throw Error("invalid id: " + id);
	    return U32[(rttiBase + 4 >>> 2) + id * 2];
	  }

	  /** Gets the runtime base id for the given id. */
	  function getBase(id) {
	    const U32 = new Uint32Array(memory.buffer);
	    const count = U32[rttiBase >>> 2];
	    if ((id >>>= 0) >= count) throw Error("invalid id: " + id);
	    return U32[(rttiBase + 4 >>> 2) + id * 2 + 1];
	  }

	  /** Gets the runtime alignment of a collection's values. */
	  function getValueAlign(info) {
	    return 31 - Math.clz32((info >>> VAL_ALIGN_OFFSET) & 31); // -1 if none
	  }

	  /** Gets the runtime alignment of a collection's keys. */
	  function getKeyAlign(info) {
	    return 31 - Math.clz32((info >>> KEY_ALIGN_OFFSET) & 31); // -1 if none
	  }

	  /** Allocates a new string in the module's memory and returns its retained pointer. */
	  function __allocString(str) {
	    const length = str.length;
	    const ptr = alloc(length << 1, STRING_ID);
	    const U16 = new Uint16Array(memory.buffer);
	    for (var i = 0, p = ptr >>> 1; i < length; ++i) U16[p + i] = str.charCodeAt(i);
	    return ptr;
	  }

	  baseModule.__allocString = __allocString;

	  /** Reads a string from the module's memory by its pointer. */
	  function __getString(ptr) {
	    const buffer = memory.buffer;
	    const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];
	    if (id !== STRING_ID) throw Error("not a string: " + ptr);
	    return getStringImpl(buffer, ptr);
	  }

	  baseModule.__getString = __getString;

	  /** Gets the view matching the specified alignment, signedness and floatness. */
	  function getView(alignLog2, signed, float) {
	    const buffer = memory.buffer;
	    if (float) {
	      switch (alignLog2) {
	        case 2: return new Float32Array(buffer);
	        case 3: return new Float64Array(buffer);
	      }
	    } else {
	      switch (alignLog2) {
	        case 0: return new (signed ? Int8Array : Uint8Array)(buffer);
	        case 1: return new (signed ? Int16Array : Uint16Array)(buffer);
	        case 2: return new (signed ? Int32Array : Uint32Array)(buffer);
	        case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);
	      }
	    }
	    throw Error("unsupported align: " + alignLog2);
	  }

	  /** Allocates a new array in the module's memory and returns its retained pointer. */
	  function __allocArray(id, values) {
	    const info = getInfo(id);
	    if (!(info & (ARRAYBUFFERVIEW | ARRAY))) throw Error("not an array: " + id + " @ " + info);
	    const align = getValueAlign(info);
	    const length = values.length;
	    const buf = alloc(length << align, ARRAYBUFFER_ID);
	    const arr = alloc(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);
	    const U32 = new Uint32Array(memory.buffer);
	    U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = retain(buf);
	    U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;
	    U32[arr + ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;
	    if (info & ARRAY) U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;
	    const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);
	    if (info & VAL_MANAGED) {
	      for (let i = 0; i < length; ++i) view[(buf >>> align) + i] = retain(values[i]);
	    } else {
	      view.set(values, buf >>> align);
	    }
	    return arr;
	  }

	  baseModule.__allocArray = __allocArray;

	  /** Gets a live view on an array's values in the module's memory. Infers the array type from RTTI. */
	  function __getArrayView(arr) {
	    const U32 = new Uint32Array(memory.buffer);
	    const id = U32[arr + ID_OFFSET >>> 2];
	    const info = getInfo(id);
	    if (!(info & ARRAYBUFFERVIEW)) throw Error("not an array: " + id);
	    const align = getValueAlign(info);
	    var buf = U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];
	    const length = info & ARRAY
	      ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2]
	      : U32[buf + SIZE_OFFSET >>> 2] >>> align;
	    return getView(align, info & VAL_SIGNED, info & VAL_FLOAT)
	          .subarray(buf >>>= align, buf + length);
	  }

	  baseModule.__getArrayView = __getArrayView;

	  /** Copies an array's values from the module's memory. Infers the array type from RTTI. */
	  function __getArray(arr) {
	    const input = __getArrayView(arr);
	    const len = input.length;
	    const out = new Array(len);
	    for (let i = 0; i < len; i++) out[i] = input[i];
	    return out;
	  }

	  baseModule.__getArray = __getArray;

	  /** Copies an ArrayBuffer's value from the module's memory. */
	  function __getArrayBuffer(ptr) {
	    const buffer = memory.buffer;
	    const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];
	    return buffer.slice(ptr, ptr + length);
	  }

	  baseModule.__getArrayBuffer = __getArrayBuffer;

	  /** Copies a typed array's values from the module's memory. */
	  function getTypedArray(Type, alignLog2, ptr) {
	    return new Type(getTypedArrayView(Type, alignLog2, ptr));
	  }

	  /** Gets a live view on a typed array's values in the module's memory. */
	  function getTypedArrayView(Type, alignLog2, ptr) {
	    const buffer = memory.buffer;
	    const U32 = new Uint32Array(buffer);
	    const bufPtr = U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];
	    return new Type(buffer, bufPtr, U32[bufPtr + SIZE_OFFSET >>> 2] >>> alignLog2);
	  }

	  baseModule.__getInt8Array = getTypedArray.bind(null, Int8Array, 0);
	  baseModule.__getInt8ArrayView = getTypedArrayView.bind(null, Int8Array, 0);
	  baseModule.__getUint8Array = getTypedArray.bind(null, Uint8Array, 0);
	  baseModule.__getUint8ArrayView = getTypedArrayView.bind(null, Uint8Array, 0);
	  baseModule.__getUint8ClampedArray = getTypedArray.bind(null, Uint8ClampedArray, 0);
	  baseModule.__getUint8ClampedArrayView = getTypedArrayView.bind(null, Uint8ClampedArray, 0);
	  baseModule.__getInt16Array = getTypedArray.bind(null, Int16Array, 1);
	  baseModule.__getInt16ArrayView = getTypedArrayView.bind(null, Int16Array, 1);
	  baseModule.__getUint16Array = getTypedArray.bind(null, Uint16Array, 1);
	  baseModule.__getUint16ArrayView = getTypedArrayView.bind(null, Uint16Array, 1);
	  baseModule.__getInt32Array = getTypedArray.bind(null, Int32Array, 2);
	  baseModule.__getInt32ArrayView = getTypedArrayView.bind(null, Int32Array, 2);
	  baseModule.__getUint32Array = getTypedArray.bind(null, Uint32Array, 2);
	  baseModule.__getUint32ArrayView = getTypedArrayView.bind(null, Uint32Array, 2);
	  if (BIGINT) {
	    baseModule.__getInt64Array = getTypedArray.bind(null, BigInt64Array, 3);
	    baseModule.__getInt64ArrayView = getTypedArrayView.bind(null, BigInt64Array, 3);
	    baseModule.__getUint64Array = getTypedArray.bind(null, BigUint64Array, 3);
	    baseModule.__getUint64ArrayView = getTypedArrayView.bind(null, BigUint64Array, 3);
	  }
	  baseModule.__getFloat32Array = getTypedArray.bind(null, Float32Array, 2);
	  baseModule.__getFloat32ArrayView = getTypedArrayView.bind(null, Float32Array, 2);
	  baseModule.__getFloat64Array = getTypedArray.bind(null, Float64Array, 3);
	  baseModule.__getFloat64ArrayView = getTypedArrayView.bind(null, Float64Array, 3);

	  /** Tests whether an object is an instance of the class represented by the specified base id. */
	  function __instanceof(ptr, baseId) {
	    const U32 = new Uint32Array(memory.buffer);
	    var id = U32[(ptr + ID_OFFSET) >>> 2];
	    if (id <= U32[rttiBase >>> 2]) {
	      do if (id == baseId) return true;
	      while (id = getBase(id));
	    }
	    return false;
	  }

	  baseModule.__instanceof = __instanceof;

	  // Pull basic exports to baseModule so code in preInstantiate can use them
	  baseModule.memory = baseModule.memory || memory;
	  baseModule.table  = baseModule.table  || table;

	  // Demangle exports and provide the usual utility on the prototype
	  return demangle(rawExports, baseModule);
	}

	function isResponse(o) {
	  return typeof Response !== "undefined" && o instanceof Response;
	}

	/** Asynchronously instantiates an AssemblyScript module from anything that can be instantiated. */
	async function instantiate$1(source, imports) {
	  if (isResponse(source = await source)) return instantiateStreaming(source, imports);
	  return postInstantiate(
	    preInstantiate(imports || (imports = {})),
	    await WebAssembly.instantiate(
	      source instanceof WebAssembly.Module
	        ? source
	        : await WebAssembly.compile(source),
	      imports
	    )
	  );
	}

	var instantiate_1 = loader.instantiate = instantiate$1;

	/** Synchronously instantiates an AssemblyScript module from a WebAssembly.Module or binary buffer. */
	function instantiateSync(source, imports) {
	  return postInstantiate(
	    preInstantiate(imports || (imports = {})),
	    new WebAssembly.Instance(
	      source instanceof WebAssembly.Module
	        ? source
	        : new WebAssembly.Module(source),
	      imports
	    )
	  )
	}

	var instantiateSync_1 = loader.instantiateSync = instantiateSync;

	/** Asynchronously instantiates an AssemblyScript module from a response, i.e. as obtained by `fetch`. */
	async function instantiateStreaming(source, imports) {
	  if (!WebAssembly.instantiateStreaming) {
	    return instantiate$1(
	      isResponse(source = await source)
	        ? source.arrayBuffer()
	        : source,
	      imports
	    );
	  }
	  return postInstantiate(
	    preInstantiate(imports || (imports = {})),
	    (await WebAssembly.instantiateStreaming(source, imports)).instance
	  );
	}

	var instantiateStreaming_1 = loader.instantiateStreaming = instantiateStreaming;

	/** Demangles an AssemblyScript module's exports to a friendly object structure. */
	function demangle(exports, baseModule) {
	  var module = baseModule ? Object.create(baseModule) : {};
	  var setArgumentsLength = exports["__argumentsLength"]
	    ? function(length) { exports["__argumentsLength"].value = length; }
	    : exports["__setArgumentsLength"] || exports["__setargc"] || function() {};
	  for (let internalName in exports) {
	    if (!Object.prototype.hasOwnProperty.call(exports, internalName)) continue;
	    const elem = exports[internalName];
	    let parts = internalName.split(".");
	    let curr = module;
	    while (parts.length > 1) {
	      let part = parts.shift();
	      if (!Object.prototype.hasOwnProperty.call(curr, part)) curr[part] = {};
	      curr = curr[part];
	    }
	    let name = parts[0];
	    let hash = name.indexOf("#");
	    if (hash >= 0) {
	      let className = name.substring(0, hash);
	      let classElem = curr[className];
	      if (typeof classElem === "undefined" || !classElem.prototype) {
	        let ctor = function(...args) {
	          return ctor.wrap(ctor.prototype.constructor(0, ...args));
	        };
	        ctor.prototype = {
	          valueOf: function valueOf() {
	            return this[THIS];
	          }
	        };
	        ctor.wrap = function(thisValue) {
	          return Object.create(ctor.prototype, { [THIS]: { value: thisValue, writable: false } });
	        };
	        if (classElem) Object.getOwnPropertyNames(classElem).forEach(name =>
	          Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name))
	        );
	        curr[className] = ctor;
	      }
	      name = name.substring(hash + 1);
	      curr = curr[className].prototype;
	      if (/^(get|set):/.test(name)) {
	        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {
	          let getter = exports[internalName.replace("set:", "get:")];
	          let setter = exports[internalName.replace("get:", "set:")];
	          Object.defineProperty(curr, name, {
	            get: function() { return getter(this[THIS]); },
	            set: function(value) { setter(this[THIS], value); },
	            enumerable: true
	          });
	        }
	      } else {
	        if (name === 'constructor') {
	          (curr[name] = (...args) => {
	            setArgumentsLength(args.length);
	            return elem(...args);
	          }).original = elem;
	        } else { // instance method
	          (curr[name] = function(...args) { // !
	            setArgumentsLength(args.length);
	            return elem(this[THIS], ...args);
	          }).original = elem;
	        }
	      }
	    } else {
	      if (/^(get|set):/.test(name)) {
	        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {
	          Object.defineProperty(curr, name, {
	            get: exports[internalName.replace("set:", "get:")],
	            set: exports[internalName.replace("get:", "set:")],
	            enumerable: true
	          });
	        }
	      } else if (typeof elem === "function" && elem !== setArgumentsLength) {
	        (curr[name] = (...args) => {
	          setArgumentsLength(args.length);
	          return elem(...args);
	        }).original = elem;
	      } else {
	        curr[name] = elem;
	      }
	    }
	  }
	  return module;
	}

	var demangle_1 = loader.demangle = demangle;

	const { instantiate } = loader;

	loadWebAssembly.supported = typeof WebAssembly !== 'undefined';

	function loadWebAssembly (imp = {}) {
	  if (!loadWebAssembly.supported) return null
	  
	  var wasm = new Uint8Array([0,97,115,109,1,0,0,0,1,78,14,96,2,127,126,0,96,1,127,1,126,96,2,127,127,0,96,1,127,1,127,96,1,127,0,96,2,127,127,1,127,96,3,127,127,127,1,127,96,0,0,96,3,127,127,127,0,96,0,1,127,96,4,127,127,127,127,0,96,5,127,127,127,127,127,1,127,96,1,126,1,127,96,2,126,126,1,126,2,13,1,3,101,110,118,5,97,98,111,114,116,0,10,3,54,53,2,2,8,9,3,5,2,8,6,5,3,4,2,6,9,12,13,2,5,11,3,2,3,2,3,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,6,7,7,4,4,5,3,1,0,1,6,47,9,127,1,65,0,11,127,1,65,0,11,127,0,65,3,11,127,0,65,4,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,0,65,240,2,11,127,0,65,6,11,7,240,5,41,6,109,101,109,111,114,121,2,0,7,95,95,97,108,108,111,99,0,10,8,95,95,114,101,116,97,105,110,0,11,9,95,95,114,101,108,101,97,115,101,0,12,9,95,95,99,111,108,108,101,99,116,0,51,11,95,95,114,116,116,105,95,98,97,115,101,3,7,13,73,110,116,51,50,65,114,114,97,121,95,73,68,3,2,13,85,105,110,116,56,65,114,114,97,121,95,73,68,3,3,6,100,101,103,114,101,101,0,16,3,109,111,100,0,17,5,82,97,98,105,110,3,8,16,82,97,98,105,110,35,103,101,116,58,119,105,110,100,111,119,0,21,16,82,97,98,105,110,35,115,101,116,58,119,105,110,100,111,119,0,22,21,82,97,98,105,110,35,103,101,116,58,119,105,110,100,111,119,95,115,105,122,101,0,23,21,82,97,98,105,110,35,115,101,116,58,119,105,110,100,111,119,95,115,105,122,101,0,24,14,82,97,98,105,110,35,103,101,116,58,119,112,111,115,0,25,14,82,97,98,105,110,35,115,101,116,58,119,112,111,115,0,26,15,82,97,98,105,110,35,103,101,116,58,99,111,117,110,116,0,27,15,82,97,98,105,110,35,115,101,116,58,99,111,117,110,116,0,28,13,82,97,98,105,110,35,103,101,116,58,112,111,115,0,29,13,82,97,98,105,110,35,115,101,116,58,112,111,115,0,30,15,82,97,98,105,110,35,103,101,116,58,115,116,97,114,116,0,31,15,82,97,98,105,110,35,115,101,116,58,115,116,97,114,116,0,32,16,82,97,98,105,110,35,103,101,116,58,100,105,103,101,115,116,0,33,16,82,97,98,105,110,35,115,101,116,58,100,105,103,101,115,116,0,34,21,82,97,98,105,110,35,103,101,116,58,99,104,117,110,107,95,115,116,97,114,116,0,35,21,82,97,98,105,110,35,115,101,116,58,99,104,117,110,107,95,115,116,97,114,116,0,36,22,82,97,98,105,110,35,103,101,116,58,99,104,117,110,107,95,108,101,110,103,116,104,0,37,22,82,97,98,105,110,35,115,101,116,58,99,104,117,110,107,95,108,101,110,103,116,104,0,38,31,82,97,98,105,110,35,103,101,116,58,99,104,117,110,107,95,99,117,116,95,102,105,110,103,101,114,112,114,105,110,116,0,39,31,82,97,98,105,110,35,115,101,116,58,99,104,117,110,107,95,99,117,116,95,102,105,110,103,101,114,112,114,105,110,116,0,40,20,82,97,98,105,110,35,103,101,116,58,112,111,108,121,110,111,109,105,97,108,0,41,20,82,97,98,105,110,35,115,101,116,58,112,111,108,121,110,111,109,105,97,108,0,42,17,82,97,98,105,110,35,103,101,116,58,109,105,110,115,105,122,101,0,43,17,82,97,98,105,110,35,115,101,116,58,109,105,110,115,105,122,101,0,44,17,82,97,98,105,110,35,103,101,116,58,109,97,120,115,105,122,101,0,45,17,82,97,98,105,110,35,115,101,116,58,109,97,120,115,105,122,101,0,46,14,82,97,98,105,110,35,103,101,116,58,109,97,115,107,0,47,14,82,97,98,105,110,35,115,101,116,58,109,97,115,107,0,48,17,82,97,98,105,110,35,99,111,110,115,116,114,117,99,116,111,114,0,20,17,82,97,98,105,110,35,102,105,110,103,101,114,112,114,105,110,116,0,49,8,1,50,10,165,31,53,199,1,1,4,127,32,1,40,2,0,65,124,113,34,2,65,128,2,73,4,127,32,2,65,4,118,33,4,65,0,5,32,2,65,31,32,2,103,107,34,3,65,4,107,118,65,16,115,33,4,32,3,65,7,107,11,33,3,32,1,40,2,20,33,2,32,1,40,2,16,34,5,4,64,32,5,32,2,54,2,20,11,32,2,4,64,32,2,32,5,54,2,16,11,32,1,32,0,32,4,32,3,65,4,116,106,65,2,116,106,40,2,96,70,4,64,32,0,32,4,32,3,65,4,116,106,65,2,116,106,32,2,54,2,96,32,2,69,4,64,32,0,32,3,65,2,116,106,32,0,32,3,65,2,116,106,40,2,4,65,1,32,4,116,65,127,115,113,34,1,54,2,4,32,1,69,4,64,32,0,32,0,40,2,0,65,1,32,3,116,65,127,115,113,54,2,0,11,11,11,11,226,2,1,6,127,32,1,40,2,0,33,3,32,1,65,16,106,32,1,40,2,0,65,124,113,106,34,4,40,2,0,34,5,65,1,113,4,64,32,3,65,124,113,65,16,106,32,5,65,124,113,106,34,2,65,240,255,255,255,3,73,4,64,32,0,32,4,16,1,32,1,32,2,32,3,65,3,113,114,34,3,54,2,0,32,1,65,16,106,32,1,40,2,0,65,124,113,106,34,4,40,2,0,33,5,11,11,32,3,65,2,113,4,64,32,1,65,4,107,40,2,0,34,2,40,2,0,34,6,65,124,113,65,16,106,32,3,65,124,113,106,34,7,65,240,255,255,255,3,73,4,64,32,0,32,2,16,1,32,2,32,7,32,6,65,3,113,114,34,3,54,2,0,32,2,33,1,11,11,32,4,32,5,65,2,114,54,2,0,32,4,65,4,107,32,1,54,2,0,32,0,32,3,65,124,113,34,2,65,128,2,73,4,127,32,2,65,4,118,33,4,65,0,5,32,2,65,31,32,2,103,107,34,2,65,4,107,118,65,16,115,33,4,32,2,65,7,107,11,34,3,65,4,116,32,4,106,65,2,116,106,40,2,96,33,2,32,1,65,0,54,2,16,32,1,32,2,54,2,20,32,2,4,64,32,2,32,1,54,2,16,11,32,0,32,4,32,3,65,4,116,106,65,2,116,106,32,1,54,2,96,32,0,32,0,40,2,0,65,1,32,3,116,114,54,2,0,32,0,32,3,65,2,116,106,32,0,32,3,65,2,116,106,40,2,4,65,1,32,4,116,114,54,2,4,11,119,1,1,127,32,2,2,127,32,0,40,2,160,12,34,2,4,64,32,2,32,1,65,16,107,70,4,64,32,2,40,2,0,33,3,32,1,65,16,107,33,1,11,11,32,1,11,107,34,2,65,48,73,4,64,15,11,32,1,32,3,65,2,113,32,2,65,32,107,65,1,114,114,54,2,0,32,1,65,0,54,2,16,32,1,65,0,54,2,20,32,1,32,2,106,65,16,107,34,2,65,2,54,2,0,32,0,32,2,54,2,160,12,32,0,32,1,16,2,11,155,1,1,3,127,35,0,34,0,69,4,64,65,1,63,0,34,0,74,4,127,65,1,32,0,107,64,0,65,0,72,5,65,0,11,4,64,0,11,65,176,3,34,0,65,0,54,2,0,65,208,15,65,0,54,2,0,3,64,32,1,65,23,73,4,64,32,1,65,2,116,65,176,3,106,65,0,54,2,4,65,0,33,2,3,64,32,2,65,16,73,4,64,32,1,65,4,116,32,2,106,65,2,116,65,176,3,106,65,0,54,2,96,32,2,65,1,106,33,2,12,1,11,11,32,1,65,1,106,33,1,12,1,11,11,65,176,3,65,224,15,63,0,65,16,116,16,3,65,176,3,36,0,11,32,0,11,45,0,32,0,65,240,255,255,255,3,79,4,64,65,32,65,224,0,65,201,3,65,29,16,0,0,11,32,0,65,15,106,65,112,113,34,0,65,16,32,0,65,16,75,27,11,169,1,1,1,127,32,0,32,1,65,128,2,73,4,127,32,1,65,4,118,33,1,65,0,5,32,1,65,248,255,255,255,1,73,4,64,32,1,65,1,65,27,32,1,103,107,116,106,65,1,107,33,1,11,32,1,65,31,32,1,103,107,34,2,65,4,107,118,65,16,115,33,1,32,2,65,7,107,11,34,2,65,2,116,106,40,2,4,65,127,32,1,116,113,34,1,4,127,32,0,32,1,104,32,2,65,4,116,106,65,2,116,106,40,2,96,5,32,0,40,2,0,65,127,32,2,65,1,106,116,113,34,1,4,127,32,0,32,0,32,1,104,34,0,65,2,116,106,40,2,4,104,32,0,65,4,116,106,65,2,116,106,40,2,96,5,65,0,11,11,11,111,1,1,127,63,0,34,2,32,1,65,248,255,255,255,1,73,4,127,32,1,65,1,65,27,32,1,103,107,116,65,1,107,106,5,32,1,11,65,16,32,0,40,2,160,12,32,2,65,16,116,65,16,107,71,116,106,65,255,255,3,106,65,128,128,124,113,65,16,118,34,1,32,2,32,1,74,27,64,0,65,0,72,4,64,32,1,64,0,65,0,72,4,64,0,11,11,32,0,32,2,65,16,116,63,0,65,16,116,16,3,11,113,1,2,127,32,1,40,2,0,34,3,65,124,113,32,2,107,34,4,65,32,79,4,64,32,1,32,2,32,3,65,2,113,114,54,2,0,32,2,32,1,65,16,106,106,34,1,32,4,65,16,107,65,1,114,54,2,0,32,0,32,1,16,2,5,32,1,32,3,65,126,113,54,2,0,32,1,65,16,106,32,1,40,2,0,65,124,113,106,32,1,65,16,106,32,1,40,2,0,65,124,113,106,40,2,0,65,125,113,54,2,0,11,11,91,1,2,127,32,0,32,1,16,5,34,4,16,6,34,3,69,4,64,65,1,36,1,65,0,36,1,32,0,32,4,16,6,34,3,69,4,64,32,0,32,4,16,7,32,0,32,4,16,6,33,3,11,11,32,3,65,0,54,2,4,32,3,32,2,54,2,8,32,3,32,1,54,2,12,32,0,32,3,16,1,32,0,32,3,32,4,16,8,32,3,11,13,0,16,4,32,0,32,1,16,9,65,16,106,11,33,1,1,127,32,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,32,0,11,18,0,32,0,65,172,3,75,4,64,32,0,65,16,107,16,52,11,11,140,3,1,1,127,2,64,32,1,69,13,0,32,0,65,0,58,0,0,32,0,32,1,106,65,1,107,65,0,58,0,0,32,1,65,2,77,13,0,32,0,65,1,106,65,0,58,0,0,32,0,65,2,106,65,0,58,0,0,32,0,32,1,106,34,2,65,2,107,65,0,58,0,0,32,2,65,3,107,65,0,58,0,0,32,1,65,6,77,13,0,32,0,65,3,106,65,0,58,0,0,32,0,32,1,106,65,4,107,65,0,58,0,0,32,1,65,8,77,13,0,32,1,65,0,32,0,107,65,3,113,34,1,107,33,2,32,0,32,1,106,34,0,65,0,54,2,0,32,0,32,2,65,124,113,34,1,106,65,4,107,65,0,54,2,0,32,1,65,8,77,13,0,32,0,65,4,106,65,0,54,2,0,32,0,65,8,106,65,0,54,2,0,32,0,32,1,106,34,2,65,12,107,65,0,54,2,0,32,2,65,8,107,65,0,54,2,0,32,1,65,24,77,13,0,32,0,65,12,106,65,0,54,2,0,32,0,65,16,106,65,0,54,2,0,32,0,65,20,106,65,0,54,2,0,32,0,65,24,106,65,0,54,2,0,32,0,32,1,106,34,2,65,28,107,65,0,54,2,0,32,2,65,24,107,65,0,54,2,0,32,2,65,20,107,65,0,54,2,0,32,2,65,16,107,65,0,54,2,0,32,0,32,0,65,4,113,65,24,106,34,2,106,33,0,32,1,32,2,107,33,1,3,64,32,1,65,32,79,4,64,32,0,66,0,55,3,0,32,0,65,8,106,66,0,55,3,0,32,0,65,16,106,66,0,55,3,0,32,0,65,24,106,66,0,55,3,0,32,1,65,32,107,33,1,32,0,65,32,106,33,0,12,1,11,11,11,11,178,1,1,3,127,32,1,65,240,255,255,255,3,32,2,118,75,4,64,65,144,1,65,192,1,65,23,65,56,16,0,0,11,32,1,32,2,116,34,3,65,0,16,10,34,2,32,3,16,13,32,0,69,4,64,65,12,65,2,16,10,34,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,11,32,0,65,0,54,2,0,32,0,65,0,54,2,4,32,0,65,0,54,2,8,32,2,34,1,32,0,40,2,0,34,4,71,4,64,32,1,65,172,3,75,4,64,32,1,65,16,107,34,5,32,5,40,2,4,65,1,106,54,2,4,11,32,4,16,12,11,32,0,32,1,54,2,0,32,0,32,2,54,2,4,32,0,32,3,54,2,8,32,0,11,46,1,2,127,65,12,65,5,16,10,34,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,32,0,65,128,2,65,3,16,14,11,9,0,65,63,32,0,121,167,107,11,49,1,2,127,65,63,32,1,121,167,107,33,2,3,64,65,63,32,0,121,167,107,32,2,107,34,3,65,0,78,4,64,32,0,32,1,32,3,172,134,133,33,0,12,1,11,11,32,0,11,40,0,32,1,32,0,40,2,8,79,4,64,65,128,2,65,192,2,65,163,1,65,44,16,0,0,11,32,1,32,0,40,2,4,106,65,0,58,0,0,11,38,0,32,1,32,0,40,2,8,79,4,64,65,128,2,65,192,2,65,152,1,65,44,16,0,0,11,32,1,32,0,40,2,4,106,45,0,0,11,254,5,2,1,127,4,126,32,0,69,4,64,65,232,0,65,6,16,10,34,0,65,172,3,75,4,64,32,0,65,16,107,34,5,32,5,40,2,4,65,1,106,54,2,4,11,11,32,0,65,0,54,2,0,32,0,65,0,54,2,4,32,0,65,0,54,2,8,32,0,66,0,55,3,16,32,0,66,0,55,3,24,32,0,66,0,55,3,32,32,0,66,0,55,3,40,32,0,66,0,55,3,48,32,0,66,0,55,3,56,32,0,66,0,55,3,64,32,0,66,0,55,3,72,32,0,66,0,55,3,80,32,0,66,0,55,3,88,32,0,66,0,55,3,96,32,0,32,2,173,55,3,80,32,0,32,3,173,55,3,88,65,12,65,4,16,10,34,2,65,172,3,75,4,64,32,2,65,16,107,34,3,32,3,40,2,4,65,1,106,54,2,4,11,32,2,32,4,65,0,16,14,33,2,32,0,40,2,0,16,12,32,0,32,2,54,2,0,32,0,32,4,54,2,4,32,0,66,1,32,1,173,134,66,1,125,55,3,96,32,0,66,243,130,183,218,216,230,232,30,55,3,72,35,4,69,4,64,65,0,33,2,3,64,32,2,65,128,2,72,4,64,32,2,65,255,1,113,173,33,6,32,0,41,3,72,34,7,33,8,65,63,32,7,121,167,107,33,1,3,64,65,63,32,6,121,167,107,32,1,107,34,3,65,0,78,4,64,32,6,32,8,32,3,172,134,133,33,6,12,1,11,11,65,0,33,4,3,64,32,4,32,0,40,2,4,65,1,107,72,4,64,32,6,66,8,134,33,6,32,0,41,3,72,34,7,33,8,65,63,32,7,121,167,107,33,1,3,64,65,63,32,6,121,167,107,32,1,107,34,3,65,0,78,4,64,32,6,32,8,32,3,172,134,133,33,6,12,1,11,11,32,4,65,1,106,33,4,12,1,11,11,35,6,40,2,4,32,2,65,3,116,106,32,6,55,3,0,32,2,65,1,106,33,2,12,1,11,11,65,63,32,0,41,3,72,121,167,107,172,33,7,65,0,33,2,3,64,32,2,65,128,2,72,4,64,35,5,33,1,32,2,172,32,7,134,34,8,33,6,65,63,32,0,41,3,72,34,9,121,167,107,33,3,3,64,65,63,32,6,121,167,107,32,3,107,34,4,65,0,78,4,64,32,6,32,9,32,4,172,134,133,33,6,12,1,11,11,32,1,40,2,4,32,2,65,3,116,106,32,6,32,8,132,55,3,0,32,2,65,1,106,33,2,12,1,11,11,65,1,36,4,11,32,0,66,0,55,3,24,32,0,66,0,55,3,32,65,0,33,2,3,64,32,2,32,0,40,2,4,72,4,64,32,0,40,2,0,32,2,16,18,32,2,65,1,106,33,2,12,1,11,11,32,0,66,0,55,3,40,32,0,65,0,54,2,8,32,0,66,0,55,3,16,32,0,66,0,55,3,40,32,0,40,2,0,32,0,40,2,8,16,19,33,1,32,0,40,2,8,32,0,40,2,0,40,2,4,106,65,1,58,0,0,32,0,32,0,41,3,40,35,6,40,2,4,32,1,65,3,116,106,41,3,0,133,55,3,40,32,0,32,0,40,2,8,65,1,106,32,0,40,2,4,111,54,2,8,32,0,35,5,40,2,4,32,0,41,3,40,34,6,66,45,136,167,65,3,116,106,41,3,0,32,6,66,8,134,66,1,132,133,55,3,40,32,0,11,38,1,1,127,32,0,40,2,0,34,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,32,0,11,55,1,2,127,32,1,32,0,40,2,0,34,2,71,4,64,32,1,65,172,3,75,4,64,32,1,65,16,107,34,3,32,3,40,2,4,65,1,106,54,2,4,11,32,2,16,12,11,32,0,32,1,54,2,0,11,7,0,32,0,40,2,4,11,9,0,32,0,32,1,54,2,4,11,7,0,32,0,40,2,8,11,9,0,32,0,32,1,54,2,8,11,7,0,32,0,41,3,16,11,9,0,32,0,32,1,55,3,16,11,7,0,32,0,41,3,24,11,9,0,32,0,32,1,55,3,24,11,7,0,32,0,41,3,32,11,9,0,32,0,32,1,55,3,32,11,7,0,32,0,41,3,40,11,9,0,32,0,32,1,55,3,40,11,7,0,32,0,41,3,48,11,9,0,32,0,32,1,55,3,48,11,7,0,32,0,41,3,56,11,9,0,32,0,32,1,55,3,56,11,7,0,32,0,41,3,64,11,9,0,32,0,32,1,55,3,64,11,7,0,32,0,41,3,72,11,9,0,32,0,32,1,55,3,72,11,7,0,32,0,41,3,80,11,9,0,32,0,32,1,55,3,80,11,7,0,32,0,41,3,88,11,9,0,32,0,32,1,55,3,88,11,7,0,32,0,41,3,96,11,9,0,32,0,32,1,55,3,96,11,172,4,2,5,127,1,126,32,2,65,172,3,75,4,64,32,2,65,16,107,34,4,32,4,40,2,4,65,1,106,54,2,4,11,32,2,33,4,65,0,33,2,32,1,40,2,8,33,5,32,1,40,2,4,33,6,3,64,2,127,65,0,33,3,3,64,32,3,32,5,72,4,64,32,3,32,6,106,45,0,0,33,1,32,0,40,2,0,32,0,40,2,8,16,19,33,7,32,0,40,2,8,32,0,40,2,0,40,2,4,106,32,1,58,0,0,32,0,32,0,41,3,40,35,6,40,2,4,32,7,65,3,116,106,41,3,0,133,55,3,40,32,0,32,0,40,2,8,65,1,106,32,0,40,2,4,111,54,2,8,32,0,35,5,40,2,4,32,0,41,3,40,34,8,66,45,136,167,65,3,116,106,41,3,0,32,1,173,32,8,66,8,134,132,133,55,3,40,32,0,32,0,41,3,16,66,1,124,55,3,16,32,0,32,0,41,3,24,66,1,124,55,3,24,32,0,41,3,16,32,0,41,3,80,90,4,127,32,0,41,3,40,32,0,41,3,96,131,80,5,65,0,11,4,127,65,1,5,32,0,41,3,16,32,0,41,3,88,90,11,4,64,32,0,32,0,41,3,32,55,3,48,32,0,32,0,41,3,16,55,3,56,32,0,32,0,41,3,40,55,3,64,65,0,33,1,3,64,32,1,32,0,40,2,4,72,4,64,32,0,40,2,0,32,1,16,18,32,1,65,1,106,33,1,12,1,11,11,32,0,66,0,55,3,40,32,0,65,0,54,2,8,32,0,66,0,55,3,16,32,0,66,0,55,3,40,32,0,40,2,0,32,0,40,2,8,16,19,33,1,32,0,40,2,8,32,0,40,2,0,40,2,4,106,65,1,58,0,0,32,0,32,0,41,3,40,35,6,40,2,4,32,1,65,3,116,106,41,3,0,133,55,3,40,32,0,32,0,40,2,8,65,1,106,32,0,40,2,4,111,54,2,8,32,0,35,5,40,2,4,32,0,41,3,40,34,8,66,45,136,167,65,3,116,106,41,3,0,32,8,66,8,134,66,1,132,133,55,3,40,32,3,65,1,106,12,3,11,32,3,65,1,106,33,3,12,1,11,11,65,127,11,34,1,65,0,78,4,64,32,5,32,1,107,33,5,32,1,32,6,106,33,6,32,2,34,1,65,1,106,33,2,32,4,40,2,4,32,1,65,2,116,106,32,0,41,3,56,62,2,0,12,1,11,11,32,4,11,10,0,16,15,36,5,16,15,36,6,11,3,0,1,11,73,1,2,127,32,0,40,2,4,34,1,65,255,255,255,255,0,113,34,2,65,1,70,4,64,32,0,65,16,106,16,53,32,0,32,0,40,2,0,65,1,114,54,2,0,35,0,32,0,16,2,5,32,0,32,2,65,1,107,32,1,65,128,128,128,128,127,113,114,54,2,4,11,11,58,0,2,64,2,64,2,64,32,0,65,8,107,40,2,0,14,7,0,0,1,1,1,1,1,2,11,15,11,32,0,40,2,0,34,0,4,64,32,0,65,172,3,79,4,64,32,0,65,16,107,16,52,11,11,15,11,0,11,11,137,3,7,0,65,16,11,55,40,0,0,0,1,0,0,0,1,0,0,0,40,0,0,0,97,0,108,0,108,0,111,0,99,0,97,0,116,0,105,0,111,0,110,0,32,0,116,0,111,0,111,0,32,0,108,0,97,0,114,0,103,0,101,0,65,208,0,11,45,30,0,0,0,1,0,0,0,1,0,0,0,30,0,0,0,126,0,108,0,105,0,98,0,47,0,114,0,116,0,47,0,116,0,108,0,115,0,102,0,46,0,116,0,115,0,65,128,1,11,43,28,0,0,0,1,0,0,0,1,0,0,0,28,0,0,0,73,0,110,0,118,0,97,0,108,0,105,0,100,0,32,0,108,0,101,0,110,0,103,0,116,0,104,0,65,176,1,11,53,38,0,0,0,1,0,0,0,1,0,0,0,38,0,0,0,126,0,108,0,105,0,98,0,47,0,97,0,114,0,114,0,97,0,121,0,98,0,117,0,102,0,102,0,101,0,114,0,46,0,116,0,115,0,65,240,1,11,51,36,0,0,0,1,0,0,0,1,0,0,0,36,0,0,0,73,0,110,0,100,0,101,0,120,0,32,0,111,0,117,0,116,0,32,0,111,0,102,0,32,0,114,0,97,0,110,0,103,0,101,0,65,176,2,11,51,36,0,0,0,1,0,0,0,1,0,0,0,36,0,0,0,126,0,108,0,105,0,98,0,47,0,116,0,121,0,112,0,101,0,100,0,97,0,114,0,114,0,97,0,121,0,46,0,116,0,115,0,65,240,2,11,53,7,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,145,4,0,0,2,0,0,0,49,0,0,0,2,0,0,0,17,1,0,0,2,0,0,0,16,0,34,16,115,111,117,114,99,101,77,97,112,112,105,110,103,85,82,76,16,46,47,114,97,98,105,110,46,119,97,115,109,46,109,97,112]);
	  // make it work async because browsers throw when a wasm module is bigger than 4kb and load sync
	  return instantiate(new Response(new Blob([wasm], {type: 'application/wasm'})), imp)
	}
	var rabinWasm = loadWebAssembly;

	const Rabin = rabin$1;
	const getRabin = rabinWasm;

	const create = async (avg, min, max, windowSize, polynomial) => {
	    const compiled = await getRabin();
	    return new Rabin(compiled, avg, min, max, windowSize, polynomial)
	};

	var src$1 = {
	    Rabin,
	    create
	};

	async function* rabinChunker(source, options) {
	  let min, max, avg;
	  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {
	    avg = options.avgChunkSize;
	    min = options.minChunkSize;
	    max = options.maxChunkSize;
	  } else if (!options.avgChunkSize) {
	    throw errCode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE');
	  } else {
	    avg = options.avgChunkSize;
	    min = avg / 3;
	    max = avg + avg / 2;
	  }
	  if (min < 16) {
	    throw errCode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE');
	  }
	  if (max < min) {
	    max = min;
	  }
	  if (avg < min) {
	    avg = min;
	  }
	  const sizepow = Math.floor(Math.log2(avg));
	  for await (const chunk of rabin(source, {
	      min: min,
	      max: max,
	      bits: sizepow,
	      window: options.window,
	      polynomial: options.polynomial
	    })) {
	    yield chunk;
	  }
	}
	async function* rabin(source, options) {
	  const r = await src$1.create(options.bits, options.min, options.max, options.window);
	  const buffers = new BufferList_1();
	  for await (const chunk of source) {
	    buffers.append(chunk);
	    const sizes = r.fingerprint(chunk);
	    for (let i = 0; i < sizes.length; i++) {
	      const size = sizes[i];
	      const buf = buffers.slice(0, size);
	      buffers.consume(size);
	      yield buf;
	    }
	  }
	  if (buffers.length) {
	    yield buffers.slice(0);
	  }
	}

	async function* fixedSizeChunker(source, options) {
	  let bl = new BufferList_1();
	  let currentLength = 0;
	  let emitted = false;
	  const maxChunkSize = options.maxChunkSize;
	  for await (const buffer of source) {
	    bl.append(buffer);
	    currentLength += buffer.length;
	    while (currentLength >= maxChunkSize) {
	      yield bl.slice(0, maxChunkSize);
	      emitted = true;
	      if (maxChunkSize === bl.length) {
	        bl = new BufferList_1();
	        currentLength = 0;
	      } else {
	        const newBl = new BufferList_1();
	        newBl.append(bl.shallowSlice(maxChunkSize));
	        bl = newBl;
	        currentLength -= maxChunkSize;
	      }
	    }
	  }
	  if (!emitted || currentLength) {
	    yield bl.slice(0, currentLength);
	  }
	}

	const identity$2 = from$1({
	  prefix: '\0',
	  name: 'identity',
	  encode: buf => toString$1(buf),
	  decode: str => fromString$3(str)
	});

	var identityBase = /*#__PURE__*/Object.freeze({
		__proto__: null,
		identity: identity$2
	});

	const base2 = rfc4648({
	  prefix: '0',
	  name: 'base2',
	  alphabet: '01',
	  bitsPerChar: 1
	});

	var base2$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base2: base2
	});

	const base8 = rfc4648({
	  prefix: '7',
	  name: 'base8',
	  alphabet: '01234567',
	  bitsPerChar: 3
	});

	var base8$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base8: base8
	});

	const base10 = baseX({
	  prefix: '9',
	  name: 'base10',
	  alphabet: '0123456789'
	});

	var base10$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base10: base10
	});

	const base16 = rfc4648({
	  prefix: 'f',
	  name: 'base16',
	  alphabet: '0123456789abcdef',
	  bitsPerChar: 4
	});
	const base16upper = rfc4648({
	  prefix: 'F',
	  name: 'base16upper',
	  alphabet: '0123456789ABCDEF',
	  bitsPerChar: 4
	});

	var base16$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base16: base16,
		base16upper: base16upper
	});

	const base36 = baseX({
	  prefix: 'k',
	  name: 'base36',
	  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
	});
	const base36upper = baseX({
	  prefix: 'K',
	  name: 'base36upper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	});

	var base36$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base36: base36,
		base36upper: base36upper
	});

	const base64 = rfc4648({
	  prefix: 'm',
	  name: 'base64',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
	  bitsPerChar: 6
	});
	const base64pad = rfc4648({
	  prefix: 'M',
	  name: 'base64pad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
	  bitsPerChar: 6
	});
	const base64url = rfc4648({
	  prefix: 'u',
	  name: 'base64url',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
	  bitsPerChar: 6
	});
	const base64urlpad = rfc4648({
	  prefix: 'U',
	  name: 'base64urlpad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
	  bitsPerChar: 6
	});

	var base64$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base64: base64,
		base64pad: base64pad,
		base64url: base64url,
		base64urlpad: base64urlpad
	});

	const alphabet = Array.from('\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42');
	const alphabetBytesToChars = alphabet.reduce((p, c, i) => {
	  p[i] = c;
	  return p;
	}, []);
	const alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
	  p[c.codePointAt(0)] = i;
	  return p;
	}, []);
	function encode$6(data) {
	  return data.reduce((p, c) => {
	    p += alphabetBytesToChars[c];
	    return p;
	  }, '');
	}
	function decode$5(str) {
	  const byts = [];
	  for (const char of str) {
	    const byt = alphabetCharsToBytes[char.codePointAt(0)];
	    if (byt === undefined) {
	      throw new Error(`Non-base256emoji character: ${ char }`);
	    }
	    byts.push(byt);
	  }
	  return new Uint8Array(byts);
	}
	const base256emoji = from$1({
	  prefix: '\uD83D\uDE80',
	  name: 'base256emoji',
	  encode: encode$6,
	  decode: decode$5
	});

	var base256emoji$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base256emoji: base256emoji
	});

	const code$1 = 0;
	const name$2 = 'identity';
	const encode$5 = coerce;
	const digest = input => create$5(code$1, encode$5(input));
	const identity = {
	  code: code$1,
	  name: name$2,
	  encode: encode$5,
	  digest
	};

	var identity$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		identity: identity
	});

	const textEncoder = new TextEncoder();
	const textDecoder = new TextDecoder();
	const name$1 = 'json';
	const code = 512;
	const encode$4 = node => textEncoder.encode(JSON.stringify(node));
	const decode$4 = data => JSON.parse(textDecoder.decode(data));

	var json = /*#__PURE__*/Object.freeze({
		__proto__: null,
		code: code,
		decode: decode$4,
		encode: encode$4,
		name: name$1
	});

	const bases = {
	  ...identityBase,
	  ...base2$1,
	  ...base8$1,
	  ...base10$1,
	  ...base16$1,
	  ...base32$1,
	  ...base36$1,
	  ...base58,
	  ...base64$1,
	  ...base256emoji$1
	};
	const hashes$1 = {
	  ...sha2,
	  ...identity$1
	};
	const codecs = {
	  raw,
	  json
	};

	function asUint8Array(buf) {
	  if (globalThis.Buffer != null) {
	    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
	  }
	  return buf;
	}

	function alloc(size = 0) {
	  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {
	    return asUint8Array(globalThis.Buffer.alloc(size));
	  }
	  return new Uint8Array(size);
	}
	function allocUnsafe(size = 0) {
	  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
	    return asUint8Array(globalThis.Buffer.allocUnsafe(size));
	  }
	  return new Uint8Array(size);
	}

	function createCodec(name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: { decode }
	  };
	}
	const string$1 = createCodec('utf8', 'u', buf => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf);
	}, str => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1));
	});
	const ascii = createCodec('ascii', 'a', buf => {
	  let string = 'a';
	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string;
	}, str => {
	  str = str.substring(1);
	  const buf = allocUnsafe(str.length);
	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	});
	const BASES = {
	  utf8: string$1,
	  'utf-8': string$1,
	  hex: bases.base16,
	  latin1: ascii,
	  ascii: ascii,
	  binary: ascii,
	  ...bases
	};

	function fromString(string, encoding = 'utf8') {
	  const base = BASES[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {
	    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));
	  }
	  return base.decoder.decode(`${ base.prefix }${ string }`);
	}

	var fromString$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		fromString: fromString
	});

	async function* validateChunks(source) {
	  for await (const content of source) {
	    if (content.length === undefined) {
	      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');
	    }
	    if (typeof content === 'string' || content instanceof String) {
	      yield fromString(content.toString());
	    } else if (Array.isArray(content)) {
	      yield Uint8Array.from(content);
	    } else if (content instanceof Uint8Array) {
	      yield content;
	    } else {
	      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');
	    }
	  }
	}

	function isIterable(thing) {
	  return Symbol.iterator in thing;
	}
	function isAsyncIterable(thing) {
	  return Symbol.asyncIterator in thing;
	}
	function contentAsAsyncIterable(content) {
	  try {
	    if (content instanceof Uint8Array) {
	      return async function* () {
	        yield content;
	      }();
	    } else if (isIterable(content)) {
	      return async function* () {
	        yield* content;
	      }();
	    } else if (isAsyncIterable(content)) {
	      return content;
	    }
	  } catch {
	    throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');
	  }
	  throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');
	}
	async function* dagBuilder(source, blockstore, options) {
	  for await (const entry of source) {
	    if (entry.path) {
	      if (entry.path.substring(0, 2) === './') {
	        options.wrapWithDirectory = true;
	      }
	      entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');
	    }
	    if (entry.content) {
	      let chunker;
	      if (typeof options.chunker === 'function') {
	        chunker = options.chunker;
	      } else if (options.chunker === 'rabin') {
	        chunker = rabinChunker;
	      } else {
	        chunker = fixedSizeChunker;
	      }
	      let chunkValidator;
	      if (typeof options.chunkValidator === 'function') {
	        chunkValidator = options.chunkValidator;
	      } else {
	        chunkValidator = validateChunks;
	      }
	      const file = {
	        path: entry.path,
	        mtime: entry.mtime,
	        mode: entry.mode,
	        content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)
	      };
	      yield () => fileBuilder(file, blockstore, options);
	    } else if (entry.path) {
	      const dir = {
	        path: entry.path,
	        mtime: entry.mtime,
	        mode: entry.mode
	      };
	      yield () => dirBuilder(dir, blockstore, options);
	    } else {
	      throw new Error('Import candidate must have content or path or both');
	    }
	  }
	}

	class Dir {
	  constructor(props, options) {
	    this.options = options || {};
	    this.root = props.root;
	    this.dir = props.dir;
	    this.path = props.path;
	    this.dirty = props.dirty;
	    this.flat = props.flat;
	    this.parent = props.parent;
	    this.parentKey = props.parentKey;
	    this.unixfs = props.unixfs;
	    this.mode = props.mode;
	    this.mtime = props.mtime;
	    this.cid = undefined;
	    this.size = undefined;
	  }
	  async put(name, value) {
	  }
	  get(name) {
	    return Promise.resolve(this);
	  }
	  async *eachChildSeries() {
	  }
	  async *flush(blockstore) {
	  }
	}

	class DirFlat extends Dir {
	  constructor(props, options) {
	    super(props, options);
	    this._children = {};
	  }
	  async put(name, value) {
	    this.cid = undefined;
	    this.size = undefined;
	    this._children[name] = value;
	  }
	  get(name) {
	    return Promise.resolve(this._children[name]);
	  }
	  childCount() {
	    return Object.keys(this._children).length;
	  }
	  directChildrenCount() {
	    return this.childCount();
	  }
	  onlyChild() {
	    return this._children[Object.keys(this._children)[0]];
	  }
	  async *eachChildSeries() {
	    const keys = Object.keys(this._children);
	    for (let i = 0; i < keys.length; i++) {
	      const key = keys[i];
	      yield {
	        key: key,
	        child: this._children[key]
	      };
	    }
	  }
	  async *flush(block) {
	    const children = Object.keys(this._children);
	    const links = [];
	    for (let i = 0; i < children.length; i++) {
	      let child = this._children[children[i]];
	      if (child instanceof Dir) {
	        for await (const entry of child.flush(block)) {
	          child = entry;
	          yield child;
	        }
	      }
	      if (child.size != null && child.cid) {
	        links.push({
	          Name: children[i],
	          Tsize: child.size,
	          Hash: child.cid
	        });
	      }
	    }
	    const unixfs = new UnixFS({
	      type: 'directory',
	      mtime: this.mtime,
	      mode: this.mode
	    });
	    const node = {
	      Data: unixfs.marshal(),
	      Links: links
	    };
	    const buffer = encode$7(prepare(node));
	    const cid = await persist(buffer, block, this.options);
	    const size = buffer.length + node.Links.reduce((acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);
	    this.cid = cid;
	    this.size = size;
	    yield {
	      cid,
	      unixfs,
	      path: this.path,
	      size
	    };
	  }
	}

	'use strict';

	// JS treats subjects of bitwise operators as SIGNED 32 bit numbers,
	// which means the maximum amount of bits we can store inside each byte
	// is 7..
	const BITS_PER_BYTE = 7;

	var sparseArray = class SparseArray {
	  constructor () {
	    this._bitArrays = [];
	    this._data = [];
	    this._length = 0;
	    this._changedLength = false;
	    this._changedData = false;
	  }

	  set (index, value) {
	    let pos = this._internalPositionFor(index, false);
	    if (value === undefined) {
	      // unsetting
	      if (pos !== -1) {
	        // remove item from bit array and array itself
	        this._unsetInternalPos(pos);
	        this._unsetBit(index);
	        this._changedLength = true;
	        this._changedData = true;
	      }
	    } else {
	      let needsSort = false;
	      if (pos === -1) {
	        pos = this._data.length;
	        this._setBit(index);
	        this._changedData = true;
	      } else {
	        needsSort = true;
	      }
	      this._setInternalPos(pos, index, value, needsSort);
	      this._changedLength = true;
	    }
	  }

	  unset (index) {
	    this.set(index, undefined);
	  }

	  get (index) {
	    this._sortData();
	    const pos = this._internalPositionFor(index, true);
	    if (pos === -1) {
	      return undefined
	    }
	    return this._data[pos][1]
	  }

	  push (value) {
	    this.set(this.length, value);
	    return this.length
	  }

	  get length () {
	    this._sortData();
	    if (this._changedLength) {
	      const last = this._data[this._data.length - 1];
	      this._length = last ? last[0] + 1 : 0;
	      this._changedLength = false;
	    }
	    return this._length
	  }

	  forEach (iterator) {
	    let i = 0;
	    while(i < this.length) {
	      iterator(this.get(i), i, this);
	      i++;
	    }
	  }

	  map (iterator) {
	    let i = 0;
	    let mapped = new Array(this.length);
	    while(i < this.length) {
	      mapped[i] = iterator(this.get(i), i, this);
	      i++;
	    }
	    return mapped
	  }

	  reduce (reducer, initialValue) {
	    let i = 0;
	    let acc = initialValue;
	    while(i < this.length) {
	      const value = this.get(i);
	      acc = reducer(acc, value, i);
	      i++;
	    }
	    return acc
	  }

	  find (finder) {
	    let i = 0, found, last;
	    while ((i < this.length) && !found) {
	      last = this.get(i);
	      found = finder(last);
	      i++;
	    }
	    return found ? last : undefined
	  }

	  _internalPositionFor (index, noCreate) {
	    const bytePos = this._bytePosFor(index, noCreate);
	    if (bytePos >= this._bitArrays.length) {
	      return -1
	    }
	    const byte = this._bitArrays[bytePos];
	    const bitPos = index - bytePos * BITS_PER_BYTE;
	    const exists = (byte & (1 << bitPos)) > 0;
	    if (!exists) {
	      return -1
	    }
	    const previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0);

	    const mask = ~(0xffffffff << (bitPos + 1));
	    const bytePopCount = popCount(byte & mask);
	    const arrayPos = previousPopCount + bytePopCount - 1;
	    return arrayPos
	  }

	  _bytePosFor (index, noCreate) {
	    const bytePos = Math.floor(index / BITS_PER_BYTE);
	    const targetLength = bytePos + 1;
	    while (!noCreate && this._bitArrays.length < targetLength) {
	      this._bitArrays.push(0);
	    }
	    return bytePos
	  }

	  _setBit (index) {
	    const bytePos = this._bytePosFor(index, false);
	    this._bitArrays[bytePos] |= (1 << (index - (bytePos * BITS_PER_BYTE)));
	  }

	  _unsetBit(index) {
	    const bytePos = this._bytePosFor(index, false);
	    this._bitArrays[bytePos] &= ~(1 << (index - (bytePos * BITS_PER_BYTE)));
	  }

	  _setInternalPos(pos, index, value, needsSort) {
	    const data =this._data;
	    const elem = [index, value];
	    if (needsSort) {
	      this._sortData();
	      data[pos] = elem;
	    } else {
	      // new element. just shove it into the array
	      // but be nice about where we shove it
	      // in order to make sorting it later easier
	      if (data.length) {
	        if (data[data.length - 1][0] >= index) {
	          data.push(elem);
	        } else if (data[0][0] <= index) {
	          data.unshift(elem);
	        } else {
	          const randomIndex = Math.round(data.length / 2);
	          this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex));
	        }
	      } else {
	        this._data.push(elem);
	      }
	      this._changedData = true;
	      this._changedLength = true;
	    }
	  }

	  _unsetInternalPos (pos) {
	    this._data.splice(pos, 1);
	  }

	  _sortData () {
	    if (this._changedData) {
	      this._data.sort(sortInternal);
	    }

	    this._changedData = false;
	  }

	  bitField () {
	    const bytes = [];
	    let pendingBitsForResultingByte = 8;
	    let pendingBitsForNewByte = 0;
	    let resultingByte = 0;
	    let newByte;
	    const pending = this._bitArrays.slice();
	    while (pending.length || pendingBitsForNewByte) {
	      if (pendingBitsForNewByte === 0) {
	        newByte = pending.shift();
	        pendingBitsForNewByte = 7;
	      }

	      const usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte);
	      const mask = ~(0b11111111 << usingBits);
	      const masked = newByte & mask;
	      resultingByte |= masked << (8 - pendingBitsForResultingByte);
	      newByte = newByte >>> usingBits;
	      pendingBitsForNewByte -= usingBits;
	      pendingBitsForResultingByte -= usingBits;

	      if (!pendingBitsForResultingByte || (!pendingBitsForNewByte && !pending.length)) {
	        bytes.push(resultingByte);
	        resultingByte = 0;
	        pendingBitsForResultingByte = 8;
	      }
	    }

	    // remove trailing zeroes
	    for(var i = bytes.length - 1; i > 0; i--) {
	      const value = bytes[i];
	      if (value === 0) {
	        bytes.pop();
	      } else {
	        break
	      }
	    }

	    return bytes
	  }

	  compactArray () {
	    this._sortData();
	    return this._data.map(valueOnly)
	  }
	};

	function popCountReduce (count, byte) {
	  return count + popCount(byte)
	}

	function popCount(_v) {
	  let v = _v;
	  v = v - ((v >> 1) & 0x55555555);                    // reuse input as temporary
	  v = (v & 0x33333333) + ((v >> 2) & 0x33333333);     // temp
	  return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24
	}

	function sortInternal (a, b) {
	  return a[0] - b[0]
	}

	function valueOnly (elem) {
	  return elem[1]
	}

	var require$$1$5 = /*@__PURE__*/getAugmentedNamespace(fromString$1);

	'use strict';

	// @ts-ignore
	const SparseArray = sparseArray;
	const { fromString: uint8ArrayFromString } = require$$1$5;

	/**
	 * @typedef {import('./consumable-hash').InfiniteHash} InfiniteHash
	 * @typedef {import('../').UserBucketOptions} UserBucketOptions
	 */

	/**
	 * @template V
	 * @typedef {object} BucketChild<V>
	 * @property {string} key
	 * @property {V} value
	 * @property {InfiniteHash} hash
	 */

	/**
	 * @template B
	 *
	 * @typedef {object} SA<B>
	 * @property {number} length
	 * @property {() => B[]} compactArray
	 * @property {(i: number) => B} get
	 * @property {(i: number, value: B) => void} set
	 * @property {<A> (fn: (acc: A, curr: B, index: number) => A, initial: A) => B} reduce
	 * @property {(fn: (item: B) => boolean) => B | undefined} find
	 * @property {() => number[]} bitField
	 * @property {(i: number) => void} unset
	 */

	/**
	 * @template T
	 *
	 * @typedef {object} BucketPosition<T>
	 * @property {Bucket<T>} bucket
	 * @property {number} pos
	 * @property {InfiniteHash} hash
	 * @property {BucketChild<T>} [existingChild]
	 */

	/**
	 * @typedef {object} BucketOptions
	 * @property {number} bits
	 * @property {(value: Uint8Array | InfiniteHash) => InfiniteHash} hash
	 */

	/**
	 * @template T
	 */
	let Bucket$1 = class Bucket {
	  /**
	   * @param {BucketOptions} options
	   * @param {Bucket<T>} [parent]
	   * @param {number} [posAtParent=0]
	   */
	  constructor (options, parent, posAtParent = 0) {
	    this._options = options;
	    this._popCount = 0;
	    this._parent = parent;
	    this._posAtParent = posAtParent;

	    /** @type {SA<Bucket<T> | BucketChild<T>>} */
	    this._children = new SparseArray();

	    /** @type {string | null} */
	    this.key = null;
	  }

	  /**
	   * @param {string} key
	   * @param {T} value
	   */
	  async put (key, value) {
	    const place = await this._findNewBucketAndPos(key);

	    await place.bucket._putAt(place, key, value);
	  }

	  /**
	   * @param {string} key
	   */
	  async get (key) {
	    const child = await this._findChild(key);

	    if (child) {
	      return child.value
	    }
	  }

	  /**
	   * @param {string} key
	   */
	  async del (key) {
	    const place = await this._findPlace(key);
	    const child = place.bucket._at(place.pos);

	    if (child && child.key === key) {
	      place.bucket._delAt(place.pos);
	    }
	  }

	  /**
	   * @returns {number}
	   */
	  leafCount () {
	    const children = this._children.compactArray();

	    return children.reduce((acc, child) => {
	      if (child instanceof Bucket$1) {
	        return acc + child.leafCount()
	      }

	      return acc + 1
	    }, 0)
	  }

	  childrenCount () {
	    return this._children.length
	  }

	  onlyChild () {
	    return this._children.get(0)
	  }

	  /**
	   * @returns {Iterable<BucketChild<T>>}
	   */
	  * eachLeafSeries () {
	    const children = this._children.compactArray();

	    for (const child of children) {
	      if (child instanceof Bucket$1) {
	        yield * child.eachLeafSeries();
	      } else {
	        yield child;
	      }
	    }

	    // this is necessary because tsc requires a @return annotation as it
	    // can't derive a return type due to the recursion, and eslint requires
	    // a return statement when there is a @return annotation
	    return []
	  }

	  /**
	   * @param {(value: BucketChild<T>, index: number) => T} map
	   * @param {(reduced: any) => any} reduce
	   */
	  serialize (map, reduce) {
	    /** @type {T[]} */
	    const acc = [];
	    // serialize to a custom non-sparse representation
	    return reduce(this._children.reduce((acc, child, index) => {
	      if (child) {
	        if (child instanceof Bucket$1) {
	          acc.push(child.serialize(map, reduce));
	        } else {
	          acc.push(map(child, index));
	        }
	      }
	      return acc
	    }, acc))
	  }

	  /**
	   * @param {(value: BucketChild<T>) => Promise<T[]>} asyncMap
	   * @param {(reduced: any) => Promise<any>} asyncReduce
	   */
	  asyncTransform (asyncMap, asyncReduce) {
	    return asyncTransformBucket(this, asyncMap, asyncReduce)
	  }

	  toJSON () {
	    return this.serialize(mapNode, reduceNodes)
	  }

	  prettyPrint () {
	    return JSON.stringify(this.toJSON(), null, '  ')
	  }

	  tableSize () {
	    return Math.pow(2, this._options.bits)
	  }

	  /**
	   * @param {string} key
	   * @returns {Promise<BucketChild<T> | undefined>}
	   */
	  async _findChild (key) {
	    const result = await this._findPlace(key);
	    const child = result.bucket._at(result.pos);

	    if (child instanceof Bucket$1) {
	      // should not be possible, this._findPlace should always
	      // return a location for a child, not a bucket
	      return undefined
	    }

	    if (child && child.key === key) {
	      return child
	    }
	  }

	  /**
	   * @param {string | InfiniteHash} key
	   * @returns {Promise<BucketPosition<T>>}
	   */
	  async _findPlace (key) {
	    const hashValue = this._options.hash(typeof key === 'string' ? uint8ArrayFromString(key) : key);
	    const index = await hashValue.take(this._options.bits);

	    const child = this._children.get(index);

	    if (child instanceof Bucket$1) {
	      return child._findPlace(hashValue)
	    }

	    return {
	      bucket: this,
	      pos: index,
	      hash: hashValue,
	      existingChild: child
	    }
	  }

	  /**
	   * @param {string | InfiniteHash} key
	   * @returns {Promise<BucketPosition<T>>}
	   */
	  async _findNewBucketAndPos (key) {
	    const place = await this._findPlace(key);

	    if (place.existingChild && place.existingChild.key !== key) {
	      // conflict
	      const bucket = new Bucket$1(this._options, place.bucket, place.pos);
	      place.bucket._putObjectAt(place.pos, bucket);

	      // put the previous value
	      const newPlace = await bucket._findPlace(place.existingChild.hash);
	      newPlace.bucket._putAt(newPlace, place.existingChild.key, place.existingChild.value);

	      return bucket._findNewBucketAndPos(place.hash)
	    }

	    // no conflict, we found the place
	    return place
	  }

	  /**
	   * @param {BucketPosition<T>} place
	   * @param {string} key
	   * @param {T} value
	   */
	  _putAt (place, key, value) {
	    this._putObjectAt(place.pos, {
	      key: key,
	      value: value,
	      hash: place.hash
	    });
	  }

	  /**
	   * @param {number} pos
	   * @param {Bucket<T> | BucketChild<T>} object
	   */
	  _putObjectAt (pos, object) {
	    if (!this._children.get(pos)) {
	      this._popCount++;
	    }
	    this._children.set(pos, object);
	  }

	  /**
	   * @param {number} pos
	   */
	  _delAt (pos) {
	    if (pos === -1) {
	      throw new Error('Invalid position')
	    }

	    if (this._children.get(pos)) {
	      this._popCount--;
	    }
	    this._children.unset(pos);
	    this._level();
	  }

	  _level () {
	    if (this._parent && this._popCount <= 1) {
	      if (this._popCount === 1) {
	        // remove myself from parent, replacing me with my only child
	        const onlyChild = this._children.find(exists);

	        if (onlyChild && !(onlyChild instanceof Bucket$1)) {
	          const hash = onlyChild.hash;
	          hash.untake(this._options.bits);
	          const place = {
	            pos: this._posAtParent,
	            hash: hash,
	            bucket: this._parent
	          };
	          this._parent._putAt(place, onlyChild.key, onlyChild.value);
	        }
	      } else {
	        this._parent._delAt(this._posAtParent);
	      }
	    }
	  }

	  /**
	   * @param {number} index
	   * @returns {BucketChild<T> | Bucket<T> | undefined}
	   */
	  _at (index) {
	    return this._children.get(index)
	  }
	};

	/**
	 * @param {any} o
	 */
	function exists (o) {
	  return Boolean(o)
	}

	/**
	 *
	 * @param {*} node
	 * @param {number} index
	 */
	function mapNode (node, index) {
	  return node.key
	}

	/**
	 * @param {*} nodes
	 */
	function reduceNodes (nodes) {
	  return nodes
	}

	/**
	 * @template T
	 *
	 * @param {Bucket<T>} bucket
	 * @param {(value: BucketChild<T>) => Promise<T[]>} asyncMap
	 * @param {(reduced: any) => Promise<any>} asyncReduce
	 */
	async function asyncTransformBucket (bucket, asyncMap, asyncReduce) {
	  const output = [];

	  for (const child of bucket._children.compactArray()) {
	    if (child instanceof Bucket$1) {
	      await asyncTransformBucket(child, asyncMap, asyncReduce);
	    } else {
	      const mappedChildren = await asyncMap(child);

	      output.push({
	        bitField: bucket._children.bitField(),
	        children: mappedChildren
	      });
	    }
	  }

	  return asyncReduce(output)
	}

	var bucket = Bucket$1;

	var consumableHashExports = {};
	var consumableHash = {
	  get exports(){ return consumableHashExports; },
	  set exports(v){ consumableHashExports = v; },
	};

	'use strict';

	const START_MASKS = [
	  0b11111111,
	  0b11111110,
	  0b11111100,
	  0b11111000,
	  0b11110000,
	  0b11100000,
	  0b11000000,
	  0b10000000
	];

	const STOP_MASKS = [
	  0b00000001,
	  0b00000011,
	  0b00000111,
	  0b00001111,
	  0b00011111,
	  0b00111111,
	  0b01111111,
	  0b11111111
	];

	var consumableBuffer = class ConsumableBuffer {
	  /**
	   * @param {Uint8Array} value
	   */
	  constructor (value) {
	    this._value = value;
	    this._currentBytePos = value.length - 1;
	    this._currentBitPos = 7;
	  }

	  availableBits () {
	    return this._currentBitPos + 1 + this._currentBytePos * 8
	  }

	  totalBits () {
	    return this._value.length * 8
	  }

	  /**
	   * @param {number} bits
	   */
	  take (bits) {
	    let pendingBits = bits;
	    let result = 0;
	    while (pendingBits && this._haveBits()) {
	      const byte = this._value[this._currentBytePos];
	      const availableBits = this._currentBitPos + 1;
	      const taking = Math.min(availableBits, pendingBits);
	      const value = byteBitsToInt(byte, availableBits - taking, taking);
	      result = (result << taking) + value;

	      pendingBits -= taking;

	      this._currentBitPos -= taking;
	      if (this._currentBitPos < 0) {
	        this._currentBitPos = 7;
	        this._currentBytePos--;
	      }
	    }

	    return result
	  }

	  /**
	   * @param {number} bits
	   */
	  untake (bits) {
	    this._currentBitPos += bits;
	    while (this._currentBitPos > 7) {
	      this._currentBitPos -= 8;
	      this._currentBytePos += 1;
	    }
	  }

	  _haveBits () {
	    return this._currentBytePos >= 0
	  }
	};

	/**
	 * @param {number} byte
	 * @param {number} start
	 * @param {number} length
	 */
	function byteBitsToInt (byte, start, length) {
	  const mask = maskFor(start, length);
	  return (byte & mask) >>> start
	}

	/**
	 * @param {number} start
	 * @param {number} length
	 */
	function maskFor (start, length) {
	  return START_MASKS[start] & STOP_MASKS[Math.min(length + start - 1, 7)]
	}

	function concat$1(arrays, length) {
	  if (!length) {
	    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
	  }
	  const output = allocUnsafe(length);
	  let offset = 0;
	  for (const arr of arrays) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }
	  return asUint8Array(output);
	}

	var concat$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		concat: concat$1
	});

	var require$$1$4 = /*@__PURE__*/getAugmentedNamespace(concat$2);

	'use strict';

	const ConsumableBuffer = consumableBuffer;
	const { concat: uint8ArrayConcat } = require$$1$4;

	/**
	 * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn
	 */
	function wrapHash$1 (hashFn) {
	  /**
	   * @param {InfiniteHash | Uint8Array} value
	   */
	  function hashing (value) {
	    if (value instanceof InfiniteHash) {
	      // already a hash. return it
	      return value
	    } else {
	      return new InfiniteHash(value, hashFn)
	    }
	  }

	  return hashing
	}

	class InfiniteHash {
	  /**
	   *
	   * @param {Uint8Array} value
	   * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn
	   */
	  constructor (value, hashFn) {
	    if (!(value instanceof Uint8Array)) {
	      throw new Error('can only hash Uint8Arrays')
	    }

	    this._value = value;
	    this._hashFn = hashFn;
	    this._depth = -1;
	    this._availableBits = 0;
	    this._currentBufferIndex = 0;

	    /** @type {ConsumableBuffer[]} */
	    this._buffers = [];
	  }

	  /**
	   * @param {number} bits
	   */
	  async take (bits) {
	    let pendingBits = bits;

	    while (this._availableBits < pendingBits) {
	      await this._produceMoreBits();
	    }

	    let result = 0;

	    while (pendingBits > 0) {
	      const hash = this._buffers[this._currentBufferIndex];
	      const available = Math.min(hash.availableBits(), pendingBits);
	      const took = hash.take(available);
	      result = (result << available) + took;
	      pendingBits -= available;
	      this._availableBits -= available;

	      if (hash.availableBits() === 0) {
	        this._currentBufferIndex++;
	      }
	    }

	    return result
	  }

	  /**
	   * @param {number} bits
	   */
	  untake (bits) {
	    let pendingBits = bits;

	    while (pendingBits > 0) {
	      const hash = this._buffers[this._currentBufferIndex];
	      const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);
	      hash.untake(availableForUntake);
	      pendingBits -= availableForUntake;
	      this._availableBits += availableForUntake;

	      if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {
	        this._depth--;
	        this._currentBufferIndex--;
	      }
	    }
	  }

	  async _produceMoreBits () {
	    this._depth++;

	    const value = this._depth ? uint8ArrayConcat([this._value, Uint8Array.from([this._depth])]) : this._value;
	    const hashValue = await this._hashFn(value);
	    const buffer = new ConsumableBuffer(hashValue);

	    this._buffers.push(buffer);
	    this._availableBits += buffer.availableBits();
	  }
	}

	consumableHash.exports = wrapHash$1;
	var InfiniteHash_1 = consumableHashExports.InfiniteHash = InfiniteHash;

	'use strict';

	const Bucket = bucket;
	const wrapHash = consumableHashExports;

	/**
	 * @typedef {object} UserBucketOptions
	 * @property {(value: Uint8Array) => Promise<Uint8Array>} hashFn
	 * @property {number} [bits=8]
	 */

	/**
	 * @param {UserBucketOptions} options
	 */
	function createHAMT (options) {
	  if (!options || !options.hashFn) {
	    throw new Error('please define an options.hashFn')
	  }

	  const bucketOptions = {
	    bits: options.bits || 8,
	    hash: wrapHash(options.hashFn)
	  };

	  return new Bucket(bucketOptions)
	}

	var src = {
	  createHAMT,
	  Bucket
	};

	class DirSharded extends Dir {
	  constructor(props, options) {
	    super(props, options);
	    this._bucket = src.createHAMT({
	      hashFn: options.hamtHashFn,
	      bits: options.hamtBucketBits
	    });
	  }
	  async put(name, value) {
	    await this._bucket.put(name, value);
	  }
	  get(name) {
	    return this._bucket.get(name);
	  }
	  childCount() {
	    return this._bucket.leafCount();
	  }
	  directChildrenCount() {
	    return this._bucket.childrenCount();
	  }
	  onlyChild() {
	    return this._bucket.onlyChild();
	  }
	  async *eachChildSeries() {
	    for await (const {key, value} of this._bucket.eachLeafSeries()) {
	      yield {
	        key,
	        child: value
	      };
	    }
	  }
	  async *flush(blockstore) {
	    for await (const entry of flush(this._bucket, blockstore, this, this.options)) {
	      yield {
	        ...entry,
	        path: this.path
	      };
	    }
	  }
	}
	async function* flush(bucket, blockstore, shardRoot, options) {
	  const children = bucket._children;
	  const links = [];
	  let childrenSize = 0;
	  for (let i = 0; i < children.length; i++) {
	    const child = children.get(i);
	    if (!child) {
	      continue;
	    }
	    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');
	    if (child instanceof src.Bucket) {
	      let shard;
	      for await (const subShard of await flush(child, blockstore, null, options)) {
	        shard = subShard;
	      }
	      if (!shard) {
	        throw new Error('Could not flush sharded directory, no subshard found');
	      }
	      links.push({
	        Name: labelPrefix,
	        Tsize: shard.size,
	        Hash: shard.cid
	      });
	      childrenSize += shard.size;
	    } else if (typeof child.value.flush === 'function') {
	      const dir = child.value;
	      let flushedDir;
	      for await (const entry of dir.flush(blockstore)) {
	        flushedDir = entry;
	        yield flushedDir;
	      }
	      const label = labelPrefix + child.key;
	      links.push({
	        Name: label,
	        Tsize: flushedDir.size,
	        Hash: flushedDir.cid
	      });
	      childrenSize += flushedDir.size;
	    } else {
	      const value = child.value;
	      if (!value.cid) {
	        continue;
	      }
	      const label = labelPrefix + child.key;
	      const size = value.size;
	      links.push({
	        Name: label,
	        Tsize: size,
	        Hash: value.cid
	      });
	      childrenSize += size;
	    }
	  }
	  const data = Uint8Array.from(children.bitField().reverse());
	  const dir = new UnixFS({
	    type: 'hamt-sharded-directory',
	    data,
	    fanout: bucket.tableSize(),
	    hashType: options.hamtHashCode,
	    mtime: shardRoot && shardRoot.mtime,
	    mode: shardRoot && shardRoot.mode
	  });
	  const node = {
	    Data: dir.marshal(),
	    Links: links
	  };
	  const buffer = encode$7(prepare(node));
	  const cid = await persist(buffer, blockstore, options);
	  const size = buffer.length + childrenSize;
	  yield {
	    cid,
	    unixfs: dir,
	    size
	  };
	}

	async function flatToShard(child, dir, threshold, options) {
	  let newDir = dir;
	  if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {
	    newDir = await convertToShard(dir, options);
	  }
	  const parent = newDir.parent;
	  if (parent) {
	    if (newDir !== dir) {
	      if (child) {
	        child.parent = newDir;
	      }
	      if (!newDir.parentKey) {
	        throw new Error('No parent key found');
	      }
	      await parent.put(newDir.parentKey, newDir);
	    }
	    return flatToShard(newDir, parent, threshold, options);
	  }
	  return newDir;
	}
	async function convertToShard(oldDir, options) {
	  const newDir = new DirSharded({
	    root: oldDir.root,
	    dir: true,
	    parent: oldDir.parent,
	    parentKey: oldDir.parentKey,
	    path: oldDir.path,
	    dirty: oldDir.dirty,
	    flat: false,
	    mtime: oldDir.mtime,
	    mode: oldDir.mode
	  }, options);
	  for await (const {key, child} of oldDir.eachChildSeries()) {
	    await newDir.put(key, child);
	  }
	  return newDir;
	}

	const toPathComponents = (path = '') => {
	  return (path.trim().match(/([^\\/]|\\\/)+/g) || []).filter(Boolean);
	};

	async function addToTree(elem, tree, options) {
	  const pathElems = toPathComponents(elem.path || '');
	  const lastIndex = pathElems.length - 1;
	  let parent = tree;
	  let currentPath = '';
	  for (let i = 0; i < pathElems.length; i++) {
	    const pathElem = pathElems[i];
	    currentPath += `${ currentPath ? '/' : '' }${ pathElem }`;
	    const last = i === lastIndex;
	    parent.dirty = true;
	    parent.cid = undefined;
	    parent.size = undefined;
	    if (last) {
	      await parent.put(pathElem, elem);
	      tree = await flatToShard(null, parent, options.shardSplitThreshold, options);
	    } else {
	      let dir = await parent.get(pathElem);
	      if (!dir || !(dir instanceof Dir)) {
	        dir = new DirFlat({
	          root: false,
	          dir: true,
	          parent: parent,
	          parentKey: pathElem,
	          path: currentPath,
	          dirty: true,
	          flat: true,
	          mtime: dir && dir.unixfs && dir.unixfs.mtime,
	          mode: dir && dir.unixfs && dir.unixfs.mode
	        }, options);
	      }
	      await parent.put(pathElem, dir);
	      parent = dir;
	    }
	  }
	  return tree;
	}
	async function* flushAndYield(tree, blockstore) {
	  if (!(tree instanceof Dir)) {
	    if (tree && tree.unixfs && tree.unixfs.isDirectory()) {
	      yield tree;
	    }
	    return;
	  }
	  yield* tree.flush(blockstore);
	}
	async function* treeBuilder(source, block, options) {
	  let tree = new DirFlat({
	    root: true,
	    dir: true,
	    path: '',
	    dirty: true,
	    flat: true
	  }, options);
	  for await (const entry of source) {
	    if (!entry) {
	      continue;
	    }
	    tree = await addToTree(entry, tree, options);
	    if (!entry.unixfs || !entry.unixfs.isDirectory()) {
	      yield entry;
	    }
	  }
	  if (options.wrapWithDirectory) {
	    yield* flushAndYield(tree, block);
	  } else {
	    for await (const unwrapped of tree.eachChildSeries()) {
	      if (!unwrapped) {
	        continue;
	      }
	      yield* flushAndYield(unwrapped.child, block);
	    }
	  }
	}

	async function* importer(source, blockstore, options = {}) {
	  const opts = defaultOptions$1(options);
	  let dagBuilder$1;
	  if (typeof options.dagBuilder === 'function') {
	    dagBuilder$1 = options.dagBuilder;
	  } else {
	    dagBuilder$1 = dagBuilder;
	  }
	  let treeBuilder$1;
	  if (typeof options.treeBuilder === 'function') {
	    treeBuilder$1 = options.treeBuilder;
	  } else {
	    treeBuilder$1 = treeBuilder;
	  }
	  let candidates;
	  if (Symbol.asyncIterator in source || Symbol.iterator in source) {
	    candidates = source;
	  } else {
	    candidates = [source];
	  }
	  for await (const entry of treeBuilder$1(itParallelBatch(dagBuilder$1(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {
	    yield {
	      cid: entry.cid,
	      path: entry.path,
	      unixfs: entry.unixfs,
	      size: entry.size
	    };
	  }
	}

	'use strict';

	/**
	 * Turns a browser readable stream into an async iterable. Async iteration over
	 * returned iterable will lock give stream, preventing any other consumer from
	 * acquiring a reader. The lock will be released if iteration loop is broken. To
	 * prevent stream cancelling optional `{ preventCancel: true }` could be passed
	 * as a second argument.
	 * @template T
	 * @param {ReadableStream<T>} stream
	 * @param {Object} [options]
	 * @param {boolean} [options.preventCancel=boolean]
	 * @returns {AsyncIterable<T>}
	 */
	async function * browserReadableStreamToIt$1 (stream, options = {}) {
	  const reader = stream.getReader();

	  try {
	    while (true) {
	      const result = await reader.read();

	      if (result.done) {
	        return
	      }

	      yield result.value;
	    }
	  } finally {
	    if (options.preventCancel !== true) {
	      reader.cancel();
	    }

	    reader.releaseLock();
	  }
	}

	var browserReadablestreamToIt = browserReadableStreamToIt$1;

	/* eslint-env browser */

	'use strict';

	const browserReadableStreamToIt = browserReadablestreamToIt;

	/**
	 * @param {Blob} blob
	 * @returns {AsyncIterable<Uint8Array>}
	 */
	function blobToIt (blob) {
	  if (typeof blob.stream === 'function') {
	    // @ts-ignore missing some properties
	    return browserReadableStreamToIt(blob.stream())
	  }

	  // firefox < 69 does not support blob.stream()
	  // @ts-ignore - response.body is optional, but in practice it's a stream.
	  return browserReadableStreamToIt(new Response(blob).body)
	}

	var blobToIt_1 = blobToIt;

	'use strict';

	/**
	 * @template T
	 * @typedef {Object} Peek
	 * @property {() => IteratorResult<T, void>} peek
	 */

	/**
	 * @template T
	 * @typedef {Object} AsyncPeek
	 * @property {() => Promise<IteratorResult<T, void>>} peek
	 */

	/**
	 * @template T
	 * @typedef {Object} Push
	 * @property {(value:T) => void} push
	 */

	/**
	 * @template T
	 * @typedef {Iterable<T> & Peek<T> & Push<T> & Iterator<T>} Peekable<T>
	 */

	/**
	 * @template T
	 * @typedef {AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>} AsyncPeekable<T>
	 */

	/**
	 * @template {Iterable<any> | AsyncIterable<any>} I
	 * @param {I} iterable
	 * @returns {I extends Iterable<infer T>
	 *  ? Peekable<T>
	 *  : I extends AsyncIterable<infer T>
	 *  ? AsyncPeekable<T>
	 *  : never
	 * }
	 */
	function peekableIterator (iterable) {
	  // @ts-ignore
	  const [iterator, symbol] = iterable[Symbol.asyncIterator]
	    // @ts-ignore
	    ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]
	    // @ts-ignore
	    : [iterable[Symbol.iterator](), Symbol.iterator];

	  /** @type {any[]} */
	  const queue = [];

	  // @ts-ignore
	  return {
	    peek: () => {
	      return iterator.next()
	    },
	    push: (value) => {
	      queue.push(value);
	    },
	    next: () => {
	      if (queue.length) {
	        return {
	          done: false,
	          value: queue.shift()
	        }
	      }

	      return iterator.next()
	    },
	    [symbol] () {
	      return this
	    }
	  }
	}

	var itPeekable = peekableIterator;

	'use strict';

	/**
	 * Takes an (async) iterable and returns one with each item mapped by the passed
	 * function.
	 *
	 * @template I,O
	 * @param {AsyncIterable<I>|Iterable<I>} source
	 * @param {function(I):O|Promise<O>} func
	 * @returns {AsyncIterable<O>}
	 */
	const map = async function * (source, func) {
	  for await (const val of source) {
	    yield func(val);
	  }
	};

	var itMap = map;

	function isBytes$2(obj) {
	  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;
	}
	function isBlob$2(obj) {
	  return obj.constructor && (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') && typeof obj.stream === 'function';
	}
	function isFileObject(obj) {
	  return typeof obj === 'object' && (obj.path || obj.content);
	}
	const isReadableStream = value => value && typeof value.getReader === 'function';

	async function* toAsyncIterable$1(thing) {
	  yield thing;
	}
	async function normaliseContent(input) {
	  if (isBytes$2(input)) {
	    return toAsyncIterable$1(toBytes(input));
	  }
	  if (typeof input === 'string' || input instanceof String) {
	    return toAsyncIterable$1(toBytes(input.toString()));
	  }
	  if (isBlob$2(input)) {
	    return blobToIt_1(input);
	  }
	  if (isReadableStream(input)) {
	    input = browserReadablestreamToIt(input);
	  }
	  if (Symbol.iterator in input || Symbol.asyncIterator in input) {
	    const peekable = itPeekable(input);
	    const {value, done} = await peekable.peek();
	    if (done) {
	      return toAsyncIterable$1(new Uint8Array(0));
	    }
	    peekable.push(value);
	    if (Number.isInteger(value)) {
	      return toAsyncIterable$1(Uint8Array.from(await itAll(peekable)));
	    }
	    if (isBytes$2(value) || typeof value === 'string' || value instanceof String) {
	      return itMap(peekable, toBytes);
	    }
	  }
	  throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');
	}
	function toBytes(chunk) {
	  if (chunk instanceof Uint8Array) {
	    return chunk;
	  }
	  if (ArrayBuffer.isView(chunk)) {
	    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);
	  }
	  if (chunk instanceof ArrayBuffer) {
	    return new Uint8Array(chunk);
	  }
	  if (Array.isArray(chunk)) {
	    return Uint8Array.from(chunk);
	  }
	  return fromString(chunk.toString());
	}

	async function* normaliseCandidateSingle(input, normaliseContent) {
	  if (input === null || input === undefined) {
	    throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');
	  }
	  if (typeof input === 'string' || input instanceof String) {
	    yield toFileObject$1(input.toString(), normaliseContent);
	    return;
	  }
	  if (isBytes$2(input) || isBlob$2(input)) {
	    yield toFileObject$1(input, normaliseContent);
	    return;
	  }
	  if (isReadableStream(input)) {
	    input = browserReadablestreamToIt(input);
	  }
	  if (Symbol.iterator in input || Symbol.asyncIterator in input) {
	    const peekable = itPeekable(input);
	    const {value, done} = await peekable.peek();
	    if (done) {
	      yield { content: [] };
	      return;
	    }
	    peekable.push(value);
	    if (Number.isInteger(value) || isBytes$2(value) || typeof value === 'string' || value instanceof String) {
	      yield toFileObject$1(peekable, normaliseContent);
	      return;
	    }
	    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');
	  }
	  if (isFileObject(input)) {
	    yield toFileObject$1(input, normaliseContent);
	    return;
	  }
	  throw errCode(new Error('Unexpected input: cannot convert "' + typeof input + '" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');
	}
	async function toFileObject$1(input, normaliseContent) {
	  const {path, mode, mtime, content} = input;
	  const file = {
	    path: path || '',
	    mode: parseMode(mode),
	    mtime: parseMtime(mtime)
	  };
	  if (content) {
	    file.content = await normaliseContent(content);
	  } else if (!path) {
	    file.content = await normaliseContent(input);
	  }
	  return file;
	}

	function normaliseInput$1(input) {
	  return normaliseCandidateSingle(input, normaliseContent);
	}

	async function* normaliseCandidateMultiple(input, normaliseContent) {
	  if (typeof input === 'string' || input instanceof String || isBytes$2(input) || isBlob$2(input) || input._readableState) {
	    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');
	  }
	  if (isReadableStream(input)) {
	    input = browserReadablestreamToIt(input);
	  }
	  if (Symbol.iterator in input || Symbol.asyncIterator in input) {
	    const peekable = itPeekable(input);
	    const {value, done} = await peekable.peek();
	    if (done) {
	      yield* [];
	      return;
	    }
	    peekable.push(value);
	    if (Number.isInteger(value)) {
	      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');
	    }
	    if (value._readableState) {
	      yield* itMap(peekable, value => toFileObject({ content: value }, normaliseContent));
	      return;
	    }
	    if (isBytes$2(value)) {
	      yield toFileObject({ content: peekable }, normaliseContent);
	      return;
	    }
	    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob$2(value)) {
	      yield* itMap(peekable, value => toFileObject(value, normaliseContent));
	      return;
	    }
	  }
	  if (isFileObject(input)) {
	    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');
	  }
	  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');
	}
	async function toFileObject(input, normaliseContent) {
	  const {path, mode, mtime, content} = input;
	  const file = {
	    path: path || '',
	    mode: parseMode(mode),
	    mtime: parseMtime(mtime)
	  };
	  if (content) {
	    file.content = await normaliseContent(content);
	  } else if (!path) {
	    file.content = await normaliseContent(input);
	  }
	  return file;
	}

	function normaliseInput(input) {
	  return normaliseCandidateMultiple(input, normaliseContent);
	}

	function isBytes$1(obj) {
	    return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;
	}
	function isBlob$1(obj) {
	    return Boolean(obj.constructor) &&
	        (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&
	        typeof obj.stream === 'function';
	}
	function isSingle(input) {
	    return typeof input === 'string' || input instanceof String || isBytes$1(input) || isBlob$1(input) || '_readableState' in input;
	}
	/**
	 * Get a single or multiple normaliser depending on the input.
	 */
	function getNormaliser(input) {
	    if (isSingle(input)) {
	        return normaliseInput$1(input);
	    }
	    else {
	        return normaliseInput(input);
	    }
	}

	function notFoundError(err) {
	  err = err || new Error('Not Found');
	  return errCode(err, 'ERR_NOT_FOUND');
	}
	function abortedError(err) {
	  err = err || new Error('Aborted');
	  return errCode(err, 'ERR_ABORTED');
	}

	var ErrorsImport = /*#__PURE__*/Object.freeze({
		__proto__: null,
		abortedError: abortedError,
		notFoundError: notFoundError
	});

	'use strict';

	/**
	 * Drains an (async) iterable discarding its' content and does not return
	 * anything.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 * @returns {Promise<void>}
	 */
	const drain = async (source) => {
	  for await (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty
	};

	var itDrain = drain;

	'use strict';

	/**
	 * Filters the passed (async) iterable by using the filter function
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 * @param {function(T):boolean|Promise<boolean>} fn
	 */
	const filter = async function * (source, fn) {
	  for await (const entry of source) {
	    if (await fn(entry)) {
	      yield entry;
	    }
	  }
	};

	var itFilter = filter;

	'use strict';

	/**
	 * Stop iteration after n items have been received.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 * @param {number} limit
	 * @returns {AsyncIterable<T>}
	 */
	const take = async function * (source, limit) {
	  let items = 0;

	  if (limit < 1) {
	    return
	  }

	  for await (const entry of source) {
	    yield entry;

	    items++;

	    if (items === limit) {
	      return
	    }
	  }
	};

	var itTake = take;

	const sortAll = (iterable, sorter) => {
	  return async function* () {
	    const values = await itAll(iterable);
	    yield* values.sort(sorter);
	  }();
	};
	class BaseBlockstore {
	  open() {
	    return Promise.reject(new Error('.open is not implemented'));
	  }
	  close() {
	    return Promise.reject(new Error('.close is not implemented'));
	  }
	  put(key, val, options) {
	    return Promise.reject(new Error('.put is not implemented'));
	  }
	  get(key, options) {
	    return Promise.reject(new Error('.get is not implemented'));
	  }
	  has(key, options) {
	    return Promise.reject(new Error('.has is not implemented'));
	  }
	  delete(key, options) {
	    return Promise.reject(new Error('.delete is not implemented'));
	  }
	  async *putMany(source, options = {}) {
	    for await (const {key, value} of source) {
	      await this.put(key, value, options);
	      yield {
	        key,
	        value
	      };
	    }
	  }
	  async *getMany(source, options = {}) {
	    for await (const key of source) {
	      yield this.get(key, options);
	    }
	  }
	  async *deleteMany(source, options = {}) {
	    for await (const key of source) {
	      await this.delete(key, options);
	      yield key;
	    }
	  }
	  batch() {
	    let puts = [];
	    let dels = [];
	    return {
	      put(key, value) {
	        puts.push({
	          key,
	          value
	        });
	      },
	      delete(key) {
	        dels.push(key);
	      },
	      commit: async options => {
	        await itDrain(this.putMany(puts, options));
	        puts = [];
	        await itDrain(this.deleteMany(dels, options));
	        dels = [];
	      }
	    };
	  }
	  async *_all(q, options) {
	    throw new Error('._all is not implemented');
	  }
	  async *_allKeys(q, options) {
	    throw new Error('._allKeys is not implemented');
	  }
	  query(q, options) {
	    let it = this._all(q, options);
	    if (q.prefix != null) {
	      it = itFilter(it, e => e.key.toString().startsWith(q.prefix || ''));
	    }
	    if (Array.isArray(q.filters)) {
	      it = q.filters.reduce((it, f) => itFilter(it, f), it);
	    }
	    if (Array.isArray(q.orders)) {
	      it = q.orders.reduce((it, f) => sortAll(it, f), it);
	    }
	    if (q.offset != null) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= (q.offset || 0));
	    }
	    if (q.limit != null) {
	      it = itTake(it, q.limit);
	    }
	    return it;
	  }
	  queryKeys(q, options) {
	    let it = this._allKeys(q, options);
	    if (q.prefix != null) {
	      it = itFilter(it, cid => cid.toString().startsWith(q.prefix || ''));
	    }
	    if (Array.isArray(q.filters)) {
	      it = q.filters.reduce((it, f) => itFilter(it, f), it);
	    }
	    if (Array.isArray(q.orders)) {
	      it = q.orders.reduce((it, f) => sortAll(it, f), it);
	    }
	    if (q.offset != null) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= q.offset);
	    }
	    if (q.limit != null) {
	      it = itTake(it, q.limit);
	    }
	    return it;
	  }
	}

	class MemoryBlockstore extends BaseBlockstore {
	  constructor() {
	    super();
	    this.data = {};
	  }
	  open() {
	    return Promise.resolve();
	  }
	  close() {
	    return Promise.resolve();
	  }
	  async put(key, val) {
	    this.data[base32.encode(key.multihash.bytes)] = val;
	  }
	  async get(key) {
	    const exists = await this.has(key);
	    if (!exists)
	      throw notFoundError();
	    return this.data[base32.encode(key.multihash.bytes)];
	  }
	  async has(key) {
	    return this.data[base32.encode(key.multihash.bytes)] !== undefined;
	  }
	  async delete(key) {
	    delete this.data[base32.encode(key.multihash.bytes)];
	  }
	  async *_all() {
	    yield* Object.entries(this.data).map(([key, value]) => ({
	      key: CID.createV1(code$4, decode$d(base32.decode(key))),
	      value
	    }));
	  }
	  async *_allKeys() {
	    yield* Object.entries(this.data).map(([key]) => CID.createV1(code$4, decode$d(base32.decode(key))));
	  }
	}

	const Errors = { ...ErrorsImport };

	class MemoryBlockStore extends BaseBlockstore {
	    constructor() {
	        super();
	        this.store = new Map();
	    }
	    async *blocks() {
	        for (const [cidStr, bytes] of this.store.entries()) {
	            yield { cid: CID.parse(cidStr), bytes };
	        }
	    }
	    put(cid, bytes) {
	        this.store.set(cid.toString(), bytes);
	        return Promise.resolve();
	    }
	    get(cid) {
	        const bytes = this.store.get(cid.toString());
	        if (!bytes) {
	            throw new Error(`block with cid ${cid.toString()} no found`);
	        }
	        return Promise.resolve(bytes);
	    }
	    has(cid) {
	        return Promise.resolve(this.store.has(cid.toString()));
	    }
	    close() {
	        this.store.clear();
	        return Promise.resolve();
	    }
	}

	const unixfsImporterOptionsDefault = {
	    cidVersion: 1,
	    chunker: 'fixed',
	    maxChunkSize: 262144,
	    hasher: sha256$3,
	    rawLeaves: true,
	    wrapWithDirectory: true,
	    maxChildrenPerNode: 174
	};

	async function pack$2({ input, blockstore: userBlockstore, hasher, maxChunkSize, maxChildrenPerNode, wrapWithDirectory, rawLeaves }) {
	    if (!input || (Array.isArray(input) && !input.length)) {
	        throw new Error('missing input file(s)');
	    }
	    const blockstore = userBlockstore ? userBlockstore : new MemoryBlockStore();
	    // Consume the source
	    const rootEntry = await itLast(itPipeExports(getNormaliser(input), (source) => importer(source, blockstore, {
	        ...unixfsImporterOptionsDefault,
	        hasher: hasher || unixfsImporterOptionsDefault.hasher,
	        maxChunkSize: maxChunkSize || unixfsImporterOptionsDefault.maxChunkSize,
	        maxChildrenPerNode: maxChildrenPerNode || unixfsImporterOptionsDefault.maxChildrenPerNode,
	        wrapWithDirectory: wrapWithDirectory === false ? false : unixfsImporterOptionsDefault.wrapWithDirectory,
	        rawLeaves: rawLeaves == null ? unixfsImporterOptionsDefault.rawLeaves : rawLeaves
	    })));
	    if (!rootEntry || !rootEntry.cid) {
	        throw new Error('given input could not be parsed correctly');
	    }
	    const root = rootEntry.cid;
	    const { writer, out: carOut } = await CarWriter.create([root]);
	    const carOutIter = carOut[Symbol.asyncIterator]();
	    let writingPromise;
	    const writeAll = async () => {
	        for await (const block of blockstore.blocks()) {
	            // `await` will block until all bytes in `carOut` are consumed by the user
	            // so we have backpressure here
	            await writer.put(block);
	        }
	        await writer.close();
	        if (!userBlockstore) {
	            await blockstore.close();
	        }
	    };
	    const out = {
	        [Symbol.asyncIterator]() {
	            if (writingPromise != null) {
	                throw new Error('Multiple iterator not supported');
	            }
	            // don't start writing until the user starts consuming the iterator
	            writingPromise = writeAll();
	            return {
	                async next() {
	                    const result = await carOutIter.next();
	                    if (result.done) {
	                        await writingPromise; // any errors will propagate from here
	                    }
	                    return result;
	                }
	            };
	        }
	    };
	    return { root, out };
	}

	var throttledQueueExports = {};
	var throttledQueue$1 = {
	  get exports(){ return throttledQueueExports; },
	  set exports(v){ throttledQueueExports = v; },
	};

	(function (module, exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		function throttledQueue(maxRequestsPerInterval, interval, evenlySpaced) {
		    if (evenlySpaced === void 0) { evenlySpaced = false; }
		    /**
		     * If all requests should be evenly spaced, adjust to suit.
		     */
		    if (evenlySpaced) {
		        interval = interval / maxRequestsPerInterval;
		        maxRequestsPerInterval = 1;
		    }
		    var queue = [];
		    var lastIntervalStart = 0;
		    var numRequestsPerInterval = 0;
		    var timeout;
		    /**
		     * Gets called at a set interval to remove items from the queue.
		     * This is a self-adjusting timer, since the browser's setTimeout is highly inaccurate.
		     */
		    var dequeue = function () {
		        var intervalEnd = lastIntervalStart + interval;
		        var now = Date.now();
		        /**
		         * Adjust the timer if it was called too early.
		         */
		        if (now < intervalEnd) {
		            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
		            timeout !== undefined && clearTimeout(timeout);
		            timeout = setTimeout(dequeue, intervalEnd - now);
		            return;
		        }
		        lastIntervalStart = now;
		        numRequestsPerInterval = 0;
		        for (var _i = 0, _a = queue.splice(0, maxRequestsPerInterval); _i < _a.length; _i++) {
		            var callback = _a[_i];
		            numRequestsPerInterval++;
		            void callback();
		        }
		        if (queue.length) {
		            timeout = setTimeout(dequeue, interval);
		        }
		        else {
		            timeout = undefined;
		        }
		    };
		    return function (fn) { return new Promise(function (resolve, reject) {
		        var callback = function () { return Promise.resolve().then(fn).then(resolve).catch(reject); };
		        var now = Date.now();
		        if (timeout === undefined && (now - lastIntervalStart) > interval) {
		            lastIntervalStart = now;
		            numRequestsPerInterval = 0;
		        }
		        if (numRequestsPerInterval++ < maxRequestsPerInterval) {
		            void callback();
		        }
		        else {
		            queue.push(callback);
		            if (timeout === undefined) {
		                timeout = setTimeout(dequeue, lastIntervalStart + interval - now);
		            }
		        }
		    }); };
		}
		module.exports = throttledQueue;
		exports.default = throttledQueue;
		
	} (throttledQueue$1, throttledQueueExports));

	var throttledQueue = /*@__PURE__*/getDefaultExportFromCjs(throttledQueueExports);

	const fetch$1 = globalThis.fetch;
	const FormData$1 = globalThis.FormData;
	const Headers = globalThis.Headers;
	const Request = globalThis.Request;
	const Response$1 = globalThis.Response;
	const Blob$1 = globalThis.Blob;
	const File$1 = globalThis.File;
	const ReadableStream = globalThis.ReadableStream;
	const Blockstore = MemoryBlockStore;

	const GATEWAY = new URL('https://nftstorage.link/');

	/**
	 * @typedef {string|URL} GatewayURL Base URL of an IPFS Gateway e.g. https://dweb.link/ or https://ipfs.io/
	 * @typedef {{ gateway?: GatewayURL }} GatewayURLOptions
	 */

	/**
	 * Convert an IPFS URL (starting ipfs://) to a gateway URL (starting https://)
	 * that can be used in a webpage. If the passed URL is not an IPFS URL it is
	 * returned as a new URL object with no further changes.
	 *
	 * @param {string|URL} url An IPFS URL e.g. ipfs://bafy.../path
	 * @param {GatewayURLOptions} [options] Options that allow customization of the gateway used.
	 * @returns {URL} An IPFS gateway URL e.g. https://nftstorage.link/ipfs/bafy.../path
	 */
	const toGatewayURL = (url, options = {}) => {
	  const gateway = options.gateway || GATEWAY;
	  url = new URL(String(url));
	  return url.protocol === 'ipfs:'
	    ? new URL(`/ipfs/${url.href.slice('ipfs://'.length)}`, gateway)
	    : url
	};

	/**
	 * An implementation of the CAR reader interface that is backed by a blockstore.
	 *
	 * @typedef {import('multiformats').CID} CID
	 * @typedef {import('@ipld/car/api').CarReader} CarReader
	 * @implements {CarReader}
	 */
	class BlockstoreCarReader {
	  /**
	   * @param {number} version
	   * @param {CID[]} roots
	   * @param {import('ipfs-car/blockstore').Blockstore} blockstore
	   */
	  constructor(version, roots, blockstore) {
	    /**
	     * @private
	     */
	    this._version = version;
	    /**
	     * @private
	     */
	    this._roots = roots;
	    /**
	     * @private
	     */
	    this._blockstore = blockstore;
	  }

	  get version() {
	    return this._version
	  }

	  get blockstore() {
	    return this._blockstore
	  }

	  async getRoots() {
	    return this._roots
	  }

	  /**
	   * @param {CID} cid
	   */
	  has(cid) {
	    return this._blockstore.has(cid)
	  }

	  /**
	   * @param {CID} cid
	   */
	  async get(cid) {
	    const bytes = await this._blockstore.get(cid);
	    return { cid, bytes }
	  }

	  blocks() {
	    return this._blockstore.blocks()
	  }

	  async *cids() {
	    for await (const b of this.blocks()) {
	      yield b.cid;
	    }
	  }
	}

	/**
	 * @typedef {import('./gateway.js').GatewayURLOptions} EmbedOptions
	 * @typedef {import('./lib/interface.js').TokenInput} TokenInput
	 * @typedef {import('ipfs-car/blockstore').Blockstore} Blockstore
	 */

	/**
	 * @template T
	 * @typedef {import('./lib/interface.js').Encoded<T, [[Blob, URL]]>} EncodedBlobUrl
	 */

	/**
	 * @template G
	 * @typedef {import('./lib/interface.js').Encoded<G, [[Blob, Blob]]>} EncodedBlobBlob
	 */

	/**
	 * @template {import('./lib/interface.js').TokenInput} T
	 * @typedef {import('./lib/interface.js').Token<T>} TokenType
	 */

	/**
	 * @template {TokenInput} T
	 * @implements {TokenType<T>}
	 */
	class Token {
	  /**
	   * @param {import('./lib/interface.js').CIDString} ipnft
	   * @param {import('./lib/interface.js').EncodedURL} url
	   * @param {import('./lib/interface.js').Encoded<T, [[Blob, URL]]>} data
	   */
	  constructor(ipnft, url, data) {
	    /** @readonly */
	    this.ipnft = ipnft;
	    /** @readonly */
	    this.url = url;
	    /** @readonly */
	    this.data = data;

	    Object.defineProperties(this, {
	      ipnft: { enumerable: true, writable: false },
	      url: { enumerable: true, writable: false },
	      data: { enumerable: false, writable: false },
	    });
	  }
	  /**
	   * @returns {import('./lib/interface.js').Encoded<T, [[Blob, URL]]>}
	   */
	  embed() {
	    return Token.embed(this)
	  }

	  /**
	   * @template {TokenInput} T
	   * @param {{data: import('./lib/interface.js').Encoded<T, [[Blob, URL]]>}} token
	   * @returns {import('./lib/interface.js').Encoded<T, [[Blob, URL]]>}
	   */
	  static embed({ data }) {
	    return embed(data, { gateway: GATEWAY })
	  }

	  /**
	   * Takes token input, encodes it as a DAG, wraps it in a CAR and creates a new
	   * Token instance from it. Where values are discovered `Blob` (or `File`)
	   * objects in the given input, they are replaced with IPFS URLs (an `ipfs://`
	   * prefixed CID with an optional path).
	   *
	   * @example
	   * ```js
	   * const cat = new File(['...'], 'cat.png')
	   * const kitty = new File(['...'], 'kitty.png')
	   * const { token, car } = await Token.encode({
	   *   name: 'hello'
	   *   image: cat
	   *   properties: {
	   *     extra: {
	   *       image: kitty
	   *     }
	   *   }
	   * })
	   * ```
	   *
	   * @template {TokenInput} T
	   * @param {T} input
	   * @returns {Promise<{ cid: CID, token: TokenType<T>, car: import('./lib/interface.js').CarReader }>}
	   */
	  static async encode(input) {
	    const blockstore = new Blockstore();
	    const [blobs, meta] = mapTokenInputBlobs(input);
	    /** @type {EncodedBlobUrl<T>} */
	    const data = JSON.parse(JSON.stringify(meta));
	    /** @type {import('./lib/interface.js').Encoded<T, [[Blob, CID]]>} */
	    const dag = JSON.parse(JSON.stringify(meta));

	    for (const [dotPath, blob] of blobs.entries()) {
	      /** @type {string|undefined} */
	      // @ts-ignore blob may be a File!
	      const name = blob.name || 'blob';
	      /** @type {import('./platform.js').ReadableStream} */
	      const content = blob.stream();
	      const { root: cid } = await pack$2({
	        input: [{ path: name, content }],
	        blockstore,
	        wrapWithDirectory: true,
	      });

	      const href = new URL(`ipfs://${cid}/${name}`);
	      const path = dotPath.split('.');
	      setIn(data, path, href);
	      setIn(dag, path, cid);
	    }

	    const { root: metadataJsonCid } = await pack$2({
	      input: [{ path: 'metadata.json', content: JSON.stringify(data) }],
	      blockstore,
	      wrapWithDirectory: false,
	    });

	    const block = await encode$a({
	      value: {
	        ...dag,
	        'metadata.json': metadataJsonCid,
	        type: 'nft',
	      },
	      codec: dagCbor,
	      hasher: sha256$3,
	    });
	    await blockstore.put(block.cid, block.bytes);

	    return {
	      cid: block.cid,
	      token: new Token(
	        block.cid.toString(),
	        `ipfs://${block.cid}/metadata.json`,
	        data
	      ),
	      car: new BlockstoreCarReader(1, [block.cid], blockstore),
	    }
	  }
	}

	/**
	 * @template T
	 * @param {EncodedBlobUrl<T>} input
	 * @param {EmbedOptions} options
	 * @returns {EncodedBlobUrl<T>}
	 */
	const embed = (input, options) =>
	  mapWith(input, isURL, embedURL, options);

	/**
	 * @template {TokenInput} T
	 * @param {import('./lib/interface.js').EncodedToken<T>} value
	 * @param {Set<string>} paths - Paths were to expect EncodedURLs
	 * @returns {Token<T>}
	 */
	const decode$3 = ({ ipnft, url, data }, paths) =>
	  new Token(ipnft, url, mapWith(data, isEncodedURL, decodeURL, paths));

	/**
	 * @param {any} value
	 * @returns {value is URL}
	 */
	const isURL = (value) => value instanceof URL;

	/**
	 * @template State
	 * @param {State} state
	 * @param {import('./lib/interface.js').EncodedURL} url
	 * @returns {[State, URL]}
	 */
	const decodeURL = (state, url) => [state, new URL(url)];

	/**
	 * @param {EmbedOptions} context
	 * @param {URL} url
	 * @returns {[EmbedOptions, URL]}
	 */
	const embedURL = (context, url) => [context, toGatewayURL(url, context)];

	/**
	 * @param {any} value
	 * @returns {value is object}
	 */
	const isObject = (value) => typeof value === 'object' && value != null;

	/**
	 * @param {any} value
	 * @param {Set<string>} assetPaths
	 * @param {PropertyKey[]} path
	 * @returns {value is import('./lib/interface.js').EncodedURL}
	 */
	const isEncodedURL = (value, assetPaths, path) =>
	  typeof value === 'string' && assetPaths.has(path.join('.'));

	/**
	 * Takes token input and encodes it into
	 * [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)
	 * object where form field values are discovered `Blob` (or `File`) objects in
	 * the given token and field keys are `.` joined paths where they were discoverd
	 * in the token. Additionally encoded `FormData` will also have a field
	 * named `meta` containing JSON serialized token with blobs and file values
	 * `null` set to null (this allows backend to injest all of the files from
	 * `multipart/form-data` request and update provided "meta" data with
	 * corresponding file ipfs:// URLs)
	 *
	 * @example
	 * ```js
	 * const cat = new File([], 'cat.png')
	 * const kitty = new File([], 'kitty.png')
	 * const form = encode({
	 *   name: 'hello'
	 *   image: cat
	 *   properties: {
	 *     extra: {
	 *       image: kitty
	 *     }
	 *   }
	 * })
	 * [...form.entries()] //>
	 * // [
	 * //   ['image', cat],
	 * //   ['properties.extra.image', kitty],
	 * //   ['meta', '{"name":"hello",image:null,"properties":{"extra":{"kitty": null}}}']
	 * // ]
	 * ```
	 *
	 * @template {TokenInput} T
	 * @param {EncodedBlobBlob<T>} input
	 * @returns {FormData}
	 */
	const encode$3 = (input) => {
	  const [map, meta] = mapValueWith(input, isBlob, encodeBlob, new Map(), []);
	  const form = new FormData$1();
	  for (const [k, v] of map.entries()) {
	    form.set(k, v);
	  }
	  form.set('meta', JSON.stringify(meta));
	  return form
	};

	/**
	 * @param {Map<string, Blob>} data
	 * @param {Blob} blob
	 * @param {PropertyKey[]} path
	 * @returns {[Map<string, Blob>, void]}
	 */
	const encodeBlob = (data, blob, path) => {
	  data.set(path.join('.'), blob);
	  return [data, undefined]
	};

	/**
	 * @param {any} value
	 * @returns {value is Blob}
	 */
	const isBlob = (value) => value instanceof Blob$1;

	/**
	 * @template {TokenInput} T
	 * @param {EncodedBlobBlob<T>} input
	 */
	const mapTokenInputBlobs = (input) => {
	  return mapValueWith(input, isBlob, encodeBlob, new Map(), [])
	};

	/**
	 * Substitues values in the given `input` that match `p(value) == true` with
	 * `f(value, context, path)` where `context` is whatever you pass (usually
	 * a mutable state) and `path` is a array of keys / indexes where the value
	 * was encountered.
	 *
	 * @template T, I, X, O, State
	 * @param {import('./lib/interface.js').Encoded<T, [[I, X]]>} input - Arbitrary input.
	 * @param {(input:any, state:State, path:PropertyKey[]) => input is X} p - Predicate function to determine
	 * which values to swap.
	 * @param {(state:State, input:X, path:PropertyKey[]) => [State, O]} f - Function
	 * that swaps matching values.
	 * @param {State} state - Some additional context you need in the process.
	 * likey you'll start with `[]`.
	 * @returns {import('./lib/interface.js').Encoded<T, [[I, O]]>}
	 */
	const mapWith = (input, p, f, state) => {
	  const [, output] = mapValueWith(input, p, f, state, []);
	  return output
	};

	/**
	 * @template T, I, X, O, State
	 * @param {import('./lib/interface.js').Encoded<T, [[I, X]]>} input - Arbitrary input.
	 * @param {(input:any, state:State, path:PropertyKey[]) => input is X} p - Predicate function to determine
	 * which values to swap.
	 * @param {(state:State, input:X, path:PropertyKey[]) => [State, O]} f - Function
	 * that swaps matching values.
	 * @param {State} state - Some additional context you need in the process.
	 * @param {PropertyKey[]} path - Path where the value was encountered. Most
	 * likey you'll start with `[]`.
	 * @returns {[State, import('./lib/interface.js').Encoded<T, [[I, O]]>]}
	 */
	const mapValueWith = (input, p, f, state, path) =>
	  p(input, state, path)
	    ? f(state, input, path)
	    : Array.isArray(input)
	    ? mapArrayWith(input, p, f, state, path)
	    : isObject(input)
	    ? mapObjectWith(input, p, f, state, path)
	    : [state, /** @type {any} */ (input)];

	/**
	 * Just like `mapWith` except
	 *
	 * @template State, T, I, X, O
	 * @param {import('./lib/interface.js').Encoded<T, [[I, X]]>} input
	 * @param {(input:any, state:State, path:PropertyKey[]) => input is X} p
	 * @param {(state: State, input:X, path:PropertyKey[]) => [State, O]} f
	 * @param {State} init
	 * @param {PropertyKey[]} path
	 * @returns {[State, import('./lib/interface.js').Encoded<T, [[I, O]]>]}
	 */
	const mapObjectWith = (input, p, f, init, path) => {
	  let state = init;
	  const output =
	    /** @type {import('./lib/interface.js').Encoded<T, [[I, O]]>} */ ({});
	  for (const [key, value] of Object.entries(input)) {
	    const [next, out] = mapValueWith(value, p, f, state, [...path, key]);
	    // @ts-ignore
	    output[key] = out;
	    state = next;
	  }
	  return [state, output]
	};

	/**
	 * Just like `mapWith` except for Arrays.
	 *
	 * @template I, X, O, State
	 * @template {any[]} T
	 * @param {T} input
	 * @param {(input:any, state:State, path:PropertyKey[]) => input is X} p
	 * @param {(state: State, input:X, path:PropertyKey[]) => [State, O]} f
	 * @param {State} init
	 * @param {PropertyKey[]} path
	 * @returns {[State, import('./lib/interface.js').Encoded<T, [[I, O]]>]}
	 */
	const mapArrayWith = (input, p, f, init, path) => {
	  const output = /** @type {unknown[]} */ ([]);

	  let state = init;
	  for (const [index, element] of input.entries()) {
	    const [next, out] = mapValueWith(element, p, f, state, [...path, index]);
	    output[index] = out;
	    state = next;
	  }

	  return [
	    state,
	    /** @type {import('./lib/interface.js').Encoded<T, [[I, O]]>} */ (output),
	  ]
	};

	/**
	 * Sets a given `value` at the given `path` on a passed `object`.
	 *
	 * @example
	 * ```js
	 * const obj = { a: { b: { c: 1 }}}
	 * setIn(obj, ['a', 'b', 'c'], 5)
	 * obj.a.b.c //> 5
	 * ```
	 *
	 * @template V
	 * @param {any} object
	 * @param {string[]} path
	 * @param {V} value
	 */
	const setIn = (object, path, value) => {
	  const n = path.length - 1;
	  let target = object;
	  for (let [index, key] of path.entries()) {
	    if (index === n) {
	      target[key] = value;
	    } else {
	      target = target[key];
	    }
	  }
	};

	var token = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Token: Token,
		decode: decode$3,
		embed: embed,
		encode: encode$3,
		mapWith: mapWith
	});

	/**
	 * A client library for the https://nft.storage/ service. It provides a convenient
	 * interface for working with the [Raw HTTP API](https://nft.storage/#api-docs)
	 * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with
	 * TS for out-of-the box type inference and better IntelliSense.
	 *
	 * @example
	 * ```js
	 * import { NFTStorage, File, Blob } from "nft.storage"
	 * const client = new NFTStorage({ token: API_TOKEN })
	 *
	 * const cid = await client.storeBlob(new Blob(['hello world']))
	 * ```
	 * @module
	 */

	const MAX_STORE_RETRIES = 5;
	const MAX_CONCURRENT_UPLOADS = 3;
	const MAX_CHUNK_SIZE = 1024 * 1024 * 10; // chunk to ~10MB CARs
	const RATE_LIMIT_REQUESTS = 30;
	const RATE_LIMIT_PERIOD = 10 * 1000;

	/**
	 * @typedef {import('./lib/interface.js').Service} Service
	 * @typedef {import('./lib/interface.js').CIDString} CIDString
	 * @typedef {import('./lib/interface.js').Deal} Deal
	 * @typedef {import('./lib/interface.js').FileObject} FileObject
	 * @typedef {import('./lib/interface.js').FilesSource} FilesSource
	 * @typedef {import('./lib/interface.js').Pin} Pin
	 * @typedef {import('./lib/interface.js').CarReader} CarReader
	 * @typedef {import('ipfs-car/blockstore').Blockstore} BlockstoreI
	 * @typedef {import('./lib/interface.js').RateLimiter} RateLimiter
	 * @typedef {import('./lib/interface.js').RequestOptions} RequestOptions
	 */

	/**
	 * @returns {RateLimiter}
	 */
	function createRateLimiter() {
	  const throttle = throttledQueue(RATE_LIMIT_REQUESTS, RATE_LIMIT_PERIOD);
	  return () => throttle(() => {})
	}

	/**
	 * Rate limiter used by static API if no rate limiter is passed. Note that each
	 * instance of the NFTStorage class gets it's own limiter if none is passed.
	 * This is because rate limits are enforced per API token.
	 */
	const globalRateLimiter = createRateLimiter();

	/**
	 * @template {import('./lib/interface.js').TokenInput} T
	 * @typedef {import('./lib/interface.js').Token<T>} TokenType
	 */

	/**
	 * @implements {Service}
	 */
	class NFTStorage {
	  /**
	   * Constructs a client bound to the given `options.token` and
	   * `options.endpoint`.
	   *
	   * @example
	   * ```js
	   * import { NFTStorage, File, Blob } from "nft.storage"
	   * const client = new NFTStorage({ token: API_TOKEN })
	   *
	   * const cid = await client.storeBlob(new Blob(['hello world']))
	   * ```
	   * Optionally you could pass an alternative API endpoint (e.g. for testing)
	   * @example
	   * ```js
	   * import { NFTStorage } from "nft.storage"
	   * const client = new NFTStorage({
	   *   token: API_TOKEN
	   *   endpoint: new URL('http://localhost:8080/')
	   * })
	   * ```
	   *
	   * @param {{token: string, endpoint?: URL, rateLimiter?: RateLimiter, did?: string}} options
	   */
	  constructor({
	    token,
	    did,
	    endpoint = new URL('https://api.nft.storage'),
	    rateLimiter,
	  }) {
	    /**
	     * Authorization token.
	     *
	     * @readonly
	     */
	    this.token = token;
	    /**
	     * Service API endpoint `URL`.
	     * @readonly
	     */
	    this.endpoint = endpoint;
	    /**
	     * @readonly
	     */
	    this.rateLimiter = rateLimiter || createRateLimiter();

	    /**
	     * @readonly
	     */
	    this.did = did;
	  }

	  /**
	   * @hidden
	   * @param {object} options
	   * @param {string} options.token
	   * @param {string} [options.did]
	   */
	  static auth({ token, did }) {
	    if (!token) throw new Error('missing token')
	    return {
	      Authorization: `Bearer ${token}`,
	      'X-Client': 'nft.storage/js',
	      ...(did ? { 'x-agent-did': did } : {}),
	    }
	  }

	  /**
	   * Stores a single file and returns its CID.
	   *
	   * @param {Service} service
	   * @param {Blob} blob
	   * @param {RequestOptions} [options]
	   * @returns {Promise<CIDString>}
	   */
	  static async storeBlob(service, blob, options) {
	    const blockstore = new Blockstore();
	    let cidString;

	    try {
	      const { cid, car } = await NFTStorage.encodeBlob(blob, { blockstore });
	      await NFTStorage.storeCar(service, car, options);
	      cidString = cid.toString();
	    } finally {
	      await blockstore.close();
	    }

	    return cidString
	  }

	  /**
	   * Stores a CAR file and returns its root CID.
	   *
	   * @param {Service} service
	   * @param {Blob|CarReader} car
	   * @param {import('./lib/interface.js').CarStorerOptions} [options]
	   * @returns {Promise<CIDString>}
	   */
	  static async storeCar(
	    { endpoint, rateLimiter = globalRateLimiter, ...token },
	    car,
	    { onStoredChunk, maxRetries, decoders, signal } = {}
	  ) {
	    const url = new URL('upload/', endpoint);
	    const headers = NFTStorage.auth(token);
	    const targetSize = MAX_CHUNK_SIZE;
	    const splitter =
	      car instanceof Blob$1
	        ? await TreewalkCarSplitter.fromBlob(car, targetSize, { decoders })
	        : new TreewalkCarSplitter(car, targetSize, { decoders });

	    const upload = transform(
	      MAX_CONCURRENT_UPLOADS,
	      async function (/** @type {AsyncIterable<Uint8Array>} */ car) {
	        const carParts = [];
	        for await (const part of car) {
	          carParts.push(part);
	        }
	        const carFile = new Blob$1(carParts, { type: 'application/car' });
	        const cid = await pRetryExports(
	          async () => {
	            await rateLimiter();
	            /** @type {Response} */
	            let response;
	            try {
	              response = await fetch$1(url.toString(), {
	                method: 'POST',
	                headers,
	                body: carFile,
	                signal,
	              });
	            } catch (/** @type {any} */ err) {
	              // TODO: remove me and test when client accepts custom fetch impl
	              /* c8 ignore next 1 */
	              throw signal && signal.aborted ? new AbortError_1(err) : err
	            }
	            /* c8 ignore next 3 */
	            if (response.status === 429) {
	              throw new Error('rate limited')
	            }
	            const result = await response.json();
	            if (!result.ok) {
	              // do not retry if unauthorized - will not succeed
	              if (response.status === 401) {
	                throw new AbortError_1(result.error.message)
	              }
	              throw new Error(result.error.message)
	            }
	            return result.value.cid
	          },
	          {
	            retries: maxRetries == null ? MAX_STORE_RETRIES : maxRetries,
	          }
	        );
	        onStoredChunk && onStoredChunk(carFile.size);
	        return cid
	      }
	    );

	    let root;
	    for await (const cid of upload(splitter.cars())) {
	      root = cid;
	    }

	    return /** @type {CIDString} */ (root)
	  }

	  /**
	   * Stores a directory of files and returns a CID. Provided files **MUST**
	   * be within the same directory, otherwise error is raised e.g. `foo/bar.png`,
	   * `foo/bla/baz.json` is ok but `foo/bar.png`, `bla/baz.json` is not.
	   *
	   * @param {Service} service
	   * @param {FilesSource} filesSource
	   * @param {RequestOptions} [options]
	   * @returns {Promise<CIDString>}
	   */
	  static async storeDirectory(service, filesSource, options) {
	    const blockstore = new Blockstore();
	    let cidString;
	    try {
	      const { cid, car } = await NFTStorage.encodeDirectory(filesSource, {
	        blockstore,
	      });
	      await NFTStorage.storeCar(service, car, options);
	      cidString = cid.toString();
	    } finally {
	      await blockstore.close();
	    }

	    return cidString
	  }

	  /**
	   * Stores the given token and all resources it references (in the form of a
	   * File or a Blob) along with a metadata JSON as specificed in ERC-1155. The
	   * `token.image` must be either a `File` or a `Blob` instance, which will be
	   * stored and the corresponding content address URL will be saved in the
	   * metadata JSON file under `image` field.
	   *
	   * If `token.properties` contains properties with `File` or `Blob` values,
	   * those also get stored and their URLs will be saved in the metadata JSON
	   * file in their place.
	   *
	   * Note: URLs for `File` objects will retain file names e.g. in case of
	   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed
	   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`
	   * objects, the URL will not have a file name name or mime type, instead it
	   * will be transformed into a URL that looks like
	   * `ipfs://bafy...hash/image/blob`.
	   *
	   * @template {import('./lib/interface.js').TokenInput} T
	   * @param {Service} service
	   * @param {T} metadata
	   * @param {RequestOptions} [options]
	   * @returns {Promise<TokenType<T>>}
	   */
	  static async store(service, metadata, options) {
	    const { token, car } = await NFTStorage.encodeNFT(metadata);
	    await NFTStorage.storeCar(service, car, options);
	    return token
	  }

	  /**
	   * Returns current status of the stored NFT by its CID. Note the NFT must
	   * have previously been stored by this account.
	   *
	   * @param {Service} service
	   * @param {string} cid
	   * @param {RequestOptions} [options]
	   * @returns {Promise<import('./lib/interface.js').StatusResult>}
	   */
	  static async status(
	    { endpoint, rateLimiter = globalRateLimiter, ...token },
	    cid,
	    options
	  ) {
	    const url = new URL(`${cid}/`, endpoint);
	    await rateLimiter();
	    const response = await fetch$1(url.toString(), {
	      method: 'GET',
	      headers: NFTStorage.auth(token),
	      signal: options && options.signal,
	    });
	    /* c8 ignore next 3 */
	    if (response.status === 429) {
	      throw new Error('rate limited')
	    }
	    const result = await response.json();

	    if (result.ok) {
	      return {
	        cid: result.value.cid,
	        deals: decodeDeals(result.value.deals),
	        size: result.value.size,
	        pin: decodePin(result.value.pin),
	        created: new Date(result.value.created),
	      }
	    } else {
	      throw new Error(result.error.message)
	    }
	  }

	  /**
	   * Check if a CID of an NFT is being stored by NFT.Storage.
	   *
	   * @param {import('./lib/interface.js').PublicService} service
	   * @param {string} cid
	   * @param {RequestOptions} [options]
	   * @returns {Promise<import('./lib/interface.js').CheckResult>}
	   */
	  static async check(
	    { endpoint, rateLimiter = globalRateLimiter },
	    cid,
	    options
	  ) {
	    const url = new URL(`check/${cid}/`, endpoint);
	    await rateLimiter();
	    const response = await fetch$1(url.toString(), {
	      signal: options && options.signal,
	    });
	    /* c8 ignore next 3 */
	    if (response.status === 429) {
	      throw new Error('rate limited')
	    }
	    const result = await response.json();

	    if (result.ok) {
	      return {
	        cid: result.value.cid,
	        deals: decodeDeals(result.value.deals),
	        pin: result.value.pin,
	      }
	    } else {
	      throw new Error(result.error.message)
	    }
	  }

	  /**
	   * Removes stored content by its CID from this account. Please note that
	   * even if content is removed from the service other nodes that have
	   * replicated it might still continue providing it.
	   *
	   * @param {Service} service
	   * @param {string} cid
	   * @param {RequestOptions} [options]
	   * @returns {Promise<void>}
	   */
	  static async delete(
	    { endpoint, rateLimiter = globalRateLimiter, ...token },
	    cid,
	    options
	  ) {
	    const url = new URL(`${cid}/`, endpoint);
	    await rateLimiter();
	    const response = await fetch$1(url.toString(), {
	      method: 'DELETE',
	      headers: NFTStorage.auth(token),
	      signal: options && options.signal,
	    });
	    /* c8 ignore next 3 */
	    if (response.status === 429) {
	      throw new Error('rate limited')
	    }
	    const result = await response.json();
	    if (!result.ok) {
	      throw new Error(result.error.message)
	    }
	  }

	  /**
	   * Encodes the given token and all resources it references (in the form of a
	   * File or a Blob) along with a metadata JSON as specificed in ERC-1155 to a
	   * CAR file. The `token.image` must be either a `File` or a `Blob` instance,
	   * which will be stored and the corresponding content address URL will be
	   * saved in the metadata JSON file under `image` field.
	   *
	   * If `token.properties` contains properties with `File` or `Blob` values,
	   * those also get stored and their URLs will be saved in the metadata JSON
	   * file in their place.
	   *
	   * Note: URLs for `File` objects will retain file names e.g. in case of
	   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed
	   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`
	   * objects, the URL will not have a file name name or mime type, instead it
	   * will be transformed into a URL that looks like
	   * `ipfs://bafy...hash/image/blob`.
	   *
	   * @example
	   * ```js
	   * const { token, car } = await NFTStorage.encodeNFT({
	   *   name: 'nft.storage store test',
	   *   description: 'Test ERC-1155 compatible metadata.',
	   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),
	   *   properties: {
	   *     custom: 'Custom data can appear here, files are auto uploaded.',
	   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),
	   *   }
	   * })
	   *
	   * console.log('IPFS URL for the metadata:', token.url)
	   * console.log('metadata.json contents:\n', token.data)
	   * console.log('metadata.json with IPFS gateway URLs:\n', token.embed())
	   *
	   * // Now store the CAR file on NFT.Storage
	   * await client.storeCar(car)
	   * ```
	   *
	   * @template {import('./lib/interface.js').TokenInput} T
	   * @param {T} input
	   * @returns {Promise<{ cid: CID, token: TokenType<T>, car: CarReader }>}
	   */
	  static async encodeNFT(input) {
	    validateERC1155(input);
	    return Token.encode(input)
	  }

	  /**
	   * Encodes a single file to a CAR file and also returns its root CID.
	   *
	   * @example
	   * ```js
	   * const content = new Blob(['hello world'])
	   * const { cid, car } = await NFTStorage.encodeBlob(content)
	   *
	   * // Root CID of the file
	   * console.log(cid.toString())
	   *
	   * // Now store the CAR file on NFT.Storage
	   * await client.storeCar(car)
	   * ```
	   *
	   * @param {Blob} blob
	   * @param {object} [options]
	   * @param {BlockstoreI} [options.blockstore]
	   * @returns {Promise<{ cid: CID, car: CarReader }>}
	   */
	  static async encodeBlob(blob, { blockstore } = {}) {
	    if (blob.size === 0) {
	      throw new Error('Content size is 0, make sure to provide some content')
	    }
	    return packCar([toImportCandidate('blob', blob)], {
	      blockstore,
	      wrapWithDirectory: false,
	    })
	  }

	  /**
	   * Encodes a directory of files to a CAR file and also returns the root CID.
	   * Provided files **MUST** be within the same directory, otherwise error is
	   * raised e.g. `foo/bar.png`, `foo/bla/baz.json` is ok but `foo/bar.png`,
	   * `bla/baz.json` is not.
	   *
	   * @example
	   * ```js
	   * const { cid, car } = await NFTStorage.encodeDirectory([
	   *   new File(['hello world'], 'hello.txt'),
	   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')
	   * ])
	   *
	   * // Root CID of the directory
	   * console.log(cid.toString())
	   *
	   * // Now store the CAR file on NFT.Storage
	   * await client.storeCar(car)
	   * ```
	   *
	   * @param {FilesSource} files
	   * @param {object} [options]
	   * @param {BlockstoreI} [options.blockstore]
	   * @returns {Promise<{ cid: CID, car: CarReader }>}
	   */
	  static async encodeDirectory(files, { blockstore } = {}) {
	    let size = 0;
	    const input = itPipeExports(files, async function* (files) {
	      for await (const file of files) {
	        yield toImportCandidate(file.name, file);
	        size += file.size;
	      }
	    });
	    const packed = await packCar(input, {
	      blockstore,
	      wrapWithDirectory: true,
	    });
	    if (size === 0) {
	      throw new Error(
	        'Total size of files should exceed 0, make sure to provide some content'
	      )
	    }
	    return packed
	  }

	  // Just a sugar so you don't have to pass around endpoint and token around.

	  /**
	   * Stores a single file and returns the corresponding Content Identifier (CID).
	   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)
	   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File). Note
	   * that no file name or file metadata is retained.
	   *
	   * @example
	   * ```js
	   * const content = new Blob(['hello world'])
	   * const cid = await client.storeBlob(content)
	   * cid //> 'zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9'
	   * ```
	   *
	   * @param {Blob} blob
	   * @param {RequestOptions} [options]
	   */
	  storeBlob(blob, options) {
	    return NFTStorage.storeBlob(this, blob, options)
	  }

	  /**
	   * Stores files encoded as a single [Content Addressed Archive
	   * (CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).
	   *
	   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)
	   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File).
	   *
	   * Returns the corresponding Content Identifier (CID).
	   *
	   * See the [`ipfs-car` docs](https://www.npmjs.com/package/ipfs-car) for more
	   * details on packing a CAR file.
	   *
	   * @example
	   * ```js
	   * import { pack } from 'ipfs-car/pack'
	   * import { CarReader } from '@ipld/car'
	   * const { out, root } = await pack({
	   *  input: fs.createReadStream('pinpie.pdf')
	   * })
	   * const expectedCid = root.toString()
	   * const carReader = await CarReader.fromIterable(out)
	   * const cid = await storage.storeCar(carReader)
	   * console.assert(cid === expectedCid)
	   * ```
	   *
	   * @example
	   * ```
	   * import { packToBlob } from 'ipfs-car/pack/blob'
	   * const data = 'Hello world'
	   * const { root, car } = await packToBlob({ input: [new TextEncoder().encode(data)] })
	   * const expectedCid = root.toString()
	   * const cid = await client.storeCar(car)
	   * console.assert(cid === expectedCid)
	   * ```
	   * @param {Blob|CarReader} car
	   * @param {import('./lib/interface.js').CarStorerOptions} [options]
	   */
	  storeCar(car, options) {
	    return NFTStorage.storeCar(this, car, options)
	  }

	  /**
	   * Stores a directory of files and returns a CID for the directory.
	   *
	   * @example
	   * ```js
	   * const cid = await client.storeDirectory([
	   *   new File(['hello world'], 'hello.txt'),
	   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')
	   * ])
	   * cid //>
	   * ```
	   *
	   * Argument can be a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)
	   * instance as well, in which case directory structure will be retained.
	   *
	   * @param {FilesSource} files
	   * @param {RequestOptions} [options]
	   */
	  storeDirectory(files, options) {
	    return NFTStorage.storeDirectory(this, files, options)
	  }

	  /**
	   * Returns current status of the stored NFT by its CID. Note the NFT must
	   * have previously been stored by this account.
	   *
	   * @example
	   * ```js
	   * const status = await client.status('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')
	   * ```
	   *
	   * @param {string} cid
	   * @param {RequestOptions} [options]
	   */
	  status(cid, options) {
	    return NFTStorage.status(this, cid, options)
	  }

	  /**
	   * Removes stored content by its CID from the service.
	   *
	   * > Please note that even if content is removed from the service other nodes
	   * that have replicated it might still continue providing it.
	   *
	   * @example
	   * ```js
	   * await client.delete('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')
	   * ```
	   *
	   * @param {string} cid
	   * @param {RequestOptions} [options]
	   */
	  delete(cid, options) {
	    return NFTStorage.delete(this, cid, options)
	  }

	  /**
	   * Check if a CID of an NFT is being stored by nft.storage. Throws if the NFT
	   * was not found.
	   *
	   * @example
	   * ```js
	   * const status = await client.check('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')
	   * ```
	   *
	   * @param {string} cid
	   * @param {RequestOptions} [options]
	   */
	  check(cid, options) {
	    return NFTStorage.check(this, cid, options)
	  }

	  /**
	   * Stores the given token and all resources it references (in the form of a
	   * File or a Blob) along with a metadata JSON as specificed in
	   * [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155#metadata). The
	   * `token.image` must be either a `File` or a `Blob` instance, which will be
	   * stored and the corresponding content address URL will be saved in the
	   * metadata JSON file under `image` field.
	   *
	   * If `token.properties` contains properties with `File` or `Blob` values,
	   * those also get stored and their URLs will be saved in the metadata JSON
	   * file in their place.
	   *
	   * Note: URLs for `File` objects will retain file names e.g. in case of
	   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed
	   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`
	   * objects, the URL will not have a file name name or mime type, instead it
	   * will be transformed into a URL that looks like
	   * `ipfs://bafy...hash/image/blob`.
	   *
	   * @example
	   * ```js
	   * const metadata = await client.store({
	   *   name: 'nft.storage store test',
	   *   description: 'Test ERC-1155 compatible metadata.',
	   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),
	   *   properties: {
	   *     custom: 'Custom data can appear here, files are auto uploaded.',
	   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),
	   *   }
	   * })
	   *
	   * console.log('IPFS URL for the metadata:', metadata.url)
	   * console.log('metadata.json contents:\n', metadata.data)
	   * console.log('metadata.json with IPFS gateway URLs:\n', metadata.embed())
	   * ```
	   *
	   * @template {import('./lib/interface.js').TokenInput} T
	   * @param {T} token
	   * @param {RequestOptions} [options]
	   */
	  store(token, options) {
	    return NFTStorage.store(this, token, options)
	  }
	}

	/**
	 * Cast an iterable to an asyncIterable
	 * @template T
	 * @param {Iterable<T>} iterable
	 * @returns {AsyncIterable<T>}
	 */
	function toAsyncIterable(iterable) {
	  return (async function* () {
	    for (const item of iterable) {
	      yield item;
	    }
	  })()
	}

	/**
	 * @template {import('./lib/interface.js').TokenInput} T
	 * @param {T} metadata
	 */
	const validateERC1155 = ({ name, description, image, decimals }) => {
	  // Just validate that expected fields are present
	  if (typeof name !== 'string') {
	    throw new TypeError(
	      'string property `name` identifying the asset is required'
	    )
	  }
	  if (typeof description !== 'string') {
	    throw new TypeError(
	      'string property `description` describing asset is required'
	    )
	  }
	  if (!(image instanceof Blob$1)) {
	    throw new TypeError('property `image` must be a Blob or File object')
	  } else if (!image.type.startsWith('image/')) {
	    console.warn(`According to ERC721 Metadata JSON Schema 'image' must have 'image/*' mime type.

For better interoperability we would highly recommend storing content with different mime type under 'properties' namespace e.g. \`properties: { video: file }\` and using 'image' field for storing a preview image for it instead.

For more context please see ERC-721 specification https://eips.ethereum.org/EIPS/eip-721`);
	  }

	  if (typeof decimals !== 'undefined' && typeof decimals !== 'number') {
	    throw new TypeError('property `decimals` must be an integer value')
	  }
	};

	/**
	 * @param {import('ipfs-car/pack').ImportCandidateStream|Array<{ path: string, content: import('./platform.js').ReadableStream }>} input
	 * @param {object} [options]
	 * @param {BlockstoreI} [options.blockstore]
	 * @param {boolean} [options.wrapWithDirectory]
	 */
	const packCar = async (input, { blockstore, wrapWithDirectory } = {}) => {
	  /* c8 ignore next 1 */
	  blockstore = blockstore || new Blockstore();
	  const { root: cid } = await pack$2({ input, blockstore, wrapWithDirectory });
	  const car = new BlockstoreCarReader(1, [cid], blockstore);
	  return { cid, car }
	};

	/**
	 * @param {Deal[]} deals
	 * @returns {Deal[]}
	 */
	const decodeDeals = (deals) =>
	  deals.map((deal) => {
	    const { dealActivation, dealExpiration, lastChanged } = {
	      dealExpiration: null,
	      dealActivation: null,
	      ...deal,
	    };

	    return {
	      ...deal,
	      lastChanged: new Date(lastChanged),
	      ...(dealActivation && { dealActivation: new Date(dealActivation) }),
	      ...(dealExpiration && { dealExpiration: new Date(dealExpiration) }),
	    }
	  });

	/**
	 * @param {Pin} pin
	 * @returns {Pin}
	 */
	const decodePin = (pin) => ({ ...pin, created: new Date(pin.created) });

	/**
	 * Convert the passed blob to an "import candidate" - an object suitable for
	 * passing to the ipfs-unixfs-importer. Note: content is an accessor so that
	 * the stream is created only when needed.
	 *
	 * @param {string} path
	 * @param {Pick<Blob, 'stream'>|{ stream: () => AsyncIterable<Uint8Array> }} blob
	 * @returns {import('ipfs-core-types/src/utils.js').ImportCandidate}
	 */
	function toImportCandidate(path, blob) {
	  /** @type {AsyncIterable<Uint8Array>} */
	  let stream;
	  return {
	    path,
	    get content() {
	      stream = stream || blob.stream();
	      return stream
	    },
	  }
	}

	var lib$w = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Blob: Blob$1,
		File: File$1,
		FormData: FormData$1,
		NFTStorage: NFTStorage,
		Token: token,
		createRateLimiter: createRateLimiter,
		toAsyncIterable: toAsyncIterable,
		toGatewayURL: toGatewayURL
	});

	var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(lib$w);

	"use strict";
	var __awaiter$u = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$u = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	Object.defineProperty(upload, "__esModule", {
	  value: true
	});
	var UploadToIPFS_1 = upload.UploadToIPFS = void 0;
	var nft_storage_1 = require$$0$1;
	var fileHelper_1$6 = fileHelper;
	var UploadToIPFS = /** @class */function () {
	  function UploadToIPFS(ipfsNftStorageKey) {
	    this.client = new nft_storage_1.NFTStorage({
	      token: ipfsNftStorageKey
	    });
	  }
	  UploadToIPFS.prototype.uploadEncryptedFile = function (encryptedContent) {
	    return __awaiter$u(this, void 0, void 0, function () {
	      var encryptedContentData, cid, err_1;
	      return __generator$u(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            encryptedContentData = new nft_storage_1.Blob([encryptedContent]);
	            _a.label = 1;
	          case 1:
	            _a.trys.push([1, 3,, 4]);
	            return [4 /*yield*/, this.client.storeBlob(encryptedContentData)];
	          case 2:
	            cid = _a.sent();
	            return [3 /*break*/, 4];
	          case 3:
	            err_1 = _a.sent();
	            throw new Error(err_1);
	          case 4:
	            return [2 /*return*/, "https://nftstorage.link/ipfs/".concat(cid)];
	        }
	      });
	    });
	  };
	  UploadToIPFS.prototype.uploadThumbnail = function (thumbnailImage) {
	    return __awaiter$u(this, void 0, void 0, function () {
	      var thumbnailFileType, thumbnailblob, cid, err_2;
	      return __generator$u(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            thumbnailFileType = (0, fileHelper_1$6.getMimeType)(thumbnailImage);
	            thumbnailblob = new nft_storage_1.Blob([thumbnailImage], {
	              type: thumbnailFileType
	            });
	            _a.label = 1;
	          case 1:
	            _a.trys.push([1, 3,, 4]);
	            return [4 /*yield*/, this.client.storeBlob(thumbnailblob)];
	          case 2:
	            cid = _a.sent();
	            return [3 /*break*/, 4];
	          case 3:
	            err_2 = _a.sent();
	            throw new Error(err_2);
	          case 4:
	            return [2 /*return*/, "https://nftstorage.link/ipfs/".concat(cid)];
	        }
	      });
	    });
	  };
	  UploadToIPFS.prototype.uploadMetadata = function (name, description, previewImageUrl, encryptedDataUrls, mimeType, encryptLogic) {
	    return __awaiter$u(this, void 0, void 0, function () {
	      var metadata, metadataJSON, metaDataBlob, cid, err_3;
	      return __generator$u(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            metadata = {
	              name: name,
	              description: description,
	              image: previewImageUrl,
	              encrypted_data: encryptedDataUrls,
	              mime_type: mimeType,
	              encrypt_logic: encryptLogic
	            };
	            metadataJSON = JSON.stringify(metadata);
	            metaDataBlob = new nft_storage_1.Blob([metadataJSON]);
	            _a.label = 1;
	          case 1:
	            _a.trys.push([1, 3,, 4]);
	            return [4 /*yield*/, this.client.storeBlob(metaDataBlob)];
	          case 2:
	            cid = _a.sent();
	            return [3 /*break*/, 4];
	          case 3:
	            err_3 = _a.sent();
	            throw new Error(err_3);
	          case 4:
	            return [2 /*return*/, "https://nftstorage.link/ipfs/".concat(cid)];
	        }
	      });
	    });
	  };
	  return UploadToIPFS;
	}();
	UploadToIPFS_1 = upload.UploadToIPFS = UploadToIPFS;

	var api = {};

	var VWBLApi$1 = {};

	"use strict";
	var __awaiter$t = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$t = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	var __importDefault$e = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(VWBLApi$1, "__esModule", {
	  value: true
	});
	var VWBLApi_2 = VWBLApi$1.VWBLApi = void 0;
	var axios_1$7 = __importDefault$e(axiosExports$1);
	var VWBLApi = /** @class */function () {
	  function VWBLApi(endpointUrl) {
	    this.instance = axios_1$7.default.create({
	      baseURL: endpointUrl
	    });
	  }
	  VWBLApi.prototype.setKey = function (documentId, chainId, key, signature, hasNonce, autoMigration) {
	    return __awaiter$t(this, void 0, void 0, function () {
	      return __generator$t(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.instance.post("/keys", {
	              document_id: documentId,
	              chain_id: chainId,
	              key: key,
	              signature: signature,
	              has_nonce: hasNonce,
	              auto_migration: autoMigration
	            })];
	          case 1:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLApi.prototype.getKey = function (documentId, chainId, signature) {
	    return __awaiter$t(this, void 0, void 0, function () {
	      var response;
	      return __generator$t(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.instance.get("/keys/".concat(documentId, "/").concat(chainId, "?signature=").concat(signature))];
	          case 1:
	            response = _a.sent();
	            return [2 /*return*/, response.data.documentKey.key];
	        }
	      });
	    });
	  };
	  return VWBLApi;
	}();
	VWBLApi_2 = VWBLApi$1.VWBLApi = VWBLApi;

	(function (exports) {
	  "use strict";

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(VWBLApi$1, exports);
	})(api);
	var index$k = /*@__PURE__*/getDefaultExportFromCjs(api);

	var blockchain = {};

	var Sign = {};

	"use strict";
	var __awaiter$s = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$s = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	Object.defineProperty(Sign, "__esModule", {
	  value: true
	});
	var signToProtocol_1 = Sign.signToProtocol = void 0;
	var MESSAGE_TO_BE_SIGNED = "Hello VWBL";
	var isEthersSigner = function (signer) {
	  return signer.signMessage !== undefined;
	};
	var signToProtocol = function (signer) {
	  return __awaiter$s(void 0, void 0, void 0, function () {
	    var myAddress;
	    return __generator$s(this, function (_a) {
	      switch (_a.label) {
	        case 0:
	          if (!isEthersSigner(signer)) return [3 /*break*/, 2];
	          return [4 /*yield*/, signer.signMessage(MESSAGE_TO_BE_SIGNED)];
	        case 1:
	          return [2 /*return*/, _a.sent()];
	        case 2:
	          return [4 /*yield*/, signer.eth.getAccounts()];
	        case 3:
	          myAddress = _a.sent()[0];
	          return [4 /*yield*/, signer.eth.personal.sign(MESSAGE_TO_BE_SIGNED, myAddress, "")];
	        case 4:
	          return [2 /*return*/, _a.sent()];
	      }
	    });
	  });
	};
	signToProtocol_1 = Sign.signToProtocol = signToProtocol;

	var VWBLProtocol$1 = {};

	var contractName$4 = "VWBL";
	var abi$7 = [
		{
			inputs: [
				{
					internalType: "string",
					name: "_baseURI",
					type: "string"
				},
				{
					internalType: "address",
					name: "_gatewayContract",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "approved",
					type: "address"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "Approval",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: false,
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "ApprovalForAll",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "previousOwner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "OwnershipTransferred",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "Transfer",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "address",
					name: "oldGatewayContract",
					type: "address"
				},
				{
					indexed: false,
					internalType: "address",
					name: "newGatewayContract",
					type: "address"
				}
			],
			name: "gatewayContractChanged",
			type: "event"
		},
		{
			inputs: [
			],
			name: "INVERSE_BASIS_POINT",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "approve",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				}
			],
			name: "balanceOf",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "baseURI",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "counter",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "gatewayContract",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getApproved",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "minter",
					type: "address"
				}
			],
			name: "getTokenByMinter",
			outputs: [
				{
					internalType: "uint256[]",
					name: "",
					type: "uint256[]"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "address",
					name: "operator",
					type: "address"
				}
			],
			name: "isApprovedForAll",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "name",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "owner",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "ownerOf",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "renounceOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_tokenId",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_salePrice",
					type: "uint256"
				}
			],
			name: "royaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "receiver",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltyAmount",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "safeTransferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "setApprovalForAll",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "bytes4",
					name: "interfaceId",
					type: "bytes4"
				}
			],
			name: "supportsInterface",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "symbol",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToRoyaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "recipient",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltiesPercentage",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToTokenInfo",
			outputs: [
				{
					internalType: "bytes32",
					name: "documentId",
					type: "bytes32"
				},
				{
					internalType: "address",
					name: "minterAddress",
					type: "address"
				},
				{
					internalType: "string",
					name: "getKeyURl",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenOfOwnerByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "tokenURI",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "totalSupply",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "transferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "transferOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_baseURI",
					type: "string"
				}
			],
			name: "setBaseURI",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newGatewayContract",
					type: "address"
				}
			],
			name: "setGatewayContract",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getFee",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_getKeyURl",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_royaltiesPercentage",
					type: "uint256"
				},
				{
					internalType: "bytes32",
					name: "_documentId",
					type: "bytes32"
				}
			],
			name: "mint",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "payable",
			type: "function",
			payable: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getMinter",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		}
	];
	var metadata$2 = "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gatewayContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGatewayContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGatewayContract\",\"type\":\"address\"}],\"name\":\"gatewayContractChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVERSE_BASIS_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getTokenByMinter\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_getKeyURl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royaltiesPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_documentId\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGatewayContract\",\"type\":\"address\"}],\"name\":\"setGatewayContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToTokenInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"documentId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"getKeyURl\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/ERC721/VWBL.sol\":\"VWBL\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5522afc5c222c810d9ad67c45f37cb7169452fcf76692cad10ac8153c068daa\",\"dweb:/ipfs/QmX4XgnDp7pyvojQ6g5tacrUMCf7TED2qC2vERH9Xh9feZ\"]},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7dbcedc364fce0ab5e54d21d4cbd91a97959f52c0674cf5c36a314bb58308f62\",\"dweb:/ipfs/QmfYpqHKtu3bSQ9FGvLwzdxRNykStpVPtoLNTaM1KBKj6E\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://afbedcf17f31db719e6fdc56caa8f458799c5fa2eb94cb1e94ef18f89af85768\",\"dweb:/ipfs/QmVmqRdBfbgYThpZSoAJ5o9mnAMjx8mCHHjv3Rh8cQAAg3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/ERC721/IVWBL.sol\":{\"keccak256\":\"0xd1cd117ad130b4f55ebae17068fedb44fa0d37b9cb554280ea9dc23ed301908f\",\"urls\":[\"bzz-raw://6dbe701ade60d69e9d1e66b87b870f314535591547a6c9582c3e9591dbf5db17\",\"dweb:/ipfs/QmTCpsj59w2dNADxyRaVT5uthA72CNgBLKEhCeKLH6E2HK\"]},\"project:/contracts/ERC721/VWBL.sol\":{\"keccak256\":\"0xdd5578ce1e6ba247bedeb2b54894c50eb213b22b1853cc76c553014fda21fb85\",\"urls\":[\"bzz-raw://2e0b04a204f9904ec5ba991811eb869781c3a762061ed81d20c76b4fa17165ca\",\"dweb:/ipfs/QmbRRcYf6RdrZJ9u5SmAwH3wWCktHYwqsMX7feLdMUT79Z\"]},\"project:/contracts/ERC721/gateway/IVWBLGateway.sol\":{\"keccak256\":\"0x3acaee4c605c491e2c83c6a49cbddd0b54c1662283f41abeeae54c9adf78b63c\",\"license\":\"ISC\",\"urls\":[\"bzz-raw://b0d7d0466ae7ba1c850f4c6376d1acd39026c2017d2e2b670c2d973ad555dbd8\",\"dweb:/ipfs/QmcZWX4n5kcqG3N1TsE6by1BzcUVTPKfDZZGgQZPkzYABX\"]}},\"version\":1}";
	var bytecode$4 = "0x60806040526000600a553480156200001657600080fd5b50604051620027dd380380620027dd833981016040819052620000399162000217565b6040805180820182526004808252631595d09360e21b60208084018281528551808701909652928552840152815191929162000078916000916200013e565b5080516200008e9060019060208401906200013e565b505050620000ab620000a5620000e860201b60201c565b620000ec565b8151620000c090600e9060208501906200013e565b50600f80546001600160a01b0319166001600160a01b03929092169190911790555062000345565b3390565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200014c9062000308565b90600052602060002090601f016020900481019282620001705760008555620001bb565b82601f106200018b57805160ff1916838001178555620001bb565b82800160010185558215620001bb579182015b82811115620001bb5782518255916020019190600101906200019e565b50620001c9929150620001cd565b5090565b5b80821115620001c95760008155600101620001ce565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200021257600080fd5b919050565b600080604083850312156200022b57600080fd5b82516001600160401b03808211156200024357600080fd5b818501915085601f8301126200025857600080fd5b8151818111156200026d576200026d620001e4565b604051601f8201601f19908116603f01168101908382118183101715620002985762000298620001e4565b81604052828152602093508884848701011115620002b557600080fd5b600091505b82821015620002d95784820184015181830185015290830190620002ba565b82821115620002eb5760008484830101525b9550620002fd915050858201620001fa565b925050509250929050565b600181811c908216806200031d57607f821691505b602082108114156200033f57634e487b7160e01b600052602260045260246000fd5b50919050565b61248880620003556000396000f3fe6080604052600436106101e35760003560e01c80636352211e11610102578063c87b56dd11610095578063de5bb4b711610064578063de5bb4b7146105ca578063e985e9c5146105dd578063eb0cde1d14610626578063f2fde38b1461064657600080fd5b8063c87b56dd14610552578063cae6047f14610572578063ce5af33614610588578063ced72f87146105b557600080fd5b80638da5cb5b116100d15780638da5cb5b146104df57806395d89b41146104fd578063a22cb46514610512578063b88d4fde1461053257600080fd5b80636352211e146104755780636c0360eb1461049557806370a08231146104aa578063715018a6146104ca57600080fd5b80632f745c591161017a57806355f804b31161014957806355f804b3146103d75780635b7121f8146103f75780635fb8bcd51461043057806361bc221a1461045f57600080fd5b80632f745c591461035757806342842e0e146103775780634f6ccce71461039757806350932cb5146103b757600080fd5b806318160ddd116101b657806318160ddd1461029957806319daf1bf146102b857806323b872dd146103175780632a55205a1461033757600080fd5b806301ffc9a7146101e857806306fdde031461021d578063081812fc1461023f578063095ea7b314610277575b600080fd5b3480156101f457600080fd5b50610208610203366004611dc3565b610666565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610232610691565b6040516102149190611e38565b34801561024b57600080fd5b5061025f61025a366004611e4b565b610723565b6040516001600160a01b039091168152602001610214565b34801561028357600080fd5b50610297610292366004611e80565b6107bd565b005b3480156102a557600080fd5b506008545b604051908152602001610214565b3480156102c457600080fd5b506102f86102d3366004611e4b565b600c60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610214565b34801561032357600080fd5b50610297610332366004611eaa565b6108d3565b34801561034357600080fd5b506102f8610352366004611ee6565b610904565b34801561036357600080fd5b506102aa610372366004611e80565b61095e565b34801561038357600080fd5b50610297610392366004611eaa565b6109f4565b3480156103a357600080fd5b506102aa6103b2366004611e4b565b610a0f565b3480156103c357600080fd5b506102976103d2366004611f08565b610aa2565b3480156103e357600080fd5b506102976103f2366004611fcf565b610b48565b34801561040357600080fd5b5061025f610412366004611e4b565b6000908152600b60205260409020600101546001600160a01b031690565b34801561043c57600080fd5b5061045061044b366004611e4b565b610b89565b60405161021493929190612004565b34801561046b57600080fd5b506102aa600a5481565b34801561048157600080fd5b5061025f610490366004611e4b565b610c3e565b3480156104a157600080fd5b50610232610cb5565b3480156104b657600080fd5b506102aa6104c5366004611f08565b610d43565b3480156104d657600080fd5b50610297610dca565b3480156104eb57600080fd5b50600d546001600160a01b031661025f565b34801561050957600080fd5b50610232610e00565b34801561051e57600080fd5b5061029761052d366004612037565b610e0f565b34801561053e57600080fd5b5061029761054d366004612073565b610e1a565b34801561055e57600080fd5b5061023261056d366004611e4b565b610e52565b34801561057e57600080fd5b506102aa61271081565b34801561059457600080fd5b506105a86105a3366004611f08565b610f2d565b60405161021491906120ef565b3480156105c157600080fd5b506102aa611044565b6102aa6105d8366004612133565b6110b7565b3480156105e957600080fd5b506102086105f8366004612181565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561063257600080fd5b50600f5461025f906001600160a01b031681565b34801561065257600080fd5b50610297610661366004611f08565b61113c565b60006001600160e01b0319821663152a902d60e11b148061068b575061068b826111d7565b92915050565b6060600080546106a0906121b4565b80601f01602080910402602001604051908101604052809291908181526020018280546106cc906121b4565b80156107195780601f106106ee57610100808354040283529160200191610719565b820191906000526020600020905b8154815290600101906020018083116106fc57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107a15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006107c882610c3e565b9050806001600160a01b0316836001600160a01b031614156108365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610798565b336001600160a01b0382161480610852575061085281336105f8565b6108c45760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610798565b6108ce83836111fc565b505050565b6108dd338261126a565b6108f95760405162461bcd60e51b8152600401610798906121ef565b6108ce838383611361565b6000828152600c60209081526040808320815180830190925280546001600160a01b031682526001015491810182905282918290612710906109469087612256565b610950919061228b565b915196919550909350505050565b600061096983610d43565b82106109cb5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610798565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6108ce83838360405180602001604052806000815250610e1a565b6000610a1a60085490565b8210610a7d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610798565b60088281548110610a9057610a9061229f565b90600052602060002001549050919050565b600d546001600160a01b03163314610acc5760405162461bcd60e51b8152600401610798906122b5565b600f546001600160a01b0382811691161415610ae757600080fd5b600f80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9b015b8749c8a182300e9c8c7699c761729b84ff89651162dd89881ff1273f63910160405180910390a15050565b600d546001600160a01b03163314610b725760405162461bcd60e51b8152600401610798906122b5565b8051610b8590600e906020840190611d14565b5050565b600b6020526000908152604090208054600182015460028301805492936001600160a01b0390921692610bbb906121b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610be7906121b4565b8015610c345780601f10610c0957610100808354040283529160200191610c34565b820191906000526020600020905b815481529060010190602001808311610c1757829003601f168201915b5050505050905083565b6000818152600260205260408120546001600160a01b03168061068b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610798565b600e8054610cc2906121b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610cee906121b4565b8015610d3b5780601f10610d1057610100808354040283529160200191610d3b565b820191906000526020600020905b815481529060010190602001808311610d1e57829003601f168201915b505050505081565b60006001600160a01b038216610dae5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610798565b506001600160a01b031660009081526003602052604090205490565b600d546001600160a01b03163314610df45760405162461bcd60e51b8152600401610798906122b5565b610dfe6000611508565b565b6060600180546106a0906121b4565b610b8533838361155a565b610e24338361126a565b610e405760405162461bcd60e51b8152600401610798906121ef565b610e4c84848484611629565b50505050565b6000818152600260205260409020546060906001600160a01b0316610ed15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610798565b6000610edb61165c565b90506000815111610efb5760405180602001604052806000815250610f26565b80610f058461166b565b604051602001610f169291906122ea565b6040516020818303038152906040525b9392505050565b6060600060015b600a548111610f82576000818152600b60205260409020600101546001600160a01b0385811691161415610f705781610f6c81612319565b9250505b80610f7a81612319565b915050610f34565b5060008167ffffffffffffffff811115610f9e57610f9e611f23565b604051908082528060200260200182016040528015610fc7578160200160208202803683370190505b509050600060015b600a54811161103a576000818152600b60205260409020600101546001600160a01b03878116911614156110285780838361100981612319565b94508151811061101b5761101b61229f565b6020026020010181815250505b8061103281612319565b915050610fcf565b5090949350505050565b600f546040805163428c090b60e01b815290516000926001600160a01b03169163428c090b9160048083019260209291908290030181865afa15801561108e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b29190612334565b905090565b6000806110c5838686611769565b600f5460405163292571e360e11b815260048101869052306024820152604481018390529192506001600160a01b03169063524ae3c69034906064016000604051808303818588803b15801561111a57600080fd5b505af115801561112e573d6000803e3d6000fd5b509398975050505050505050565b600d546001600160a01b031633146111665760405162461bcd60e51b8152600401610798906122b5565b6001600160a01b0381166111cb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610798565b6111d481611508565b50565b60006001600160e01b0319821663780e9d6360e01b148061068b575061068b82611830565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061123182610c3e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166112e35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610798565b60006112ee83610c3e565b9050806001600160a01b0316846001600160a01b0316148061133557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113595750836001600160a01b031661134e84610723565b6001600160a01b0316145b949350505050565b826001600160a01b031661137482610c3e565b6001600160a01b0316146113d85760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610798565b6001600160a01b03821661143a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610798565b611445838383611880565b6114506000826111fc565b6001600160a01b038316600090815260036020526040812080546001929061147990849061234d565b90915550506001600160a01b03821660009081526003602052604081208054600192906114a7908490612364565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156115bc5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610798565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611634848484611361565b61164084848484611938565b610e4c5760405162461bcd60e51b81526004016107989061237c565b6060600e80546106a0906121b4565b60608161168f5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156116b957806116a381612319565b91506116b29050600a8361228b565b9150611693565b60008167ffffffffffffffff8111156116d4576116d4611f23565b6040519080825280601f01601f1916602001820160405280156116fe576020820181803683370190505b5090505b84156113595761171360018361234d565b9150611720600a866123ce565b61172b906030612364565b60f81b8183815181106117405761174061229f565b60200101906001600160f81b031916908160001a905350611762600a8661228b565b9450611702565b600080600a6000815461177b90612319565b9182905550604080516060810182528781523360208083019182528284018981526000868152600b8352949094208351815591516001830180546001600160a01b0319166001600160a01b03909216919091179055925180519495509193849391926117ee926002850192910190611d14565b509050506117fc3383611a36565b8315611827576000828152600c6020526040902080546001600160a01b031916331781556001018490555b50949350505050565b60006001600160e01b031982166380ac58cd60e01b148061186157506001600160e01b03198216635b5e139f60e01b145b8061068b57506301ffc9a760e01b6001600160e01b031983161461068b565b6001600160a01b0383166118db576118d681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6118fe565b816001600160a01b0316836001600160a01b0316146118fe576118fe8382611b84565b6001600160a01b038216611915576108ce81611c21565b826001600160a01b0316826001600160a01b0316146108ce576108ce8282611cd0565b60006001600160a01b0384163b15611a2b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061197c9033908990889088906004016123e2565b6020604051808303816000875af19250505080156119b7575060408051601f3d908101601f191682019092526119b49181019061241f565b60015b611a11573d8080156119e5576040519150601f19603f3d011682016040523d82523d6000602084013e6119ea565b606091505b508051611a095760405162461bcd60e51b81526004016107989061237c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611359565b506001949350505050565b6001600160a01b038216611a8c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610798565b6000818152600260205260409020546001600160a01b031615611af15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610798565b611afd60008383611880565b6001600160a01b0382166000908152600360205260408120805460019290611b26908490612364565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001611b9184610d43565b611b9b919061234d565b600083815260076020526040902054909150808214611bee576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611c339060019061234d565b60008381526009602052604081205460088054939450909284908110611c5b57611c5b61229f565b906000526020600020015490508060088381548110611c7c57611c7c61229f565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611cb457611cb461243c565b6001900381819060005260206000200160009055905550505050565b6000611cdb83610d43565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054611d20906121b4565b90600052602060002090601f016020900481019282611d425760008555611d88565b82601f10611d5b57805160ff1916838001178555611d88565b82800160010185558215611d88579182015b82811115611d88578251825591602001919060010190611d6d565b50611d94929150611d98565b5090565b5b80821115611d945760008155600101611d99565b6001600160e01b0319811681146111d457600080fd5b600060208284031215611dd557600080fd5b8135610f2681611dad565b60005b83811015611dfb578181015183820152602001611de3565b83811115610e4c5750506000910152565b60008151808452611e24816020860160208601611de0565b601f01601f19169290920160200192915050565b602081526000610f266020830184611e0c565b600060208284031215611e5d57600080fd5b5035919050565b80356001600160a01b0381168114611e7b57600080fd5b919050565b60008060408385031215611e9357600080fd5b611e9c83611e64565b946020939093013593505050565b600080600060608486031215611ebf57600080fd5b611ec884611e64565b9250611ed660208501611e64565b9150604084013590509250925092565b60008060408385031215611ef957600080fd5b50508035926020909101359150565b600060208284031215611f1a57600080fd5b610f2682611e64565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611f5457611f54611f23565b604051601f8501601f19908116603f01168101908282118183101715611f7c57611f7c611f23565b81604052809350858152868686011115611f9557600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611fc057600080fd5b610f2683833560208501611f39565b600060208284031215611fe157600080fd5b813567ffffffffffffffff811115611ff857600080fd5b61135984828501611faf565b8381526001600160a01b038316602082015260606040820181905260009061202e90830184611e0c565b95945050505050565b6000806040838503121561204a57600080fd5b61205383611e64565b91506020830135801515811461206857600080fd5b809150509250929050565b6000806000806080858703121561208957600080fd5b61209285611e64565b93506120a060208601611e64565b925060408501359150606085013567ffffffffffffffff8111156120c357600080fd5b8501601f810187136120d457600080fd5b6120e387823560208401611f39565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b818110156121275783518352928401929184019160010161210b565b50909695505050505050565b60008060006060848603121561214857600080fd5b833567ffffffffffffffff81111561215f57600080fd5b61216b86828701611faf565b9660208601359650604090950135949350505050565b6000806040838503121561219457600080fd5b61219d83611e64565b91506121ab60208401611e64565b90509250929050565b600181811c908216806121c857607f821691505b602082108114156121e957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561227057612270612240565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261229a5761229a612275565b500490565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600083516122fc818460208801611de0565b835190830190612310818360208801611de0565b01949350505050565b600060001982141561232d5761232d612240565b5060010190565b60006020828403121561234657600080fd5b5051919050565b60008282101561235f5761235f612240565b500390565b6000821982111561237757612377612240565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826123dd576123dd612275565b500690565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061241590830184611e0c565b9695505050505050565b60006020828403121561243157600080fd5b8151610f2681611dad565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209e812897b23f3bd5f661eceb8fe570775f9f4e32346207974efa48501be1e02764736f6c634300080b0033";
	var deployedBytecode$4 = "0x6080604052600436106101e35760003560e01c80636352211e11610102578063c87b56dd11610095578063de5bb4b711610064578063de5bb4b7146105ca578063e985e9c5146105dd578063eb0cde1d14610626578063f2fde38b1461064657600080fd5b8063c87b56dd14610552578063cae6047f14610572578063ce5af33614610588578063ced72f87146105b557600080fd5b80638da5cb5b116100d15780638da5cb5b146104df57806395d89b41146104fd578063a22cb46514610512578063b88d4fde1461053257600080fd5b80636352211e146104755780636c0360eb1461049557806370a08231146104aa578063715018a6146104ca57600080fd5b80632f745c591161017a57806355f804b31161014957806355f804b3146103d75780635b7121f8146103f75780635fb8bcd51461043057806361bc221a1461045f57600080fd5b80632f745c591461035757806342842e0e146103775780634f6ccce71461039757806350932cb5146103b757600080fd5b806318160ddd116101b657806318160ddd1461029957806319daf1bf146102b857806323b872dd146103175780632a55205a1461033757600080fd5b806301ffc9a7146101e857806306fdde031461021d578063081812fc1461023f578063095ea7b314610277575b600080fd5b3480156101f457600080fd5b50610208610203366004611dc3565b610666565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610232610691565b6040516102149190611e38565b34801561024b57600080fd5b5061025f61025a366004611e4b565b610723565b6040516001600160a01b039091168152602001610214565b34801561028357600080fd5b50610297610292366004611e80565b6107bd565b005b3480156102a557600080fd5b506008545b604051908152602001610214565b3480156102c457600080fd5b506102f86102d3366004611e4b565b600c60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610214565b34801561032357600080fd5b50610297610332366004611eaa565b6108d3565b34801561034357600080fd5b506102f8610352366004611ee6565b610904565b34801561036357600080fd5b506102aa610372366004611e80565b61095e565b34801561038357600080fd5b50610297610392366004611eaa565b6109f4565b3480156103a357600080fd5b506102aa6103b2366004611e4b565b610a0f565b3480156103c357600080fd5b506102976103d2366004611f08565b610aa2565b3480156103e357600080fd5b506102976103f2366004611fcf565b610b48565b34801561040357600080fd5b5061025f610412366004611e4b565b6000908152600b60205260409020600101546001600160a01b031690565b34801561043c57600080fd5b5061045061044b366004611e4b565b610b89565b60405161021493929190612004565b34801561046b57600080fd5b506102aa600a5481565b34801561048157600080fd5b5061025f610490366004611e4b565b610c3e565b3480156104a157600080fd5b50610232610cb5565b3480156104b657600080fd5b506102aa6104c5366004611f08565b610d43565b3480156104d657600080fd5b50610297610dca565b3480156104eb57600080fd5b50600d546001600160a01b031661025f565b34801561050957600080fd5b50610232610e00565b34801561051e57600080fd5b5061029761052d366004612037565b610e0f565b34801561053e57600080fd5b5061029761054d366004612073565b610e1a565b34801561055e57600080fd5b5061023261056d366004611e4b565b610e52565b34801561057e57600080fd5b506102aa61271081565b34801561059457600080fd5b506105a86105a3366004611f08565b610f2d565b60405161021491906120ef565b3480156105c157600080fd5b506102aa611044565b6102aa6105d8366004612133565b6110b7565b3480156105e957600080fd5b506102086105f8366004612181565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561063257600080fd5b50600f5461025f906001600160a01b031681565b34801561065257600080fd5b50610297610661366004611f08565b61113c565b60006001600160e01b0319821663152a902d60e11b148061068b575061068b826111d7565b92915050565b6060600080546106a0906121b4565b80601f01602080910402602001604051908101604052809291908181526020018280546106cc906121b4565b80156107195780601f106106ee57610100808354040283529160200191610719565b820191906000526020600020905b8154815290600101906020018083116106fc57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166107a15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006107c882610c3e565b9050806001600160a01b0316836001600160a01b031614156108365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610798565b336001600160a01b0382161480610852575061085281336105f8565b6108c45760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610798565b6108ce83836111fc565b505050565b6108dd338261126a565b6108f95760405162461bcd60e51b8152600401610798906121ef565b6108ce838383611361565b6000828152600c60209081526040808320815180830190925280546001600160a01b031682526001015491810182905282918290612710906109469087612256565b610950919061228b565b915196919550909350505050565b600061096983610d43565b82106109cb5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610798565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6108ce83838360405180602001604052806000815250610e1a565b6000610a1a60085490565b8210610a7d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610798565b60088281548110610a9057610a9061229f565b90600052602060002001549050919050565b600d546001600160a01b03163314610acc5760405162461bcd60e51b8152600401610798906122b5565b600f546001600160a01b0382811691161415610ae757600080fd5b600f80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9b015b8749c8a182300e9c8c7699c761729b84ff89651162dd89881ff1273f63910160405180910390a15050565b600d546001600160a01b03163314610b725760405162461bcd60e51b8152600401610798906122b5565b8051610b8590600e906020840190611d14565b5050565b600b6020526000908152604090208054600182015460028301805492936001600160a01b0390921692610bbb906121b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610be7906121b4565b8015610c345780601f10610c0957610100808354040283529160200191610c34565b820191906000526020600020905b815481529060010190602001808311610c1757829003601f168201915b5050505050905083565b6000818152600260205260408120546001600160a01b03168061068b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610798565b600e8054610cc2906121b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610cee906121b4565b8015610d3b5780601f10610d1057610100808354040283529160200191610d3b565b820191906000526020600020905b815481529060010190602001808311610d1e57829003601f168201915b505050505081565b60006001600160a01b038216610dae5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610798565b506001600160a01b031660009081526003602052604090205490565b600d546001600160a01b03163314610df45760405162461bcd60e51b8152600401610798906122b5565b610dfe6000611508565b565b6060600180546106a0906121b4565b610b8533838361155a565b610e24338361126a565b610e405760405162461bcd60e51b8152600401610798906121ef565b610e4c84848484611629565b50505050565b6000818152600260205260409020546060906001600160a01b0316610ed15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610798565b6000610edb61165c565b90506000815111610efb5760405180602001604052806000815250610f26565b80610f058461166b565b604051602001610f169291906122ea565b6040516020818303038152906040525b9392505050565b6060600060015b600a548111610f82576000818152600b60205260409020600101546001600160a01b0385811691161415610f705781610f6c81612319565b9250505b80610f7a81612319565b915050610f34565b5060008167ffffffffffffffff811115610f9e57610f9e611f23565b604051908082528060200260200182016040528015610fc7578160200160208202803683370190505b509050600060015b600a54811161103a576000818152600b60205260409020600101546001600160a01b03878116911614156110285780838361100981612319565b94508151811061101b5761101b61229f565b6020026020010181815250505b8061103281612319565b915050610fcf565b5090949350505050565b600f546040805163428c090b60e01b815290516000926001600160a01b03169163428c090b9160048083019260209291908290030181865afa15801561108e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b29190612334565b905090565b6000806110c5838686611769565b600f5460405163292571e360e11b815260048101869052306024820152604481018390529192506001600160a01b03169063524ae3c69034906064016000604051808303818588803b15801561111a57600080fd5b505af115801561112e573d6000803e3d6000fd5b509398975050505050505050565b600d546001600160a01b031633146111665760405162461bcd60e51b8152600401610798906122b5565b6001600160a01b0381166111cb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610798565b6111d481611508565b50565b60006001600160e01b0319821663780e9d6360e01b148061068b575061068b82611830565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061123182610c3e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166112e35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610798565b60006112ee83610c3e565b9050806001600160a01b0316846001600160a01b0316148061133557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113595750836001600160a01b031661134e84610723565b6001600160a01b0316145b949350505050565b826001600160a01b031661137482610c3e565b6001600160a01b0316146113d85760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610798565b6001600160a01b03821661143a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610798565b611445838383611880565b6114506000826111fc565b6001600160a01b038316600090815260036020526040812080546001929061147990849061234d565b90915550506001600160a01b03821660009081526003602052604081208054600192906114a7908490612364565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156115bc5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610798565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611634848484611361565b61164084848484611938565b610e4c5760405162461bcd60e51b81526004016107989061237c565b6060600e80546106a0906121b4565b60608161168f5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156116b957806116a381612319565b91506116b29050600a8361228b565b9150611693565b60008167ffffffffffffffff8111156116d4576116d4611f23565b6040519080825280601f01601f1916602001820160405280156116fe576020820181803683370190505b5090505b84156113595761171360018361234d565b9150611720600a866123ce565b61172b906030612364565b60f81b8183815181106117405761174061229f565b60200101906001600160f81b031916908160001a905350611762600a8661228b565b9450611702565b600080600a6000815461177b90612319565b9182905550604080516060810182528781523360208083019182528284018981526000868152600b8352949094208351815591516001830180546001600160a01b0319166001600160a01b03909216919091179055925180519495509193849391926117ee926002850192910190611d14565b509050506117fc3383611a36565b8315611827576000828152600c6020526040902080546001600160a01b031916331781556001018490555b50949350505050565b60006001600160e01b031982166380ac58cd60e01b148061186157506001600160e01b03198216635b5e139f60e01b145b8061068b57506301ffc9a760e01b6001600160e01b031983161461068b565b6001600160a01b0383166118db576118d681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6118fe565b816001600160a01b0316836001600160a01b0316146118fe576118fe8382611b84565b6001600160a01b038216611915576108ce81611c21565b826001600160a01b0316826001600160a01b0316146108ce576108ce8282611cd0565b60006001600160a01b0384163b15611a2b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061197c9033908990889088906004016123e2565b6020604051808303816000875af19250505080156119b7575060408051601f3d908101601f191682019092526119b49181019061241f565b60015b611a11573d8080156119e5576040519150601f19603f3d011682016040523d82523d6000602084013e6119ea565b606091505b508051611a095760405162461bcd60e51b81526004016107989061237c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611359565b506001949350505050565b6001600160a01b038216611a8c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610798565b6000818152600260205260409020546001600160a01b031615611af15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610798565b611afd60008383611880565b6001600160a01b0382166000908152600360205260408120805460019290611b26908490612364565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001611b9184610d43565b611b9b919061234d565b600083815260076020526040902054909150808214611bee576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611c339060019061234d565b60008381526009602052604081205460088054939450909284908110611c5b57611c5b61229f565b906000526020600020015490508060088381548110611c7c57611c7c61229f565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611cb457611cb461243c565b6001900381819060005260206000200160009055905550505050565b6000611cdb83610d43565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054611d20906121b4565b90600052602060002090601f016020900481019282611d425760008555611d88565b82601f10611d5b57805160ff1916838001178555611d88565b82800160010185558215611d88579182015b82811115611d88578251825591602001919060010190611d6d565b50611d94929150611d98565b5090565b5b80821115611d945760008155600101611d99565b6001600160e01b0319811681146111d457600080fd5b600060208284031215611dd557600080fd5b8135610f2681611dad565b60005b83811015611dfb578181015183820152602001611de3565b83811115610e4c5750506000910152565b60008151808452611e24816020860160208601611de0565b601f01601f19169290920160200192915050565b602081526000610f266020830184611e0c565b600060208284031215611e5d57600080fd5b5035919050565b80356001600160a01b0381168114611e7b57600080fd5b919050565b60008060408385031215611e9357600080fd5b611e9c83611e64565b946020939093013593505050565b600080600060608486031215611ebf57600080fd5b611ec884611e64565b9250611ed660208501611e64565b9150604084013590509250925092565b60008060408385031215611ef957600080fd5b50508035926020909101359150565b600060208284031215611f1a57600080fd5b610f2682611e64565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611f5457611f54611f23565b604051601f8501601f19908116603f01168101908282118183101715611f7c57611f7c611f23565b81604052809350858152868686011115611f9557600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611fc057600080fd5b610f2683833560208501611f39565b600060208284031215611fe157600080fd5b813567ffffffffffffffff811115611ff857600080fd5b61135984828501611faf565b8381526001600160a01b038316602082015260606040820181905260009061202e90830184611e0c565b95945050505050565b6000806040838503121561204a57600080fd5b61205383611e64565b91506020830135801515811461206857600080fd5b809150509250929050565b6000806000806080858703121561208957600080fd5b61209285611e64565b93506120a060208601611e64565b925060408501359150606085013567ffffffffffffffff8111156120c357600080fd5b8501601f810187136120d457600080fd5b6120e387823560208401611f39565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b818110156121275783518352928401929184019160010161210b565b50909695505050505050565b60008060006060848603121561214857600080fd5b833567ffffffffffffffff81111561215f57600080fd5b61216b86828701611faf565b9660208601359650604090950135949350505050565b6000806040838503121561219457600080fd5b61219d83611e64565b91506121ab60208401611e64565b90509250929050565b600181811c908216806121c857607f821691505b602082108114156121e957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561227057612270612240565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261229a5761229a612275565b500490565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600083516122fc818460208801611de0565b835190830190612310818360208801611de0565b01949350505050565b600060001982141561232d5761232d612240565b5060010190565b60006020828403121561234657600080fd5b5051919050565b60008282101561235f5761235f612240565b500390565b6000821982111561237757612377612240565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000826123dd576123dd612275565b500690565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061241590830184611e0c565b9695505050505050565b60006020828403121561243157600080fd5b8151610f2681611dad565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209e812897b23f3bd5f661eceb8fe570775f9f4e32346207974efa48501be1e02764736f6c634300080b0033";
	var immutableReferences$1 = {
	};
	var generatedSources$1 = [
		{
			ast: {
				nodeType: "YulBlock",
				src: "0:1889:27",
				statements: [
					{
						nodeType: "YulBlock",
						src: "6:3:27",
						statements: [
						]
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "46:95:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "63:1:27",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "70:3:27",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "75:10:27",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "66:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "66:20:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "56:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "56:31:27"
									},
									nodeType: "YulExpressionStatement",
									src: "56:31:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "103:1:27",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "106:4:27",
												type: "",
												value: "0x41"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "96:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "96:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "96:15:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "127:1:27",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "130:4:27",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "120:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "120:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "120:15:27"
								}
							]
						},
						name: "panic_error_0x41",
						nodeType: "YulFunctionDefinition",
						src: "14:127:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "206:117:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "216:22:27",
									value: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "231:6:27"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "225:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "225:13:27"
									},
									variableNames: [
										{
											name: "value",
											nodeType: "YulIdentifier",
											src: "216:5:27"
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "301:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "310:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "313:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "303:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "303:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "303:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value",
														nodeType: "YulIdentifier",
														src: "260:5:27"
													},
													{
														"arguments": [
															{
																name: "value",
																nodeType: "YulIdentifier",
																src: "271:5:27"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "286:3:27",
																				type: "",
																				value: "160"
																			},
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "291:1:27",
																				type: "",
																				value: "1"
																			}
																		],
																		functionName: {
																			name: "shl",
																			nodeType: "YulIdentifier",
																			src: "282:3:27"
																		},
																		nodeType: "YulFunctionCall",
																		src: "282:11:27"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "295:1:27",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "sub",
																	nodeType: "YulIdentifier",
																	src: "278:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "278:19:27"
															}
														],
														functionName: {
															name: "and",
															nodeType: "YulIdentifier",
															src: "267:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "267:31:27"
													}
												],
												functionName: {
													name: "eq",
													nodeType: "YulIdentifier",
													src: "257:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "257:42:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "250:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "250:50:27"
									},
									nodeType: "YulIf",
									src: "247:70:27"
								}
							]
						},
						name: "abi_decode_address_fromMemory",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "offset",
								nodeType: "YulTypedName",
								src: "185:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "196:5:27",
								type: ""
							}
						],
						src: "146:177:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "436:1066:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "482:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "491:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "494:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "484:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "484:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "484:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "457:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "466:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "453:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "453:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "478:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "449:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "449:32:27"
									},
									nodeType: "YulIf",
									src: "446:52:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "507:30:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "527:9:27"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "521:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "521:16:27"
									},
									variables: [
										{
											name: "offset",
											nodeType: "YulTypedName",
											src: "511:6:27",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "546:28:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "564:2:27",
														type: "",
														value: "64"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "568:1:27",
														type: "",
														value: "1"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "560:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "560:10:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "572:1:27",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "sub",
											nodeType: "YulIdentifier",
											src: "556:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "556:18:27"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "550:2:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "601:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "610:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "613:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "603:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "603:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "603:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "589:6:27"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "597:2:27"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "586:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "586:14:27"
									},
									nodeType: "YulIf",
									src: "583:34:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "626:32:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "640:9:27"
											},
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "651:6:27"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "636:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "636:22:27"
									},
									variables: [
										{
											name: "_2",
											nodeType: "YulTypedName",
											src: "630:2:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "706:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "715:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "718:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "708:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "708:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "708:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "_2",
																nodeType: "YulIdentifier",
																src: "685:2:27"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "689:4:27",
																type: "",
																value: "0x1f"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "681:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "681:13:27"
													},
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "696:7:27"
													}
												],
												functionName: {
													name: "slt",
													nodeType: "YulIdentifier",
													src: "677:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "677:27:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "670:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "670:35:27"
									},
									nodeType: "YulIf",
									src: "667:55:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "731:19:27",
									value: {
										"arguments": [
											{
												name: "_2",
												nodeType: "YulIdentifier",
												src: "747:2:27"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "741:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "741:9:27"
									},
									variables: [
										{
											name: "_3",
											nodeType: "YulTypedName",
											src: "735:2:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "773:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x41",
														nodeType: "YulIdentifier",
														src: "775:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "775:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "775:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "_3",
												nodeType: "YulIdentifier",
												src: "765:2:27"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "769:2:27"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "762:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "762:10:27"
									},
									nodeType: "YulIf",
									src: "759:36:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "804:17:27",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "818:2:27",
												type: "",
												value: "31"
											}
										],
										functionName: {
											name: "not",
											nodeType: "YulIdentifier",
											src: "814:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "814:7:27"
									},
									variables: [
										{
											name: "_4",
											nodeType: "YulTypedName",
											src: "808:2:27",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "830:23:27",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "850:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "844:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "844:9:27"
									},
									variables: [
										{
											name: "memPtr",
											nodeType: "YulTypedName",
											src: "834:6:27",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "862:71:27",
									value: {
										"arguments": [
											{
												name: "memPtr",
												nodeType: "YulIdentifier",
												src: "884:6:27"
											},
											{
												"arguments": [
													{
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				name: "_3",
																				nodeType: "YulIdentifier",
																				src: "908:2:27"
																			},
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "912:4:27",
																				type: "",
																				value: "0x1f"
																			}
																		],
																		functionName: {
																			name: "add",
																			nodeType: "YulIdentifier",
																			src: "904:3:27"
																		},
																		nodeType: "YulFunctionCall",
																		src: "904:13:27"
																	},
																	{
																		name: "_4",
																		nodeType: "YulIdentifier",
																		src: "919:2:27"
																	}
																],
																functionName: {
																	name: "and",
																	nodeType: "YulIdentifier",
																	src: "900:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "900:22:27"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "924:2:27",
																type: "",
																value: "63"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "896:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "896:31:27"
													},
													{
														name: "_4",
														nodeType: "YulIdentifier",
														src: "929:2:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "892:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "892:40:27"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "880:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "880:53:27"
									},
									variables: [
										{
											name: "newFreePtr",
											nodeType: "YulTypedName",
											src: "866:10:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "992:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x41",
														nodeType: "YulIdentifier",
														src: "994:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "994:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "994:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "newFreePtr",
														nodeType: "YulIdentifier",
														src: "951:10:27"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "963:2:27"
													}
												],
												functionName: {
													name: "gt",
													nodeType: "YulIdentifier",
													src: "948:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "948:18:27"
											},
											{
												"arguments": [
													{
														name: "newFreePtr",
														nodeType: "YulIdentifier",
														src: "971:10:27"
													},
													{
														name: "memPtr",
														nodeType: "YulIdentifier",
														src: "983:6:27"
													}
												],
												functionName: {
													name: "lt",
													nodeType: "YulIdentifier",
													src: "968:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "968:22:27"
											}
										],
										functionName: {
											name: "or",
											nodeType: "YulIdentifier",
											src: "945:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "945:46:27"
									},
									nodeType: "YulIf",
									src: "942:72:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1030:2:27",
												type: "",
												value: "64"
											},
											{
												name: "newFreePtr",
												nodeType: "YulIdentifier",
												src: "1034:10:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "1023:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "1023:22:27"
									},
									nodeType: "YulExpressionStatement",
									src: "1023:22:27"
								},
								{
									expression: {
										"arguments": [
											{
												name: "memPtr",
												nodeType: "YulIdentifier",
												src: "1061:6:27"
											},
											{
												name: "_3",
												nodeType: "YulIdentifier",
												src: "1069:2:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "1054:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "1054:18:27"
									},
									nodeType: "YulExpressionStatement",
									src: "1054:18:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "1081:14:27",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "1091:4:27",
										type: "",
										value: "0x20"
									},
									variables: [
										{
											name: "_5",
											nodeType: "YulTypedName",
											src: "1085:2:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "1141:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1150:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1153:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "1143:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "1143:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "1143:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "_2",
																nodeType: "YulIdentifier",
																src: "1118:2:27"
															},
															{
																name: "_3",
																nodeType: "YulIdentifier",
																src: "1122:2:27"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "1114:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "1114:11:27"
													},
													{
														name: "_5",
														nodeType: "YulIdentifier",
														src: "1127:2:27"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1110:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "1110:20:27"
											},
											{
												name: "dataEnd",
												nodeType: "YulIdentifier",
												src: "1132:7:27"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "1107:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "1107:33:27"
									},
									nodeType: "YulIf",
									src: "1104:53:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "1166:10:27",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "1175:1:27",
										type: "",
										value: "0"
									},
									variables: [
										{
											name: "i",
											nodeType: "YulTypedName",
											src: "1170:1:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "1231:83:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			name: "memPtr",
																			nodeType: "YulIdentifier",
																			src: "1260:6:27"
																		},
																		{
																			name: "i",
																			nodeType: "YulIdentifier",
																			src: "1268:1:27"
																		}
																	],
																	functionName: {
																		name: "add",
																		nodeType: "YulIdentifier",
																		src: "1256:3:27"
																	},
																	nodeType: "YulFunctionCall",
																	src: "1256:14:27"
																},
																{
																	name: "_5",
																	nodeType: "YulIdentifier",
																	src: "1272:2:27"
																}
															],
															functionName: {
																name: "add",
																nodeType: "YulIdentifier",
																src: "1252:3:27"
															},
															nodeType: "YulFunctionCall",
															src: "1252:23:27"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					name: "_2",
																					nodeType: "YulIdentifier",
																					src: "1291:2:27"
																				},
																				{
																					name: "i",
																					nodeType: "YulIdentifier",
																					src: "1295:1:27"
																				}
																			],
																			functionName: {
																				name: "add",
																				nodeType: "YulIdentifier",
																				src: "1287:3:27"
																			},
																			nodeType: "YulFunctionCall",
																			src: "1287:10:27"
																		},
																		{
																			name: "_5",
																			nodeType: "YulIdentifier",
																			src: "1299:2:27"
																		}
																	],
																	functionName: {
																		name: "add",
																		nodeType: "YulIdentifier",
																		src: "1283:3:27"
																	},
																	nodeType: "YulFunctionCall",
																	src: "1283:19:27"
																}
															],
															functionName: {
																name: "mload",
																nodeType: "YulIdentifier",
																src: "1277:5:27"
															},
															nodeType: "YulFunctionCall",
															src: "1277:26:27"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "1245:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "1245:59:27"
												},
												nodeType: "YulExpressionStatement",
												src: "1245:59:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "i",
												nodeType: "YulIdentifier",
												src: "1196:1:27"
											},
											{
												name: "_3",
												nodeType: "YulIdentifier",
												src: "1199:2:27"
											}
										],
										functionName: {
											name: "lt",
											nodeType: "YulIdentifier",
											src: "1193:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "1193:9:27"
									},
									nodeType: "YulForLoop",
									post: {
										nodeType: "YulBlock",
										src: "1203:19:27",
										statements: [
											{
												nodeType: "YulAssignment",
												src: "1205:15:27",
												value: {
													"arguments": [
														{
															name: "i",
															nodeType: "YulIdentifier",
															src: "1214:1:27"
														},
														{
															name: "_5",
															nodeType: "YulIdentifier",
															src: "1217:2:27"
														}
													],
													functionName: {
														name: "add",
														nodeType: "YulIdentifier",
														src: "1210:3:27"
													},
													nodeType: "YulFunctionCall",
													src: "1210:10:27"
												},
												variableNames: [
													{
														name: "i",
														nodeType: "YulIdentifier",
														src: "1205:1:27"
													}
												]
											}
										]
									},
									pre: {
										nodeType: "YulBlock",
										src: "1189:3:27",
										statements: [
										]
									},
									src: "1185:129:27"
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "1344:59:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			name: "memPtr",
																			nodeType: "YulIdentifier",
																			src: "1373:6:27"
																		},
																		{
																			name: "_3",
																			nodeType: "YulIdentifier",
																			src: "1381:2:27"
																		}
																	],
																	functionName: {
																		name: "add",
																		nodeType: "YulIdentifier",
																		src: "1369:3:27"
																	},
																	nodeType: "YulFunctionCall",
																	src: "1369:15:27"
																},
																{
																	name: "_5",
																	nodeType: "YulIdentifier",
																	src: "1386:2:27"
																}
															],
															functionName: {
																name: "add",
																nodeType: "YulIdentifier",
																src: "1365:3:27"
															},
															nodeType: "YulFunctionCall",
															src: "1365:24:27"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1391:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "1358:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "1358:35:27"
												},
												nodeType: "YulExpressionStatement",
												src: "1358:35:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "i",
												nodeType: "YulIdentifier",
												src: "1329:1:27"
											},
											{
												name: "_3",
												nodeType: "YulIdentifier",
												src: "1332:2:27"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "1326:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "1326:9:27"
									},
									nodeType: "YulIf",
									src: "1323:80:27"
								},
								{
									nodeType: "YulAssignment",
									src: "1412:16:27",
									value: {
										name: "memPtr",
										nodeType: "YulIdentifier",
										src: "1422:6:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "1412:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "1437:59:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "1481:9:27"
													},
													{
														name: "_5",
														nodeType: "YulIdentifier",
														src: "1492:2:27"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1477:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "1477:18:27"
											}
										],
										functionName: {
											name: "abi_decode_address_fromMemory",
											nodeType: "YulIdentifier",
											src: "1447:29:27"
										},
										nodeType: "YulFunctionCall",
										src: "1447:49:27"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "1437:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_string_memory_ptrt_address_fromMemory",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "394:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "405:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "417:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "425:6:27",
								type: ""
							}
						],
						src: "328:1174:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "1562:325:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "1572:22:27",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1586:1:27",
												type: "",
												value: "1"
											},
											{
												name: "data",
												nodeType: "YulIdentifier",
												src: "1589:4:27"
											}
										],
										functionName: {
											name: "shr",
											nodeType: "YulIdentifier",
											src: "1582:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "1582:12:27"
									},
									variableNames: [
										{
											name: "length",
											nodeType: "YulIdentifier",
											src: "1572:6:27"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "1603:38:27",
									value: {
										"arguments": [
											{
												name: "data",
												nodeType: "YulIdentifier",
												src: "1633:4:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1639:1:27",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "and",
											nodeType: "YulIdentifier",
											src: "1629:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "1629:12:27"
									},
									variables: [
										{
											name: "outOfPlaceEncoding",
											nodeType: "YulTypedName",
											src: "1607:18:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "1680:31:27",
										statements: [
											{
												nodeType: "YulAssignment",
												src: "1682:27:27",
												value: {
													"arguments": [
														{
															name: "length",
															nodeType: "YulIdentifier",
															src: "1696:6:27"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1704:4:27",
															type: "",
															value: "0x7f"
														}
													],
													functionName: {
														name: "and",
														nodeType: "YulIdentifier",
														src: "1692:3:27"
													},
													nodeType: "YulFunctionCall",
													src: "1692:17:27"
												},
												variableNames: [
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "1682:6:27"
													}
												]
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "outOfPlaceEncoding",
												nodeType: "YulIdentifier",
												src: "1660:18:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "1653:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "1653:26:27"
									},
									nodeType: "YulIf",
									src: "1650:61:27"
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "1770:111:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1791:1:27",
															type: "",
															value: "0"
														},
														{
															"arguments": [
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "1798:3:27",
																	type: "",
																	value: "224"
																},
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "1803:10:27",
																	type: "",
																	value: "0x4e487b71"
																}
															],
															functionName: {
																name: "shl",
																nodeType: "YulIdentifier",
																src: "1794:3:27"
															},
															nodeType: "YulFunctionCall",
															src: "1794:20:27"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "1784:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "1784:31:27"
												},
												nodeType: "YulExpressionStatement",
												src: "1784:31:27"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1835:1:27",
															type: "",
															value: "4"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1838:4:27",
															type: "",
															value: "0x22"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "1828:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "1828:15:27"
												},
												nodeType: "YulExpressionStatement",
												src: "1828:15:27"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1863:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1866:4:27",
															type: "",
															value: "0x24"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "1856:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "1856:15:27"
												},
												nodeType: "YulExpressionStatement",
												src: "1856:15:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "outOfPlaceEncoding",
												nodeType: "YulIdentifier",
												src: "1726:18:27"
											},
											{
												"arguments": [
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "1749:6:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "1757:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "lt",
													nodeType: "YulIdentifier",
													src: "1746:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "1746:14:27"
											}
										],
										functionName: {
											name: "eq",
											nodeType: "YulIdentifier",
											src: "1723:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "1723:38:27"
									},
									nodeType: "YulIf",
									src: "1720:161:27"
								}
							]
						},
						name: "extract_byte_array_length",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "data",
								nodeType: "YulTypedName",
								src: "1542:4:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "length",
								nodeType: "YulTypedName",
								src: "1551:6:27",
								type: ""
							}
						],
						src: "1507:380:27"
					}
				]
			},
			contents: "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        let _5 := 0x20\n        if gt(add(add(_2, _3), _5), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _3) { i := add(i, _5) }\n        {\n            mstore(add(add(memPtr, i), _5), mload(add(add(_2, i), _5)))\n        }\n        if gt(i, _3)\n        {\n            mstore(add(add(memPtr, _3), _5), 0)\n        }\n        value0 := memPtr\n        value1 := abi_decode_address_fromMemory(add(headStart, _5))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
			id: 27,
			language: "Yul",
			name: "#utility.yul"
		}
	];
	var deployedGeneratedSources$1 = [
		{
			ast: {
				nodeType: "YulBlock",
				src: "0:18518:27",
				statements: [
					{
						nodeType: "YulBlock",
						src: "6:3:27",
						statements: [
						]
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "58:87:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "123:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "132:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "135:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "125:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "125:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "125:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value",
														nodeType: "YulIdentifier",
														src: "81:5:27"
													},
													{
														"arguments": [
															{
																name: "value",
																nodeType: "YulIdentifier",
																src: "92:5:27"
															},
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "103:3:27",
																		type: "",
																		value: "224"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "108:10:27",
																		type: "",
																		value: "0xffffffff"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "99:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "99:20:27"
															}
														],
														functionName: {
															name: "and",
															nodeType: "YulIdentifier",
															src: "88:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "88:32:27"
													}
												],
												functionName: {
													name: "eq",
													nodeType: "YulIdentifier",
													src: "78:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "78:43:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "71:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "71:51:27"
									},
									nodeType: "YulIf",
									src: "68:71:27"
								}
							]
						},
						name: "validator_revert_bytes4",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "47:5:27",
								type: ""
							}
						],
						src: "14:131:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "219:176:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "265:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "274:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "277:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "267:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "267:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "267:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "240:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "249:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "236:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "236:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "261:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "232:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "232:32:27"
									},
									nodeType: "YulIf",
									src: "229:52:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "290:36:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "316:9:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "303:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "303:23:27"
									},
									variables: [
										{
											name: "value",
											nodeType: "YulTypedName",
											src: "294:5:27",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "359:5:27"
											}
										],
										functionName: {
											name: "validator_revert_bytes4",
											nodeType: "YulIdentifier",
											src: "335:23:27"
										},
										nodeType: "YulFunctionCall",
										src: "335:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "335:30:27"
								},
								{
									nodeType: "YulAssignment",
									src: "374:15:27",
									value: {
										name: "value",
										nodeType: "YulIdentifier",
										src: "384:5:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "374:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_bytes4",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "185:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "196:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "208:6:27",
								type: ""
							}
						],
						src: "150:245:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "495:92:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "505:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "517:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "528:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "513:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "513:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "505:4:27"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "547:9:27"
											},
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "value0",
																nodeType: "YulIdentifier",
																src: "572:6:27"
															}
														],
														functionName: {
															name: "iszero",
															nodeType: "YulIdentifier",
															src: "565:6:27"
														},
														nodeType: "YulFunctionCall",
														src: "565:14:27"
													}
												],
												functionName: {
													name: "iszero",
													nodeType: "YulIdentifier",
													src: "558:6:27"
												},
												nodeType: "YulFunctionCall",
												src: "558:22:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "540:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "540:41:27"
									},
									nodeType: "YulExpressionStatement",
									src: "540:41:27"
								}
							]
						},
						name: "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "464:9:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "475:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "486:4:27",
								type: ""
							}
						],
						src: "400:187:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "645:205:27",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "655:10:27",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "664:1:27",
										type: "",
										value: "0"
									},
									variables: [
										{
											name: "i",
											nodeType: "YulTypedName",
											src: "659:1:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "724:63:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															"arguments": [
																{
																	name: "dst",
																	nodeType: "YulIdentifier",
																	src: "749:3:27"
																},
																{
																	name: "i",
																	nodeType: "YulIdentifier",
																	src: "754:1:27"
																}
															],
															functionName: {
																name: "add",
																nodeType: "YulIdentifier",
																src: "745:3:27"
															},
															nodeType: "YulFunctionCall",
															src: "745:11:27"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			name: "src",
																			nodeType: "YulIdentifier",
																			src: "768:3:27"
																		},
																		{
																			name: "i",
																			nodeType: "YulIdentifier",
																			src: "773:1:27"
																		}
																	],
																	functionName: {
																		name: "add",
																		nodeType: "YulIdentifier",
																		src: "764:3:27"
																	},
																	nodeType: "YulFunctionCall",
																	src: "764:11:27"
																}
															],
															functionName: {
																name: "mload",
																nodeType: "YulIdentifier",
																src: "758:5:27"
															},
															nodeType: "YulFunctionCall",
															src: "758:18:27"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "738:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "738:39:27"
												},
												nodeType: "YulExpressionStatement",
												src: "738:39:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "i",
												nodeType: "YulIdentifier",
												src: "685:1:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "688:6:27"
											}
										],
										functionName: {
											name: "lt",
											nodeType: "YulIdentifier",
											src: "682:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "682:13:27"
									},
									nodeType: "YulForLoop",
									post: {
										nodeType: "YulBlock",
										src: "696:19:27",
										statements: [
											{
												nodeType: "YulAssignment",
												src: "698:15:27",
												value: {
													"arguments": [
														{
															name: "i",
															nodeType: "YulIdentifier",
															src: "707:1:27"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "710:2:27",
															type: "",
															value: "32"
														}
													],
													functionName: {
														name: "add",
														nodeType: "YulIdentifier",
														src: "703:3:27"
													},
													nodeType: "YulFunctionCall",
													src: "703:10:27"
												},
												variableNames: [
													{
														name: "i",
														nodeType: "YulIdentifier",
														src: "698:1:27"
													}
												]
											}
										]
									},
									pre: {
										nodeType: "YulBlock",
										src: "678:3:27",
										statements: [
										]
									},
									src: "674:113:27"
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "813:31:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															"arguments": [
																{
																	name: "dst",
																	nodeType: "YulIdentifier",
																	src: "826:3:27"
																},
																{
																	name: "length",
																	nodeType: "YulIdentifier",
																	src: "831:6:27"
																}
															],
															functionName: {
																name: "add",
																nodeType: "YulIdentifier",
																src: "822:3:27"
															},
															nodeType: "YulFunctionCall",
															src: "822:16:27"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "840:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "815:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "815:27:27"
												},
												nodeType: "YulExpressionStatement",
												src: "815:27:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "i",
												nodeType: "YulIdentifier",
												src: "802:1:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "805:6:27"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "799:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "799:13:27"
									},
									nodeType: "YulIf",
									src: "796:48:27"
								}
							]
						},
						name: "copy_memory_to_memory",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "src",
								nodeType: "YulTypedName",
								src: "623:3:27",
								type: ""
							},
							{
								name: "dst",
								nodeType: "YulTypedName",
								src: "628:3:27",
								type: ""
							},
							{
								name: "length",
								nodeType: "YulTypedName",
								src: "633:6:27",
								type: ""
							}
						],
						src: "592:258:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "905:208:27",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "915:26:27",
									value: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "935:5:27"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "929:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "929:12:27"
									},
									variables: [
										{
											name: "length",
											nodeType: "YulTypedName",
											src: "919:6:27",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "pos",
												nodeType: "YulIdentifier",
												src: "957:3:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "962:6:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "950:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "950:19:27"
									},
									nodeType: "YulExpressionStatement",
									src: "950:19:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value",
														nodeType: "YulIdentifier",
														src: "1004:5:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "1011:4:27",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1000:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "1000:16:27"
											},
											{
												"arguments": [
													{
														name: "pos",
														nodeType: "YulIdentifier",
														src: "1022:3:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "1027:4:27",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1018:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "1018:14:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "1034:6:27"
											}
										],
										functionName: {
											name: "copy_memory_to_memory",
											nodeType: "YulIdentifier",
											src: "978:21:27"
										},
										nodeType: "YulFunctionCall",
										src: "978:63:27"
									},
									nodeType: "YulExpressionStatement",
									src: "978:63:27"
								},
								{
									nodeType: "YulAssignment",
									src: "1050:57:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "pos",
														nodeType: "YulIdentifier",
														src: "1065:3:27"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		name: "length",
																		nodeType: "YulIdentifier",
																		src: "1078:6:27"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "1086:2:27",
																		type: "",
																		value: "31"
																	}
																],
																functionName: {
																	name: "add",
																	nodeType: "YulIdentifier",
																	src: "1074:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "1074:15:27"
															},
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "1095:2:27",
																		type: "",
																		value: "31"
																	}
																],
																functionName: {
																	name: "not",
																	nodeType: "YulIdentifier",
																	src: "1091:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "1091:7:27"
															}
														],
														functionName: {
															name: "and",
															nodeType: "YulIdentifier",
															src: "1070:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "1070:29:27"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1061:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "1061:39:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1102:4:27",
												type: "",
												value: "0x20"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "1057:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "1057:50:27"
									},
									variableNames: [
										{
											name: "end",
											nodeType: "YulIdentifier",
											src: "1050:3:27"
										}
									]
								}
							]
						},
						name: "abi_encode_string",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "882:5:27",
								type: ""
							},
							{
								name: "pos",
								nodeType: "YulTypedName",
								src: "889:3:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "end",
								nodeType: "YulTypedName",
								src: "897:3:27",
								type: ""
							}
						],
						src: "855:258:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "1239:99:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "1256:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1267:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "1249:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "1249:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "1249:21:27"
								},
								{
									nodeType: "YulAssignment",
									src: "1279:53:27",
									value: {
										"arguments": [
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "1305:6:27"
											},
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "1317:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "1328:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1313:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "1313:18:27"
											}
										],
										functionName: {
											name: "abi_encode_string",
											nodeType: "YulIdentifier",
											src: "1287:17:27"
										},
										nodeType: "YulFunctionCall",
										src: "1287:45:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "1279:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "1208:9:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "1219:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "1230:4:27",
								type: ""
							}
						],
						src: "1118:220:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "1413:110:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "1459:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1468:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1471:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "1461:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "1461:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "1461:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "1434:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "1443:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "1430:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "1430:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1455:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "1426:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "1426:32:27"
									},
									nodeType: "YulIf",
									src: "1423:52:27"
								},
								{
									nodeType: "YulAssignment",
									src: "1484:33:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "1507:9:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "1494:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "1494:23:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "1484:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "1379:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "1390:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "1402:6:27",
								type: ""
							}
						],
						src: "1343:180:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "1629:102:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "1639:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "1651:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1662:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "1647:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "1647:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "1639:4:27"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "1681:9:27"
											},
											{
												"arguments": [
													{
														name: "value0",
														nodeType: "YulIdentifier",
														src: "1696:6:27"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "1712:3:27",
																		type: "",
																		value: "160"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "1717:1:27",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "1708:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "1708:11:27"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "1721:1:27",
																type: "",
																value: "1"
															}
														],
														functionName: {
															name: "sub",
															nodeType: "YulIdentifier",
															src: "1704:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "1704:19:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "1692:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "1692:32:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "1674:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "1674:51:27"
									},
									nodeType: "YulExpressionStatement",
									src: "1674:51:27"
								}
							]
						},
						name: "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "1598:9:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "1609:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "1620:4:27",
								type: ""
							}
						],
						src: "1528:203:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "1785:124:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "1795:29:27",
									value: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "1817:6:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "1804:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "1804:20:27"
									},
									variableNames: [
										{
											name: "value",
											nodeType: "YulIdentifier",
											src: "1795:5:27"
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "1887:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1896:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1899:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "1889:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "1889:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "1889:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value",
														nodeType: "YulIdentifier",
														src: "1846:5:27"
													},
													{
														"arguments": [
															{
																name: "value",
																nodeType: "YulIdentifier",
																src: "1857:5:27"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "1872:3:27",
																				type: "",
																				value: "160"
																			},
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "1877:1:27",
																				type: "",
																				value: "1"
																			}
																		],
																		functionName: {
																			name: "shl",
																			nodeType: "YulIdentifier",
																			src: "1868:3:27"
																		},
																		nodeType: "YulFunctionCall",
																		src: "1868:11:27"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "1881:1:27",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "sub",
																	nodeType: "YulIdentifier",
																	src: "1864:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "1864:19:27"
															}
														],
														functionName: {
															name: "and",
															nodeType: "YulIdentifier",
															src: "1853:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "1853:31:27"
													}
												],
												functionName: {
													name: "eq",
													nodeType: "YulIdentifier",
													src: "1843:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "1843:42:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "1836:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "1836:50:27"
									},
									nodeType: "YulIf",
									src: "1833:70:27"
								}
							]
						},
						name: "abi_decode_address",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "offset",
								nodeType: "YulTypedName",
								src: "1764:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "1775:5:27",
								type: ""
							}
						],
						src: "1736:173:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "2001:167:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "2047:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "2056:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "2059:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "2049:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "2049:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "2049:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "2022:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2031:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "2018:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "2018:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "2043:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "2014:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "2014:32:27"
									},
									nodeType: "YulIf",
									src: "2011:52:27"
								},
								{
									nodeType: "YulAssignment",
									src: "2072:39:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "2101:9:27"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "2082:18:27"
										},
										nodeType: "YulFunctionCall",
										src: "2082:29:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "2072:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "2120:42:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2147:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "2158:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "2143:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "2143:18:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "2130:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "2130:32:27"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "2120:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "1959:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "1970:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "1982:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "1990:6:27",
								type: ""
							}
						],
						src: "1914:254:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "2274:76:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "2284:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "2296:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "2307:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "2292:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "2292:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "2284:4:27"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "2326:9:27"
											},
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "2337:6:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "2319:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "2319:25:27"
									},
									nodeType: "YulExpressionStatement",
									src: "2319:25:27"
								}
							]
						},
						name: "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "2243:9:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "2254:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "2265:4:27",
								type: ""
							}
						],
						src: "2173:177:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "2484:145:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "2494:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "2506:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "2517:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "2502:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "2502:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "2494:4:27"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "2536:9:27"
											},
											{
												"arguments": [
													{
														name: "value0",
														nodeType: "YulIdentifier",
														src: "2551:6:27"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "2567:3:27",
																		type: "",
																		value: "160"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "2572:1:27",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "2563:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "2563:11:27"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "2576:1:27",
																type: "",
																value: "1"
															}
														],
														functionName: {
															name: "sub",
															nodeType: "YulIdentifier",
															src: "2559:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "2559:19:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "2547:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "2547:32:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "2529:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "2529:51:27"
									},
									nodeType: "YulExpressionStatement",
									src: "2529:51:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2600:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "2611:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "2596:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "2596:18:27"
											},
											{
												name: "value1",
												nodeType: "YulIdentifier",
												src: "2616:6:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "2589:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "2589:34:27"
									},
									nodeType: "YulExpressionStatement",
									src: "2589:34:27"
								}
							]
						},
						name: "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "2445:9:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "2456:6:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "2464:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "2475:4:27",
								type: ""
							}
						],
						src: "2355:274:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "2738:224:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "2784:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "2793:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "2796:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "2786:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "2786:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "2786:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "2759:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2768:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "2755:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "2755:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "2780:2:27",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "2751:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "2751:32:27"
									},
									nodeType: "YulIf",
									src: "2748:52:27"
								},
								{
									nodeType: "YulAssignment",
									src: "2809:39:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "2838:9:27"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "2819:18:27"
										},
										nodeType: "YulFunctionCall",
										src: "2819:29:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "2809:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "2857:48:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2890:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "2901:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "2886:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "2886:18:27"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "2867:18:27"
										},
										nodeType: "YulFunctionCall",
										src: "2867:38:27"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "2857:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "2914:42:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2941:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "2952:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "2937:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "2937:18:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "2924:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "2924:32:27"
									},
									variableNames: [
										{
											name: "value2",
											nodeType: "YulIdentifier",
											src: "2914:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_addresst_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "2688:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "2699:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "2711:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "2719:6:27",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "2727:6:27",
								type: ""
							}
						],
						src: "2634:328:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "3054:161:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "3100:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3109:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3112:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "3102:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "3102:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "3102:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "3075:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "3084:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "3071:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "3071:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3096:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "3067:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "3067:32:27"
									},
									nodeType: "YulIf",
									src: "3064:52:27"
								},
								{
									nodeType: "YulAssignment",
									src: "3125:33:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "3148:9:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "3135:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "3135:23:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "3125:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "3167:42:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "3194:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "3205:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "3190:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "3190:18:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "3177:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "3177:32:27"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "3167:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_uint256t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "3012:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "3023:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "3035:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "3043:6:27",
								type: ""
							}
						],
						src: "2967:248:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "3290:116:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "3336:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3345:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3348:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "3338:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "3338:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "3338:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "3311:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "3320:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "3307:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "3307:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3332:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "3303:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "3303:32:27"
									},
									nodeType: "YulIf",
									src: "3300:52:27"
								},
								{
									nodeType: "YulAssignment",
									src: "3361:39:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "3390:9:27"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "3371:18:27"
										},
										nodeType: "YulFunctionCall",
										src: "3371:29:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "3361:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_address",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "3256:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "3267:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "3279:6:27",
								type: ""
							}
						],
						src: "3220:186:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "3443:95:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3460:1:27",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "3467:3:27",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "3472:10:27",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "3463:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "3463:20:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "3453:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "3453:31:27"
									},
									nodeType: "YulExpressionStatement",
									src: "3453:31:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3500:1:27",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3503:4:27",
												type: "",
												value: "0x41"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "3493:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "3493:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "3493:15:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3524:1:27",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3527:4:27",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "3517:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "3517:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "3517:15:27"
								}
							]
						},
						name: "panic_error_0x41",
						nodeType: "YulFunctionDefinition",
						src: "3411:127:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "3618:557:27",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "3628:28:27",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "3638:18:27",
										type: "",
										value: "0xffffffffffffffff"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "3632:2:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "3683:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x41",
														nodeType: "YulIdentifier",
														src: "3685:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "3685:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "3685:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "3671:6:27"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "3679:2:27"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "3668:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "3668:14:27"
									},
									nodeType: "YulIf",
									src: "3665:40:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "3714:17:27",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3728:2:27",
												type: "",
												value: "31"
											}
										],
										functionName: {
											name: "not",
											nodeType: "YulIdentifier",
											src: "3724:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "3724:7:27"
									},
									variables: [
										{
											name: "_2",
											nodeType: "YulTypedName",
											src: "3718:2:27",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "3740:23:27",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3760:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "3754:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "3754:9:27"
									},
									variables: [
										{
											name: "memPtr",
											nodeType: "YulTypedName",
											src: "3744:6:27",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "3772:73:27",
									value: {
										"arguments": [
											{
												name: "memPtr",
												nodeType: "YulIdentifier",
												src: "3794:6:27"
											},
											{
												"arguments": [
													{
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				name: "length",
																				nodeType: "YulIdentifier",
																				src: "3818:6:27"
																			},
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "3826:2:27",
																				type: "",
																				value: "31"
																			}
																		],
																		functionName: {
																			name: "add",
																			nodeType: "YulIdentifier",
																			src: "3814:3:27"
																		},
																		nodeType: "YulFunctionCall",
																		src: "3814:15:27"
																	},
																	{
																		name: "_2",
																		nodeType: "YulIdentifier",
																		src: "3831:2:27"
																	}
																],
																functionName: {
																	name: "and",
																	nodeType: "YulIdentifier",
																	src: "3810:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "3810:24:27"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "3836:2:27",
																type: "",
																value: "63"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "3806:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "3806:33:27"
													},
													{
														name: "_2",
														nodeType: "YulIdentifier",
														src: "3841:2:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "3802:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "3802:42:27"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "3790:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "3790:55:27"
									},
									variables: [
										{
											name: "newFreePtr",
											nodeType: "YulTypedName",
											src: "3776:10:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "3904:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x41",
														nodeType: "YulIdentifier",
														src: "3906:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "3906:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "3906:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "newFreePtr",
														nodeType: "YulIdentifier",
														src: "3863:10:27"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "3875:2:27"
													}
												],
												functionName: {
													name: "gt",
													nodeType: "YulIdentifier",
													src: "3860:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "3860:18:27"
											},
											{
												"arguments": [
													{
														name: "newFreePtr",
														nodeType: "YulIdentifier",
														src: "3883:10:27"
													},
													{
														name: "memPtr",
														nodeType: "YulIdentifier",
														src: "3895:6:27"
													}
												],
												functionName: {
													name: "lt",
													nodeType: "YulIdentifier",
													src: "3880:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "3880:22:27"
											}
										],
										functionName: {
											name: "or",
											nodeType: "YulIdentifier",
											src: "3857:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "3857:46:27"
									},
									nodeType: "YulIf",
									src: "3854:72:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3942:2:27",
												type: "",
												value: "64"
											},
											{
												name: "newFreePtr",
												nodeType: "YulIdentifier",
												src: "3946:10:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "3935:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "3935:22:27"
									},
									nodeType: "YulExpressionStatement",
									src: "3935:22:27"
								},
								{
									nodeType: "YulAssignment",
									src: "3966:15:27",
									value: {
										name: "memPtr",
										nodeType: "YulIdentifier",
										src: "3975:6:27"
									},
									variableNames: [
										{
											name: "array",
											nodeType: "YulIdentifier",
											src: "3966:5:27"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "memPtr",
												nodeType: "YulIdentifier",
												src: "3997:6:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "4005:6:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "3990:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "3990:22:27"
									},
									nodeType: "YulExpressionStatement",
									src: "3990:22:27"
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "4050:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4059:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4062:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "4052:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "4052:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "4052:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "src",
														nodeType: "YulIdentifier",
														src: "4031:3:27"
													},
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "4036:6:27"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "4027:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "4027:16:27"
											},
											{
												name: "end",
												nodeType: "YulIdentifier",
												src: "4045:3:27"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "4024:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "4024:25:27"
									},
									nodeType: "YulIf",
									src: "4021:45:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "memPtr",
														nodeType: "YulIdentifier",
														src: "4092:6:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "4100:4:27",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "4088:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "4088:17:27"
											},
											{
												name: "src",
												nodeType: "YulIdentifier",
												src: "4107:3:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "4112:6:27"
											}
										],
										functionName: {
											name: "calldatacopy",
											nodeType: "YulIdentifier",
											src: "4075:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "4075:44:27"
									},
									nodeType: "YulExpressionStatement",
									src: "4075:44:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "memPtr",
																nodeType: "YulIdentifier",
																src: "4143:6:27"
															},
															{
																name: "length",
																nodeType: "YulIdentifier",
																src: "4151:6:27"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "4139:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "4139:19:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "4160:4:27",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "4135:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "4135:30:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "4167:1:27",
												type: "",
												value: "0"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "4128:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "4128:41:27"
									},
									nodeType: "YulExpressionStatement",
									src: "4128:41:27"
								}
							]
						},
						name: "abi_decode_available_length_string",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "src",
								nodeType: "YulTypedName",
								src: "3587:3:27",
								type: ""
							},
							{
								name: "length",
								nodeType: "YulTypedName",
								src: "3592:6:27",
								type: ""
							},
							{
								name: "end",
								nodeType: "YulTypedName",
								src: "3600:3:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "array",
								nodeType: "YulTypedName",
								src: "3608:5:27",
								type: ""
							}
						],
						src: "3543:632:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "4233:169:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "4282:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4291:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4294:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "4284:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "4284:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "4284:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "offset",
																nodeType: "YulIdentifier",
																src: "4261:6:27"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "4269:4:27",
																type: "",
																value: "0x1f"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "4257:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "4257:17:27"
													},
													{
														name: "end",
														nodeType: "YulIdentifier",
														src: "4276:3:27"
													}
												],
												functionName: {
													name: "slt",
													nodeType: "YulIdentifier",
													src: "4253:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "4253:27:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "4246:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "4246:35:27"
									},
									nodeType: "YulIf",
									src: "4243:55:27"
								},
								{
									nodeType: "YulAssignment",
									src: "4307:89:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "offset",
														nodeType: "YulIdentifier",
														src: "4355:6:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "4363:4:27",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "4351:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "4351:17:27"
											},
											{
												"arguments": [
													{
														name: "offset",
														nodeType: "YulIdentifier",
														src: "4383:6:27"
													}
												],
												functionName: {
													name: "calldataload",
													nodeType: "YulIdentifier",
													src: "4370:12:27"
												},
												nodeType: "YulFunctionCall",
												src: "4370:20:27"
											},
											{
												name: "end",
												nodeType: "YulIdentifier",
												src: "4392:3:27"
											}
										],
										functionName: {
											name: "abi_decode_available_length_string",
											nodeType: "YulIdentifier",
											src: "4316:34:27"
										},
										nodeType: "YulFunctionCall",
										src: "4316:80:27"
									},
									variableNames: [
										{
											name: "array",
											nodeType: "YulIdentifier",
											src: "4307:5:27"
										}
									]
								}
							]
						},
						name: "abi_decode_string",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "offset",
								nodeType: "YulTypedName",
								src: "4207:6:27",
								type: ""
							},
							{
								name: "end",
								nodeType: "YulTypedName",
								src: "4215:3:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "array",
								nodeType: "YulTypedName",
								src: "4223:5:27",
								type: ""
							}
						],
						src: "4180:222:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "4487:242:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "4533:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4542:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4545:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "4535:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "4535:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "4535:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "4508:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "4517:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "4504:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "4504:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "4529:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "4500:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "4500:32:27"
									},
									nodeType: "YulIf",
									src: "4497:52:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "4558:37:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "4585:9:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "4572:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "4572:23:27"
									},
									variables: [
										{
											name: "offset",
											nodeType: "YulTypedName",
											src: "4562:6:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "4638:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4647:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4650:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "4640:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "4640:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "4640:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "4610:6:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "4618:18:27",
												type: "",
												value: "0xffffffffffffffff"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "4607:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "4607:30:27"
									},
									nodeType: "YulIf",
									src: "4604:50:27"
								},
								{
									nodeType: "YulAssignment",
									src: "4663:60:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "4695:9:27"
													},
													{
														name: "offset",
														nodeType: "YulIdentifier",
														src: "4706:6:27"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "4691:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "4691:22:27"
											},
											{
												name: "dataEnd",
												nodeType: "YulIdentifier",
												src: "4715:7:27"
											}
										],
										functionName: {
											name: "abi_decode_string",
											nodeType: "YulIdentifier",
											src: "4673:17:27"
										},
										nodeType: "YulFunctionCall",
										src: "4673:50:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "4663:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_string_memory_ptr",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "4453:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "4464:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "4476:6:27",
								type: ""
							}
						],
						src: "4407:322:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "4911:211:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "4928:9:27"
											},
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "4939:6:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "4921:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "4921:25:27"
									},
									nodeType: "YulExpressionStatement",
									src: "4921:25:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "4966:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "4977:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "4962:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "4962:18:27"
											},
											{
												"arguments": [
													{
														name: "value1",
														nodeType: "YulIdentifier",
														src: "4986:6:27"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "5002:3:27",
																		type: "",
																		value: "160"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "5007:1:27",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "4998:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "4998:11:27"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "5011:1:27",
																type: "",
																value: "1"
															}
														],
														functionName: {
															name: "sub",
															nodeType: "YulIdentifier",
															src: "4994:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "4994:19:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "4982:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "4982:32:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "4955:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "4955:60:27"
									},
									nodeType: "YulExpressionStatement",
									src: "4955:60:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5035:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5046:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5031:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "5031:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "5051:2:27",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "5024:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "5024:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "5024:30:27"
								},
								{
									nodeType: "YulAssignment",
									src: "5063:53:27",
									value: {
										"arguments": [
											{
												name: "value2",
												nodeType: "YulIdentifier",
												src: "5089:6:27"
											},
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5101:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5112:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5097:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "5097:18:27"
											}
										],
										functionName: {
											name: "abi_encode_string",
											nodeType: "YulIdentifier",
											src: "5071:17:27"
										},
										nodeType: "YulFunctionCall",
										src: "5071:45:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "5063:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_bytes32_t_address_t_string_memory_ptr__to_t_bytes32_t_address_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "4864:9:27",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "4875:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "4883:6:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "4891:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "4902:4:27",
								type: ""
							}
						],
						src: "4734:388:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "5211:263:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "5257:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5266:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5269:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "5259:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "5259:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "5259:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "5232:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5241:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "5228:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "5228:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "5253:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "5224:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "5224:32:27"
									},
									nodeType: "YulIf",
									src: "5221:52:27"
								},
								{
									nodeType: "YulAssignment",
									src: "5282:39:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "5311:9:27"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "5292:18:27"
										},
										nodeType: "YulFunctionCall",
										src: "5292:29:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "5282:6:27"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "5330:45:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5360:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5371:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5356:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "5356:18:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "5343:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "5343:32:27"
									},
									variables: [
										{
											name: "value",
											nodeType: "YulTypedName",
											src: "5334:5:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "5428:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5437:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5440:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "5430:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "5430:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "5430:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value",
														nodeType: "YulIdentifier",
														src: "5397:5:27"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		name: "value",
																		nodeType: "YulIdentifier",
																		src: "5418:5:27"
																	}
																],
																functionName: {
																	name: "iszero",
																	nodeType: "YulIdentifier",
																	src: "5411:6:27"
																},
																nodeType: "YulFunctionCall",
																src: "5411:13:27"
															}
														],
														functionName: {
															name: "iszero",
															nodeType: "YulIdentifier",
															src: "5404:6:27"
														},
														nodeType: "YulFunctionCall",
														src: "5404:21:27"
													}
												],
												functionName: {
													name: "eq",
													nodeType: "YulIdentifier",
													src: "5394:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "5394:32:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "5387:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "5387:40:27"
									},
									nodeType: "YulIf",
									src: "5384:60:27"
								},
								{
									nodeType: "YulAssignment",
									src: "5453:15:27",
									value: {
										name: "value",
										nodeType: "YulIdentifier",
										src: "5463:5:27"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "5453:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_bool",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "5169:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "5180:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "5192:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "5200:6:27",
								type: ""
							}
						],
						src: "5127:347:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "5609:537:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "5656:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5665:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5668:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "5658:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "5658:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "5658:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "5630:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5639:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "5626:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "5626:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "5651:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "5622:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "5622:33:27"
									},
									nodeType: "YulIf",
									src: "5619:53:27"
								},
								{
									nodeType: "YulAssignment",
									src: "5681:39:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "5710:9:27"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "5691:18:27"
										},
										nodeType: "YulFunctionCall",
										src: "5691:29:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "5681:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "5729:48:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5762:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5773:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5758:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "5758:18:27"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "5739:18:27"
										},
										nodeType: "YulFunctionCall",
										src: "5739:38:27"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "5729:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "5786:42:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5813:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5824:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5809:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "5809:18:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "5796:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "5796:32:27"
									},
									variableNames: [
										{
											name: "value2",
											nodeType: "YulIdentifier",
											src: "5786:6:27"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "5837:46:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5868:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5879:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5864:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "5864:18:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "5851:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "5851:32:27"
									},
									variables: [
										{
											name: "offset",
											nodeType: "YulTypedName",
											src: "5841:6:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "5926:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5935:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5938:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "5928:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "5928:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "5928:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "5898:6:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "5906:18:27",
												type: "",
												value: "0xffffffffffffffff"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "5895:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "5895:30:27"
									},
									nodeType: "YulIf",
									src: "5892:50:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "5951:32:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "5965:9:27"
											},
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "5976:6:27"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "5961:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "5961:22:27"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "5955:2:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "6031:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6040:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6043:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "6033:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "6033:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "6033:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "_1",
																nodeType: "YulIdentifier",
																src: "6010:2:27"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "6014:4:27",
																type: "",
																value: "0x1f"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "6006:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "6006:13:27"
													},
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "6021:7:27"
													}
												],
												functionName: {
													name: "slt",
													nodeType: "YulIdentifier",
													src: "6002:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "6002:27:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "5995:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "5995:35:27"
									},
									nodeType: "YulIf",
									src: "5992:55:27"
								},
								{
									nodeType: "YulAssignment",
									src: "6056:84:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "6105:2:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "6109:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "6101:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "6101:11:27"
											},
											{
												"arguments": [
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "6127:2:27"
													}
												],
												functionName: {
													name: "calldataload",
													nodeType: "YulIdentifier",
													src: "6114:12:27"
												},
												nodeType: "YulFunctionCall",
												src: "6114:16:27"
											},
											{
												name: "dataEnd",
												nodeType: "YulIdentifier",
												src: "6132:7:27"
											}
										],
										functionName: {
											name: "abi_decode_available_length_string",
											nodeType: "YulIdentifier",
											src: "6066:34:27"
										},
										nodeType: "YulFunctionCall",
										src: "6066:74:27"
									},
									variableNames: [
										{
											name: "value3",
											nodeType: "YulIdentifier",
											src: "6056:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "5551:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "5562:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "5574:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "5582:6:27",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "5590:6:27",
								type: ""
							},
							{
								name: "value3",
								nodeType: "YulTypedName",
								src: "5598:6:27",
								type: ""
							}
						],
						src: "5479:667:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "6302:481:27",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "6312:12:27",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "6322:2:27",
										type: "",
										value: "32"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "6316:2:27",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6333:32:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "6351:9:27"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "6362:2:27"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "6347:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "6347:18:27"
									},
									variables: [
										{
											name: "tail_1",
											nodeType: "YulTypedName",
											src: "6337:6:27",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "6381:9:27"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "6392:2:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "6374:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "6374:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "6374:21:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6404:17:27",
									value: {
										name: "tail_1",
										nodeType: "YulIdentifier",
										src: "6415:6:27"
									},
									variables: [
										{
											name: "pos",
											nodeType: "YulTypedName",
											src: "6408:3:27",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6430:27:27",
									value: {
										"arguments": [
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "6450:6:27"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "6444:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "6444:13:27"
									},
									variables: [
										{
											name: "length",
											nodeType: "YulTypedName",
											src: "6434:6:27",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "tail_1",
												nodeType: "YulIdentifier",
												src: "6473:6:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "6481:6:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "6466:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "6466:22:27"
									},
									nodeType: "YulExpressionStatement",
									src: "6466:22:27"
								},
								{
									nodeType: "YulAssignment",
									src: "6497:25:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "6508:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "6519:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "6504:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "6504:18:27"
									},
									variableNames: [
										{
											name: "pos",
											nodeType: "YulIdentifier",
											src: "6497:3:27"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6531:29:27",
									value: {
										"arguments": [
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "6549:6:27"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "6557:2:27"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "6545:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "6545:15:27"
									},
									variables: [
										{
											name: "srcPtr",
											nodeType: "YulTypedName",
											src: "6535:6:27",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6569:10:27",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "6578:1:27",
										type: "",
										value: "0"
									},
									variables: [
										{
											name: "i",
											nodeType: "YulTypedName",
											src: "6573:1:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "6637:120:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															name: "pos",
															nodeType: "YulIdentifier",
															src: "6658:3:27"
														},
														{
															"arguments": [
																{
																	name: "srcPtr",
																	nodeType: "YulIdentifier",
																	src: "6669:6:27"
																}
															],
															functionName: {
																name: "mload",
																nodeType: "YulIdentifier",
																src: "6663:5:27"
															},
															nodeType: "YulFunctionCall",
															src: "6663:13:27"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "6651:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "6651:26:27"
												},
												nodeType: "YulExpressionStatement",
												src: "6651:26:27"
											},
											{
												nodeType: "YulAssignment",
												src: "6690:19:27",
												value: {
													"arguments": [
														{
															name: "pos",
															nodeType: "YulIdentifier",
															src: "6701:3:27"
														},
														{
															name: "_1",
															nodeType: "YulIdentifier",
															src: "6706:2:27"
														}
													],
													functionName: {
														name: "add",
														nodeType: "YulIdentifier",
														src: "6697:3:27"
													},
													nodeType: "YulFunctionCall",
													src: "6697:12:27"
												},
												variableNames: [
													{
														name: "pos",
														nodeType: "YulIdentifier",
														src: "6690:3:27"
													}
												]
											},
											{
												nodeType: "YulAssignment",
												src: "6722:25:27",
												value: {
													"arguments": [
														{
															name: "srcPtr",
															nodeType: "YulIdentifier",
															src: "6736:6:27"
														},
														{
															name: "_1",
															nodeType: "YulIdentifier",
															src: "6744:2:27"
														}
													],
													functionName: {
														name: "add",
														nodeType: "YulIdentifier",
														src: "6732:3:27"
													},
													nodeType: "YulFunctionCall",
													src: "6732:15:27"
												},
												variableNames: [
													{
														name: "srcPtr",
														nodeType: "YulIdentifier",
														src: "6722:6:27"
													}
												]
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "i",
												nodeType: "YulIdentifier",
												src: "6599:1:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "6602:6:27"
											}
										],
										functionName: {
											name: "lt",
											nodeType: "YulIdentifier",
											src: "6596:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "6596:13:27"
									},
									nodeType: "YulForLoop",
									post: {
										nodeType: "YulBlock",
										src: "6610:18:27",
										statements: [
											{
												nodeType: "YulAssignment",
												src: "6612:14:27",
												value: {
													"arguments": [
														{
															name: "i",
															nodeType: "YulIdentifier",
															src: "6621:1:27"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6624:1:27",
															type: "",
															value: "1"
														}
													],
													functionName: {
														name: "add",
														nodeType: "YulIdentifier",
														src: "6617:3:27"
													},
													nodeType: "YulFunctionCall",
													src: "6617:9:27"
												},
												variableNames: [
													{
														name: "i",
														nodeType: "YulIdentifier",
														src: "6612:1:27"
													}
												]
											}
										]
									},
									pre: {
										nodeType: "YulBlock",
										src: "6592:3:27",
										statements: [
										]
									},
									src: "6588:169:27"
								},
								{
									nodeType: "YulAssignment",
									src: "6766:11:27",
									value: {
										name: "pos",
										nodeType: "YulIdentifier",
										src: "6774:3:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "6766:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "6271:9:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "6282:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "6293:4:27",
								type: ""
							}
						],
						src: "6151:632:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "6902:344:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "6948:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6957:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6960:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "6950:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "6950:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "6950:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "6923:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "6932:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "6919:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "6919:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "6944:2:27",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "6915:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "6915:32:27"
									},
									nodeType: "YulIf",
									src: "6912:52:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6973:37:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "7000:9:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "6987:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "6987:23:27"
									},
									variables: [
										{
											name: "offset",
											nodeType: "YulTypedName",
											src: "6977:6:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "7053:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7062:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7065:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "7055:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "7055:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "7055:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "7025:6:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "7033:18:27",
												type: "",
												value: "0xffffffffffffffff"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "7022:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "7022:30:27"
									},
									nodeType: "YulIf",
									src: "7019:50:27"
								},
								{
									nodeType: "YulAssignment",
									src: "7078:60:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "7110:9:27"
													},
													{
														name: "offset",
														nodeType: "YulIdentifier",
														src: "7121:6:27"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "7106:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "7106:22:27"
											},
											{
												name: "dataEnd",
												nodeType: "YulIdentifier",
												src: "7130:7:27"
											}
										],
										functionName: {
											name: "abi_decode_string",
											nodeType: "YulIdentifier",
											src: "7088:17:27"
										},
										nodeType: "YulFunctionCall",
										src: "7088:50:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "7078:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "7147:42:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "7174:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "7185:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "7170:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "7170:18:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "7157:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "7157:32:27"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "7147:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "7198:42:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "7225:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "7236:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "7221:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "7221:18:27"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "7208:12:27"
										},
										nodeType: "YulFunctionCall",
										src: "7208:32:27"
									},
									variableNames: [
										{
											name: "value2",
											nodeType: "YulIdentifier",
											src: "7198:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_string_memory_ptrt_uint256t_bytes32",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "6852:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "6863:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "6875:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "6883:6:27",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "6891:6:27",
								type: ""
							}
						],
						src: "6788:458:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "7338:173:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "7384:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7393:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7396:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "7386:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "7386:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "7386:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "7359:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "7368:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "7355:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "7355:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "7380:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "7351:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "7351:32:27"
									},
									nodeType: "YulIf",
									src: "7348:52:27"
								},
								{
									nodeType: "YulAssignment",
									src: "7409:39:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "7438:9:27"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "7419:18:27"
										},
										nodeType: "YulFunctionCall",
										src: "7419:29:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "7409:6:27"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "7457:48:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "7490:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "7501:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "7486:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "7486:18:27"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "7467:18:27"
										},
										nodeType: "YulFunctionCall",
										src: "7467:38:27"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "7457:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_address",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "7296:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "7307:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "7319:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "7327:6:27",
								type: ""
							}
						],
						src: "7251:260:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "7571:325:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "7581:22:27",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "7595:1:27",
												type: "",
												value: "1"
											},
											{
												name: "data",
												nodeType: "YulIdentifier",
												src: "7598:4:27"
											}
										],
										functionName: {
											name: "shr",
											nodeType: "YulIdentifier",
											src: "7591:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "7591:12:27"
									},
									variableNames: [
										{
											name: "length",
											nodeType: "YulIdentifier",
											src: "7581:6:27"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "7612:38:27",
									value: {
										"arguments": [
											{
												name: "data",
												nodeType: "YulIdentifier",
												src: "7642:4:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "7648:1:27",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "and",
											nodeType: "YulIdentifier",
											src: "7638:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "7638:12:27"
									},
									variables: [
										{
											name: "outOfPlaceEncoding",
											nodeType: "YulTypedName",
											src: "7616:18:27",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "7689:31:27",
										statements: [
											{
												nodeType: "YulAssignment",
												src: "7691:27:27",
												value: {
													"arguments": [
														{
															name: "length",
															nodeType: "YulIdentifier",
															src: "7705:6:27"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7713:4:27",
															type: "",
															value: "0x7f"
														}
													],
													functionName: {
														name: "and",
														nodeType: "YulIdentifier",
														src: "7701:3:27"
													},
													nodeType: "YulFunctionCall",
													src: "7701:17:27"
												},
												variableNames: [
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "7691:6:27"
													}
												]
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "outOfPlaceEncoding",
												nodeType: "YulIdentifier",
												src: "7669:18:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "7662:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "7662:26:27"
									},
									nodeType: "YulIf",
									src: "7659:61:27"
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "7779:111:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7800:1:27",
															type: "",
															value: "0"
														},
														{
															"arguments": [
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "7807:3:27",
																	type: "",
																	value: "224"
																},
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "7812:10:27",
																	type: "",
																	value: "0x4e487b71"
																}
															],
															functionName: {
																name: "shl",
																nodeType: "YulIdentifier",
																src: "7803:3:27"
															},
															nodeType: "YulFunctionCall",
															src: "7803:20:27"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "7793:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "7793:31:27"
												},
												nodeType: "YulExpressionStatement",
												src: "7793:31:27"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7844:1:27",
															type: "",
															value: "4"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7847:4:27",
															type: "",
															value: "0x22"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "7837:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "7837:15:27"
												},
												nodeType: "YulExpressionStatement",
												src: "7837:15:27"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7872:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7875:4:27",
															type: "",
															value: "0x24"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "7865:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "7865:15:27"
												},
												nodeType: "YulExpressionStatement",
												src: "7865:15:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "outOfPlaceEncoding",
												nodeType: "YulIdentifier",
												src: "7735:18:27"
											},
											{
												"arguments": [
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "7758:6:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "7766:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "lt",
													nodeType: "YulIdentifier",
													src: "7755:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "7755:14:27"
											}
										],
										functionName: {
											name: "eq",
											nodeType: "YulIdentifier",
											src: "7732:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "7732:38:27"
									},
									nodeType: "YulIf",
									src: "7729:161:27"
								}
							]
						},
						name: "extract_byte_array_length",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "data",
								nodeType: "YulTypedName",
								src: "7551:4:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "length",
								nodeType: "YulTypedName",
								src: "7560:6:27",
								type: ""
							}
						],
						src: "7516:380:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "8075:234:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "8092:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8103:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8085:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8085:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8085:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8126:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8137:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8122:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "8122:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8142:2:27",
												type: "",
												value: "44"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8115:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8115:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8115:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8165:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8176:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8161:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "8161:18:27"
											},
											{
												hexValue: "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578",
												kind: "string",
												nodeType: "YulLiteral",
												src: "8181:34:27",
												type: "",
												value: "ERC721: approved query for nonex"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8154:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8154:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8154:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8236:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8247:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8232:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "8232:18:27"
											},
											{
												hexValue: "697374656e7420746f6b656e",
												kind: "string",
												nodeType: "YulLiteral",
												src: "8252:14:27",
												type: "",
												value: "istent token"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8225:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8225:42:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8225:42:27"
								},
								{
									nodeType: "YulAssignment",
									src: "8276:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "8288:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8299:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "8284:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "8284:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "8276:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "8052:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "8066:4:27",
								type: ""
							}
						],
						src: "7901:408:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "8488:223:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "8505:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8516:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8498:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8498:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8498:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8539:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8550:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8535:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "8535:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8555:2:27",
												type: "",
												value: "33"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8528:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8528:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8528:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8578:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8589:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8574:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "8574:18:27"
											},
											{
												hexValue: "4552433732313a20617070726f76616c20746f2063757272656e74206f776e65",
												kind: "string",
												nodeType: "YulLiteral",
												src: "8594:34:27",
												type: "",
												value: "ERC721: approval to current owne"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8567:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8567:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8567:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8649:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8660:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8645:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "8645:18:27"
											},
											{
												hexValue: "72",
												kind: "string",
												nodeType: "YulLiteral",
												src: "8665:3:27",
												type: "",
												value: "r"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8638:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8638:31:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8638:31:27"
								},
								{
									nodeType: "YulAssignment",
									src: "8678:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "8690:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8701:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "8686:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "8686:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "8678:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "8465:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "8479:4:27",
								type: ""
							}
						],
						src: "8314:397:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "8890:246:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "8907:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8918:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8900:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8900:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8900:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8941:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8952:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8937:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "8937:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8957:2:27",
												type: "",
												value: "56"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8930:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8930:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8930:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8980:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8991:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8976:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "8976:18:27"
											},
											{
												hexValue: "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77",
												kind: "string",
												nodeType: "YulLiteral",
												src: "8996:34:27",
												type: "",
												value: "ERC721: approve caller is not ow"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8969:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "8969:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "8969:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9051:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9062:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9047:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "9047:18:27"
											},
											{
												hexValue: "6e6572206e6f7220617070726f76656420666f7220616c6c",
												kind: "string",
												nodeType: "YulLiteral",
												src: "9067:26:27",
												type: "",
												value: "ner nor approved for all"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9040:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9040:54:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9040:54:27"
								},
								{
									nodeType: "YulAssignment",
									src: "9103:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "9115:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9126:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "9111:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "9111:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "9103:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "8867:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "8881:4:27",
								type: ""
							}
						],
						src: "8716:420:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "9315:239:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "9332:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9343:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9325:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9325:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9325:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9366:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9377:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9362:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "9362:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9382:2:27",
												type: "",
												value: "49"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9355:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9355:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9355:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9405:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9416:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9401:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "9401:18:27"
											},
											{
												hexValue: "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f",
												kind: "string",
												nodeType: "YulLiteral",
												src: "9421:34:27",
												type: "",
												value: "ERC721: transfer caller is not o"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9394:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9394:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9394:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9476:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9487:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9472:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "9472:18:27"
											},
											{
												hexValue: "776e6572206e6f7220617070726f766564",
												kind: "string",
												nodeType: "YulLiteral",
												src: "9492:19:27",
												type: "",
												value: "wner nor approved"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9465:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9465:47:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9465:47:27"
								},
								{
									nodeType: "YulAssignment",
									src: "9521:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "9533:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9544:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "9529:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "9529:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "9521:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "9292:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "9306:4:27",
								type: ""
							}
						],
						src: "9141:413:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "9591:95:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9608:1:27",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9615:3:27",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9620:10:27",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "9611:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "9611:20:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9601:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9601:31:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9601:31:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9648:1:27",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9651:4:27",
												type: "",
												value: "0x11"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9641:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9641:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9641:15:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9672:1:27",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9675:4:27",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "9665:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9665:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9665:15:27"
								}
							]
						},
						name: "panic_error_0x11",
						nodeType: "YulFunctionDefinition",
						src: "9559:127:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "9743:116:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "9802:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x11",
														nodeType: "YulIdentifier",
														src: "9804:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "9804:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "9804:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "x",
																nodeType: "YulIdentifier",
																src: "9774:1:27"
															}
														],
														functionName: {
															name: "iszero",
															nodeType: "YulIdentifier",
															src: "9767:6:27"
														},
														nodeType: "YulFunctionCall",
														src: "9767:9:27"
													}
												],
												functionName: {
													name: "iszero",
													nodeType: "YulIdentifier",
													src: "9760:6:27"
												},
												nodeType: "YulFunctionCall",
												src: "9760:17:27"
											},
											{
												"arguments": [
													{
														name: "y",
														nodeType: "YulIdentifier",
														src: "9782:1:27"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "9793:1:27",
																		type: "",
																		value: "0"
																	}
																],
																functionName: {
																	name: "not",
																	nodeType: "YulIdentifier",
																	src: "9789:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "9789:6:27"
															},
															{
																name: "x",
																nodeType: "YulIdentifier",
																src: "9797:1:27"
															}
														],
														functionName: {
															name: "div",
															nodeType: "YulIdentifier",
															src: "9785:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "9785:14:27"
													}
												],
												functionName: {
													name: "gt",
													nodeType: "YulIdentifier",
													src: "9779:2:27"
												},
												nodeType: "YulFunctionCall",
												src: "9779:21:27"
											}
										],
										functionName: {
											name: "and",
											nodeType: "YulIdentifier",
											src: "9756:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "9756:45:27"
									},
									nodeType: "YulIf",
									src: "9753:71:27"
								},
								{
									nodeType: "YulAssignment",
									src: "9833:20:27",
									value: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "9848:1:27"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "9851:1:27"
											}
										],
										functionName: {
											name: "mul",
											nodeType: "YulIdentifier",
											src: "9844:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "9844:9:27"
									},
									variableNames: [
										{
											name: "product",
											nodeType: "YulIdentifier",
											src: "9833:7:27"
										}
									]
								}
							]
						},
						name: "checked_mul_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "x",
								nodeType: "YulTypedName",
								src: "9722:1:27",
								type: ""
							},
							{
								name: "y",
								nodeType: "YulTypedName",
								src: "9725:1:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "product",
								nodeType: "YulTypedName",
								src: "9731:7:27",
								type: ""
							}
						],
						src: "9691:168:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "9896:95:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9913:1:27",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9920:3:27",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9925:10:27",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "9916:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "9916:20:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9906:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9906:31:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9906:31:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9953:1:27",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9956:4:27",
												type: "",
												value: "0x12"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9946:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9946:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9946:15:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9977:1:27",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9980:4:27",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "9970:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "9970:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "9970:15:27"
								}
							]
						},
						name: "panic_error_0x12",
						nodeType: "YulFunctionDefinition",
						src: "9864:127:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "10042:74:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "10065:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x12",
														nodeType: "YulIdentifier",
														src: "10067:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "10067:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "10067:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "10062:1:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "10055:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10055:9:27"
									},
									nodeType: "YulIf",
									src: "10052:35:27"
								},
								{
									nodeType: "YulAssignment",
									src: "10096:14:27",
									value: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "10105:1:27"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "10108:1:27"
											}
										],
										functionName: {
											name: "div",
											nodeType: "YulIdentifier",
											src: "10101:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "10101:9:27"
									},
									variableNames: [
										{
											name: "r",
											nodeType: "YulIdentifier",
											src: "10096:1:27"
										}
									]
								}
							]
						},
						name: "checked_div_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "x",
								nodeType: "YulTypedName",
								src: "10027:1:27",
								type: ""
							},
							{
								name: "y",
								nodeType: "YulTypedName",
								src: "10030:1:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "r",
								nodeType: "YulTypedName",
								src: "10036:1:27",
								type: ""
							}
						],
						src: "9996:120:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "10295:233:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "10312:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10323:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10305:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10305:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "10305:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "10346:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10357:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "10342:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "10342:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10362:2:27",
												type: "",
												value: "43"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10335:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10335:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "10335:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "10385:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10396:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "10381:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "10381:18:27"
											},
											{
												hexValue: "455243373231456e756d657261626c653a206f776e657220696e646578206f75",
												kind: "string",
												nodeType: "YulLiteral",
												src: "10401:34:27",
												type: "",
												value: "ERC721Enumerable: owner index ou"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10374:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10374:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "10374:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "10456:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10467:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "10452:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "10452:18:27"
											},
											{
												hexValue: "74206f6620626f756e6473",
												kind: "string",
												nodeType: "YulLiteral",
												src: "10472:13:27",
												type: "",
												value: "t of bounds"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10445:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10445:41:27"
									},
									nodeType: "YulExpressionStatement",
									src: "10445:41:27"
								},
								{
									nodeType: "YulAssignment",
									src: "10495:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "10507:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10518:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "10503:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "10503:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "10495:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "10272:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "10286:4:27",
								type: ""
							}
						],
						src: "10121:407:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "10707:234:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "10724:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10735:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10717:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10717:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "10717:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "10758:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10769:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "10754:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "10754:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10774:2:27",
												type: "",
												value: "44"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10747:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10747:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "10747:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "10797:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10808:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "10793:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "10793:18:27"
											},
											{
												hexValue: "455243373231456e756d657261626c653a20676c6f62616c20696e646578206f",
												kind: "string",
												nodeType: "YulLiteral",
												src: "10813:34:27",
												type: "",
												value: "ERC721Enumerable: global index o"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10786:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10786:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "10786:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "10868:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10879:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "10864:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "10864:18:27"
											},
											{
												hexValue: "7574206f6620626f756e6473",
												kind: "string",
												nodeType: "YulLiteral",
												src: "10884:14:27",
												type: "",
												value: "ut of bounds"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10857:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10857:42:27"
									},
									nodeType: "YulExpressionStatement",
									src: "10857:42:27"
								},
								{
									nodeType: "YulAssignment",
									src: "10908:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "10920:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10931:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "10916:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "10916:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "10908:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "10684:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "10698:4:27",
								type: ""
							}
						],
						src: "10533:408:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "10978:95:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10995:1:27",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11002:3:27",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11007:10:27",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "10998:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "10998:20:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10988:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "10988:31:27"
									},
									nodeType: "YulExpressionStatement",
									src: "10988:31:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11035:1:27",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11038:4:27",
												type: "",
												value: "0x32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11028:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "11028:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "11028:15:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11059:1:27",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11062:4:27",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "11052:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "11052:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "11052:15:27"
								}
							]
						},
						name: "panic_error_0x32",
						nodeType: "YulFunctionDefinition",
						src: "10946:127:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "11252:182:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "11269:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11280:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11262:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "11262:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "11262:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11303:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11314:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11299:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "11299:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11319:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11292:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "11292:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "11292:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11342:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11353:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11338:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "11338:18:27"
											},
											{
												hexValue: "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
												kind: "string",
												nodeType: "YulLiteral",
												src: "11358:34:27",
												type: "",
												value: "Ownable: caller is not the owner"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11331:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "11331:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "11331:62:27"
								},
								{
									nodeType: "YulAssignment",
									src: "11402:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "11414:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11425:2:27",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "11410:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "11410:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "11402:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "11229:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "11243:4:27",
								type: ""
							}
						],
						src: "11078:356:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "11568:175:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "11578:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "11590:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11601:2:27",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "11586:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "11586:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "11578:4:27"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "11613:29:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11631:3:27",
														type: "",
														value: "160"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11636:1:27",
														type: "",
														value: "1"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "11627:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "11627:11:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11640:1:27",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "sub",
											nodeType: "YulIdentifier",
											src: "11623:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "11623:19:27"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "11617:2:27",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "11658:9:27"
											},
											{
												"arguments": [
													{
														name: "value0",
														nodeType: "YulIdentifier",
														src: "11673:6:27"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "11681:2:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "11669:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "11669:15:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11651:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "11651:34:27"
									},
									nodeType: "YulExpressionStatement",
									src: "11651:34:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11705:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11716:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11701:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "11701:18:27"
											},
											{
												"arguments": [
													{
														name: "value1",
														nodeType: "YulIdentifier",
														src: "11725:6:27"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "11733:2:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "11721:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "11721:15:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11694:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "11694:43:27"
									},
									nodeType: "YulExpressionStatement",
									src: "11694:43:27"
								}
							]
						},
						name: "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "11529:9:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "11540:6:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "11548:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "11559:4:27",
								type: ""
							}
						],
						src: "11439:304:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "11922:231:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "11939:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11950:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11932:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "11932:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "11932:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11973:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11984:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11969:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "11969:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11989:2:27",
												type: "",
												value: "41"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11962:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "11962:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "11962:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12012:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12023:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12008:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "12008:18:27"
											},
											{
												hexValue: "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12028:34:27",
												type: "",
												value: "ERC721: owner query for nonexist"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12001:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12001:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12001:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12083:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12094:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12079:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "12079:18:27"
											},
											{
												hexValue: "656e7420746f6b656e",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12099:11:27",
												type: "",
												value: "ent token"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12072:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12072:39:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12072:39:27"
								},
								{
									nodeType: "YulAssignment",
									src: "12120:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12132:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12143:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "12128:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "12128:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "12120:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "11899:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "11913:4:27",
								type: ""
							}
						],
						src: "11748:405:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "12332:232:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12349:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12360:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12342:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12342:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12342:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12383:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12394:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12379:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "12379:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12399:2:27",
												type: "",
												value: "42"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12372:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12372:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12372:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12422:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12433:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12418:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "12418:18:27"
											},
											{
												hexValue: "4552433732313a2062616c616e636520717565727920666f7220746865207a65",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12438:34:27",
												type: "",
												value: "ERC721: balance query for the ze"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12411:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12411:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12411:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12493:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12504:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12489:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "12489:18:27"
											},
											{
												hexValue: "726f2061646472657373",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12509:12:27",
												type: "",
												value: "ro address"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12482:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12482:40:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12482:40:27"
								},
								{
									nodeType: "YulAssignment",
									src: "12531:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12543:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12554:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "12539:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "12539:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "12531:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "12309:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "12323:4:27",
								type: ""
							}
						],
						src: "12158:406:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "12743:237:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12760:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12771:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12753:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12753:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12753:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12794:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12805:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12790:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "12790:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12810:2:27",
												type: "",
												value: "47"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12783:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12783:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12783:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12833:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12844:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12829:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "12829:18:27"
											},
											{
												hexValue: "4552433732314d657461646174613a2055524920717565727920666f72206e6f",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12849:34:27",
												type: "",
												value: "ERC721Metadata: URI query for no"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12822:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12822:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12822:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12904:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12915:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12900:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "12900:18:27"
											},
											{
												hexValue: "6e6578697374656e7420746f6b656e",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12920:17:27",
												type: "",
												value: "nexistent token"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12893:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "12893:45:27"
									},
									nodeType: "YulExpressionStatement",
									src: "12893:45:27"
								},
								{
									nodeType: "YulAssignment",
									src: "12947:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12959:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12970:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "12955:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "12955:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "12947:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "12720:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "12734:4:27",
								type: ""
							}
						],
						src: "12569:411:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "13172:283:27",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "13182:27:27",
									value: {
										"arguments": [
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "13202:6:27"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "13196:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "13196:13:27"
									},
									variables: [
										{
											name: "length",
											nodeType: "YulTypedName",
											src: "13186:6:27",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value0",
														nodeType: "YulIdentifier",
														src: "13244:6:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "13252:4:27",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "13240:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "13240:17:27"
											},
											{
												name: "pos",
												nodeType: "YulIdentifier",
												src: "13259:3:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "13264:6:27"
											}
										],
										functionName: {
											name: "copy_memory_to_memory",
											nodeType: "YulIdentifier",
											src: "13218:21:27"
										},
										nodeType: "YulFunctionCall",
										src: "13218:53:27"
									},
									nodeType: "YulExpressionStatement",
									src: "13218:53:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "13280:29:27",
									value: {
										"arguments": [
											{
												name: "pos",
												nodeType: "YulIdentifier",
												src: "13297:3:27"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "13302:6:27"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "13293:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "13293:16:27"
									},
									variables: [
										{
											name: "end_1",
											nodeType: "YulTypedName",
											src: "13284:5:27",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "13318:29:27",
									value: {
										"arguments": [
											{
												name: "value1",
												nodeType: "YulIdentifier",
												src: "13340:6:27"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "13334:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "13334:13:27"
									},
									variables: [
										{
											name: "length_1",
											nodeType: "YulTypedName",
											src: "13322:8:27",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value1",
														nodeType: "YulIdentifier",
														src: "13382:6:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "13390:4:27",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "13378:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "13378:17:27"
											},
											{
												name: "end_1",
												nodeType: "YulIdentifier",
												src: "13397:5:27"
											},
											{
												name: "length_1",
												nodeType: "YulIdentifier",
												src: "13404:8:27"
											}
										],
										functionName: {
											name: "copy_memory_to_memory",
											nodeType: "YulIdentifier",
											src: "13356:21:27"
										},
										nodeType: "YulFunctionCall",
										src: "13356:57:27"
									},
									nodeType: "YulExpressionStatement",
									src: "13356:57:27"
								},
								{
									nodeType: "YulAssignment",
									src: "13422:27:27",
									value: {
										"arguments": [
											{
												name: "end_1",
												nodeType: "YulIdentifier",
												src: "13433:5:27"
											},
											{
												name: "length_1",
												nodeType: "YulIdentifier",
												src: "13440:8:27"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "13429:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "13429:20:27"
									},
									variableNames: [
										{
											name: "end",
											nodeType: "YulIdentifier",
											src: "13422:3:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "pos",
								nodeType: "YulTypedName",
								src: "13140:3:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "13145:6:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "13153:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "end",
								nodeType: "YulTypedName",
								src: "13164:3:27",
								type: ""
							}
						],
						src: "12985:470:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "13507:88:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "13538:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x11",
														nodeType: "YulIdentifier",
														src: "13540:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "13540:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "13540:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "13523:5:27"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "13534:1:27",
														type: "",
														value: "0"
													}
												],
												functionName: {
													name: "not",
													nodeType: "YulIdentifier",
													src: "13530:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "13530:6:27"
											}
										],
										functionName: {
											name: "eq",
											nodeType: "YulIdentifier",
											src: "13520:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "13520:17:27"
									},
									nodeType: "YulIf",
									src: "13517:43:27"
								},
								{
									nodeType: "YulAssignment",
									src: "13569:20:27",
									value: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "13580:5:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "13587:1:27",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "13576:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "13576:13:27"
									},
									variableNames: [
										{
											name: "ret",
											nodeType: "YulIdentifier",
											src: "13569:3:27"
										}
									]
								}
							]
						},
						name: "increment_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "13489:5:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "ret",
								nodeType: "YulTypedName",
								src: "13499:3:27",
								type: ""
							}
						],
						src: "13460:135:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "13681:103:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "13727:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "13736:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "13739:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "13729:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "13729:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "13729:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "13702:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "13711:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "13698:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "13698:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "13723:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "13694:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "13694:32:27"
									},
									nodeType: "YulIf",
									src: "13691:52:27"
								},
								{
									nodeType: "YulAssignment",
									src: "13752:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "13768:9:27"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "13762:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "13762:16:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "13752:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_uint256_fromMemory",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "13647:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "13658:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "13670:6:27",
								type: ""
							}
						],
						src: "13600:184:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "13946:188:27",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "13956:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "13968:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "13979:2:27",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "13964:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "13964:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "13956:4:27"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "13998:9:27"
											},
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "14009:6:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "13991:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "13991:25:27"
									},
									nodeType: "YulExpressionStatement",
									src: "13991:25:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14036:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14047:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14032:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "14032:18:27"
											},
											{
												"arguments": [
													{
														name: "value1",
														nodeType: "YulIdentifier",
														src: "14056:6:27"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "14072:3:27",
																		type: "",
																		value: "160"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "14077:1:27",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "14068:3:27"
																},
																nodeType: "YulFunctionCall",
																src: "14068:11:27"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "14081:1:27",
																type: "",
																value: "1"
															}
														],
														functionName: {
															name: "sub",
															nodeType: "YulIdentifier",
															src: "14064:3:27"
														},
														nodeType: "YulFunctionCall",
														src: "14064:19:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "14052:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "14052:32:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14025:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14025:60:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14025:60:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14105:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14116:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14101:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "14101:18:27"
											},
											{
												name: "value2",
												nodeType: "YulIdentifier",
												src: "14121:6:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14094:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14094:34:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14094:34:27"
								}
							]
						},
						name: "abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "13899:9:27",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "13910:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "13918:6:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "13926:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "13937:4:27",
								type: ""
							}
						],
						src: "13789:345:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "14313:228:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "14330:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14341:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14323:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14323:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14323:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14364:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14375:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14360:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "14360:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14380:2:27",
												type: "",
												value: "38"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14353:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14353:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14353:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14403:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14414:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14399:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "14399:18:27"
											},
											{
												hexValue: "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14419:34:27",
												type: "",
												value: "Ownable: new owner is the zero a"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14392:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14392:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14392:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14474:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14485:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14470:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "14470:18:27"
											},
											{
												hexValue: "646472657373",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14490:8:27",
												type: "",
												value: "ddress"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14463:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14463:36:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14463:36:27"
								},
								{
									nodeType: "YulAssignment",
									src: "14508:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "14520:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14531:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "14516:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "14516:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "14508:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "14290:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "14304:4:27",
								type: ""
							}
						],
						src: "14139:402:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "14720:234:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "14737:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14748:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14730:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14730:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14730:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14771:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14782:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14767:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "14767:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14787:2:27",
												type: "",
												value: "44"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14760:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14760:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14760:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14810:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14821:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14806:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "14806:18:27"
											},
											{
												hexValue: "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14826:34:27",
												type: "",
												value: "ERC721: operator query for nonex"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14799:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14799:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14799:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14881:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14892:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14877:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "14877:18:27"
											},
											{
												hexValue: "697374656e7420746f6b656e",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14897:14:27",
												type: "",
												value: "istent token"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14870:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "14870:42:27"
									},
									nodeType: "YulExpressionStatement",
									src: "14870:42:27"
								},
								{
									nodeType: "YulAssignment",
									src: "14921:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "14933:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14944:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "14929:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "14929:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "14921:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "14697:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "14711:4:27",
								type: ""
							}
						],
						src: "14546:408:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "15133:227:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "15150:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15161:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15143:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "15143:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "15143:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15184:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15195:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15180:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "15180:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15200:2:27",
												type: "",
												value: "37"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15173:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "15173:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "15173:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15223:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15234:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15219:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "15219:18:27"
											},
											{
												hexValue: "4552433732313a207472616e736665722066726f6d20696e636f727265637420",
												kind: "string",
												nodeType: "YulLiteral",
												src: "15239:34:27",
												type: "",
												value: "ERC721: transfer from incorrect "
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15212:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "15212:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "15212:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15294:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15305:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15290:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "15290:18:27"
											},
											{
												hexValue: "6f776e6572",
												kind: "string",
												nodeType: "YulLiteral",
												src: "15310:7:27",
												type: "",
												value: "owner"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15283:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "15283:35:27"
									},
									nodeType: "YulExpressionStatement",
									src: "15283:35:27"
								},
								{
									nodeType: "YulAssignment",
									src: "15327:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "15339:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15350:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "15335:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "15335:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "15327:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "15110:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "15124:4:27",
								type: ""
							}
						],
						src: "14959:401:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "15539:226:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "15556:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15567:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15549:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "15549:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "15549:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15590:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15601:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15586:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "15586:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15606:2:27",
												type: "",
												value: "36"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15579:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "15579:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "15579:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15629:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15640:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15625:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "15625:18:27"
											},
											{
												hexValue: "4552433732313a207472616e7366657220746f20746865207a65726f20616464",
												kind: "string",
												nodeType: "YulLiteral",
												src: "15645:34:27",
												type: "",
												value: "ERC721: transfer to the zero add"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15618:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "15618:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "15618:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15700:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15711:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15696:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "15696:18:27"
											},
											{
												hexValue: "72657373",
												kind: "string",
												nodeType: "YulLiteral",
												src: "15716:6:27",
												type: "",
												value: "ress"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15689:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "15689:34:27"
									},
									nodeType: "YulExpressionStatement",
									src: "15689:34:27"
								},
								{
									nodeType: "YulAssignment",
									src: "15732:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "15744:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15755:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "15740:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "15740:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "15732:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "15516:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "15530:4:27",
								type: ""
							}
						],
						src: "15365:400:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "15819:76:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "15841:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x11",
														nodeType: "YulIdentifier",
														src: "15843:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "15843:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "15843:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "15835:1:27"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "15838:1:27"
											}
										],
										functionName: {
											name: "lt",
											nodeType: "YulIdentifier",
											src: "15832:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "15832:8:27"
									},
									nodeType: "YulIf",
									src: "15829:34:27"
								},
								{
									nodeType: "YulAssignment",
									src: "15872:17:27",
									value: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "15884:1:27"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "15887:1:27"
											}
										],
										functionName: {
											name: "sub",
											nodeType: "YulIdentifier",
											src: "15880:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "15880:9:27"
									},
									variableNames: [
										{
											name: "diff",
											nodeType: "YulIdentifier",
											src: "15872:4:27"
										}
									]
								}
							]
						},
						name: "checked_sub_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "x",
								nodeType: "YulTypedName",
								src: "15801:1:27",
								type: ""
							},
							{
								name: "y",
								nodeType: "YulTypedName",
								src: "15804:1:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "diff",
								nodeType: "YulTypedName",
								src: "15810:4:27",
								type: ""
							}
						],
						src: "15770:125:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "15948:80:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "15975:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x11",
														nodeType: "YulIdentifier",
														src: "15977:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "15977:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "15977:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "15964:1:27"
											},
											{
												"arguments": [
													{
														name: "y",
														nodeType: "YulIdentifier",
														src: "15971:1:27"
													}
												],
												functionName: {
													name: "not",
													nodeType: "YulIdentifier",
													src: "15967:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "15967:6:27"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "15961:2:27"
										},
										nodeType: "YulFunctionCall",
										src: "15961:13:27"
									},
									nodeType: "YulIf",
									src: "15958:39:27"
								},
								{
									nodeType: "YulAssignment",
									src: "16006:16:27",
									value: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "16017:1:27"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "16020:1:27"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "16013:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "16013:9:27"
									},
									variableNames: [
										{
											name: "sum",
											nodeType: "YulIdentifier",
											src: "16006:3:27"
										}
									]
								}
							]
						},
						name: "checked_add_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "x",
								nodeType: "YulTypedName",
								src: "15931:1:27",
								type: ""
							},
							{
								name: "y",
								nodeType: "YulTypedName",
								src: "15934:1:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "sum",
								nodeType: "YulTypedName",
								src: "15940:3:27",
								type: ""
							}
						],
						src: "15900:128:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "16207:175:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "16224:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16235:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16217:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "16217:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "16217:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "16258:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16269:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "16254:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "16254:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16274:2:27",
												type: "",
												value: "25"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16247:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "16247:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "16247:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "16297:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16308:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "16293:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "16293:18:27"
											},
											{
												hexValue: "4552433732313a20617070726f766520746f2063616c6c6572",
												kind: "string",
												nodeType: "YulLiteral",
												src: "16313:27:27",
												type: "",
												value: "ERC721: approve to caller"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16286:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "16286:55:27"
									},
									nodeType: "YulExpressionStatement",
									src: "16286:55:27"
								},
								{
									nodeType: "YulAssignment",
									src: "16350:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "16362:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16373:2:27",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "16358:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "16358:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "16350:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "16184:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "16198:4:27",
								type: ""
							}
						],
						src: "16033:349:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "16561:240:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "16578:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16589:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16571:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "16571:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "16571:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "16612:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16623:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "16608:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "16608:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16628:2:27",
												type: "",
												value: "50"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16601:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "16601:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "16601:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "16651:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16662:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "16647:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "16647:18:27"
											},
											{
												hexValue: "4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
												kind: "string",
												nodeType: "YulLiteral",
												src: "16667:34:27",
												type: "",
												value: "ERC721: transfer to non ERC721Re"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16640:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "16640:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "16640:62:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "16722:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16733:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "16718:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "16718:18:27"
											},
											{
												hexValue: "63656976657220696d706c656d656e746572",
												kind: "string",
												nodeType: "YulLiteral",
												src: "16738:20:27",
												type: "",
												value: "ceiver implementer"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16711:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "16711:48:27"
									},
									nodeType: "YulExpressionStatement",
									src: "16711:48:27"
								},
								{
									nodeType: "YulAssignment",
									src: "16768:27:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "16780:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16791:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "16776:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "16776:19:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "16768:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "16538:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "16552:4:27",
								type: ""
							}
						],
						src: "16387:414:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "16844:74:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "16867:22:27",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x12",
														nodeType: "YulIdentifier",
														src: "16869:16:27"
													},
													nodeType: "YulFunctionCall",
													src: "16869:18:27"
												},
												nodeType: "YulExpressionStatement",
												src: "16869:18:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "16864:1:27"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "16857:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "16857:9:27"
									},
									nodeType: "YulIf",
									src: "16854:35:27"
								},
								{
									nodeType: "YulAssignment",
									src: "16898:14:27",
									value: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "16907:1:27"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "16910:1:27"
											}
										],
										functionName: {
											name: "mod",
											nodeType: "YulIdentifier",
											src: "16903:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "16903:9:27"
									},
									variableNames: [
										{
											name: "r",
											nodeType: "YulIdentifier",
											src: "16898:1:27"
										}
									]
								}
							]
						},
						name: "mod_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "x",
								nodeType: "YulTypedName",
								src: "16829:1:27",
								type: ""
							},
							{
								name: "y",
								nodeType: "YulTypedName",
								src: "16832:1:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "r",
								nodeType: "YulTypedName",
								src: "16838:1:27",
								type: ""
							}
						],
						src: "16806:112:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "17126:286:27",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "17136:29:27",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17154:3:27",
														type: "",
														value: "160"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17159:1:27",
														type: "",
														value: "1"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "17150:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17150:11:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17163:1:27",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "sub",
											nodeType: "YulIdentifier",
											src: "17146:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "17146:19:27"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "17140:2:27",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "17181:9:27"
											},
											{
												"arguments": [
													{
														name: "value0",
														nodeType: "YulIdentifier",
														src: "17196:6:27"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "17204:2:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "17192:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17192:15:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17174:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "17174:34:27"
									},
									nodeType: "YulExpressionStatement",
									src: "17174:34:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17228:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17239:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17224:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17224:18:27"
											},
											{
												"arguments": [
													{
														name: "value1",
														nodeType: "YulIdentifier",
														src: "17248:6:27"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "17256:2:27"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "17244:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17244:15:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17217:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "17217:43:27"
									},
									nodeType: "YulExpressionStatement",
									src: "17217:43:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17280:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17291:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17276:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17276:18:27"
											},
											{
												name: "value2",
												nodeType: "YulIdentifier",
												src: "17296:6:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17269:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "17269:34:27"
									},
									nodeType: "YulExpressionStatement",
									src: "17269:34:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17323:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17334:2:27",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17319:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17319:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17339:3:27",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17312:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "17312:31:27"
									},
									nodeType: "YulExpressionStatement",
									src: "17312:31:27"
								},
								{
									nodeType: "YulAssignment",
									src: "17352:54:27",
									value: {
										"arguments": [
											{
												name: "value3",
												nodeType: "YulIdentifier",
												src: "17378:6:27"
											},
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17390:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17401:3:27",
														type: "",
														value: "128"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17386:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17386:19:27"
											}
										],
										functionName: {
											name: "abi_encode_string",
											nodeType: "YulIdentifier",
											src: "17360:17:27"
										},
										nodeType: "YulFunctionCall",
										src: "17360:46:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "17352:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "17071:9:27",
								type: ""
							},
							{
								name: "value3",
								nodeType: "YulTypedName",
								src: "17082:6:27",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "17090:6:27",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "17098:6:27",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "17106:6:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "17117:4:27",
								type: ""
							}
						],
						src: "16923:489:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "17497:169:27",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "17543:16:27",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "17552:1:27",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "17555:1:27",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "17545:6:27"
													},
													nodeType: "YulFunctionCall",
													src: "17545:12:27"
												},
												nodeType: "YulExpressionStatement",
												src: "17545:12:27"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "17518:7:27"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17527:9:27"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "17514:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17514:23:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17539:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "17510:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "17510:32:27"
									},
									nodeType: "YulIf",
									src: "17507:52:27"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "17568:29:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "17587:9:27"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "17581:5:27"
										},
										nodeType: "YulFunctionCall",
										src: "17581:16:27"
									},
									variables: [
										{
											name: "value",
											nodeType: "YulTypedName",
											src: "17572:5:27",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "17630:5:27"
											}
										],
										functionName: {
											name: "validator_revert_bytes4",
											nodeType: "YulIdentifier",
											src: "17606:23:27"
										},
										nodeType: "YulFunctionCall",
										src: "17606:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "17606:30:27"
								},
								{
									nodeType: "YulAssignment",
									src: "17645:15:27",
									value: {
										name: "value",
										nodeType: "YulIdentifier",
										src: "17655:5:27"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "17645:6:27"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_bytes4_fromMemory",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "17463:9:27",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "17474:7:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "17486:6:27",
								type: ""
							}
						],
						src: "17417:249:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "17845:182:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "17862:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17873:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17855:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "17855:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "17855:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17896:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17907:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17892:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17892:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17912:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17885:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "17885:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "17885:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17935:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17946:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17931:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "17931:18:27"
											},
											{
												hexValue: "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
												kind: "string",
												nodeType: "YulLiteral",
												src: "17951:34:27",
												type: "",
												value: "ERC721: mint to the zero address"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17924:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "17924:62:27"
									},
									nodeType: "YulExpressionStatement",
									src: "17924:62:27"
								},
								{
									nodeType: "YulAssignment",
									src: "17995:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "18007:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "18018:2:27",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "18003:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "18003:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "17995:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "17822:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "17836:4:27",
								type: ""
							}
						],
						src: "17671:356:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "18206:178:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "18223:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "18234:2:27",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "18216:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "18216:21:27"
									},
									nodeType: "YulExpressionStatement",
									src: "18216:21:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "18257:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "18268:2:27",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "18253:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "18253:18:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "18273:2:27",
												type: "",
												value: "28"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "18246:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "18246:30:27"
									},
									nodeType: "YulExpressionStatement",
									src: "18246:30:27"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "18296:9:27"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "18307:2:27",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "18292:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "18292:18:27"
											},
											{
												hexValue: "4552433732313a20746f6b656e20616c7265616479206d696e746564",
												kind: "string",
												nodeType: "YulLiteral",
												src: "18312:30:27",
												type: "",
												value: "ERC721: token already minted"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "18285:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "18285:58:27"
									},
									nodeType: "YulExpressionStatement",
									src: "18285:58:27"
								},
								{
									nodeType: "YulAssignment",
									src: "18352:26:27",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "18364:9:27"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "18375:2:27",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "18360:3:27"
										},
										nodeType: "YulFunctionCall",
										src: "18360:18:27"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "18352:4:27"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "18183:9:27",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "18197:4:27",
								type: ""
							}
						],
						src: "18032:352:27"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "18421:95:27",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "18438:1:27",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "18445:3:27",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "18450:10:27",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "18441:3:27"
												},
												nodeType: "YulFunctionCall",
												src: "18441:20:27"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "18431:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "18431:31:27"
									},
									nodeType: "YulExpressionStatement",
									src: "18431:31:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "18478:1:27",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "18481:4:27",
												type: "",
												value: "0x31"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "18471:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "18471:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "18471:15:27"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "18502:1:27",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "18505:4:27",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "18495:6:27"
										},
										nodeType: "YulFunctionCall",
										src: "18495:15:27"
									},
									nodeType: "YulExpressionStatement",
									src: "18495:15:27"
								}
							]
						},
						name: "panic_error_0x31",
						nodeType: "YulFunctionDefinition",
						src: "18389:127:27"
					}
				]
			},
			contents: "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_string_memory_ptr__to_t_bytes32_t_address_t_string_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_string(value2, add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: approved query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not ow\")\n        mstore(add(headStart, 96), \"ner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"ERC721: transfer caller is not o\")\n        mstore(add(headStart, 96), \"wner nor approved\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"ERC721Enumerable: owner index ou\")\n        mstore(add(headStart, 96), \"t of bounds\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721Enumerable: global index o\")\n        mstore(add(headStart, 96), \"ut of bounds\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: owner query for nonexist\")\n        mstore(add(headStart, 96), \"ent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC721: balance query for the ze\")\n        mstore(add(headStart, 96), \"ro address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"ERC721Metadata: URI query for no\")\n        mstore(add(headStart, 96), \"nexistent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: operator query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}",
			id: 27,
			language: "Yul",
			name: "#utility.yul"
		}
	];
	var sourceMap$1 = "3073:1514:18:-:0;;;492:1;467:26;;3280:164;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390:113:4;;;;;;;;;;;;-1:-1:-1;;;1390:113:4;;;;;;;;;;;;;;;;;;;;;1456:13;;1390:113;;;1456:13;;-1:-1:-1;;1456:13:4;:::i;:::-;-1:-1:-1;1479:17:4;;;;:7;;:17;;;;;:::i;:::-;;1390:113;;921:32:2;940:12;:10;;;:12;;:::i;:::-;921:18;:32::i;:::-;3375:18:18;;::::1;::::0;:7:::1;::::0;:18:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;3403:15:18::1;:34:::0;;-1:-1:-1;;;;;;3403:34:18::1;-1:-1:-1::0;;;;;3403:34:18;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;3073:1514:18;;640:96:11;719:10;;640:96::o;2270:187:2:-;2362:6;;;-1:-1:-1;;;;;2378:17:2;;;-1:-1:-1;;;;;;2378:17:2;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;3073:1514:18:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3073:1514:18;;;-1:-1:-1;3073:1514:18;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:27;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:177;225:13;;-1:-1:-1;;;;;267:31:27;;257:42;;247:70;;313:1;310;303:12;247:70;146:177;;;:::o;328:1174::-;417:6;425;478:2;466:9;457:7;453:23;449:32;446:52;;;494:1;491;484:12;446:52;521:16;;-1:-1:-1;;;;;586:14:27;;;583:34;;;613:1;610;603:12;583:34;651:6;640:9;636:22;626:32;;696:7;689:4;685:2;681:13;677:27;667:55;;718:1;715;708:12;667:55;747:2;741:9;769:2;765;762:10;759:36;;;775:18;;:::i;:::-;850:2;844:9;818:2;904:13;;-1:-1:-1;;900:22:27;;;924:2;896:31;892:40;880:53;;;948:18;;;968:22;;;945:46;942:72;;;994:18;;:::i;:::-;1034:10;1030:2;1023:22;1069:2;1061:6;1054:18;1091:4;1081:14;;1132:7;1127:2;1122;1118;1114:11;1110:20;1107:33;1104:53;;;1153:1;1150;1143:12;1104:53;1175:1;1166:10;;1185:129;1199:2;1196:1;1193:9;1185:129;;;1287:10;;;1283:19;;1277:26;1256:14;;;1252:23;;1245:59;1210:10;;;;1185:129;;;1332:2;1329:1;1326:9;1323:80;;;1391:1;1386:2;1381;1373:6;1369:15;1365:24;1358:35;1323:80;1422:6;-1:-1:-1;1447:49:27;;-1:-1:-1;;1477:18:27;;;1447:49;:::i;:::-;1437:59;;;;328:1174;;;;;:::o;1507:380::-;1586:1;1582:12;;;;1629;;;1650:61;;1704:4;1696:6;1692:17;1682:27;;1650:61;1757:2;1749:6;1746:14;1726:18;1723:38;1720:161;;;1803:10;1798:3;1794:20;1791:1;1784:31;1838:4;1835:1;1828:15;1866:4;1863:1;1856:15;1720:161;;1507:380;;;:::o;:::-;3073:1514:18;;;;;;";
	var deployedSourceMap$1 = "3073:1514:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:267;;;;;;;;;;-1:-1:-1;2074:267:18;;;;;:::i;:::-;;:::i;:::-;;;565:14:27;;558:22;540:41;;528:2;513:18;2074:267:18;;;;;;;;2488:98:4;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4000:217::-;;;;;;;;;;-1:-1:-1;4000:217:4;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:27;;;1674:51;;1662:2;1647:18;4000:217:4;1528:203:27;3538:401:4;;;;;;;;;;-1:-1:-1;3538:401:4;;;;;:::i;:::-;;:::i;:::-;;1615:111:7;;;;;;;;;;-1:-1:-1;1702:10:7;:17;1615:111;;;2319:25:27;;;2307:2;2292:18;1615:111:7;2173:177:27;840:59:18;;;;;;;;;;-1:-1:-1;840:59:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;840:59:18;;;;;;;;;;-1:-1:-1;;;;;2547:32:27;;;2529:51;;2611:2;2596:18;;2589:34;;;;2502:18;840:59:18;2355:274:27;4727:330:4;;;;;;;;;;-1:-1:-1;4727:330:4;;;;;:::i;:::-;;:::i;2347:399:18:-;;;;;;;;;;-1:-1:-1;2347:399:18;;;;;:::i;:::-;;:::i;1291:253:7:-;;;;;;;;;;-1:-1:-1;1291:253:7;;;;;:::i;:::-;;:::i;5123:179:4:-;;;;;;;;;;-1:-1:-1;5123:179:4;;;;;:::i;:::-;;:::i;1798:230:7:-;;;;;;;;;;-1:-1:-1;1798:230:7;;;;;:::i;:::-;;:::i;3656:314:18:-;;;;;;;;;;-1:-1:-1;3656:314:18;;;;;:::i;:::-;;:::i;3554:96::-;;;;;;;;;;-1:-1:-1;3554:96:18;;;;;:::i;:::-;;:::i;4454:131::-;;;;;;;;;;-1:-1:-1;4454:131:18;;;;;:::i;:::-;4511:7;4537:27;;;:18;:27;;;;;:41;;;-1:-1:-1;;;;;4537:41:18;;4454:131;779:55;;;;;;;;;;-1:-1:-1;779:55:18;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;467:26::-;;;;;;;;;;;;;;;;2191:235:4;;;;;;;;;;-1:-1:-1;2191:235:4;;;;;:::i;:::-;;:::i;3125:21:18:-;;;;;;;;;;;;;:::i;1929:205:4:-;;;;;;;;;;-1:-1:-1;1929:205:4;;;;;:::i;:::-;;:::i;1668:101:2:-;;;;;;;;;;;;;:::i;1036:85::-;;;;;;;;;;-1:-1:-1;1108:6:2;;-1:-1:-1;;;;;1108:6:2;1036:85;;2650:102:4;;;;;;;;;;;;;:::i;4284:153::-;;;;;;;;;;-1:-1:-1;4284:153:4;;;;;:::i;:::-;;:::i;5368:320::-;;;;;;;;;;-1:-1:-1;5368:320:4;;;;;:::i;:::-;;:::i;2818:329::-;;;;;;;;;;-1:-1:-1;2818:329:4;;;;;:::i;:::-;;:::i;906:51:18:-;;;;;;;;;;;;952:5;906:51;;1445:623;;;;;;;;;;-1:-1:-1;1445:623:18;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3976:110::-;;;;;;;;;;;;;:::i;4092:356::-;;;;;;:::i;:::-;;:::i;4503:162:4:-;;;;;;;;;;-1:-1:-1;4503:162:4;;;;;:::i;:::-;-1:-1:-1;;;;;4623:25:4;;;4600:4;4623:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4503:162;3152:30:18;;;;;;;;;;-1:-1:-1;3152:30:18;;;;-1:-1:-1;;;;;3152:30:18;;;1918:198:2;;;;;;;;;;-1:-1:-1;1918:198:2;;;;;:::i;:::-;;:::i;2074:267:18:-;2226:4;-1:-1:-1;;;;;;2253:41:18;;-1:-1:-1;;;2253:41:18;;:81;;;2298:36;2322:11;2298:23;:36::i;:::-;2246:88;2074:267;-1:-1:-1;;2074:267:18:o;2488:98:4:-;2542:13;2574:5;2567:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2488:98;:::o;4000:217::-;4076:7;7248:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7248:16:4;4095:73;;;;-1:-1:-1;;;4095:73:4;;8103:2:27;4095:73:4;;;8085:21:27;8142:2;8122:18;;;8115:30;8181:34;8161:18;;;8154:62;-1:-1:-1;;;8232:18:27;;;8225:42;8284:19;;4095:73:4;;;;;;;;;-1:-1:-1;4186:24:4;;;;:15;:24;;;;;;-1:-1:-1;;;;;4186:24:4;;4000:217::o;3538:401::-;3618:13;3634:23;3649:7;3634:14;:23::i;:::-;3618:39;;3681:5;-1:-1:-1;;;;;3675:11:4;:2;-1:-1:-1;;;;;3675:11:4;;;3667:57;;;;-1:-1:-1;;;3667:57:4;;8516:2:27;3667:57:4;;;8498:21:27;8555:2;8535:18;;;8528:30;8594:34;8574:18;;;8567:62;-1:-1:-1;;;8645:18:27;;;8638:31;8686:19;;3667:57:4;8314:397:27;3667:57:4;719:10:11;-1:-1:-1;;;;;3756:21:4;;;;:62;;-1:-1:-1;3781:37:4;3798:5;719:10:11;4503:162:4;:::i;3781:37::-;3735:165;;;;-1:-1:-1;;;3735:165:4;;8918:2:27;3735:165:4;;;8900:21:27;8957:2;8937:18;;;8930:30;8996:34;8976:18;;;8969:62;9067:26;9047:18;;;9040:54;9111:19;;3735:165:4;8716:420:27;3735:165:4;3911:21;3920:2;3924:7;3911:8;:21::i;:::-;3608:331;3538:401;;:::o;4727:330::-;4916:41;719:10:11;4949:7:4;4916:18;:41::i;:::-;4908:103;;;;-1:-1:-1;;;4908:103:4;;;;;;;:::i;:::-;5022:28;5032:4;5038:2;5042:7;5022:9;:28::i;2347:399:18:-;2470:16;2558:30;;;:20;:30;;;;;;;;2525:63;;;;;;;;;;-1:-1:-1;;;;;2525:63:18;;;;;;;;;;;;2470:16;;;;952:5;;2620:44;;:10;:44;:::i;:::-;2619:68;;;;:::i;:::-;2705:21;;;;;-1:-1:-1;2347:399:18;;-1:-1:-1;;;;2347:399:18:o;1291:253:7:-;1388:7;1423:23;1440:5;1423:16;:23::i;:::-;1415:5;:31;1407:87;;;;-1:-1:-1;;;1407:87:7;;10323:2:27;1407:87:7;;;10305:21:27;10362:2;10342:18;;;10335:30;10401:34;10381:18;;;10374:62;-1:-1:-1;;;10452:18:27;;;10445:41;10503:19;;1407:87:7;10121:407:27;1407:87:7;-1:-1:-1;;;;;;1511:19:7;;;;;;;;:12;:19;;;;;;;;:26;;;;;;;;;1291:253::o;5123:179:4:-;5256:39;5273:4;5279:2;5283:7;5256:39;;;;;;;;;;;;:16;:39::i;1798:230:7:-;1873:7;1908:30;1702:10;:17;;1615:111;1908:30;1900:5;:38;1892:95;;;;-1:-1:-1;;;1892:95:7;;10735:2:27;1892:95:7;;;10717:21:27;10774:2;10754:18;;;10747:30;10813:34;10793:18;;;10786:62;-1:-1:-1;;;10864:18:27;;;10857:42;10916:19;;1892:95:7;10533:408:27;1892:95:7;2004:10;2015:5;2004:17;;;;;;;;:::i;:::-;;;;;;;;;1997:24;;1798:230;;;:::o;3656:314:18:-;1108:6:2;;-1:-1:-1;;;;;1108:6:2;719:10:11;1248:23:2;1240:68;;;;-1:-1:-1;;;1240:68:2;;;;;;;:::i;:::-;3769:15:18::1;::::0;-1:-1:-1;;;;;3747:37:18;;::::1;3769:15:::0;::::1;3747:37;;3739:46;;;::::0;::::1;;3824:15;::::0;;-1:-1:-1;;;;;3849:36:18;;::::1;-1:-1:-1::0;;;;;;3849:36:18;::::1;::::0;::::1;::::0;;;3901:62:::1;::::0;;3824:15;;;::::1;11651:34:27::0;;;11716:2;11701:18;;11694:43;;;;3901:62:18::1;::::0;11586:18:27;3901:62:18::1;;;;;;;3729:241;3656:314:::0;:::o;3554:96::-;1108:6:2;;-1:-1:-1;;;;;1108:6:2;719:10:11;1248:23:2;1240:68;;;;-1:-1:-1;;;1240:68:2;;;;;;;:::i;:::-;3625:18:18;;::::1;::::0;:7:::1;::::0;:18:::1;::::0;::::1;::::0;::::1;:::i;:::-;;3554:96:::0;:::o;779:55::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;779:55:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2191:235:4:-;2263:7;2298:16;;;:7;:16;;;;;;-1:-1:-1;;;;;2298:16:4;2332:19;2324:73;;;;-1:-1:-1;;;2324:73:4;;11950:2:27;2324:73:4;;;11932:21:27;11989:2;11969:18;;;11962:30;12028:34;12008:18;;;12001:62;-1:-1:-1;;;12079:18:27;;;12072:39;12128:19;;2324:73:4;11748:405:27;3125:21:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1929:205:4:-;2001:7;-1:-1:-1;;;;;2028:19:4;;2020:74;;;;-1:-1:-1;;;2020:74:4;;12360:2:27;2020:74:4;;;12342:21:27;12399:2;12379:18;;;12372:30;12438:34;12418:18;;;12411:62;-1:-1:-1;;;12489:18:27;;;12482:40;12539:19;;2020:74:4;12158:406:27;2020:74:4;-1:-1:-1;;;;;;2111:16:4;;;;;:9;:16;;;;;;;1929:205::o;1668:101:2:-;1108:6;;-1:-1:-1;;;;;1108:6:2;719:10:11;1248:23:2;1240:68;;;;-1:-1:-1;;;1240:68:2;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;2650:102:4:-;2706:13;2738:7;2731:14;;;;;:::i;4284:153::-;4378:52;719:10:11;4411:8:4;4421;4378:18;:52::i;5368:320::-;5537:41;719:10:11;5570:7:4;5537:18;:41::i;:::-;5529:103;;;;-1:-1:-1;;;5529:103:4;;;;;;;:::i;:::-;5642:39;5656:4;5662:2;5666:7;5675:5;5642:13;:39::i;:::-;5368:320;;;;:::o;2818:329::-;7225:4;7248:16;;;:7;:16;;;;;;2891:13;;-1:-1:-1;;;;;7248:16:4;2916:76;;;;-1:-1:-1;;;2916:76:4;;12771:2:27;2916:76:4;;;12753:21:27;12810:2;12790:18;;;12783:30;12849:34;12829:18;;;12822:62;-1:-1:-1;;;12900:18:27;;;12893:45;12955:19;;2916:76:4;12569:411:27;2916:76:4;3003:21;3027:10;:8;:10::i;:::-;3003:34;;3078:1;3060:7;3054:21;:25;:86;;;;;;;;;;;;;;;;;3106:7;3115:18;:7;:16;:18::i;:::-;3089:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3054:86;3047:93;2818:329;-1:-1:-1;;;2818:329:4:o;1445:623:18:-;1532:16;1564:19;1614:1;1597:160;1622:7;;1617:1;:12;1597:160;;1654:21;;;;:18;:21;;;;;:35;;;-1:-1:-1;;;;;1654:45:18;;;:35;;:45;1650:97;;;1719:13;;;;:::i;:::-;;;;1650:97;1631:3;;;;:::i;:::-;;;;1597:160;;;;1766:23;1806:11;1792:26;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1792:26:18;-1:-1:-1;1766:52:18;-1:-1:-1;1828:22:18;1881:1;1864:175;1889:7;;1884:1;:12;1864:175;;1921:21;;;;:18;:21;;;;;:35;;;-1:-1:-1;;;;;1921:45:18;;;:35;;:45;1917:112;;;2013:1;1986:6;1993:16;;;;:::i;:::-;;;1986:24;;;;;;;;:::i;:::-;;;;;;:28;;;;;1917:112;1898:3;;;;:::i;:::-;;;;1864:175;;;-1:-1:-1;2055:6:18;;1445:623;-1:-1:-1;;;;1445:623:18:o;3976:110::-;4054:15;;4041:38;;;-1:-1:-1;;;4041:38:18;;;;4015:7;;-1:-1:-1;;;;;4054:15:18;;4041:36;;:38;;;;;;;;;;;;;;4054:15;4041:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4034:45;;3976:110;:::o;4092:356::-;4207:7;4226:15;4244:58;4256:11;4269:10;4281:20;4244:11;:58::i;:::-;4326:15;;4313:103;;-1:-1:-1;;;4313:103:18;;;;;13991:25:27;;;4401:4:18;14032:18:27;;;14025:60;14101:18;;;14094:34;;;4226:76:18;;-1:-1:-1;;;;;;4326:15:18;;4313:48;;4369:9;;13964:18:27;;4313:103:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4434:7:18;;4092:356;-1:-1:-1;;;;;;;;4092:356:18:o;1918:198:2:-;1108:6;;-1:-1:-1;;;;;1108:6:2;719:10:11;1248:23:2;1240:68;;;;-1:-1:-1;;;1240:68:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:2;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:2;;14341:2:27;1998:73:2::1;::::0;::::1;14323:21:27::0;14380:2;14360:18;;;14353:30;14419:34;14399:18;;;14392:62;-1:-1:-1;;;14470:18:27;;;14463:36;14516:19;;1998:73:2::1;14139:402:27::0;1998:73:2::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;990:222:7:-;1092:4;-1:-1:-1;;;;;;1115:50:7;;-1:-1:-1;;;1115:50:7;;:90;;;1169:36;1193:11;1169:23;:36::i;11169:171:4:-;11243:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;11243:29:4;-1:-1:-1;;;;;11243:29:4;;;;;;;;:24;;11296:23;11243:24;11296:14;:23::i;:::-;-1:-1:-1;;;;;11287:46:4;;;;;;;;;;;11169:171;;:::o;7443:344::-;7536:4;7248:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7248:16:4;7552:73;;;;-1:-1:-1;;;7552:73:4;;14748:2:27;7552:73:4;;;14730:21:27;14787:2;14767:18;;;14760:30;14826:34;14806:18;;;14799:62;-1:-1:-1;;;14877:18:27;;;14870:42;14929:19;;7552:73:4;14546:408:27;7552:73:4;7635:13;7651:23;7666:7;7651:14;:23::i;:::-;7635:39;;7703:5;-1:-1:-1;;;;;7692:16:4;:7;-1:-1:-1;;;;;7692:16:4;;:52;;;-1:-1:-1;;;;;;4623:25:4;;;4600:4;4623:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7712:32;7692:87;;;;7772:7;-1:-1:-1;;;;;7748:31:4;:20;7760:7;7748:11;:20::i;:::-;-1:-1:-1;;;;;7748:31:4;;7692:87;7684:96;7443:344;-1:-1:-1;;;;7443:344:4:o;10453:605::-;10607:4;-1:-1:-1;;;;;10580:31:4;:23;10595:7;10580:14;:23::i;:::-;-1:-1:-1;;;;;10580:31:4;;10572:81;;;;-1:-1:-1;;;10572:81:4;;15161:2:27;10572:81:4;;;15143:21:27;15200:2;15180:18;;;15173:30;15239:34;15219:18;;;15212:62;-1:-1:-1;;;15290:18:27;;;15283:35;15335:19;;10572:81:4;14959:401:27;10572:81:4;-1:-1:-1;;;;;10671:16:4;;10663:65;;;;-1:-1:-1;;;10663:65:4;;15567:2:27;10663:65:4;;;15549:21:27;15606:2;15586:18;;;15579:30;15645:34;15625:18;;;15618:62;-1:-1:-1;;;15696:18:27;;;15689:34;15740:19;;10663:65:4;15365:400:27;10663:65:4;10739:39;10760:4;10766:2;10770:7;10739:20;:39::i;:::-;10840:29;10857:1;10861:7;10840:8;:29::i;:::-;-1:-1:-1;;;;;10880:15:4;;;;;;:9;:15;;;;;:20;;10899:1;;10880:15;:20;;10899:1;;10880:20;:::i;:::-;;;;-1:-1:-1;;;;;;;10910:13:4;;;;;;:9;:13;;;;;:18;;10927:1;;10910:13;:18;;10927:1;;10910:18;:::i;:::-;;;;-1:-1:-1;;10938:16:4;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;10938:21:4;-1:-1:-1;;;;;10938:21:4;;;;;;;;;10975:27;;10938:16;;10975:27;;;;;;;3608:331;3538:401;;:::o;2270:187:2:-;2362:6;;;-1:-1:-1;;;;;2378:17:2;;;-1:-1:-1;;;;;;2378:17:2;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;11475:307:4:-;11625:8;-1:-1:-1;;;;;11616:17:4;:5;-1:-1:-1;;;;;11616:17:4;;;11608:55;;;;-1:-1:-1;;;11608:55:4;;16235:2:27;11608:55:4;;;16217:21:27;16274:2;16254:18;;;16247:30;16313:27;16293:18;;;16286:55;16358:18;;11608:55:4;16033:349:27;11608:55:4;-1:-1:-1;;;;;11673:25:4;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;11673:46:4;;;;;;;;;;11734:41;;540::27;;;11734::4;;513:18:27;11734:41:4;;;;;;;11475:307;;;:::o;6550:::-;6701:28;6711:4;6717:2;6721:7;6701:9;:28::i;:::-;6747:48;6770:4;6776:2;6780:7;6789:5;6747:22;:48::i;:::-;6739:111;;;;-1:-1:-1;;;6739:111:4;;;;;;;:::i;3450:98:18:-;3502:13;3534:7;3527:14;;;;;:::i;328:703:12:-;384:13;601:10;597:51;;-1:-1:-1;;627:10:12;;;;;;;;;;;;-1:-1:-1;;;627:10:12;;;;;328:703::o;597:51::-;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:12;;-1:-1:-1;773:2:12;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;817:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:12;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:12;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;902:56:12;;;;;;;;-1:-1:-1;972:11:12;981:2;972:11;;:::i;:::-;;;844:150;;964:475:18;1074:7;1093:15;1113:7;;1111:9;;;;;:::i;:::-;;;;;-1:-1:-1;1159:46:18;;;;;;;;;;;1182:10;1159:46;;;;;;;;;;;;;-1:-1:-1;1215:27:18;;;:18;:27;;;;;;:39;;;;;;;;;;;-1:-1:-1;;;;;;1215:39:18;-1:-1:-1;;;;;1215:39:18;;;;;;;;;;;;;1111:9;;-1:-1:-1;1159:46:18;;;;1215:27;;:39;;;;;;;;;;:::i;:::-;;;;;1264:26;1270:10;1282:7;1264:5;:26::i;:::-;1304:24;;1300:109;;2890:31;2924:30;;;:20;:30;;;;;2964:34;;-1:-1:-1;;;;;;2964:34:18;1365:10;2964:34;;;-1:-1:-1;3008:31:18;:54;;;1344;-1:-1:-1;1425:7:18;964:475;-1:-1:-1;;;;964:475:18:o;1570:300:4:-;1672:4;-1:-1:-1;;;;;;1707:40:4;;-1:-1:-1;;;1707:40:4;;:104;;-1:-1:-1;;;;;;;1763:48:4;;-1:-1:-1;;;1763:48:4;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:15;;;1827:36:4;829:155:15;2624:572:7;-1:-1:-1;;;;;2823:18:7;;2819:183;;2857:40;2889:7;4005:10;:17;;3978:24;;;;:15;:24;;;;;:44;;;4032:24;;;;;;;;;;;;3902:161;2857:40;2819:183;;;2926:2;-1:-1:-1;;;;;2918:10:7;:4;-1:-1:-1;;;;;2918:10:7;;2914:88;;2944:47;2977:4;2983:7;2944:32;:47::i;:::-;-1:-1:-1;;;;;3015:16:7;;3011:179;;3047:45;3084:7;3047:36;:45::i;3011:179::-;3119:4;-1:-1:-1;;;;;3113:10:7;:2;-1:-1:-1;;;;;3113:10:7;;3109:81;;3139:40;3167:2;3171:7;3139:27;:40::i;12335:778:4:-;12485:4;-1:-1:-1;;;;;12505:13:4;;1465:19:10;:23;12501:606:4;;12540:72;;-1:-1:-1;;;12540:72:4;;-1:-1:-1;;;;;12540:36:4;;;;;:72;;719:10:11;;12591:4:4;;12597:7;;12606:5;;12540:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12540:72:4;;;;;;;;-1:-1:-1;;12540:72:4;;;;;;;;;;;;:::i;:::-;;;12536:519;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12779:13:4;;12775:266;;12821:60;;-1:-1:-1;;;12821:60:4;;;;;;;:::i;12775:266::-;12993:6;12987:13;12978:6;12974:2;12970:15;12963:38;12536:519;-1:-1:-1;;;;;;12662:51:4;-1:-1:-1;;;12662:51:4;;-1:-1:-1;12655:58:4;;12501:606;-1:-1:-1;13092:4:4;12335:778;;;;;;:::o;9079:427::-;-1:-1:-1;;;;;9158:16:4;;9150:61;;;;-1:-1:-1;;;9150:61:4;;17873:2:27;9150:61:4;;;17855:21:27;;;17892:18;;;17885:30;17951:34;17931:18;;;17924:62;18003:18;;9150:61:4;17671:356:27;9150:61:4;7225:4;7248:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7248:16:4;:30;9221:58;;;;-1:-1:-1;;;9221:58:4;;18234:2:27;9221:58:4;;;18216:21:27;18273:2;18253:18;;;18246:30;18312;18292:18;;;18285:58;18360:18;;9221:58:4;18032:352:27;9221:58:4;9290:45;9319:1;9323:2;9327:7;9290:20;:45::i;:::-;-1:-1:-1;;;;;9346:13:4;;;;;;:9;:13;;;;;:18;;9363:1;;9346:13;:18;;9363:1;;9346:18;:::i;:::-;;;;-1:-1:-1;;9374:16:4;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9374:21:4;-1:-1:-1;;;;;9374:21:4;;;;;;;;9411:33;;9374:16;;;9411:33;;9374:16;;9411:33;3625:18:18::1;3554:96:::0;:::o;4680:970:7:-;4942:22;4992:1;4967:22;4984:4;4967:16;:22::i;:::-;:26;;;;:::i;:::-;5003:18;5024:26;;;:17;:26;;;;;;4942:51;;-1:-1:-1;5154:28:7;;;5150:323;;-1:-1:-1;;;;;5220:18:7;;5198:19;5220:18;;;:12;:18;;;;;;;;:34;;;;;;;;;5269:30;;;;;;:44;;;5385:30;;:17;:30;;;;;:43;;;5150:323;-1:-1:-1;5566:26:7;;;;:17;:26;;;;;;;;5559:33;;;-1:-1:-1;;;;;5609:18:7;;;;;:12;:18;;;;;:34;;;;;;;5602:41;4680:970::o;5938:1061::-;6212:10;:17;6187:22;;6212:21;;6232:1;;6212:21;:::i;:::-;6243:18;6264:24;;;:15;:24;;;;;;6632:10;:26;;6187:46;;-1:-1:-1;6264:24:7;;6187:46;;6632:26;;;;;;:::i;:::-;;;;;;;;;6610:48;;6694:11;6669:10;6680;6669:22;;;;;;;;:::i;:::-;;;;;;;;;;;;:36;;;;6773:28;;;:15;:28;;;;;;;:41;;;6942:24;;;;;6935:31;6976:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;6009:990;;;5938:1061;:::o;3490:217::-;3574:14;3591:20;3608:2;3591:16;:20::i;:::-;-1:-1:-1;;;;;3621:16:7;;;;;;;:12;:16;;;;;;;;:24;;;;;;;;:34;;;3665:26;;;:17;:26;;;;;;:35;;;;-1:-1:-1;3490:217:7:o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:27;-1:-1:-1;;;;;;88:32:27;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:27;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:27;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:27:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:27;;1343:180;-1:-1:-1;1343:180:27:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:27;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:27:o;2634:328::-;2711:6;2719;2727;2780:2;2768:9;2759:7;2755:23;2751:32;2748:52;;;2796:1;2793;2786:12;2748:52;2819:29;2838:9;2819:29;:::i;:::-;2809:39;;2867:38;2901:2;2890:9;2886:18;2867:38;:::i;:::-;2857:48;;2952:2;2941:9;2937:18;2924:32;2914:42;;2634:328;;;;;:::o;2967:248::-;3035:6;3043;3096:2;3084:9;3075:7;3071:23;3067:32;3064:52;;;3112:1;3109;3102:12;3064:52;-1:-1:-1;;3135:23:27;;;3205:2;3190:18;;;3177:32;;-1:-1:-1;2967:248:27:o;3220:186::-;3279:6;3332:2;3320:9;3311:7;3307:23;3303:32;3300:52;;;3348:1;3345;3338:12;3300:52;3371:29;3390:9;3371:29;:::i;3411:127::-;3472:10;3467:3;3463:20;3460:1;3453:31;3503:4;3500:1;3493:15;3527:4;3524:1;3517:15;3543:632;3608:5;3638:18;3679:2;3671:6;3668:14;3665:40;;;3685:18;;:::i;:::-;3760:2;3754:9;3728:2;3814:15;;-1:-1:-1;;3810:24:27;;;3836:2;3806:33;3802:42;3790:55;;;3860:18;;;3880:22;;;3857:46;3854:72;;;3906:18;;:::i;:::-;3946:10;3942:2;3935:22;3975:6;3966:15;;4005:6;3997;3990:22;4045:3;4036:6;4031:3;4027:16;4024:25;4021:45;;;4062:1;4059;4052:12;4021:45;4112:6;4107:3;4100:4;4092:6;4088:17;4075:44;4167:1;4160:4;4151:6;4143;4139:19;4135:30;4128:41;;;;3543:632;;;;;:::o;4180:222::-;4223:5;4276:3;4269:4;4261:6;4257:17;4253:27;4243:55;;4294:1;4291;4284:12;4243:55;4316:80;4392:3;4383:6;4370:20;4363:4;4355:6;4351:17;4316:80;:::i;4407:322::-;4476:6;4529:2;4517:9;4508:7;4504:23;4500:32;4497:52;;;4545:1;4542;4535:12;4497:52;4585:9;4572:23;4618:18;4610:6;4607:30;4604:50;;;4650:1;4647;4640:12;4604:50;4673;4715:7;4706:6;4695:9;4691:22;4673:50;:::i;4734:388::-;4921:25;;;-1:-1:-1;;;;;4982:32:27;;4977:2;4962:18;;4955:60;5051:2;5046;5031:18;;5024:30;;;-1:-1:-1;;5071:45:27;;5097:18;;5089:6;5071:45;:::i;:::-;5063:53;4734:388;-1:-1:-1;;;;;4734:388:27:o;5127:347::-;5192:6;5200;5253:2;5241:9;5232:7;5228:23;5224:32;5221:52;;;5269:1;5266;5259:12;5221:52;5292:29;5311:9;5292:29;:::i;:::-;5282:39;;5371:2;5360:9;5356:18;5343:32;5418:5;5411:13;5404:21;5397:5;5394:32;5384:60;;5440:1;5437;5430:12;5384:60;5463:5;5453:15;;;5127:347;;;;;:::o;5479:667::-;5574:6;5582;5590;5598;5651:3;5639:9;5630:7;5626:23;5622:33;5619:53;;;5668:1;5665;5658:12;5619:53;5691:29;5710:9;5691:29;:::i;:::-;5681:39;;5739:38;5773:2;5762:9;5758:18;5739:38;:::i;:::-;5729:48;;5824:2;5813:9;5809:18;5796:32;5786:42;;5879:2;5868:9;5864:18;5851:32;5906:18;5898:6;5895:30;5892:50;;;5938:1;5935;5928:12;5892:50;5961:22;;6014:4;6006:13;;6002:27;-1:-1:-1;5992:55:27;;6043:1;6040;6033:12;5992:55;6066:74;6132:7;6127:2;6114:16;6109:2;6105;6101:11;6066:74;:::i;:::-;6056:84;;;5479:667;;;;;;;:::o;6151:632::-;6322:2;6374:21;;;6444:13;;6347:18;;;6466:22;;;6293:4;;6322:2;6545:15;;;;6519:2;6504:18;;;6293:4;6588:169;6602:6;6599:1;6596:13;6588:169;;;6663:13;;6651:26;;6732:15;;;;6697:12;;;;6624:1;6617:9;6588:169;;;-1:-1:-1;6774:3:27;;6151:632;-1:-1:-1;;;;;;6151:632:27:o;6788:458::-;6875:6;6883;6891;6944:2;6932:9;6923:7;6919:23;6915:32;6912:52;;;6960:1;6957;6950:12;6912:52;7000:9;6987:23;7033:18;7025:6;7022:30;7019:50;;;7065:1;7062;7055:12;7019:50;7088;7130:7;7121:6;7110:9;7106:22;7088:50;:::i;:::-;7078:60;7185:2;7170:18;;7157:32;;-1:-1:-1;7236:2:27;7221:18;;;7208:32;;6788:458;-1:-1:-1;;;;6788:458:27:o;7251:260::-;7319:6;7327;7380:2;7368:9;7359:7;7355:23;7351:32;7348:52;;;7396:1;7393;7386:12;7348:52;7419:29;7438:9;7419:29;:::i;:::-;7409:39;;7467:38;7501:2;7490:9;7486:18;7467:38;:::i;:::-;7457:48;;7251:260;;;;;:::o;7516:380::-;7595:1;7591:12;;;;7638;;;7659:61;;7713:4;7705:6;7701:17;7691:27;;7659:61;7766:2;7758:6;7755:14;7735:18;7732:38;7729:161;;;7812:10;7807:3;7803:20;7800:1;7793:31;7847:4;7844:1;7837:15;7875:4;7872:1;7865:15;7729:161;;7516:380;;;:::o;9141:413::-;9343:2;9325:21;;;9382:2;9362:18;;;9355:30;9421:34;9416:2;9401:18;;9394:62;-1:-1:-1;;;9487:2:27;9472:18;;9465:47;9544:3;9529:19;;9141:413::o;9559:127::-;9620:10;9615:3;9611:20;9608:1;9601:31;9651:4;9648:1;9641:15;9675:4;9672:1;9665:15;9691:168;9731:7;9797:1;9793;9789:6;9785:14;9782:1;9779:21;9774:1;9767:9;9760:17;9756:45;9753:71;;;9804:18;;:::i;:::-;-1:-1:-1;9844:9:27;;9691:168::o;9864:127::-;9925:10;9920:3;9916:20;9913:1;9906:31;9956:4;9953:1;9946:15;9980:4;9977:1;9970:15;9996:120;10036:1;10062;10052:35;;10067:18;;:::i;:::-;-1:-1:-1;10101:9:27;;9996:120::o;10946:127::-;11007:10;11002:3;10998:20;10995:1;10988:31;11038:4;11035:1;11028:15;11062:4;11059:1;11052:15;11078:356;11280:2;11262:21;;;11299:18;;;11292:30;11358:34;11353:2;11338:18;;11331:62;11425:2;11410:18;;11078:356::o;12985:470::-;13164:3;13202:6;13196:13;13218:53;13264:6;13259:3;13252:4;13244:6;13240:17;13218:53;:::i;:::-;13334:13;;13293:16;;;;13356:57;13334:13;13293:16;13390:4;13378:17;;13356:57;:::i;:::-;13429:20;;12985:470;-1:-1:-1;;;;12985:470:27:o;13460:135::-;13499:3;-1:-1:-1;;13520:17:27;;13517:43;;;13540:18;;:::i;:::-;-1:-1:-1;13587:1:27;13576:13;;13460:135::o;13600:184::-;13670:6;13723:2;13711:9;13702:7;13698:23;13694:32;13691:52;;;13739:1;13736;13729:12;13691:52;-1:-1:-1;13762:16:27;;13600:184;-1:-1:-1;13600:184:27:o;15770:125::-;15810:4;15838:1;15835;15832:8;15829:34;;;15843:18;;:::i;:::-;-1:-1:-1;15880:9:27;;15770:125::o;15900:128::-;15940:3;15971:1;15967:6;15964:1;15961:13;15958:39;;;15977:18;;:::i;:::-;-1:-1:-1;16013:9:27;;15900:128::o;16387:414::-;16589:2;16571:21;;;16628:2;16608:18;;;16601:30;16667:34;16662:2;16647:18;;16640:62;-1:-1:-1;;;16733:2:27;16718:18;;16711:48;16791:3;16776:19;;16387:414::o;16806:112::-;16838:1;16864;16854:35;;16869:18;;:::i;:::-;-1:-1:-1;16903:9:27;;16806:112::o;16923:489::-;-1:-1:-1;;;;;17192:15:27;;;17174:34;;17244:15;;17239:2;17224:18;;17217:43;17291:2;17276:18;;17269:34;;;17339:3;17334:2;17319:18;;17312:31;;;17117:4;;17360:46;;17386:19;;17378:6;17360:46;:::i;:::-;17352:54;16923:489;-1:-1:-1;;;;;;16923:489:27:o;17417:249::-;17486:6;17539:2;17527:9;17518:7;17514:23;17510:32;17507:52;;;17555:1;17552;17545:12;17507:52;17587:9;17581:16;17606:30;17630:5;17606:30;:::i;18389:127::-;18450:10;18445:3;18441:20;18438:1;18431:31;18481:4;18478:1;18471:15;18505:4;18502:1;18495:15";
	var source$1 = "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport \"./IVWBL.sol\";\nimport \"./gateway/IVWBLGateway.sol\";\n\nabstract contract VWBLProtocol is ERC721Enumerable, IERC2981 {\n    uint256 public counter = 0;\n    struct TokenInfo {\n        bytes32 documentId;\n        address minterAddress;\n        string getKeyURl;\n    }\n\n    struct RoyaltyInfo {\n        address recipient;\n        uint256 royaltiesPercentage; // if percentage is 3.5, royaltiesPercentage=3.5*10^2 (decimal is 2)\n    }\n\n    mapping(uint256 => TokenInfo) public tokenIdToTokenInfo;\n    mapping(uint256 => RoyaltyInfo) public tokenIdToRoyaltyInfo;\n\n    uint256 public constant INVERSE_BASIS_POINT = 10000;\n\n    function _mint(bytes32 _documentId, string memory _getKeyURl, uint256 _royaltiesPercentage) internal returns (uint256) {\n        uint256 tokenId = ++counter;\n        TokenInfo memory tokenInfo = TokenInfo(_documentId, msg.sender, _getKeyURl);\n        tokenIdToTokenInfo[tokenId] = tokenInfo;\n        _mint(msg.sender, tokenId);\n        if (_royaltiesPercentage > 0) {\n            _setRoyalty(tokenId, msg.sender, _royaltiesPercentage);\n        }\n        return tokenId;\n    }\n\n    function getTokenByMinter(address minter)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 resultCount = 0;\n        for (uint256 i = 1; i <= counter; i++) {\n            if (tokenIdToTokenInfo[i].minterAddress == minter) {\n                resultCount++;\n            }\n        }\n        uint256[] memory tokens = new uint256[](resultCount);\n        uint256 currentCounter = 0;\n        for (uint256 i = 1; i <= counter; i++) {\n            if (tokenIdToTokenInfo[i].minterAddress == minter) {\n                tokens[currentCounter++] = i;\n            }\n        }\n        return tokens;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC721Enumerable)\n        returns (bool)\n    {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        RoyaltyInfo memory royaltyInfo = tokenIdToRoyaltyInfo[_tokenId];\n        uint256 _royalties = (_salePrice * royaltyInfo.royaltiesPercentage) / INVERSE_BASIS_POINT;\n        return (royaltyInfo.recipient, _royalties);\n    }\n\n    function _setRoyalty(\n        uint256 _tokenId,\n        address _recipient,\n        uint256 _royaltiesPercentage\n    ) internal {\n        RoyaltyInfo storage royaltyInfo = tokenIdToRoyaltyInfo[_tokenId];\n        royaltyInfo.recipient = _recipient;\n        royaltyInfo.royaltiesPercentage = _royaltiesPercentage;\n    }\n}\n\ncontract VWBL is VWBLProtocol, Ownable, IVWBL {\n    string public baseURI;\n    address public gatewayContract;\n\n    event gatewayContractChanged(address oldGatewayContract, address newGatewayContract);\n\n    constructor(string memory _baseURI, address _gatewayContract) ERC721(\"VWBL\", \"VWBL\") {\n        baseURI = _baseURI;\n        gatewayContract = _gatewayContract;\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n\n    function setBaseURI(string memory _baseURI) public onlyOwner {\n        baseURI = _baseURI;\n    }\n\n    function setGatewayContract(address newGatewayContract) public onlyOwner {\n        require(newGatewayContract != gatewayContract);\n        address oldGatewayContract = gatewayContract;\n        gatewayContract = newGatewayContract;\n\n        emit gatewayContractChanged(oldGatewayContract, newGatewayContract);\n    }\n\n    function getFee() public view returns (uint256) {\n        return IVWBLGateway(gatewayContract).feeWei();\n    }\n\n    function mint(string memory _getKeyURl, uint256 _royaltiesPercentage, bytes32 _documentId) public payable returns (uint256) {\n        uint256 tokenId = super._mint(_documentId, _getKeyURl, _royaltiesPercentage);\n\n        IVWBLGateway(gatewayContract).grantAccessControl{value: msg.value}(_documentId, address(this), tokenId);\n\n        return tokenId;\n    }\n\n    function getMinter(uint256 tokenId) public view returns (address) {\n        return tokenIdToTokenInfo[tokenId].minterAddress;\n    }\n}\n";
	var sourcePath$1 = "/Users/asumayamada/Work/ango-ya/VWBL-protocol/contracts/ERC721/VWBL.sol";
	var ast$1 = {
		absolutePath: "project:/contracts/ERC721/VWBL.sol",
		exportedSymbols: {
			Address: [
				2207
			],
			Context: [
				2229
			],
			ERC165: [
				3017
			],
			ERC721: [
				1382
			],
			ERC721Enumerable: [
				1854
			],
			IERC165: [
				3029
			],
			IERC2981: [
				516
			],
			IERC721: [
				1498
			],
			IERC721Enumerable: [
				1885
			],
			IERC721Metadata: [
				1912
			],
			IERC721Receiver: [
				1516
			],
			IVWBL: [
				3056
			],
			IVWBLGateway: [
				3523
			],
			Ownable: [
				497
			],
			Strings: [
				2432
			],
			VWBL: [
				3466
			],
			VWBLProtocol: [
				3318
			]
		},
		id: 3467,
		nodeType: "SourceUnit",
		nodes: [
			{
				id: 3058,
				literals: [
					"solidity",
					"^",
					"0.8",
					".0"
				],
				nodeType: "PragmaDirective",
				src: "0:23:18"
			},
			{
				absolutePath: "@openzeppelin/contracts/token/ERC721/ERC721.sol",
				file: "@openzeppelin/contracts/token/ERC721/ERC721.sol",
				id: 3059,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 3467,
				sourceUnit: 1383,
				src: "25:57:18",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol",
				file: "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol",
				id: 3060,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 3467,
				sourceUnit: 1855,
				src: "83:78:18",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "@openzeppelin/contracts/access/Ownable.sol",
				file: "@openzeppelin/contracts/access/Ownable.sol",
				id: 3061,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 3467,
				sourceUnit: 498,
				src: "162:52:18",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "@openzeppelin/contracts/interfaces/IERC2981.sol",
				file: "@openzeppelin/contracts/interfaces/IERC2981.sol",
				id: 3062,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 3467,
				sourceUnit: 517,
				src: "215:57:18",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "@openzeppelin/contracts/utils/introspection/IERC165.sol",
				file: "@openzeppelin/contracts/utils/introspection/IERC165.sol",
				id: 3063,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 3467,
				sourceUnit: 3030,
				src: "273:65:18",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "project:/contracts/ERC721/IVWBL.sol",
				file: "./IVWBL.sol",
				id: 3064,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 3467,
				sourceUnit: 3057,
				src: "340:21:18",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "project:/contracts/ERC721/gateway/IVWBLGateway.sol",
				file: "./gateway/IVWBLGateway.sol",
				id: 3065,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 3467,
				sourceUnit: 3524,
				src: "362:36:18",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				abstract: true,
				baseContracts: [
					{
						baseName: {
							id: 3066,
							name: "ERC721Enumerable",
							nodeType: "IdentifierPath",
							referencedDeclaration: 1854,
							src: "434:16:18"
						},
						id: 3067,
						nodeType: "InheritanceSpecifier",
						src: "434:16:18"
					},
					{
						baseName: {
							id: 3068,
							name: "IERC2981",
							nodeType: "IdentifierPath",
							referencedDeclaration: 516,
							src: "452:8:18"
						},
						id: 3069,
						nodeType: "InheritanceSpecifier",
						src: "452:8:18"
					}
				],
				canonicalName: "VWBLProtocol",
				contractDependencies: [
				],
				contractKind: "contract",
				fullyImplemented: false,
				id: 3318,
				linearizedBaseContracts: [
					3318,
					516,
					1854,
					1885,
					1382,
					1912,
					1498,
					3017,
					3029,
					2229
				],
				name: "VWBLProtocol",
				nameLocation: "418:12:18",
				nodeType: "ContractDefinition",
				nodes: [
					{
						constant: false,
						functionSelector: "61bc221a",
						id: 3072,
						mutability: "mutable",
						name: "counter",
						nameLocation: "482:7:18",
						nodeType: "VariableDeclaration",
						scope: 3318,
						src: "467:26:18",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_uint256",
							typeString: "uint256"
						},
						typeName: {
							id: 3070,
							name: "uint256",
							nodeType: "ElementaryTypeName",
							src: "467:7:18",
							typeDescriptions: {
								typeIdentifier: "t_uint256",
								typeString: "uint256"
							}
						},
						value: {
							hexValue: "30",
							id: 3071,
							isConstant: false,
							isLValue: false,
							isPure: true,
							kind: "number",
							lValueRequested: false,
							nodeType: "Literal",
							src: "492:1:18",
							typeDescriptions: {
								typeIdentifier: "t_rational_0_by_1",
								typeString: "int_const 0"
							},
							value: "0"
						},
						visibility: "public"
					},
					{
						canonicalName: "VWBLProtocol.TokenInfo",
						id: 3079,
						members: [
							{
								constant: false,
								id: 3074,
								mutability: "mutable",
								name: "documentId",
								nameLocation: "534:10:18",
								nodeType: "VariableDeclaration",
								scope: 3079,
								src: "526:18:18",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_bytes32",
									typeString: "bytes32"
								},
								typeName: {
									id: 3073,
									name: "bytes32",
									nodeType: "ElementaryTypeName",
									src: "526:7:18",
									typeDescriptions: {
										typeIdentifier: "t_bytes32",
										typeString: "bytes32"
									}
								},
								visibility: "internal"
							},
							{
								constant: false,
								id: 3076,
								mutability: "mutable",
								name: "minterAddress",
								nameLocation: "562:13:18",
								nodeType: "VariableDeclaration",
								scope: 3079,
								src: "554:21:18",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_address",
									typeString: "address"
								},
								typeName: {
									id: 3075,
									name: "address",
									nodeType: "ElementaryTypeName",
									src: "554:7:18",
									stateMutability: "nonpayable",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									}
								},
								visibility: "internal"
							},
							{
								constant: false,
								id: 3078,
								mutability: "mutable",
								name: "getKeyURl",
								nameLocation: "592:9:18",
								nodeType: "VariableDeclaration",
								scope: 3079,
								src: "585:16:18",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_string_storage_ptr",
									typeString: "string"
								},
								typeName: {
									id: 3077,
									name: "string",
									nodeType: "ElementaryTypeName",
									src: "585:6:18",
									typeDescriptions: {
										typeIdentifier: "t_string_storage_ptr",
										typeString: "string"
									}
								},
								visibility: "internal"
							}
						],
						name: "TokenInfo",
						nameLocation: "506:9:18",
						nodeType: "StructDefinition",
						scope: 3318,
						src: "499:109:18",
						visibility: "public"
					},
					{
						canonicalName: "VWBLProtocol.RoyaltyInfo",
						id: 3084,
						members: [
							{
								constant: false,
								id: 3081,
								mutability: "mutable",
								name: "recipient",
								nameLocation: "651:9:18",
								nodeType: "VariableDeclaration",
								scope: 3084,
								src: "643:17:18",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_address",
									typeString: "address"
								},
								typeName: {
									id: 3080,
									name: "address",
									nodeType: "ElementaryTypeName",
									src: "643:7:18",
									stateMutability: "nonpayable",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									}
								},
								visibility: "internal"
							},
							{
								constant: false,
								id: 3083,
								mutability: "mutable",
								name: "royaltiesPercentage",
								nameLocation: "678:19:18",
								nodeType: "VariableDeclaration",
								scope: 3084,
								src: "670:27:18",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_uint256",
									typeString: "uint256"
								},
								typeName: {
									id: 3082,
									name: "uint256",
									nodeType: "ElementaryTypeName",
									src: "670:7:18",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									}
								},
								visibility: "internal"
							}
						],
						name: "RoyaltyInfo",
						nameLocation: "621:11:18",
						nodeType: "StructDefinition",
						scope: 3318,
						src: "614:159:18",
						visibility: "public"
					},
					{
						constant: false,
						functionSelector: "5fb8bcd5",
						id: 3089,
						mutability: "mutable",
						name: "tokenIdToTokenInfo",
						nameLocation: "816:18:18",
						nodeType: "VariableDeclaration",
						scope: 3318,
						src: "779:55:18",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$3079_storage_$",
							typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo)"
						},
						typeName: {
							id: 3088,
							keyType: {
								id: 3085,
								name: "uint256",
								nodeType: "ElementaryTypeName",
								src: "787:7:18",
								typeDescriptions: {
									typeIdentifier: "t_uint256",
									typeString: "uint256"
								}
							},
							nodeType: "Mapping",
							src: "779:29:18",
							typeDescriptions: {
								typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$3079_storage_$",
								typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo)"
							},
							valueType: {
								id: 3087,
								nodeType: "UserDefinedTypeName",
								pathNode: {
									id: 3086,
									name: "TokenInfo",
									nodeType: "IdentifierPath",
									referencedDeclaration: 3079,
									src: "798:9:18"
								},
								referencedDeclaration: 3079,
								src: "798:9:18",
								typeDescriptions: {
									typeIdentifier: "t_struct$_TokenInfo_$3079_storage_ptr",
									typeString: "struct VWBLProtocol.TokenInfo"
								}
							}
						},
						visibility: "public"
					},
					{
						constant: false,
						functionSelector: "19daf1bf",
						id: 3094,
						mutability: "mutable",
						name: "tokenIdToRoyaltyInfo",
						nameLocation: "879:20:18",
						nodeType: "VariableDeclaration",
						scope: 3318,
						src: "840:59:18",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$3084_storage_$",
							typeString: "mapping(uint256 => struct VWBLProtocol.RoyaltyInfo)"
						},
						typeName: {
							id: 3093,
							keyType: {
								id: 3090,
								name: "uint256",
								nodeType: "ElementaryTypeName",
								src: "848:7:18",
								typeDescriptions: {
									typeIdentifier: "t_uint256",
									typeString: "uint256"
								}
							},
							nodeType: "Mapping",
							src: "840:31:18",
							typeDescriptions: {
								typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$3084_storage_$",
								typeString: "mapping(uint256 => struct VWBLProtocol.RoyaltyInfo)"
							},
							valueType: {
								id: 3092,
								nodeType: "UserDefinedTypeName",
								pathNode: {
									id: 3091,
									name: "RoyaltyInfo",
									nodeType: "IdentifierPath",
									referencedDeclaration: 3084,
									src: "859:11:18"
								},
								referencedDeclaration: 3084,
								src: "859:11:18",
								typeDescriptions: {
									typeIdentifier: "t_struct$_RoyaltyInfo_$3084_storage_ptr",
									typeString: "struct VWBLProtocol.RoyaltyInfo"
								}
							}
						},
						visibility: "public"
					},
					{
						constant: true,
						functionSelector: "cae6047f",
						id: 3097,
						mutability: "constant",
						name: "INVERSE_BASIS_POINT",
						nameLocation: "930:19:18",
						nodeType: "VariableDeclaration",
						scope: 3318,
						src: "906:51:18",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_uint256",
							typeString: "uint256"
						},
						typeName: {
							id: 3095,
							name: "uint256",
							nodeType: "ElementaryTypeName",
							src: "906:7:18",
							typeDescriptions: {
								typeIdentifier: "t_uint256",
								typeString: "uint256"
							}
						},
						value: {
							hexValue: "3130303030",
							id: 3096,
							isConstant: false,
							isLValue: false,
							isPure: true,
							kind: "number",
							lValueRequested: false,
							nodeType: "Literal",
							src: "952:5:18",
							typeDescriptions: {
								typeIdentifier: "t_rational_10000_by_1",
								typeString: "int_const 10000"
							},
							value: "10000"
						},
						visibility: "public"
					},
					{
						body: {
							id: 3149,
							nodeType: "Block",
							src: "1083:356:18",
							statements: [
								{
									assignments: [
										3109
									],
									declarations: [
										{
											constant: false,
											id: 3109,
											mutability: "mutable",
											name: "tokenId",
											nameLocation: "1101:7:18",
											nodeType: "VariableDeclaration",
											scope: 3149,
											src: "1093:15:18",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 3108,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "1093:7:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 3112,
									initialValue: {
										id: 3111,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										nodeType: "UnaryOperation",
										operator: "++",
										prefix: true,
										src: "1111:9:18",
										subExpression: {
											id: 3110,
											name: "counter",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3072,
											src: "1113:7:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "1093:27:18"
								},
								{
									assignments: [
										3115
									],
									declarations: [
										{
											constant: false,
											id: 3115,
											mutability: "mutable",
											name: "tokenInfo",
											nameLocation: "1147:9:18",
											nodeType: "VariableDeclaration",
											scope: 3149,
											src: "1130:26:18",
											stateVariable: false,
											storageLocation: "memory",
											typeDescriptions: {
												typeIdentifier: "t_struct$_TokenInfo_$3079_memory_ptr",
												typeString: "struct VWBLProtocol.TokenInfo"
											},
											typeName: {
												id: 3114,
												nodeType: "UserDefinedTypeName",
												pathNode: {
													id: 3113,
													name: "TokenInfo",
													nodeType: "IdentifierPath",
													referencedDeclaration: 3079,
													src: "1130:9:18"
												},
												referencedDeclaration: 3079,
												src: "1130:9:18",
												typeDescriptions: {
													typeIdentifier: "t_struct$_TokenInfo_$3079_storage_ptr",
													typeString: "struct VWBLProtocol.TokenInfo"
												}
											},
											visibility: "internal"
										}
									],
									id: 3122,
									initialValue: {
										"arguments": [
											{
												id: 3117,
												name: "_documentId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3099,
												src: "1169:11:18",
												typeDescriptions: {
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												}
											},
											{
												expression: {
													id: 3118,
													name: "msg",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 4294967281,
													src: "1182:3:18",
													typeDescriptions: {
														typeIdentifier: "t_magic_message",
														typeString: "msg"
													}
												},
												id: 3119,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												memberName: "sender",
												nodeType: "MemberAccess",
												src: "1182:10:18",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 3120,
												name: "_getKeyURl",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3101,
												src: "1194:10:18",
												typeDescriptions: {
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												},
												{
													typeIdentifier: "t_address",
													typeString: "address"
												},
												{
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												}
											],
											id: 3116,
											name: "TokenInfo",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3079,
											src: "1159:9:18",
											typeDescriptions: {
												typeIdentifier: "t_type$_t_struct$_TokenInfo_$3079_storage_ptr_$",
												typeString: "type(struct VWBLProtocol.TokenInfo storage pointer)"
											}
										},
										id: 3121,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "structConstructorCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "1159:46:18",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_struct$_TokenInfo_$3079_memory_ptr",
											typeString: "struct VWBLProtocol.TokenInfo memory"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "1130:75:18"
								},
								{
									expression: {
										id: 3127,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											baseExpression: {
												id: 3123,
												name: "tokenIdToTokenInfo",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3089,
												src: "1215:18:18",
												typeDescriptions: {
													typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$3079_storage_$",
													typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo storage ref)"
												}
											},
											id: 3125,
											indexExpression: {
												id: 3124,
												name: "tokenId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3109,
												src: "1234:7:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											isConstant: false,
											isLValue: true,
											isPure: false,
											lValueRequested: true,
											nodeType: "IndexAccess",
											src: "1215:27:18",
											typeDescriptions: {
												typeIdentifier: "t_struct$_TokenInfo_$3079_storage",
												typeString: "struct VWBLProtocol.TokenInfo storage ref"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 3126,
											name: "tokenInfo",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3115,
											src: "1245:9:18",
											typeDescriptions: {
												typeIdentifier: "t_struct$_TokenInfo_$3079_memory_ptr",
												typeString: "struct VWBLProtocol.TokenInfo memory"
											}
										},
										src: "1215:39:18",
										typeDescriptions: {
											typeIdentifier: "t_struct$_TokenInfo_$3079_storage",
											typeString: "struct VWBLProtocol.TokenInfo storage ref"
										}
									},
									id: 3128,
									nodeType: "ExpressionStatement",
									src: "1215:39:18"
								},
								{
									expression: {
										"arguments": [
											{
												expression: {
													id: 3130,
													name: "msg",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 4294967281,
													src: "1270:3:18",
													typeDescriptions: {
														typeIdentifier: "t_magic_message",
														typeString: "msg"
													}
												},
												id: 3131,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												memberName: "sender",
												nodeType: "MemberAccess",
												src: "1270:10:18",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 3132,
												name: "tokenId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3109,
												src: "1282:7:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_address",
													typeString: "address"
												},
												{
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											],
											id: 3129,
											name: "_mint",
											nodeType: "Identifier",
											overloadedDeclarations: [
												3150,
												1106
											],
											referencedDeclaration: 1106,
											src: "1264:5:18",
											typeDescriptions: {
												typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
												typeString: "function (address,uint256)"
											}
										},
										id: 3133,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "1264:26:18",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 3134,
									nodeType: "ExpressionStatement",
									src: "1264:26:18"
								},
								{
									condition: {
										commonType: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										},
										id: 3137,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											id: 3135,
											name: "_royaltiesPercentage",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3103,
											src: "1304:20:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "BinaryOperation",
										operator: ">",
										rightExpression: {
											hexValue: "30",
											id: 3136,
											isConstant: false,
											isLValue: false,
											isPure: true,
											kind: "number",
											lValueRequested: false,
											nodeType: "Literal",
											src: "1327:1:18",
											typeDescriptions: {
												typeIdentifier: "t_rational_0_by_1",
												typeString: "int_const 0"
											},
											value: "0"
										},
										src: "1304:24:18",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									id: 3146,
									nodeType: "IfStatement",
									src: "1300:109:18",
									trueBody: {
										id: 3145,
										nodeType: "Block",
										src: "1330:79:18",
										statements: [
											{
												expression: {
													"arguments": [
														{
															id: 3139,
															name: "tokenId",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 3109,
															src: "1356:7:18",
															typeDescriptions: {
																typeIdentifier: "t_uint256",
																typeString: "uint256"
															}
														},
														{
															expression: {
																id: 3140,
																name: "msg",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 4294967281,
																src: "1365:3:18",
																typeDescriptions: {
																	typeIdentifier: "t_magic_message",
																	typeString: "msg"
																}
															},
															id: 3141,
															isConstant: false,
															isLValue: false,
															isPure: false,
															lValueRequested: false,
															memberName: "sender",
															nodeType: "MemberAccess",
															src: "1365:10:18",
															typeDescriptions: {
																typeIdentifier: "t_address",
																typeString: "address"
															}
														},
														{
															id: 3142,
															name: "_royaltiesPercentage",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 3103,
															src: "1377:20:18",
															typeDescriptions: {
																typeIdentifier: "t_uint256",
																typeString: "uint256"
															}
														}
													],
													expression: {
														argumentTypes: [
															{
																typeIdentifier: "t_uint256",
																typeString: "uint256"
															},
															{
																typeIdentifier: "t_address",
																typeString: "address"
															},
															{
																typeIdentifier: "t_uint256",
																typeString: "uint256"
															}
														],
														id: 3138,
														name: "_setRoyalty",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 3317,
														src: "1344:11:18",
														typeDescriptions: {
															typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
															typeString: "function (uint256,address,uint256)"
														}
													},
													id: 3143,
													isConstant: false,
													isLValue: false,
													isPure: false,
													kind: "functionCall",
													lValueRequested: false,
													names: [
													],
													nodeType: "FunctionCall",
													src: "1344:54:18",
													tryCall: false,
													typeDescriptions: {
														typeIdentifier: "t_tuple$__$",
														typeString: "tuple()"
													}
												},
												id: 3144,
												nodeType: "ExpressionStatement",
												src: "1344:54:18"
											}
										]
									}
								},
								{
									expression: {
										id: 3147,
										name: "tokenId",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 3109,
										src: "1425:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									functionReturnParameters: 3107,
									id: 3148,
									nodeType: "Return",
									src: "1418:14:18"
								}
							]
						},
						id: 3150,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "_mint",
						nameLocation: "973:5:18",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 3104,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3099,
									mutability: "mutable",
									name: "_documentId",
									nameLocation: "987:11:18",
									nodeType: "VariableDeclaration",
									scope: 3150,
									src: "979:19:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_bytes32",
										typeString: "bytes32"
									},
									typeName: {
										id: 3098,
										name: "bytes32",
										nodeType: "ElementaryTypeName",
										src: "979:7:18",
										typeDescriptions: {
											typeIdentifier: "t_bytes32",
											typeString: "bytes32"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3101,
									mutability: "mutable",
									name: "_getKeyURl",
									nameLocation: "1014:10:18",
									nodeType: "VariableDeclaration",
									scope: 3150,
									src: "1000:24:18",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 3100,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "1000:6:18",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3103,
									mutability: "mutable",
									name: "_royaltiesPercentage",
									nameLocation: "1034:20:18",
									nodeType: "VariableDeclaration",
									scope: 3150,
									src: "1026:28:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3102,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "1026:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "978:77:18"
						},
						returnParameters: {
							id: 3107,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3106,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 3150,
									src: "1074:7:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3105,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "1074:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "1073:9:18"
						},
						scope: 3318,
						src: "964:475:18",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "internal"
					},
					{
						body: {
							id: 3229,
							nodeType: "Block",
							src: "1554:514:18",
							statements: [
								{
									assignments: [
										3159
									],
									declarations: [
										{
											constant: false,
											id: 3159,
											mutability: "mutable",
											name: "resultCount",
											nameLocation: "1572:11:18",
											nodeType: "VariableDeclaration",
											scope: 3229,
											src: "1564:19:18",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 3158,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "1564:7:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 3161,
									initialValue: {
										hexValue: "30",
										id: 3160,
										isConstant: false,
										isLValue: false,
										isPure: true,
										kind: "number",
										lValueRequested: false,
										nodeType: "Literal",
										src: "1586:1:18",
										typeDescriptions: {
											typeIdentifier: "t_rational_0_by_1",
											typeString: "int_const 0"
										},
										value: "0"
									},
									nodeType: "VariableDeclarationStatement",
									src: "1564:23:18"
								},
								{
									body: {
										id: 3183,
										nodeType: "Block",
										src: "1636:121:18",
										statements: [
											{
												condition: {
													commonType: {
														typeIdentifier: "t_address",
														typeString: "address"
													},
													id: 3177,
													isConstant: false,
													isLValue: false,
													isPure: false,
													lValueRequested: false,
													leftExpression: {
														expression: {
															baseExpression: {
																id: 3172,
																name: "tokenIdToTokenInfo",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 3089,
																src: "1654:18:18",
																typeDescriptions: {
																	typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$3079_storage_$",
																	typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo storage ref)"
																}
															},
															id: 3174,
															indexExpression: {
																id: 3173,
																name: "i",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 3163,
																src: "1673:1:18",
																typeDescriptions: {
																	typeIdentifier: "t_uint256",
																	typeString: "uint256"
																}
															},
															isConstant: false,
															isLValue: true,
															isPure: false,
															lValueRequested: false,
															nodeType: "IndexAccess",
															src: "1654:21:18",
															typeDescriptions: {
																typeIdentifier: "t_struct$_TokenInfo_$3079_storage",
																typeString: "struct VWBLProtocol.TokenInfo storage ref"
															}
														},
														id: 3175,
														isConstant: false,
														isLValue: true,
														isPure: false,
														lValueRequested: false,
														memberName: "minterAddress",
														nodeType: "MemberAccess",
														referencedDeclaration: 3076,
														src: "1654:35:18",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													},
													nodeType: "BinaryOperation",
													operator: "==",
													rightExpression: {
														id: 3176,
														name: "minter",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 3152,
														src: "1693:6:18",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													},
													src: "1654:45:18",
													typeDescriptions: {
														typeIdentifier: "t_bool",
														typeString: "bool"
													}
												},
												id: 3182,
												nodeType: "IfStatement",
												src: "1650:97:18",
												trueBody: {
													id: 3181,
													nodeType: "Block",
													src: "1701:46:18",
													statements: [
														{
															expression: {
																id: 3179,
																isConstant: false,
																isLValue: false,
																isPure: false,
																lValueRequested: false,
																nodeType: "UnaryOperation",
																operator: "++",
																prefix: false,
																src: "1719:13:18",
																subExpression: {
																	id: 3178,
																	name: "resultCount",
																	nodeType: "Identifier",
																	overloadedDeclarations: [
																	],
																	referencedDeclaration: 3159,
																	src: "1719:11:18",
																	typeDescriptions: {
																		typeIdentifier: "t_uint256",
																		typeString: "uint256"
																	}
																},
																typeDescriptions: {
																	typeIdentifier: "t_uint256",
																	typeString: "uint256"
																}
															},
															id: 3180,
															nodeType: "ExpressionStatement",
															src: "1719:13:18"
														}
													]
												}
											}
										]
									},
									condition: {
										commonType: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										},
										id: 3168,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											id: 3166,
											name: "i",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3163,
											src: "1617:1:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "BinaryOperation",
										operator: "<=",
										rightExpression: {
											id: 3167,
											name: "counter",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3072,
											src: "1622:7:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										src: "1617:12:18",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									id: 3184,
									initializationExpression: {
										assignments: [
											3163
										],
										declarations: [
											{
												constant: false,
												id: 3163,
												mutability: "mutable",
												name: "i",
												nameLocation: "1610:1:18",
												nodeType: "VariableDeclaration",
												scope: 3184,
												src: "1602:9:18",
												stateVariable: false,
												storageLocation: "default",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												},
												typeName: {
													id: 3162,
													name: "uint256",
													nodeType: "ElementaryTypeName",
													src: "1602:7:18",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												},
												visibility: "internal"
											}
										],
										id: 3165,
										initialValue: {
											hexValue: "31",
											id: 3164,
											isConstant: false,
											isLValue: false,
											isPure: true,
											kind: "number",
											lValueRequested: false,
											nodeType: "Literal",
											src: "1614:1:18",
											typeDescriptions: {
												typeIdentifier: "t_rational_1_by_1",
												typeString: "int_const 1"
											},
											value: "1"
										},
										nodeType: "VariableDeclarationStatement",
										src: "1602:13:18"
									},
									loopExpression: {
										expression: {
											id: 3170,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											nodeType: "UnaryOperation",
											operator: "++",
											prefix: false,
											src: "1631:3:18",
											subExpression: {
												id: 3169,
												name: "i",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3163,
												src: "1631:1:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										id: 3171,
										nodeType: "ExpressionStatement",
										src: "1631:3:18"
									},
									nodeType: "ForStatement",
									src: "1597:160:18"
								},
								{
									assignments: [
										3189
									],
									declarations: [
										{
											constant: false,
											id: 3189,
											mutability: "mutable",
											name: "tokens",
											nameLocation: "1783:6:18",
											nodeType: "VariableDeclaration",
											scope: 3229,
											src: "1766:23:18",
											stateVariable: false,
											storageLocation: "memory",
											typeDescriptions: {
												typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
												typeString: "uint256[]"
											},
											typeName: {
												baseType: {
													id: 3187,
													name: "uint256",
													nodeType: "ElementaryTypeName",
													src: "1766:7:18",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												},
												id: 3188,
												nodeType: "ArrayTypeName",
												src: "1766:9:18",
												typeDescriptions: {
													typeIdentifier: "t_array$_t_uint256_$dyn_storage_ptr",
													typeString: "uint256[]"
												}
											},
											visibility: "internal"
										}
									],
									id: 3195,
									initialValue: {
										"arguments": [
											{
												id: 3193,
												name: "resultCount",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3159,
												src: "1806:11:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											],
											id: 3192,
											isConstant: false,
											isLValue: false,
											isPure: true,
											lValueRequested: false,
											nodeType: "NewExpression",
											src: "1792:13:18",
											typeDescriptions: {
												typeIdentifier: "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
												typeString: "function (uint256) pure returns (uint256[] memory)"
											},
											typeName: {
												baseType: {
													id: 3190,
													name: "uint256",
													nodeType: "ElementaryTypeName",
													src: "1796:7:18",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												},
												id: 3191,
												nodeType: "ArrayTypeName",
												src: "1796:9:18",
												typeDescriptions: {
													typeIdentifier: "t_array$_t_uint256_$dyn_storage_ptr",
													typeString: "uint256[]"
												}
											}
										},
										id: 3194,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "1792:26:18",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
											typeString: "uint256[] memory"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "1766:52:18"
								},
								{
									assignments: [
										3197
									],
									declarations: [
										{
											constant: false,
											id: 3197,
											mutability: "mutable",
											name: "currentCounter",
											nameLocation: "1836:14:18",
											nodeType: "VariableDeclaration",
											scope: 3229,
											src: "1828:22:18",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 3196,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "1828:7:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 3199,
									initialValue: {
										hexValue: "30",
										id: 3198,
										isConstant: false,
										isLValue: false,
										isPure: true,
										kind: "number",
										lValueRequested: false,
										nodeType: "Literal",
										src: "1853:1:18",
										typeDescriptions: {
											typeIdentifier: "t_rational_0_by_1",
											typeString: "int_const 0"
										},
										value: "0"
									},
									nodeType: "VariableDeclarationStatement",
									src: "1828:26:18"
								},
								{
									body: {
										id: 3225,
										nodeType: "Block",
										src: "1903:136:18",
										statements: [
											{
												condition: {
													commonType: {
														typeIdentifier: "t_address",
														typeString: "address"
													},
													id: 3215,
													isConstant: false,
													isLValue: false,
													isPure: false,
													lValueRequested: false,
													leftExpression: {
														expression: {
															baseExpression: {
																id: 3210,
																name: "tokenIdToTokenInfo",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 3089,
																src: "1921:18:18",
																typeDescriptions: {
																	typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$3079_storage_$",
																	typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo storage ref)"
																}
															},
															id: 3212,
															indexExpression: {
																id: 3211,
																name: "i",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 3201,
																src: "1940:1:18",
																typeDescriptions: {
																	typeIdentifier: "t_uint256",
																	typeString: "uint256"
																}
															},
															isConstant: false,
															isLValue: true,
															isPure: false,
															lValueRequested: false,
															nodeType: "IndexAccess",
															src: "1921:21:18",
															typeDescriptions: {
																typeIdentifier: "t_struct$_TokenInfo_$3079_storage",
																typeString: "struct VWBLProtocol.TokenInfo storage ref"
															}
														},
														id: 3213,
														isConstant: false,
														isLValue: true,
														isPure: false,
														lValueRequested: false,
														memberName: "minterAddress",
														nodeType: "MemberAccess",
														referencedDeclaration: 3076,
														src: "1921:35:18",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													},
													nodeType: "BinaryOperation",
													operator: "==",
													rightExpression: {
														id: 3214,
														name: "minter",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 3152,
														src: "1960:6:18",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													},
													src: "1921:45:18",
													typeDescriptions: {
														typeIdentifier: "t_bool",
														typeString: "bool"
													}
												},
												id: 3224,
												nodeType: "IfStatement",
												src: "1917:112:18",
												trueBody: {
													id: 3223,
													nodeType: "Block",
													src: "1968:61:18",
													statements: [
														{
															expression: {
																id: 3221,
																isConstant: false,
																isLValue: false,
																isPure: false,
																lValueRequested: false,
																leftHandSide: {
																	baseExpression: {
																		id: 3216,
																		name: "tokens",
																		nodeType: "Identifier",
																		overloadedDeclarations: [
																		],
																		referencedDeclaration: 3189,
																		src: "1986:6:18",
																		typeDescriptions: {
																			typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
																			typeString: "uint256[] memory"
																		}
																	},
																	id: 3219,
																	indexExpression: {
																		id: 3218,
																		isConstant: false,
																		isLValue: false,
																		isPure: false,
																		lValueRequested: false,
																		nodeType: "UnaryOperation",
																		operator: "++",
																		prefix: false,
																		src: "1993:16:18",
																		subExpression: {
																			id: 3217,
																			name: "currentCounter",
																			nodeType: "Identifier",
																			overloadedDeclarations: [
																			],
																			referencedDeclaration: 3197,
																			src: "1993:14:18",
																			typeDescriptions: {
																				typeIdentifier: "t_uint256",
																				typeString: "uint256"
																			}
																		},
																		typeDescriptions: {
																			typeIdentifier: "t_uint256",
																			typeString: "uint256"
																		}
																	},
																	isConstant: false,
																	isLValue: true,
																	isPure: false,
																	lValueRequested: true,
																	nodeType: "IndexAccess",
																	src: "1986:24:18",
																	typeDescriptions: {
																		typeIdentifier: "t_uint256",
																		typeString: "uint256"
																	}
																},
																nodeType: "Assignment",
																operator: "=",
																rightHandSide: {
																	id: 3220,
																	name: "i",
																	nodeType: "Identifier",
																	overloadedDeclarations: [
																	],
																	referencedDeclaration: 3201,
																	src: "2013:1:18",
																	typeDescriptions: {
																		typeIdentifier: "t_uint256",
																		typeString: "uint256"
																	}
																},
																src: "1986:28:18",
																typeDescriptions: {
																	typeIdentifier: "t_uint256",
																	typeString: "uint256"
																}
															},
															id: 3222,
															nodeType: "ExpressionStatement",
															src: "1986:28:18"
														}
													]
												}
											}
										]
									},
									condition: {
										commonType: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										},
										id: 3206,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											id: 3204,
											name: "i",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3201,
											src: "1884:1:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "BinaryOperation",
										operator: "<=",
										rightExpression: {
											id: 3205,
											name: "counter",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3072,
											src: "1889:7:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										src: "1884:12:18",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									id: 3226,
									initializationExpression: {
										assignments: [
											3201
										],
										declarations: [
											{
												constant: false,
												id: 3201,
												mutability: "mutable",
												name: "i",
												nameLocation: "1877:1:18",
												nodeType: "VariableDeclaration",
												scope: 3226,
												src: "1869:9:18",
												stateVariable: false,
												storageLocation: "default",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												},
												typeName: {
													id: 3200,
													name: "uint256",
													nodeType: "ElementaryTypeName",
													src: "1869:7:18",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												},
												visibility: "internal"
											}
										],
										id: 3203,
										initialValue: {
											hexValue: "31",
											id: 3202,
											isConstant: false,
											isLValue: false,
											isPure: true,
											kind: "number",
											lValueRequested: false,
											nodeType: "Literal",
											src: "1881:1:18",
											typeDescriptions: {
												typeIdentifier: "t_rational_1_by_1",
												typeString: "int_const 1"
											},
											value: "1"
										},
										nodeType: "VariableDeclarationStatement",
										src: "1869:13:18"
									},
									loopExpression: {
										expression: {
											id: 3208,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											nodeType: "UnaryOperation",
											operator: "++",
											prefix: false,
											src: "1898:3:18",
											subExpression: {
												id: 3207,
												name: "i",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3201,
												src: "1898:1:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										id: 3209,
										nodeType: "ExpressionStatement",
										src: "1898:3:18"
									},
									nodeType: "ForStatement",
									src: "1864:175:18"
								},
								{
									expression: {
										id: 3227,
										name: "tokens",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 3189,
										src: "2055:6:18",
										typeDescriptions: {
											typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
											typeString: "uint256[] memory"
										}
									},
									functionReturnParameters: 3157,
									id: 3228,
									nodeType: "Return",
									src: "2048:13:18"
								}
							]
						},
						functionSelector: "ce5af336",
						id: 3230,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "getTokenByMinter",
						nameLocation: "1454:16:18",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 3153,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3152,
									mutability: "mutable",
									name: "minter",
									nameLocation: "1479:6:18",
									nodeType: "VariableDeclaration",
									scope: 3230,
									src: "1471:14:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 3151,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "1471:7:18",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "1470:16:18"
						},
						returnParameters: {
							id: 3157,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3156,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 3230,
									src: "1532:16:18",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
										typeString: "uint256[]"
									},
									typeName: {
										baseType: {
											id: 3154,
											name: "uint256",
											nodeType: "ElementaryTypeName",
											src: "1532:7:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										id: 3155,
										nodeType: "ArrayTypeName",
										src: "1532:9:18",
										typeDescriptions: {
											typeIdentifier: "t_array$_t_uint256_$dyn_storage_ptr",
											typeString: "uint256[]"
										}
									},
									visibility: "internal"
								}
							],
							src: "1531:18:18"
						},
						scope: 3318,
						src: "1445:623:18",
						stateMutability: "view",
						virtual: false,
						visibility: "public"
					},
					{
						baseFunctions: [
							1566,
							3028
						],
						body: {
							id: 3252,
							nodeType: "Block",
							src: "2236:105:18",
							statements: [
								{
									expression: {
										commonType: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										},
										id: 3250,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											commonType: {
												typeIdentifier: "t_bytes4",
												typeString: "bytes4"
											},
											id: 3245,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											leftExpression: {
												id: 3240,
												name: "interfaceId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3232,
												src: "2253:11:18",
												typeDescriptions: {
													typeIdentifier: "t_bytes4",
													typeString: "bytes4"
												}
											},
											nodeType: "BinaryOperation",
											operator: "==",
											rightExpression: {
												expression: {
													"arguments": [
														{
															id: 3242,
															name: "IERC2981",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 516,
															src: "2273:8:18",
															typeDescriptions: {
																typeIdentifier: "t_type$_t_contract$_IERC2981_$516_$",
																typeString: "type(contract IERC2981)"
															}
														}
													],
													expression: {
														argumentTypes: [
															{
																typeIdentifier: "t_type$_t_contract$_IERC2981_$516_$",
																typeString: "type(contract IERC2981)"
															}
														],
														id: 3241,
														name: "type",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 4294967269,
														src: "2268:4:18",
														typeDescriptions: {
															typeIdentifier: "t_function_metatype_pure$__$returns$__$",
															typeString: "function () pure"
														}
													},
													id: 3243,
													isConstant: false,
													isLValue: false,
													isPure: true,
													kind: "functionCall",
													lValueRequested: false,
													names: [
													],
													nodeType: "FunctionCall",
													src: "2268:14:18",
													tryCall: false,
													typeDescriptions: {
														typeIdentifier: "t_magic_meta_type_t_contract$_IERC2981_$516",
														typeString: "type(contract IERC2981)"
													}
												},
												id: 3244,
												isConstant: false,
												isLValue: false,
												isPure: true,
												lValueRequested: false,
												memberName: "interfaceId",
												nodeType: "MemberAccess",
												src: "2268:26:18",
												typeDescriptions: {
													typeIdentifier: "t_bytes4",
													typeString: "bytes4"
												}
											},
											src: "2253:41:18",
											typeDescriptions: {
												typeIdentifier: "t_bool",
												typeString: "bool"
											}
										},
										nodeType: "BinaryOperation",
										operator: "||",
										rightExpression: {
											"arguments": [
												{
													id: 3248,
													name: "interfaceId",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 3232,
													src: "2322:11:18",
													typeDescriptions: {
														typeIdentifier: "t_bytes4",
														typeString: "bytes4"
													}
												}
											],
											expression: {
												argumentTypes: [
													{
														typeIdentifier: "t_bytes4",
														typeString: "bytes4"
													}
												],
												expression: {
													id: 3246,
													name: "super",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 4294967271,
													src: "2298:5:18",
													typeDescriptions: {
														typeIdentifier: "t_type$_t_super$_VWBLProtocol_$3318_$",
														typeString: "type(contract super VWBLProtocol)"
													}
												},
												id: 3247,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												memberName: "supportsInterface",
												nodeType: "MemberAccess",
												referencedDeclaration: 1566,
												src: "2298:23:18",
												typeDescriptions: {
													typeIdentifier: "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
													typeString: "function (bytes4) view returns (bool)"
												}
											},
											id: 3249,
											isConstant: false,
											isLValue: false,
											isPure: false,
											kind: "functionCall",
											lValueRequested: false,
											names: [
											],
											nodeType: "FunctionCall",
											src: "2298:36:18",
											tryCall: false,
											typeDescriptions: {
												typeIdentifier: "t_bool",
												typeString: "bool"
											}
										},
										src: "2253:81:18",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									functionReturnParameters: 3239,
									id: 3251,
									nodeType: "Return",
									src: "2246:88:18"
								}
							]
						},
						functionSelector: "01ffc9a7",
						id: 3253,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "supportsInterface",
						nameLocation: "2083:17:18",
						nodeType: "FunctionDefinition",
						overrides: {
							id: 3236,
							nodeType: "OverrideSpecifier",
							overrides: [
								{
									id: 3234,
									name: "IERC165",
									nodeType: "IdentifierPath",
									referencedDeclaration: 3029,
									src: "2182:7:18"
								},
								{
									id: 3235,
									name: "ERC721Enumerable",
									nodeType: "IdentifierPath",
									referencedDeclaration: 1854,
									src: "2191:16:18"
								}
							],
							src: "2173:35:18"
						},
						parameters: {
							id: 3233,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3232,
									mutability: "mutable",
									name: "interfaceId",
									nameLocation: "2108:11:18",
									nodeType: "VariableDeclaration",
									scope: 3253,
									src: "2101:18:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_bytes4",
										typeString: "bytes4"
									},
									typeName: {
										id: 3231,
										name: "bytes4",
										nodeType: "ElementaryTypeName",
										src: "2101:6:18",
										typeDescriptions: {
											typeIdentifier: "t_bytes4",
											typeString: "bytes4"
										}
									},
									visibility: "internal"
								}
							],
							src: "2100:20:18"
						},
						returnParameters: {
							id: 3239,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3238,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 3253,
									src: "2226:4:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_bool",
										typeString: "bool"
									},
									typeName: {
										id: 3237,
										name: "bool",
										nodeType: "ElementaryTypeName",
										src: "2226:4:18",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									visibility: "internal"
								}
							],
							src: "2225:6:18"
						},
						scope: 3318,
						src: "2074:267:18",
						stateMutability: "view",
						virtual: true,
						visibility: "public"
					},
					{
						baseFunctions: [
							515
						],
						body: {
							id: 3287,
							nodeType: "Block",
							src: "2515:231:18",
							statements: [
								{
									assignments: [
										3267
									],
									declarations: [
										{
											constant: false,
											id: 3267,
											mutability: "mutable",
											name: "royaltyInfo",
											nameLocation: "2544:11:18",
											nodeType: "VariableDeclaration",
											scope: 3287,
											src: "2525:30:18",
											stateVariable: false,
											storageLocation: "memory",
											typeDescriptions: {
												typeIdentifier: "t_struct$_RoyaltyInfo_$3084_memory_ptr",
												typeString: "struct VWBLProtocol.RoyaltyInfo"
											},
											typeName: {
												id: 3266,
												nodeType: "UserDefinedTypeName",
												pathNode: {
													id: 3265,
													name: "RoyaltyInfo",
													nodeType: "IdentifierPath",
													referencedDeclaration: 3084,
													src: "2525:11:18"
												},
												referencedDeclaration: 3084,
												src: "2525:11:18",
												typeDescriptions: {
													typeIdentifier: "t_struct$_RoyaltyInfo_$3084_storage_ptr",
													typeString: "struct VWBLProtocol.RoyaltyInfo"
												}
											},
											visibility: "internal"
										}
									],
									id: 3271,
									initialValue: {
										baseExpression: {
											id: 3268,
											name: "tokenIdToRoyaltyInfo",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3094,
											src: "2558:20:18",
											typeDescriptions: {
												typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$3084_storage_$",
												typeString: "mapping(uint256 => struct VWBLProtocol.RoyaltyInfo storage ref)"
											}
										},
										id: 3270,
										indexExpression: {
											id: 3269,
											name: "_tokenId",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3255,
											src: "2579:8:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										isConstant: false,
										isLValue: true,
										isPure: false,
										lValueRequested: false,
										nodeType: "IndexAccess",
										src: "2558:30:18",
										typeDescriptions: {
											typeIdentifier: "t_struct$_RoyaltyInfo_$3084_storage",
											typeString: "struct VWBLProtocol.RoyaltyInfo storage ref"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "2525:63:18"
								},
								{
									assignments: [
										3273
									],
									declarations: [
										{
											constant: false,
											id: 3273,
											mutability: "mutable",
											name: "_royalties",
											nameLocation: "2606:10:18",
											nodeType: "VariableDeclaration",
											scope: 3287,
											src: "2598:18:18",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 3272,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "2598:7:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 3281,
									initialValue: {
										commonType: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										},
										id: 3280,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											components: [
												{
													commonType: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													},
													id: 3277,
													isConstant: false,
													isLValue: false,
													isPure: false,
													lValueRequested: false,
													leftExpression: {
														id: 3274,
														name: "_salePrice",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 3257,
														src: "2620:10:18",
														typeDescriptions: {
															typeIdentifier: "t_uint256",
															typeString: "uint256"
														}
													},
													nodeType: "BinaryOperation",
													operator: "*",
													rightExpression: {
														expression: {
															id: 3275,
															name: "royaltyInfo",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 3267,
															src: "2633:11:18",
															typeDescriptions: {
																typeIdentifier: "t_struct$_RoyaltyInfo_$3084_memory_ptr",
																typeString: "struct VWBLProtocol.RoyaltyInfo memory"
															}
														},
														id: 3276,
														isConstant: false,
														isLValue: true,
														isPure: false,
														lValueRequested: false,
														memberName: "royaltiesPercentage",
														nodeType: "MemberAccess",
														referencedDeclaration: 3083,
														src: "2633:31:18",
														typeDescriptions: {
															typeIdentifier: "t_uint256",
															typeString: "uint256"
														}
													},
													src: "2620:44:18",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												}
											],
											id: 3278,
											isConstant: false,
											isInlineArray: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											nodeType: "TupleExpression",
											src: "2619:46:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "BinaryOperation",
										operator: "/",
										rightExpression: {
											id: 3279,
											name: "INVERSE_BASIS_POINT",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3097,
											src: "2668:19:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										src: "2619:68:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "2598:89:18"
								},
								{
									expression: {
										components: [
											{
												expression: {
													id: 3282,
													name: "royaltyInfo",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 3267,
													src: "2705:11:18",
													typeDescriptions: {
														typeIdentifier: "t_struct$_RoyaltyInfo_$3084_memory_ptr",
														typeString: "struct VWBLProtocol.RoyaltyInfo memory"
													}
												},
												id: 3283,
												isConstant: false,
												isLValue: true,
												isPure: false,
												lValueRequested: false,
												memberName: "recipient",
												nodeType: "MemberAccess",
												referencedDeclaration: 3081,
												src: "2705:21:18",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 3284,
												name: "_royalties",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3273,
												src: "2728:10:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										id: 3285,
										isConstant: false,
										isInlineArray: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										nodeType: "TupleExpression",
										src: "2704:35:18",
										typeDescriptions: {
											typeIdentifier: "t_tuple$_t_address_$_t_uint256_$",
											typeString: "tuple(address,uint256)"
										}
									},
									functionReturnParameters: 3264,
									id: 3286,
									nodeType: "Return",
									src: "2697:42:18"
								}
							]
						},
						functionSelector: "2a55205a",
						id: 3288,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "royaltyInfo",
						nameLocation: "2356:11:18",
						nodeType: "FunctionDefinition",
						overrides: {
							id: 3259,
							nodeType: "OverrideSpecifier",
							overrides: [
							],
							src: "2444:8:18"
						},
						parameters: {
							id: 3258,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3255,
									mutability: "mutable",
									name: "_tokenId",
									nameLocation: "2376:8:18",
									nodeType: "VariableDeclaration",
									scope: 3288,
									src: "2368:16:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3254,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "2368:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3257,
									mutability: "mutable",
									name: "_salePrice",
									nameLocation: "2394:10:18",
									nodeType: "VariableDeclaration",
									scope: 3288,
									src: "2386:18:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3256,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "2386:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "2367:38:18"
						},
						returnParameters: {
							id: 3264,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3261,
									mutability: "mutable",
									name: "receiver",
									nameLocation: "2478:8:18",
									nodeType: "VariableDeclaration",
									scope: 3288,
									src: "2470:16:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 3260,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "2470:7:18",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3263,
									mutability: "mutable",
									name: "royaltyAmount",
									nameLocation: "2496:13:18",
									nodeType: "VariableDeclaration",
									scope: 3288,
									src: "2488:21:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3262,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "2488:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "2469:41:18"
						},
						scope: 3318,
						src: "2347:399:18",
						stateMutability: "view",
						virtual: false,
						visibility: "external"
					},
					{
						body: {
							id: 3316,
							nodeType: "Block",
							src: "2880:189:18",
							statements: [
								{
									assignments: [
										3299
									],
									declarations: [
										{
											constant: false,
											id: 3299,
											mutability: "mutable",
											name: "royaltyInfo",
											nameLocation: "2910:11:18",
											nodeType: "VariableDeclaration",
											scope: 3316,
											src: "2890:31:18",
											stateVariable: false,
											storageLocation: "storage",
											typeDescriptions: {
												typeIdentifier: "t_struct$_RoyaltyInfo_$3084_storage_ptr",
												typeString: "struct VWBLProtocol.RoyaltyInfo"
											},
											typeName: {
												id: 3298,
												nodeType: "UserDefinedTypeName",
												pathNode: {
													id: 3297,
													name: "RoyaltyInfo",
													nodeType: "IdentifierPath",
													referencedDeclaration: 3084,
													src: "2890:11:18"
												},
												referencedDeclaration: 3084,
												src: "2890:11:18",
												typeDescriptions: {
													typeIdentifier: "t_struct$_RoyaltyInfo_$3084_storage_ptr",
													typeString: "struct VWBLProtocol.RoyaltyInfo"
												}
											},
											visibility: "internal"
										}
									],
									id: 3303,
									initialValue: {
										baseExpression: {
											id: 3300,
											name: "tokenIdToRoyaltyInfo",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3094,
											src: "2924:20:18",
											typeDescriptions: {
												typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$3084_storage_$",
												typeString: "mapping(uint256 => struct VWBLProtocol.RoyaltyInfo storage ref)"
											}
										},
										id: 3302,
										indexExpression: {
											id: 3301,
											name: "_tokenId",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3290,
											src: "2945:8:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										isConstant: false,
										isLValue: true,
										isPure: false,
										lValueRequested: false,
										nodeType: "IndexAccess",
										src: "2924:30:18",
										typeDescriptions: {
											typeIdentifier: "t_struct$_RoyaltyInfo_$3084_storage",
											typeString: "struct VWBLProtocol.RoyaltyInfo storage ref"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "2890:64:18"
								},
								{
									expression: {
										id: 3308,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											expression: {
												id: 3304,
												name: "royaltyInfo",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3299,
												src: "2964:11:18",
												typeDescriptions: {
													typeIdentifier: "t_struct$_RoyaltyInfo_$3084_storage_ptr",
													typeString: "struct VWBLProtocol.RoyaltyInfo storage pointer"
												}
											},
											id: 3306,
											isConstant: false,
											isLValue: true,
											isPure: false,
											lValueRequested: true,
											memberName: "recipient",
											nodeType: "MemberAccess",
											referencedDeclaration: 3081,
											src: "2964:21:18",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 3307,
											name: "_recipient",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3292,
											src: "2988:10:18",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										src: "2964:34:18",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									id: 3309,
									nodeType: "ExpressionStatement",
									src: "2964:34:18"
								},
								{
									expression: {
										id: 3314,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											expression: {
												id: 3310,
												name: "royaltyInfo",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3299,
												src: "3008:11:18",
												typeDescriptions: {
													typeIdentifier: "t_struct$_RoyaltyInfo_$3084_storage_ptr",
													typeString: "struct VWBLProtocol.RoyaltyInfo storage pointer"
												}
											},
											id: 3312,
											isConstant: false,
											isLValue: true,
											isPure: false,
											lValueRequested: true,
											memberName: "royaltiesPercentage",
											nodeType: "MemberAccess",
											referencedDeclaration: 3083,
											src: "3008:31:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 3313,
											name: "_royaltiesPercentage",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3294,
											src: "3042:20:18",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										src: "3008:54:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									id: 3315,
									nodeType: "ExpressionStatement",
									src: "3008:54:18"
								}
							]
						},
						id: 3317,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "_setRoyalty",
						nameLocation: "2761:11:18",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 3295,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3290,
									mutability: "mutable",
									name: "_tokenId",
									nameLocation: "2790:8:18",
									nodeType: "VariableDeclaration",
									scope: 3317,
									src: "2782:16:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3289,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "2782:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3292,
									mutability: "mutable",
									name: "_recipient",
									nameLocation: "2816:10:18",
									nodeType: "VariableDeclaration",
									scope: 3317,
									src: "2808:18:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 3291,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "2808:7:18",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3294,
									mutability: "mutable",
									name: "_royaltiesPercentage",
									nameLocation: "2844:20:18",
									nodeType: "VariableDeclaration",
									scope: 3317,
									src: "2836:28:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3293,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "2836:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "2772:98:18"
						},
						returnParameters: {
							id: 3296,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "2880:0:18"
						},
						scope: 3318,
						src: "2752:317:18",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "internal"
					}
				],
				scope: 3467,
				src: "400:2671:18",
				usedErrors: [
				]
			},
			{
				abstract: false,
				baseContracts: [
					{
						baseName: {
							id: 3319,
							name: "VWBLProtocol",
							nodeType: "IdentifierPath",
							referencedDeclaration: 3318,
							src: "3090:12:18"
						},
						id: 3320,
						nodeType: "InheritanceSpecifier",
						src: "3090:12:18"
					},
					{
						baseName: {
							id: 3321,
							name: "Ownable",
							nodeType: "IdentifierPath",
							referencedDeclaration: 497,
							src: "3104:7:18"
						},
						id: 3322,
						nodeType: "InheritanceSpecifier",
						src: "3104:7:18"
					},
					{
						baseName: {
							id: 3323,
							name: "IVWBL",
							nodeType: "IdentifierPath",
							referencedDeclaration: 3056,
							src: "3113:5:18"
						},
						id: 3324,
						nodeType: "InheritanceSpecifier",
						src: "3113:5:18"
					}
				],
				canonicalName: "VWBL",
				contractDependencies: [
				],
				contractKind: "contract",
				fullyImplemented: true,
				id: 3466,
				linearizedBaseContracts: [
					3466,
					3056,
					497,
					3318,
					516,
					1854,
					1885,
					1382,
					1912,
					1498,
					3017,
					3029,
					2229
				],
				name: "VWBL",
				nameLocation: "3082:4:18",
				nodeType: "ContractDefinition",
				nodes: [
					{
						constant: false,
						functionSelector: "6c0360eb",
						id: 3326,
						mutability: "mutable",
						name: "baseURI",
						nameLocation: "3139:7:18",
						nodeType: "VariableDeclaration",
						scope: 3466,
						src: "3125:21:18",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_string_storage",
							typeString: "string"
						},
						typeName: {
							id: 3325,
							name: "string",
							nodeType: "ElementaryTypeName",
							src: "3125:6:18",
							typeDescriptions: {
								typeIdentifier: "t_string_storage_ptr",
								typeString: "string"
							}
						},
						visibility: "public"
					},
					{
						constant: false,
						functionSelector: "eb0cde1d",
						id: 3328,
						mutability: "mutable",
						name: "gatewayContract",
						nameLocation: "3167:15:18",
						nodeType: "VariableDeclaration",
						scope: 3466,
						src: "3152:30:18",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_address",
							typeString: "address"
						},
						typeName: {
							id: 3327,
							name: "address",
							nodeType: "ElementaryTypeName",
							src: "3152:7:18",
							stateMutability: "nonpayable",
							typeDescriptions: {
								typeIdentifier: "t_address",
								typeString: "address"
							}
						},
						visibility: "public"
					},
					{
						anonymous: false,
						id: 3334,
						name: "gatewayContractChanged",
						nameLocation: "3195:22:18",
						nodeType: "EventDefinition",
						parameters: {
							id: 3333,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3330,
									indexed: false,
									mutability: "mutable",
									name: "oldGatewayContract",
									nameLocation: "3226:18:18",
									nodeType: "VariableDeclaration",
									scope: 3334,
									src: "3218:26:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 3329,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3218:7:18",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3332,
									indexed: false,
									mutability: "mutable",
									name: "newGatewayContract",
									nameLocation: "3254:18:18",
									nodeType: "VariableDeclaration",
									scope: 3334,
									src: "3246:26:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 3331,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3246:7:18",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "3217:56:18"
						},
						src: "3189:85:18"
					},
					{
						body: {
							id: 3353,
							nodeType: "Block",
							src: "3365:79:18",
							statements: [
								{
									expression: {
										id: 3347,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											id: 3345,
											name: "baseURI",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3326,
											src: "3375:7:18",
											typeDescriptions: {
												typeIdentifier: "t_string_storage",
												typeString: "string storage ref"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 3346,
											name: "_baseURI",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3336,
											src: "3385:8:18",
											typeDescriptions: {
												typeIdentifier: "t_string_memory_ptr",
												typeString: "string memory"
											}
										},
										src: "3375:18:18",
										typeDescriptions: {
											typeIdentifier: "t_string_storage",
											typeString: "string storage ref"
										}
									},
									id: 3348,
									nodeType: "ExpressionStatement",
									src: "3375:18:18"
								},
								{
									expression: {
										id: 3351,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											id: 3349,
											name: "gatewayContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3328,
											src: "3403:15:18",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 3350,
											name: "_gatewayContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3338,
											src: "3421:16:18",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										src: "3403:34:18",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									id: 3352,
									nodeType: "ExpressionStatement",
									src: "3403:34:18"
								}
							]
						},
						id: 3354,
						implemented: true,
						kind: "constructor",
						modifiers: [
							{
								"arguments": [
									{
										hexValue: "5657424c",
										id: 3341,
										isConstant: false,
										isLValue: false,
										isPure: true,
										kind: "string",
										lValueRequested: false,
										nodeType: "Literal",
										src: "3349:6:18",
										typeDescriptions: {
											typeIdentifier: "t_stringliteral_f898ba01e09ceb3d15dd620998801e26619b7c5f63726e839062f3f977b9b60e",
											typeString: "literal_string \"VWBL\""
										},
										value: "VWBL"
									},
									{
										hexValue: "5657424c",
										id: 3342,
										isConstant: false,
										isLValue: false,
										isPure: true,
										kind: "string",
										lValueRequested: false,
										nodeType: "Literal",
										src: "3357:6:18",
										typeDescriptions: {
											typeIdentifier: "t_stringliteral_f898ba01e09ceb3d15dd620998801e26619b7c5f63726e839062f3f977b9b60e",
											typeString: "literal_string \"VWBL\""
										},
										value: "VWBL"
									}
								],
								id: 3343,
								kind: "baseConstructorSpecifier",
								modifierName: {
									id: 3340,
									name: "ERC721",
									nodeType: "IdentifierPath",
									referencedDeclaration: 1382,
									src: "3342:6:18"
								},
								nodeType: "ModifierInvocation",
								src: "3342:22:18"
							}
						],
						name: "",
						nameLocation: "-1:-1:-1",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 3339,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3336,
									mutability: "mutable",
									name: "_baseURI",
									nameLocation: "3306:8:18",
									nodeType: "VariableDeclaration",
									scope: 3354,
									src: "3292:22:18",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 3335,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "3292:6:18",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3338,
									mutability: "mutable",
									name: "_gatewayContract",
									nameLocation: "3324:16:18",
									nodeType: "VariableDeclaration",
									scope: 3354,
									src: "3316:24:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 3337,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3316:7:18",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "3291:50:18"
						},
						returnParameters: {
							id: 3344,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "3365:0:18"
						},
						scope: 3466,
						src: "3280:164:18",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "public"
					},
					{
						baseFunctions: [
							733
						],
						body: {
							id: 3362,
							nodeType: "Block",
							src: "3517:31:18",
							statements: [
								{
									expression: {
										id: 3360,
										name: "baseURI",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 3326,
										src: "3534:7:18",
										typeDescriptions: {
											typeIdentifier: "t_string_storage",
											typeString: "string storage ref"
										}
									},
									functionReturnParameters: 3359,
									id: 3361,
									nodeType: "Return",
									src: "3527:14:18"
								}
							]
						},
						id: 3363,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "_baseURI",
						nameLocation: "3459:8:18",
						nodeType: "FunctionDefinition",
						overrides: {
							id: 3356,
							nodeType: "OverrideSpecifier",
							overrides: [
							],
							src: "3484:8:18"
						},
						parameters: {
							id: 3355,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "3467:2:18"
						},
						returnParameters: {
							id: 3359,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3358,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 3363,
									src: "3502:13:18",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 3357,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "3502:6:18",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								}
							],
							src: "3501:15:18"
						},
						scope: 3466,
						src: "3450:98:18",
						stateMutability: "view",
						virtual: false,
						visibility: "internal"
					},
					{
						body: {
							id: 3374,
							nodeType: "Block",
							src: "3615:35:18",
							statements: [
								{
									expression: {
										id: 3372,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											id: 3370,
											name: "baseURI",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3326,
											src: "3625:7:18",
											typeDescriptions: {
												typeIdentifier: "t_string_storage",
												typeString: "string storage ref"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 3371,
											name: "_baseURI",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3365,
											src: "3635:8:18",
											typeDescriptions: {
												typeIdentifier: "t_string_memory_ptr",
												typeString: "string memory"
											}
										},
										src: "3625:18:18",
										typeDescriptions: {
											typeIdentifier: "t_string_storage",
											typeString: "string storage ref"
										}
									},
									id: 3373,
									nodeType: "ExpressionStatement",
									src: "3625:18:18"
								}
							]
						},
						functionSelector: "55f804b3",
						id: 3375,
						implemented: true,
						kind: "function",
						modifiers: [
							{
								id: 3368,
								kind: "modifierInvocation",
								modifierName: {
									id: 3367,
									name: "onlyOwner",
									nodeType: "IdentifierPath",
									referencedDeclaration: 439,
									src: "3605:9:18"
								},
								nodeType: "ModifierInvocation",
								src: "3605:9:18"
							}
						],
						name: "setBaseURI",
						nameLocation: "3563:10:18",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 3366,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3365,
									mutability: "mutable",
									name: "_baseURI",
									nameLocation: "3588:8:18",
									nodeType: "VariableDeclaration",
									scope: 3375,
									src: "3574:22:18",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 3364,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "3574:6:18",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								}
							],
							src: "3573:24:18"
						},
						returnParameters: {
							id: 3369,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "3615:0:18"
						},
						scope: 3466,
						src: "3554:96:18",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "public"
					},
					{
						body: {
							id: 3401,
							nodeType: "Block",
							src: "3729:241:18",
							statements: [
								{
									expression: {
										"arguments": [
											{
												commonType: {
													typeIdentifier: "t_address",
													typeString: "address"
												},
												id: 3385,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												leftExpression: {
													id: 3383,
													name: "newGatewayContract",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 3377,
													src: "3747:18:18",
													typeDescriptions: {
														typeIdentifier: "t_address",
														typeString: "address"
													}
												},
												nodeType: "BinaryOperation",
												operator: "!=",
												rightExpression: {
													id: 3384,
													name: "gatewayContract",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 3328,
													src: "3769:15:18",
													typeDescriptions: {
														typeIdentifier: "t_address",
														typeString: "address"
													}
												},
												src: "3747:37:18",
												typeDescriptions: {
													typeIdentifier: "t_bool",
													typeString: "bool"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bool",
													typeString: "bool"
												}
											],
											id: 3382,
											name: "require",
											nodeType: "Identifier",
											overloadedDeclarations: [
												4294967278,
												4294967278
											],
											referencedDeclaration: 4294967278,
											src: "3739:7:18",
											typeDescriptions: {
												typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
												typeString: "function (bool) pure"
											}
										},
										id: 3386,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "3739:46:18",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 3387,
									nodeType: "ExpressionStatement",
									src: "3739:46:18"
								},
								{
									assignments: [
										3389
									],
									declarations: [
										{
											constant: false,
											id: 3389,
											mutability: "mutable",
											name: "oldGatewayContract",
											nameLocation: "3803:18:18",
											nodeType: "VariableDeclaration",
											scope: 3401,
											src: "3795:26:18",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											},
											typeName: {
												id: 3388,
												name: "address",
												nodeType: "ElementaryTypeName",
												src: "3795:7:18",
												stateMutability: "nonpayable",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											visibility: "internal"
										}
									],
									id: 3391,
									initialValue: {
										id: 3390,
										name: "gatewayContract",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 3328,
										src: "3824:15:18",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "3795:44:18"
								},
								{
									expression: {
										id: 3394,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											id: 3392,
											name: "gatewayContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3328,
											src: "3849:15:18",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 3393,
											name: "newGatewayContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3377,
											src: "3867:18:18",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										src: "3849:36:18",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									id: 3395,
									nodeType: "ExpressionStatement",
									src: "3849:36:18"
								},
								{
									eventCall: {
										"arguments": [
											{
												id: 3397,
												name: "oldGatewayContract",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3389,
												src: "3924:18:18",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 3398,
												name: "newGatewayContract",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3377,
												src: "3944:18:18",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_address",
													typeString: "address"
												},
												{
													typeIdentifier: "t_address",
													typeString: "address"
												}
											],
											id: 3396,
											name: "gatewayContractChanged",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 3334,
											src: "3901:22:18",
											typeDescriptions: {
												typeIdentifier: "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
												typeString: "function (address,address)"
											}
										},
										id: 3399,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "3901:62:18",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 3400,
									nodeType: "EmitStatement",
									src: "3896:67:18"
								}
							]
						},
						functionSelector: "50932cb5",
						id: 3402,
						implemented: true,
						kind: "function",
						modifiers: [
							{
								id: 3380,
								kind: "modifierInvocation",
								modifierName: {
									id: 3379,
									name: "onlyOwner",
									nodeType: "IdentifierPath",
									referencedDeclaration: 439,
									src: "3719:9:18"
								},
								nodeType: "ModifierInvocation",
								src: "3719:9:18"
							}
						],
						name: "setGatewayContract",
						nameLocation: "3665:18:18",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 3378,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3377,
									mutability: "mutable",
									name: "newGatewayContract",
									nameLocation: "3692:18:18",
									nodeType: "VariableDeclaration",
									scope: 3402,
									src: "3684:26:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 3376,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3684:7:18",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "3683:28:18"
						},
						returnParameters: {
							id: 3381,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "3729:0:18"
						},
						scope: 3466,
						src: "3656:314:18",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "public"
					},
					{
						baseFunctions: [
							3037
						],
						body: {
							id: 3413,
							nodeType: "Block",
							src: "4024:62:18",
							statements: [
								{
									expression: {
										"arguments": [
										],
										expression: {
											argumentTypes: [
											],
											expression: {
												"arguments": [
													{
														id: 3408,
														name: "gatewayContract",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 3328,
														src: "4054:15:18",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													}
												],
												expression: {
													argumentTypes: [
														{
															typeIdentifier: "t_address",
															typeString: "address"
														}
													],
													id: 3407,
													name: "IVWBLGateway",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 3523,
													src: "4041:12:18",
													typeDescriptions: {
														typeIdentifier: "t_type$_t_contract$_IVWBLGateway_$3523_$",
														typeString: "type(contract IVWBLGateway)"
													}
												},
												id: 3409,
												isConstant: false,
												isLValue: false,
												isPure: false,
												kind: "typeConversion",
												lValueRequested: false,
												names: [
												],
												nodeType: "FunctionCall",
												src: "4041:29:18",
												tryCall: false,
												typeDescriptions: {
													typeIdentifier: "t_contract$_IVWBLGateway_$3523",
													typeString: "contract IVWBLGateway"
												}
											},
											id: 3410,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											memberName: "feeWei",
											nodeType: "MemberAccess",
											referencedDeclaration: 3522,
											src: "4041:36:18",
											typeDescriptions: {
												typeIdentifier: "t_function_external_view$__$returns$_t_uint256_$",
												typeString: "function () view external returns (uint256)"
											}
										},
										id: 3411,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "4041:38:18",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									functionReturnParameters: 3406,
									id: 3412,
									nodeType: "Return",
									src: "4034:45:18"
								}
							]
						},
						functionSelector: "ced72f87",
						id: 3414,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "getFee",
						nameLocation: "3985:6:18",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 3403,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "3991:2:18"
						},
						returnParameters: {
							id: 3406,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3405,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 3414,
									src: "4015:7:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3404,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "4015:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "4014:9:18"
						},
						scope: 3466,
						src: "3976:110:18",
						stateMutability: "view",
						virtual: false,
						visibility: "public"
					},
					{
						baseFunctions: [
							3048
						],
						body: {
							id: 3451,
							nodeType: "Block",
							src: "4216:232:18",
							statements: [
								{
									assignments: [
										3426
									],
									declarations: [
										{
											constant: false,
											id: 3426,
											mutability: "mutable",
											name: "tokenId",
											nameLocation: "4234:7:18",
											nodeType: "VariableDeclaration",
											scope: 3451,
											src: "4226:15:18",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 3425,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "4226:7:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 3433,
									initialValue: {
										"arguments": [
											{
												id: 3429,
												name: "_documentId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3420,
												src: "4256:11:18",
												typeDescriptions: {
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												}
											},
											{
												id: 3430,
												name: "_getKeyURl",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3416,
												src: "4269:10:18",
												typeDescriptions: {
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												}
											},
											{
												id: 3431,
												name: "_royaltiesPercentage",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3418,
												src: "4281:20:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												},
												{
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												},
												{
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											],
											expression: {
												id: 3427,
												name: "super",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 4294967271,
												src: "4244:5:18",
												typeDescriptions: {
													typeIdentifier: "t_type$_t_super$_VWBL_$3466_$",
													typeString: "type(contract super VWBL)"
												}
											},
											id: 3428,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											memberName: "_mint",
											nodeType: "MemberAccess",
											referencedDeclaration: 3150,
											src: "4244:11:18",
											typeDescriptions: {
												typeIdentifier: "t_function_internal_nonpayable$_t_bytes32_$_t_string_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
												typeString: "function (bytes32,string memory,uint256) returns (uint256)"
											}
										},
										id: 3432,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "4244:58:18",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "4226:76:18"
								},
								{
									expression: {
										"arguments": [
											{
												id: 3441,
												name: "_documentId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3420,
												src: "4380:11:18",
												typeDescriptions: {
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												}
											},
											{
												"arguments": [
													{
														id: 3444,
														name: "this",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 4294967268,
														src: "4401:4:18",
														typeDescriptions: {
															typeIdentifier: "t_contract$_VWBL_$3466",
															typeString: "contract VWBL"
														}
													}
												],
												expression: {
													argumentTypes: [
														{
															typeIdentifier: "t_contract$_VWBL_$3466",
															typeString: "contract VWBL"
														}
													],
													id: 3443,
													isConstant: false,
													isLValue: false,
													isPure: true,
													lValueRequested: false,
													nodeType: "ElementaryTypeNameExpression",
													src: "4393:7:18",
													typeDescriptions: {
														typeIdentifier: "t_type$_t_address_$",
														typeString: "type(address)"
													},
													typeName: {
														id: 3442,
														name: "address",
														nodeType: "ElementaryTypeName",
														src: "4393:7:18",
														typeDescriptions: {
														}
													}
												},
												id: 3445,
												isConstant: false,
												isLValue: false,
												isPure: false,
												kind: "typeConversion",
												lValueRequested: false,
												names: [
												],
												nodeType: "FunctionCall",
												src: "4393:13:18",
												tryCall: false,
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 3446,
												name: "tokenId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3426,
												src: "4408:7:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												},
												{
													typeIdentifier: "t_address",
													typeString: "address"
												},
												{
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											],
											expression: {
												argumentTypes: [
													{
														typeIdentifier: "t_bytes32",
														typeString: "bytes32"
													},
													{
														typeIdentifier: "t_address",
														typeString: "address"
													},
													{
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												],
												expression: {
													"arguments": [
														{
															id: 3435,
															name: "gatewayContract",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 3328,
															src: "4326:15:18",
															typeDescriptions: {
																typeIdentifier: "t_address",
																typeString: "address"
															}
														}
													],
													expression: {
														argumentTypes: [
															{
																typeIdentifier: "t_address",
																typeString: "address"
															}
														],
														id: 3434,
														name: "IVWBLGateway",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 3523,
														src: "4313:12:18",
														typeDescriptions: {
															typeIdentifier: "t_type$_t_contract$_IVWBLGateway_$3523_$",
															typeString: "type(contract IVWBLGateway)"
														}
													},
													id: 3436,
													isConstant: false,
													isLValue: false,
													isPure: false,
													kind: "typeConversion",
													lValueRequested: false,
													names: [
													],
													nodeType: "FunctionCall",
													src: "4313:29:18",
													tryCall: false,
													typeDescriptions: {
														typeIdentifier: "t_contract$_IVWBLGateway_$3523",
														typeString: "contract IVWBLGateway"
													}
												},
												id: 3437,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												memberName: "grantAccessControl",
												nodeType: "MemberAccess",
												referencedDeclaration: 3509,
												src: "4313:48:18",
												typeDescriptions: {
													typeIdentifier: "t_function_external_payable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$",
													typeString: "function (bytes32,address,uint256) payable external"
												}
											},
											id: 3440,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											names: [
												"value"
											],
											nodeType: "FunctionCallOptions",
											options: [
												{
													expression: {
														id: 3438,
														name: "msg",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 4294967281,
														src: "4369:3:18",
														typeDescriptions: {
															typeIdentifier: "t_magic_message",
															typeString: "msg"
														}
													},
													id: 3439,
													isConstant: false,
													isLValue: false,
													isPure: false,
													lValueRequested: false,
													memberName: "value",
													nodeType: "MemberAccess",
													src: "4369:9:18",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												}
											],
											src: "4313:66:18",
											typeDescriptions: {
												typeIdentifier: "t_function_external_payable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$value",
												typeString: "function (bytes32,address,uint256) payable external"
											}
										},
										id: 3447,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "4313:103:18",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 3448,
									nodeType: "ExpressionStatement",
									src: "4313:103:18"
								},
								{
									expression: {
										id: 3449,
										name: "tokenId",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 3426,
										src: "4434:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									functionReturnParameters: 3424,
									id: 3450,
									nodeType: "Return",
									src: "4427:14:18"
								}
							]
						},
						functionSelector: "de5bb4b7",
						id: 3452,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "mint",
						nameLocation: "4101:4:18",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 3421,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3416,
									mutability: "mutable",
									name: "_getKeyURl",
									nameLocation: "4120:10:18",
									nodeType: "VariableDeclaration",
									scope: 3452,
									src: "4106:24:18",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 3415,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "4106:6:18",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3418,
									mutability: "mutable",
									name: "_royaltiesPercentage",
									nameLocation: "4140:20:18",
									nodeType: "VariableDeclaration",
									scope: 3452,
									src: "4132:28:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3417,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "4132:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 3420,
									mutability: "mutable",
									name: "_documentId",
									nameLocation: "4170:11:18",
									nodeType: "VariableDeclaration",
									scope: 3452,
									src: "4162:19:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_bytes32",
										typeString: "bytes32"
									},
									typeName: {
										id: 3419,
										name: "bytes32",
										nodeType: "ElementaryTypeName",
										src: "4162:7:18",
										typeDescriptions: {
											typeIdentifier: "t_bytes32",
											typeString: "bytes32"
										}
									},
									visibility: "internal"
								}
							],
							src: "4105:77:18"
						},
						returnParameters: {
							id: 3424,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3423,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 3452,
									src: "4207:7:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3422,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "4207:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "4206:9:18"
						},
						scope: 3466,
						src: "4092:356:18",
						stateMutability: "payable",
						virtual: false,
						visibility: "public"
					},
					{
						baseFunctions: [
							3055
						],
						body: {
							id: 3464,
							nodeType: "Block",
							src: "4520:65:18",
							statements: [
								{
									expression: {
										expression: {
											baseExpression: {
												id: 3459,
												name: "tokenIdToTokenInfo",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3089,
												src: "4537:18:18",
												typeDescriptions: {
													typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$3079_storage_$",
													typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo storage ref)"
												}
											},
											id: 3461,
											indexExpression: {
												id: 3460,
												name: "tokenId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 3454,
												src: "4556:7:18",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											isConstant: false,
											isLValue: true,
											isPure: false,
											lValueRequested: false,
											nodeType: "IndexAccess",
											src: "4537:27:18",
											typeDescriptions: {
												typeIdentifier: "t_struct$_TokenInfo_$3079_storage",
												typeString: "struct VWBLProtocol.TokenInfo storage ref"
											}
										},
										id: 3462,
										isConstant: false,
										isLValue: true,
										isPure: false,
										lValueRequested: false,
										memberName: "minterAddress",
										nodeType: "MemberAccess",
										referencedDeclaration: 3076,
										src: "4537:41:18",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									functionReturnParameters: 3458,
									id: 3463,
									nodeType: "Return",
									src: "4530:48:18"
								}
							]
						},
						functionSelector: "5b7121f8",
						id: 3465,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "getMinter",
						nameLocation: "4463:9:18",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 3455,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3454,
									mutability: "mutable",
									name: "tokenId",
									nameLocation: "4481:7:18",
									nodeType: "VariableDeclaration",
									scope: 3465,
									src: "4473:15:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 3453,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "4473:7:18",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "4472:17:18"
						},
						returnParameters: {
							id: 3458,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 3457,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 3465,
									src: "4511:7:18",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 3456,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "4511:7:18",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "4510:9:18"
						},
						scope: 3466,
						src: "4454:131:18",
						stateMutability: "view",
						virtual: false,
						visibility: "public"
					}
				],
				scope: 3467,
				src: "3073:1514:18",
				usedErrors: [
				]
			}
		],
		src: "0:4588:18"
	};
	var compiler$1 = {
		name: "solc",
		version: "0.8.11+commit.d7f03943.Emscripten.clang"
	};
	var networks$2 = {
		"3": {
			events: {
			},
			links: {
			},
			address: "0x46498A61c17D8E6D9b7CD54269b07758b96becBE",
			transactionHash: "0x43bcca478a9f084ac9c0665a7cbd4c5de4c14356e9a1c27e24c7f8dad61fcb1c"
		},
		"4": {
			events: {
				"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
					anonymous: false,
					inputs: [
						{
							indexed: true,
							internalType: "address",
							name: "owner",
							type: "address"
						},
						{
							indexed: true,
							internalType: "address",
							name: "approved",
							type: "address"
						},
						{
							indexed: true,
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						}
					],
					name: "Approval",
					type: "event"
				},
				"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
					anonymous: false,
					inputs: [
						{
							indexed: true,
							internalType: "address",
							name: "owner",
							type: "address"
						},
						{
							indexed: true,
							internalType: "address",
							name: "operator",
							type: "address"
						},
						{
							indexed: false,
							internalType: "bool",
							name: "approved",
							type: "bool"
						}
					],
					name: "ApprovalForAll",
					type: "event"
				},
				"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
					anonymous: false,
					inputs: [
						{
							indexed: true,
							internalType: "address",
							name: "previousOwner",
							type: "address"
						},
						{
							indexed: true,
							internalType: "address",
							name: "newOwner",
							type: "address"
						}
					],
					name: "OwnershipTransferred",
					type: "event"
				},
				"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
					anonymous: false,
					inputs: [
						{
							indexed: true,
							internalType: "address",
							name: "from",
							type: "address"
						},
						{
							indexed: true,
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							indexed: true,
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						}
					],
					name: "Transfer",
					type: "event"
				},
				"0x9b015b8749c8a182300e9c8c7699c761729b84ff89651162dd89881ff1273f63": {
					anonymous: false,
					inputs: [
						{
							indexed: false,
							internalType: "address",
							name: "oldGatewayContract",
							type: "address"
						},
						{
							indexed: false,
							internalType: "address",
							name: "newGatewayContract",
							type: "address"
						}
					],
					name: "gatewayContractChanged",
					type: "event"
				}
			},
			links: {
			},
			address: "0x4FE26c21019fE1a492276A222F1AA10398Eb9E5B",
			transactionHash: "0xc4a53839a1bf657db96d3bc9297e791620f21509bc63f63ce7856b7ae090eca9"
		},
		"5777": {
			events: {
				"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
					anonymous: false,
					inputs: [
						{
							indexed: true,
							internalType: "address",
							name: "owner",
							type: "address"
						},
						{
							indexed: true,
							internalType: "address",
							name: "approved",
							type: "address"
						},
						{
							indexed: true,
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						}
					],
					name: "Approval",
					type: "event"
				},
				"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
					anonymous: false,
					inputs: [
						{
							indexed: true,
							internalType: "address",
							name: "owner",
							type: "address"
						},
						{
							indexed: true,
							internalType: "address",
							name: "operator",
							type: "address"
						},
						{
							indexed: false,
							internalType: "bool",
							name: "approved",
							type: "bool"
						}
					],
					name: "ApprovalForAll",
					type: "event"
				},
				"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
					anonymous: false,
					inputs: [
						{
							indexed: true,
							internalType: "address",
							name: "previousOwner",
							type: "address"
						},
						{
							indexed: true,
							internalType: "address",
							name: "newOwner",
							type: "address"
						}
					],
					name: "OwnershipTransferred",
					type: "event"
				},
				"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
					anonymous: false,
					inputs: [
						{
							indexed: true,
							internalType: "address",
							name: "from",
							type: "address"
						},
						{
							indexed: true,
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							indexed: true,
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						}
					],
					name: "Transfer",
					type: "event"
				},
				"0x9b015b8749c8a182300e9c8c7699c761729b84ff89651162dd89881ff1273f63": {
					anonymous: false,
					inputs: [
						{
							indexed: false,
							internalType: "address",
							name: "oldGatewayContract",
							type: "address"
						},
						{
							indexed: false,
							internalType: "address",
							name: "newGatewayContract",
							type: "address"
						}
					],
					name: "gatewayContractChanged",
					type: "event"
				}
			},
			links: {
			},
			address: "0xB1B009F3450442954C9071239ED98efFf85F0092",
			transactionHash: "0xd3f2b508c85d5ca01195a0b1ea05e8fed0d6f7753a8a27749fdf0d11054de5dc"
		}
	};
	var schemaVersion$1 = "3.4.7";
	var updatedAt$1 = "2022-05-27T10:16:46.890Z";
	var networkType$1 = "ethereum";
	var devdoc$1 = {
		kind: "dev",
		methods: {
			"approve(address,uint256)": {
				details: "See {IERC721-approve}."
			},
			"balanceOf(address)": {
				details: "See {IERC721-balanceOf}."
			},
			"getApproved(uint256)": {
				details: "See {IERC721-getApproved}."
			},
			"isApprovedForAll(address,address)": {
				details: "See {IERC721-isApprovedForAll}."
			},
			"name()": {
				details: "See {IERC721Metadata-name}."
			},
			"owner()": {
				details: "Returns the address of the current owner."
			},
			"ownerOf(uint256)": {
				details: "See {IERC721-ownerOf}."
			},
			"renounceOwnership()": {
				details: "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
			},
			"safeTransferFrom(address,address,uint256)": {
				details: "See {IERC721-safeTransferFrom}."
			},
			"safeTransferFrom(address,address,uint256,bytes)": {
				details: "See {IERC721-safeTransferFrom}."
			},
			"setApprovalForAll(address,bool)": {
				details: "See {IERC721-setApprovalForAll}."
			},
			"symbol()": {
				details: "See {IERC721Metadata-symbol}."
			},
			"tokenByIndex(uint256)": {
				details: "See {IERC721Enumerable-tokenByIndex}."
			},
			"tokenOfOwnerByIndex(address,uint256)": {
				details: "See {IERC721Enumerable-tokenOfOwnerByIndex}."
			},
			"tokenURI(uint256)": {
				details: "See {IERC721Metadata-tokenURI}."
			},
			"totalSupply()": {
				details: "See {IERC721Enumerable-totalSupply}."
			},
			"transferFrom(address,address,uint256)": {
				details: "See {IERC721-transferFrom}."
			},
			"transferOwnership(address)": {
				details: "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			}
		},
		version: 1
	};
	var userdoc$1 = {
		kind: "user",
		methods: {
		},
		version: 1
	};
	var require$$1$3 = {
		contractName: contractName$4,
		abi: abi$7,
		metadata: metadata$2,
		bytecode: bytecode$4,
		deployedBytecode: deployedBytecode$4,
		immutableReferences: immutableReferences$1,
		generatedSources: generatedSources$1,
		deployedGeneratedSources: deployedGeneratedSources$1,
		sourceMap: sourceMap$1,
		deployedSourceMap: deployedSourceMap$1,
		source: source$1,
		sourcePath: sourcePath$1,
		ast: ast$1,
		compiler: compiler$1,
		networks: networks$2,
		schemaVersion: schemaVersion$1,
		updatedAt: updatedAt$1,
		networkType: networkType$1,
		devdoc: devdoc$1,
		userdoc: userdoc$1
	};

	var contractName$3 = "VWBLSupportIPFS";
	var abi$6 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_gatewayContract",
					type: "address"
				},
				{
					internalType: "address",
					name: "_accessCheckerContract",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "approved",
					type: "address"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "Approval",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: false,
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "ApprovalForAll",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "previousOwner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "OwnershipTransferred",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "Transfer",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "address",
					name: "oldAccessCheckerContract",
					type: "address"
				},
				{
					indexed: false,
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "accessCheckerContractChanged",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "address",
					name: "oldGatewayContract",
					type: "address"
				},
				{
					indexed: false,
					internalType: "address",
					name: "newGatewayContract",
					type: "address"
				}
			],
			name: "gatewayContractChanged",
			type: "event"
		},
		{
			inputs: [
			],
			name: "INVERSE_BASIS_POINT",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "accessCheckerContract",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "approve",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				}
			],
			name: "balanceOf",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "counter",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "gatewayContract",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getApproved",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "minter",
					type: "address"
				}
			],
			name: "getTokenByMinter",
			outputs: [
				{
					internalType: "uint256[]",
					name: "",
					type: "uint256[]"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "address",
					name: "operator",
					type: "address"
				}
			],
			name: "isApprovedForAll",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "name",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "owner",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "ownerOf",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "renounceOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_tokenId",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_salePrice",
					type: "uint256"
				}
			],
			name: "royaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "receiver",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltyAmount",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "safeTransferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "setApprovalForAll",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "bytes4",
					name: "interfaceId",
					type: "bytes4"
				}
			],
			name: "supportsInterface",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "symbol",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToRoyaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "recipient",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltiesPercentage",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToTokenInfo",
			outputs: [
				{
					internalType: "bytes32",
					name: "documentId",
					type: "bytes32"
				},
				{
					internalType: "address",
					name: "minterAddress",
					type: "address"
				},
				{
					internalType: "string",
					name: "getKeyURl",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenOfOwnerByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "tokenURI",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
			],
			name: "totalSupply",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "transferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "transferOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newGatewayContract",
					type: "address"
				}
			],
			name: "setGatewayContract",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "setAccessCheckerContract",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getFee",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_metadataURl",
					type: "string"
				},
				{
					internalType: "string",
					name: "_getKeyURl",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_royaltiesPercentage",
					type: "uint256"
				},
				{
					internalType: "bytes32",
					name: "_documentId",
					type: "bytes32"
				}
			],
			name: "mint",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "payable",
			type: "function",
			payable: true
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getMinter",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function",
			constant: true
		}
	];
	var metadata$1 = "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gatewayContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessCheckerContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessCheckerContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessCheckerContract\",\"type\":\"address\"}],\"name\":\"accessCheckerContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGatewayContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGatewayContract\",\"type\":\"address\"}],\"name\":\"gatewayContractChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVERSE_BASIS_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessCheckerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getTokenByMinter\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_getKeyURl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royaltiesPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_documentId\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessCheckerContract\",\"type\":\"address\"}],\"name\":\"setAccessCheckerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGatewayContract\",\"type\":\"address\"}],\"name\":\"setGatewayContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToTokenInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"documentId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"getKeyURl\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/ERC721/ipfs/VWBLSupportIPFS.sol\":\"VWBLSupportIPFS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5522afc5c222c810d9ad67c45f37cb7169452fcf76692cad10ac8153c068daa\",\"dweb:/ipfs/QmX4XgnDp7pyvojQ6g5tacrUMCf7TED2qC2vERH9Xh9feZ\"]},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7dbcedc364fce0ab5e54d21d4cbd91a97959f52c0674cf5c36a314bb58308f62\",\"dweb:/ipfs/QmfYpqHKtu3bSQ9FGvLwzdxRNykStpVPtoLNTaM1KBKj6E\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://afbedcf17f31db719e6fdc56caa8f458799c5fa2eb94cb1e94ef18f89af85768\",\"dweb:/ipfs/QmVmqRdBfbgYThpZSoAJ5o9mnAMjx8mCHHjv3Rh8cQAAg3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/ERC721/access-condition/IAccessControlCheckerByNFT.sol\":{\"keccak256\":\"0xc89fe2a579b79eaca5dde9643adf91ff0c63174c7a0f8bf476f1fdb4c8f14774\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba7d6e803e70de3fa3183052199fea76d89e02f7c03f70ac8e4c322e9fd77f93\",\"dweb:/ipfs/QmSf7tzF54DmiKe88irKm5ob1qN2vJRzREBEhNNvrwzUJL\"]},\"project:/contracts/ERC721/gateway/IVWBLGateway.sol\":{\"keccak256\":\"0x21915fc3bd60ee833f08e72e28fc9bed1ab58dda2638022deee80a91e30f7077\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://038ce83e2e885fb9b2f872c707602185ae3baacb3d89b86e3d96181a02cf8b94\",\"dweb:/ipfs/QmY1Xj6AGZeLUcuew1JF53skQNCcJpmfzMR4WunxtU1uBT\"]},\"project:/contracts/ERC721/ipfs/IVWBLSupportIPFS.sol\":{\"keccak256\":\"0x5cc53beeb8195f2a858e662088d0429af36ec9d147a6b432a2dd2a4b0de44c1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3eee34fcf1b198b1c4cf0ffcbdfe52437d07d735a2ab5eaeb2683af2e19c87a\",\"dweb:/ipfs/QmazbhQhFDz8Bp5KM3KoeSxNVg6LWExs7e8RJTPKix9rAb\"]},\"project:/contracts/ERC721/ipfs/VWBLSupportIPFS.sol\":{\"keccak256\":\"0x4f3c94721af5acf8ca825f0e5420618d13ba0856b4d524045491787f347cee3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fdbf7bca5430301489620e8e555a10ae1f902cd7a459a6218e20dee23218112a\",\"dweb:/ipfs/Qmd1Di8Rz4sa5qXgvsF9daakryPN9VjTvCuZXbheX77uwt\"]}},\"version\":1}";
	var bytecode$3 = "0x60806040526000600b553480156200001657600080fd5b50604051620025cd380380620025cd8339810160408190526200003991620001f6565b6040805180820182526004808252631595d09360e21b602080840182815285518087019096529285528401528151919291620000789160009162000133565b5080516200008e90600190602084019062000133565b505050620000ab620000a5620000dd60201b60201c565b620000e1565b600f80546001600160a01b039384166001600160a01b031991821617909155601080549290931691161790556200026b565b3390565b600e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000141906200022e565b90600052602060002090601f016020900481019282620001655760008555620001b0565b82601f106200018057805160ff1916838001178555620001b0565b82800160010185558215620001b0579182015b82811115620001b057825182559160200191906001019062000193565b50620001be929150620001c2565b5090565b5b80821115620001be5760008155600101620001c3565b80516001600160a01b0381168114620001f157600080fd5b919050565b600080604083850312156200020a57600080fd5b6200021583620001d9565b91506200022560208401620001d9565b90509250929050565b600181811c908216806200024357607f821691505b602082108114156200026557634e487b7160e01b600052602260045260246000fd5b50919050565b612352806200027b6000396000f3fe6080604052600436106101e35760003560e01c806361bc221a11610102578063b88d4fde11610095578063ced72f8711610064578063ced72f87146105d7578063e985e9c5146105ec578063eb0cde1d14610635578063f2fde38b1461065557600080fd5b8063b88d4fde14610554578063c87b56dd14610574578063cae6047f14610594578063ce5af336146105aa57600080fd5b80638da5cb5b116100d15780638da5cb5b146104e157806393fab57b146104ff57806395d89b411461051f578063a22cb4651461053457600080fd5b806361bc221a146104765780636352211e1461048c57806370a08231146104ac578063715018a6146104cc57600080fd5b80632812a3d21161017a5780634f6ccce7116101495780634f6ccce7146103ce57806350932cb5146103ee5780635b7121f81461040e5780635fb8bcd51461044757600080fd5b80632812a3d21461034e5780632a55205a1461036e5780632f745c591461038e57806342842e0e146103ae57600080fd5b8063095ea7b3116101b6578063095ea7b31461029857806318160ddd146102ba57806319daf1bf146102cf57806323b872dd1461032e57600080fd5b806301ffc9a7146101e857806302f024991461021d57806306fdde031461023e578063081812fc14610260575b600080fd5b3480156101f457600080fd5b50610208610203366004611ceb565b610675565b60405190151581526020015b60405180910390f35b61023061022b366004611dbb565b6106a0565b604051908152602001610214565b34801561024a57600080fd5b50610253610729565b6040516102149190611e7c565b34801561026c57600080fd5b5061028061027b366004611e8f565b6107bb565b6040516001600160a01b039091168152602001610214565b3480156102a457600080fd5b506102b86102b3366004611ec4565b610855565b005b3480156102c657600080fd5b50600854610230565b3480156102db57600080fd5b5061030f6102ea366004611e8f565b600d60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610214565b34801561033a57600080fd5b506102b8610349366004611eee565b61096b565b34801561035a57600080fd5b506102b8610369366004611f2a565b61099c565b34801561037a57600080fd5b5061030f610389366004611f45565b610a43565b34801561039a57600080fd5b506102306103a9366004611ec4565b610a9d565b3480156103ba57600080fd5b506102b86103c9366004611eee565b610b33565b3480156103da57600080fd5b506102306103e9366004611e8f565b610b4e565b3480156103fa57600080fd5b506102b8610409366004611f2a565b610be1565b34801561041a57600080fd5b50610280610429366004611e8f565b6000908152600c60205260409020600101546001600160a01b031690565b34801561045357600080fd5b50610467610462366004611e8f565b610c80565b60405161021493929190611f67565b34801561048257600080fd5b50610230600b5481565b34801561049857600080fd5b506102806104a7366004611e8f565b610d35565b3480156104b857600080fd5b506102306104c7366004611f2a565b610dac565b3480156104d857600080fd5b506102b8610e33565b3480156104ed57600080fd5b50600e546001600160a01b0316610280565b34801561050b57600080fd5b50601054610280906001600160a01b031681565b34801561052b57600080fd5b50610253610e69565b34801561054057600080fd5b506102b861054f366004611f9a565b610e78565b34801561056057600080fd5b506102b861056f366004611fd6565b610e87565b34801561058057600080fd5b5061025361058f366004611e8f565b610ebf565b3480156105a057600080fd5b5061023061271081565b3480156105b657600080fd5b506105ca6105c5366004611f2a565b610fca565b6040516102149190612052565b3480156105e357600080fd5b506102306110e1565b3480156105f857600080fd5b50610208610607366004612096565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561064157600080fd5b50600f54610280906001600160a01b031681565b34801561066157600080fd5b506102b8610670366004611f2a565b611154565b60006001600160e01b0319821663152a902d60e11b148061069a575061069a826111ef565b92915050565b6000806106af83878787611214565b601054604051630f384cd960e01b815260048101869052306024820152604481018390529192506001600160a01b031690630f384cd99034906064016000604051808303818588803b15801561070457600080fd5b505af1158015610718573d6000803e3d6000fd5b50939450505050505b949350505050565b606060008054610738906120c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610764906120c9565b80156107b15780601f10610786576101008083540402835291602001916107b1565b820191906000526020600020905b81548152906001019060200180831161079457829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108395760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061086082610d35565b9050806001600160a01b0316836001600160a01b031614156108ce5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610830565b336001600160a01b03821614806108ea57506108ea8133610607565b61095c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610830565b61096683836112fc565b505050565b610975338261136a565b6109915760405162461bcd60e51b815260040161083090612104565b610966838383611460565b600e546001600160a01b031633146109c65760405162461bcd60e51b815260040161083090612155565b6010546001600160a01b03828116911614156109e157600080fd5b601080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9aaef5934caac7bf8ee7de13d1a1e98122180cb78e64abeae728ad559df64a6691015b60405180910390a15050565b6000828152600d60209081526040808320815180830190925280546001600160a01b03168252600101549181018290528291829061271090610a8590876121a0565b610a8f91906121bf565b915196919550909350505050565b6000610aa883610dac565b8210610b0a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610830565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61096683838360405180602001604052806000815250610e87565b6000610b5960085490565b8210610bbc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610830565b60088281548110610bcf57610bcf6121e1565b90600052602060002001549050919050565b600e546001600160a01b03163314610c0b5760405162461bcd60e51b815260040161083090612155565b600f546001600160a01b0382811691161415610c2657600080fd5b600f80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9b015b8749c8a182300e9c8c7699c761729b84ff89651162dd89881ff1273f639101610a37565b600c6020526000908152604090208054600182015460028301805492936001600160a01b0390921692610cb2906120c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610cde906120c9565b8015610d2b5780601f10610d0057610100808354040283529160200191610d2b565b820191906000526020600020905b815481529060010190602001808311610d0e57829003601f168201915b5050505050905083565b6000818152600260205260408120546001600160a01b03168061069a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610830565b60006001600160a01b038216610e175760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610830565b506001600160a01b031660009081526003602052604090205490565b600e546001600160a01b03163314610e5d5760405162461bcd60e51b815260040161083090612155565b610e676000611607565b565b606060018054610738906120c9565b610e83338383611659565b5050565b610e91338361136a565b610ead5760405162461bcd60e51b815260040161083090612104565b610eb984848484611728565b50505050565b6000818152600a60205260409020805460609190610edc906120c9565b15159050610f2c5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610830565b6000828152600a602052604090208054610f45906120c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610f71906120c9565b8015610fbe5780601f10610f9357610100808354040283529160200191610fbe565b820191906000526020600020905b815481529060010190602001808311610fa157829003601f168201915b50505050509050919050565b6060600060015b600b54811161101f576000818152600c60205260409020600101546001600160a01b038581169116141561100d5781611009816121f7565b9250505b80611017816121f7565b915050610fd1565b5060008167ffffffffffffffff81111561103b5761103b611d0f565b604051908082528060200260200182016040528015611064578160200160208202803683370190505b509050600060015b600b5481116110d7576000818152600c60205260409020600101546001600160a01b03878116911614156110c5578083836110a6816121f7565b9450815181106110b8576110b86121e1565b6020026020010181815250505b806110cf816121f7565b91505061106c565b5090949350505050565b600f546040805163428c090b60e01b815290516000926001600160a01b03169163428c090b9160048083019260209291908290030181865afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f9190612212565b905090565b600e546001600160a01b0316331461117e5760405162461bcd60e51b815260040161083090612155565b6001600160a01b0381166111e35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610830565b6111ec81611607565b50565b60006001600160e01b0319821663780e9d6360e01b148061069a575061069a8261175b565b600080600b60008154611226906121f7565b9182905550604080516060810182528881523360208083019182528284018981526000868152600c8352949094208351815591516001830180546001600160a01b0319166001600160a01b0390921691909117905592518051949550919384939192611299926002850192910190611c3c565b509050506112a733836117ab565b6000828152600a6020908152604090912087516112c692890190611c3c565b5083156112f2576000828152600d6020526040902080546001600160a01b031916331781556001018490555b5095945050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061133182610d35565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166113e35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610830565b60006113ee83610d35565b9050806001600160a01b0316846001600160a01b0316148061143557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107215750836001600160a01b031661144e846107bb565b6001600160a01b031614949350505050565b826001600160a01b031661147382610d35565b6001600160a01b0316146114d75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610830565b6001600160a01b0382166115395760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610830565b6115448383836118f9565b61154f6000826112fc565b6001600160a01b038316600090815260036020526040812080546001929061157890849061222b565b90915550506001600160a01b03821660009081526003602052604081208054600192906115a6908490612242565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156116bb5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610830565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611733848484611460565b61173f848484846119b1565b610eb95760405162461bcd60e51b81526004016108309061225a565b60006001600160e01b031982166380ac58cd60e01b148061178c57506001600160e01b03198216635b5e139f60e01b145b8061069a57506301ffc9a760e01b6001600160e01b031983161461069a565b6001600160a01b0382166118015760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610830565b6000818152600260205260409020546001600160a01b0316156118665760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610830565b611872600083836118f9565b6001600160a01b038216600090815260036020526040812080546001929061189b908490612242565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166119545761194f81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611977565b816001600160a01b0316836001600160a01b031614611977576119778382611aac565b6001600160a01b03821661198e5761096681611b49565b826001600160a01b0316826001600160a01b031614610966576109668282611bf8565b60006001600160a01b0384163b15611aa457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119f59033908990889088906004016122ac565b6020604051808303816000875af1925050508015611a30575060408051601f3d908101601f19168201909252611a2d918101906122e9565b60015b611a8a573d808015611a5e576040519150601f19603f3d011682016040523d82523d6000602084013e611a63565b606091505b508051611a825760405162461bcd60e51b81526004016108309061225a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610721565b506001610721565b60006001611ab984610dac565b611ac3919061222b565b600083815260076020526040902054909150808214611b16576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611b5b9060019061222b565b60008381526009602052604081205460088054939450909284908110611b8357611b836121e1565b906000526020600020015490508060088381548110611ba457611ba46121e1565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611bdc57611bdc612306565b6001900381819060005260206000200160009055905550505050565b6000611c0383610dac565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054611c48906120c9565b90600052602060002090601f016020900481019282611c6a5760008555611cb0565b82601f10611c8357805160ff1916838001178555611cb0565b82800160010185558215611cb0579182015b82811115611cb0578251825591602001919060010190611c95565b50611cbc929150611cc0565b5090565b5b80821115611cbc5760008155600101611cc1565b6001600160e01b0319811681146111ec57600080fd5b600060208284031215611cfd57600080fd5b8135611d0881611cd5565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611d4057611d40611d0f565b604051601f8501601f19908116603f01168101908282118183101715611d6857611d68611d0f565b81604052809350858152868686011115611d8157600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611dac57600080fd5b611d0883833560208501611d25565b60008060008060808587031215611dd157600080fd5b843567ffffffffffffffff80821115611de957600080fd5b611df588838901611d9b565b95506020870135915080821115611e0b57600080fd5b50611e1887828801611d9b565b949794965050505060408301359260600135919050565b6000815180845260005b81811015611e5557602081850181015186830182015201611e39565b81811115611e67576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611d086020830184611e2f565b600060208284031215611ea157600080fd5b5035919050565b80356001600160a01b0381168114611ebf57600080fd5b919050565b60008060408385031215611ed757600080fd5b611ee083611ea8565b946020939093013593505050565b600080600060608486031215611f0357600080fd5b611f0c84611ea8565b9250611f1a60208501611ea8565b9150604084013590509250925092565b600060208284031215611f3c57600080fd5b611d0882611ea8565b60008060408385031215611f5857600080fd5b50508035926020909101359150565b8381526001600160a01b0383166020820152606060408201819052600090611f9190830184611e2f565b95945050505050565b60008060408385031215611fad57600080fd5b611fb683611ea8565b915060208301358015158114611fcb57600080fd5b809150509250929050565b60008060008060808587031215611fec57600080fd5b611ff585611ea8565b935061200360208601611ea8565b925060408501359150606085013567ffffffffffffffff81111561202657600080fd5b8501601f8101871361203757600080fd5b61204687823560208401611d25565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561208a5783518352928401929184019160010161206e565b50909695505050505050565b600080604083850312156120a957600080fd5b6120b283611ea8565b91506120c060208401611ea8565b90509250929050565b600181811c908216806120dd57607f821691505b602082108114156120fe57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156121ba576121ba61218a565b500290565b6000826121dc57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060001982141561220b5761220b61218a565b5060010190565b60006020828403121561222457600080fd5b5051919050565b60008282101561223d5761223d61218a565b500390565b600082198211156122555761225561218a565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906122df90830184611e2f565b9695505050505050565b6000602082840312156122fb57600080fd5b8151611d0881611cd5565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ef198391a71cb2a06452abf8db4deeaa2390440937015afefeb98043d24d472e64736f6c634300080b0033";
	var deployedBytecode$3 = "0x6080604052600436106101e35760003560e01c806361bc221a11610102578063b88d4fde11610095578063ced72f8711610064578063ced72f87146105d7578063e985e9c5146105ec578063eb0cde1d14610635578063f2fde38b1461065557600080fd5b8063b88d4fde14610554578063c87b56dd14610574578063cae6047f14610594578063ce5af336146105aa57600080fd5b80638da5cb5b116100d15780638da5cb5b146104e157806393fab57b146104ff57806395d89b411461051f578063a22cb4651461053457600080fd5b806361bc221a146104765780636352211e1461048c57806370a08231146104ac578063715018a6146104cc57600080fd5b80632812a3d21161017a5780634f6ccce7116101495780634f6ccce7146103ce57806350932cb5146103ee5780635b7121f81461040e5780635fb8bcd51461044757600080fd5b80632812a3d21461034e5780632a55205a1461036e5780632f745c591461038e57806342842e0e146103ae57600080fd5b8063095ea7b3116101b6578063095ea7b31461029857806318160ddd146102ba57806319daf1bf146102cf57806323b872dd1461032e57600080fd5b806301ffc9a7146101e857806302f024991461021d57806306fdde031461023e578063081812fc14610260575b600080fd5b3480156101f457600080fd5b50610208610203366004611ceb565b610675565b60405190151581526020015b60405180910390f35b61023061022b366004611dbb565b6106a0565b604051908152602001610214565b34801561024a57600080fd5b50610253610729565b6040516102149190611e7c565b34801561026c57600080fd5b5061028061027b366004611e8f565b6107bb565b6040516001600160a01b039091168152602001610214565b3480156102a457600080fd5b506102b86102b3366004611ec4565b610855565b005b3480156102c657600080fd5b50600854610230565b3480156102db57600080fd5b5061030f6102ea366004611e8f565b600d60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610214565b34801561033a57600080fd5b506102b8610349366004611eee565b61096b565b34801561035a57600080fd5b506102b8610369366004611f2a565b61099c565b34801561037a57600080fd5b5061030f610389366004611f45565b610a43565b34801561039a57600080fd5b506102306103a9366004611ec4565b610a9d565b3480156103ba57600080fd5b506102b86103c9366004611eee565b610b33565b3480156103da57600080fd5b506102306103e9366004611e8f565b610b4e565b3480156103fa57600080fd5b506102b8610409366004611f2a565b610be1565b34801561041a57600080fd5b50610280610429366004611e8f565b6000908152600c60205260409020600101546001600160a01b031690565b34801561045357600080fd5b50610467610462366004611e8f565b610c80565b60405161021493929190611f67565b34801561048257600080fd5b50610230600b5481565b34801561049857600080fd5b506102806104a7366004611e8f565b610d35565b3480156104b857600080fd5b506102306104c7366004611f2a565b610dac565b3480156104d857600080fd5b506102b8610e33565b3480156104ed57600080fd5b50600e546001600160a01b0316610280565b34801561050b57600080fd5b50601054610280906001600160a01b031681565b34801561052b57600080fd5b50610253610e69565b34801561054057600080fd5b506102b861054f366004611f9a565b610e78565b34801561056057600080fd5b506102b861056f366004611fd6565b610e87565b34801561058057600080fd5b5061025361058f366004611e8f565b610ebf565b3480156105a057600080fd5b5061023061271081565b3480156105b657600080fd5b506105ca6105c5366004611f2a565b610fca565b6040516102149190612052565b3480156105e357600080fd5b506102306110e1565b3480156105f857600080fd5b50610208610607366004612096565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561064157600080fd5b50600f54610280906001600160a01b031681565b34801561066157600080fd5b506102b8610670366004611f2a565b611154565b60006001600160e01b0319821663152a902d60e11b148061069a575061069a826111ef565b92915050565b6000806106af83878787611214565b601054604051630f384cd960e01b815260048101869052306024820152604481018390529192506001600160a01b031690630f384cd99034906064016000604051808303818588803b15801561070457600080fd5b505af1158015610718573d6000803e3d6000fd5b50939450505050505b949350505050565b606060008054610738906120c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610764906120c9565b80156107b15780601f10610786576101008083540402835291602001916107b1565b820191906000526020600020905b81548152906001019060200180831161079457829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108395760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061086082610d35565b9050806001600160a01b0316836001600160a01b031614156108ce5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610830565b336001600160a01b03821614806108ea57506108ea8133610607565b61095c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610830565b61096683836112fc565b505050565b610975338261136a565b6109915760405162461bcd60e51b815260040161083090612104565b610966838383611460565b600e546001600160a01b031633146109c65760405162461bcd60e51b815260040161083090612155565b6010546001600160a01b03828116911614156109e157600080fd5b601080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9aaef5934caac7bf8ee7de13d1a1e98122180cb78e64abeae728ad559df64a6691015b60405180910390a15050565b6000828152600d60209081526040808320815180830190925280546001600160a01b03168252600101549181018290528291829061271090610a8590876121a0565b610a8f91906121bf565b915196919550909350505050565b6000610aa883610dac565b8210610b0a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610830565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61096683838360405180602001604052806000815250610e87565b6000610b5960085490565b8210610bbc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610830565b60088281548110610bcf57610bcf6121e1565b90600052602060002001549050919050565b600e546001600160a01b03163314610c0b5760405162461bcd60e51b815260040161083090612155565b600f546001600160a01b0382811691161415610c2657600080fd5b600f80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9b015b8749c8a182300e9c8c7699c761729b84ff89651162dd89881ff1273f639101610a37565b600c6020526000908152604090208054600182015460028301805492936001600160a01b0390921692610cb2906120c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610cde906120c9565b8015610d2b5780601f10610d0057610100808354040283529160200191610d2b565b820191906000526020600020905b815481529060010190602001808311610d0e57829003601f168201915b5050505050905083565b6000818152600260205260408120546001600160a01b03168061069a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610830565b60006001600160a01b038216610e175760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610830565b506001600160a01b031660009081526003602052604090205490565b600e546001600160a01b03163314610e5d5760405162461bcd60e51b815260040161083090612155565b610e676000611607565b565b606060018054610738906120c9565b610e83338383611659565b5050565b610e91338361136a565b610ead5760405162461bcd60e51b815260040161083090612104565b610eb984848484611728565b50505050565b6000818152600a60205260409020805460609190610edc906120c9565b15159050610f2c5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610830565b6000828152600a602052604090208054610f45906120c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610f71906120c9565b8015610fbe5780601f10610f9357610100808354040283529160200191610fbe565b820191906000526020600020905b815481529060010190602001808311610fa157829003601f168201915b50505050509050919050565b6060600060015b600b54811161101f576000818152600c60205260409020600101546001600160a01b038581169116141561100d5781611009816121f7565b9250505b80611017816121f7565b915050610fd1565b5060008167ffffffffffffffff81111561103b5761103b611d0f565b604051908082528060200260200182016040528015611064578160200160208202803683370190505b509050600060015b600b5481116110d7576000818152600c60205260409020600101546001600160a01b03878116911614156110c5578083836110a6816121f7565b9450815181106110b8576110b86121e1565b6020026020010181815250505b806110cf816121f7565b91505061106c565b5090949350505050565b600f546040805163428c090b60e01b815290516000926001600160a01b03169163428c090b9160048083019260209291908290030181865afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f9190612212565b905090565b600e546001600160a01b0316331461117e5760405162461bcd60e51b815260040161083090612155565b6001600160a01b0381166111e35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610830565b6111ec81611607565b50565b60006001600160e01b0319821663780e9d6360e01b148061069a575061069a8261175b565b600080600b60008154611226906121f7565b9182905550604080516060810182528881523360208083019182528284018981526000868152600c8352949094208351815591516001830180546001600160a01b0319166001600160a01b0390921691909117905592518051949550919384939192611299926002850192910190611c3c565b509050506112a733836117ab565b6000828152600a6020908152604090912087516112c692890190611c3c565b5083156112f2576000828152600d6020526040902080546001600160a01b031916331781556001018490555b5095945050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061133182610d35565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166113e35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610830565b60006113ee83610d35565b9050806001600160a01b0316846001600160a01b0316148061143557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107215750836001600160a01b031661144e846107bb565b6001600160a01b031614949350505050565b826001600160a01b031661147382610d35565b6001600160a01b0316146114d75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610830565b6001600160a01b0382166115395760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610830565b6115448383836118f9565b61154f6000826112fc565b6001600160a01b038316600090815260036020526040812080546001929061157890849061222b565b90915550506001600160a01b03821660009081526003602052604081208054600192906115a6908490612242565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156116bb5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610830565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611733848484611460565b61173f848484846119b1565b610eb95760405162461bcd60e51b81526004016108309061225a565b60006001600160e01b031982166380ac58cd60e01b148061178c57506001600160e01b03198216635b5e139f60e01b145b8061069a57506301ffc9a760e01b6001600160e01b031983161461069a565b6001600160a01b0382166118015760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610830565b6000818152600260205260409020546001600160a01b0316156118665760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610830565b611872600083836118f9565b6001600160a01b038216600090815260036020526040812080546001929061189b908490612242565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166119545761194f81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611977565b816001600160a01b0316836001600160a01b031614611977576119778382611aac565b6001600160a01b03821661198e5761096681611b49565b826001600160a01b0316826001600160a01b031614610966576109668282611bf8565b60006001600160a01b0384163b15611aa457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119f59033908990889088906004016122ac565b6020604051808303816000875af1925050508015611a30575060408051601f3d908101601f19168201909252611a2d918101906122e9565b60015b611a8a573d808015611a5e576040519150601f19603f3d011682016040523d82523d6000602084013e611a63565b606091505b508051611a825760405162461bcd60e51b81526004016108309061225a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610721565b506001610721565b60006001611ab984610dac565b611ac3919061222b565b600083815260076020526040902054909150808214611b16576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611b5b9060019061222b565b60008381526009602052604081205460088054939450909284908110611b8357611b836121e1565b906000526020600020015490508060088381548110611ba457611ba46121e1565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611bdc57611bdc612306565b6001900381819060005260206000200160009055905550505050565b6000611c0383610dac565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054611c48906120c9565b90600052602060002090601f016020900481019282611c6a5760008555611cb0565b82601f10611c8357805160ff1916838001178555611cb0565b82800160010185558215611cb0579182015b82811115611cb0578251825591602001919060010190611c95565b50611cbc929150611cc0565b5090565b5b80821115611cbc5760008155600101611cc1565b6001600160e01b0319811681146111ec57600080fd5b600060208284031215611cfd57600080fd5b8135611d0881611cd5565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611d4057611d40611d0f565b604051601f8501601f19908116603f01168101908282118183101715611d6857611d68611d0f565b81604052809350858152868686011115611d8157600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611dac57600080fd5b611d0883833560208501611d25565b60008060008060808587031215611dd157600080fd5b843567ffffffffffffffff80821115611de957600080fd5b611df588838901611d9b565b95506020870135915080821115611e0b57600080fd5b50611e1887828801611d9b565b949794965050505060408301359260600135919050565b6000815180845260005b81811015611e5557602081850181015186830182015201611e39565b81811115611e67576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611d086020830184611e2f565b600060208284031215611ea157600080fd5b5035919050565b80356001600160a01b0381168114611ebf57600080fd5b919050565b60008060408385031215611ed757600080fd5b611ee083611ea8565b946020939093013593505050565b600080600060608486031215611f0357600080fd5b611f0c84611ea8565b9250611f1a60208501611ea8565b9150604084013590509250925092565b600060208284031215611f3c57600080fd5b611d0882611ea8565b60008060408385031215611f5857600080fd5b50508035926020909101359150565b8381526001600160a01b0383166020820152606060408201819052600090611f9190830184611e2f565b95945050505050565b60008060408385031215611fad57600080fd5b611fb683611ea8565b915060208301358015158114611fcb57600080fd5b809150509250929050565b60008060008060808587031215611fec57600080fd5b611ff585611ea8565b935061200360208601611ea8565b925060408501359150606085013567ffffffffffffffff81111561202657600080fd5b8501601f8101871361203757600080fd5b61204687823560208401611d25565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561208a5783518352928401929184019160010161206e565b50909695505050505050565b600080604083850312156120a957600080fd5b6120b283611ea8565b91506120c060208401611ea8565b90509250929050565b600181811c908216806120dd57607f821691505b602082108114156120fe57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156121ba576121ba61218a565b500290565b6000826121dc57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060001982141561220b5761220b61218a565b5060010190565b60006020828403121561222457600080fd5b5051919050565b60008282101561223d5761223d61218a565b500390565b600082198211156122555761225561218a565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906122df90830184611e2f565b9695505050505050565b6000602082840312156122fb57600080fd5b8151611d0881611cd5565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ef198391a71cb2a06452abf8db4deeaa2390440937015afefeb98043d24d472e64736f6c634300080b0033";
	var immutableReferences = {
	};
	var generatedSources = [
		{
			ast: {
				nodeType: "YulBlock",
				src: "0:876:17",
				statements: [
					{
						nodeType: "YulBlock",
						src: "6:3:17",
						statements: [
						]
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "74:117:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "84:22:17",
									value: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "99:6:17"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "93:5:17"
										},
										nodeType: "YulFunctionCall",
										src: "93:13:17"
									},
									variableNames: [
										{
											name: "value",
											nodeType: "YulIdentifier",
											src: "84:5:17"
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "169:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "178:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "181:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "171:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "171:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "171:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value",
														nodeType: "YulIdentifier",
														src: "128:5:17"
													},
													{
														"arguments": [
															{
																name: "value",
																nodeType: "YulIdentifier",
																src: "139:5:17"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "154:3:17",
																				type: "",
																				value: "160"
																			},
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "159:1:17",
																				type: "",
																				value: "1"
																			}
																		],
																		functionName: {
																			name: "shl",
																			nodeType: "YulIdentifier",
																			src: "150:3:17"
																		},
																		nodeType: "YulFunctionCall",
																		src: "150:11:17"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "163:1:17",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "sub",
																	nodeType: "YulIdentifier",
																	src: "146:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "146:19:17"
															}
														],
														functionName: {
															name: "and",
															nodeType: "YulIdentifier",
															src: "135:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "135:31:17"
													}
												],
												functionName: {
													name: "eq",
													nodeType: "YulIdentifier",
													src: "125:2:17"
												},
												nodeType: "YulFunctionCall",
												src: "125:42:17"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "118:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "118:50:17"
									},
									nodeType: "YulIf",
									src: "115:70:17"
								}
							]
						},
						name: "abi_decode_address_fromMemory",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "offset",
								nodeType: "YulTypedName",
								src: "53:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "64:5:17",
								type: ""
							}
						],
						src: "14:177:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "294:195:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "340:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "349:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "352:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "342:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "342:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "342:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "315:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "324:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "311:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "311:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "336:2:17",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "307:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "307:32:17"
									},
									nodeType: "YulIf",
									src: "304:52:17"
								},
								{
									nodeType: "YulAssignment",
									src: "365:50:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "405:9:17"
											}
										],
										functionName: {
											name: "abi_decode_address_fromMemory",
											nodeType: "YulIdentifier",
											src: "375:29:17"
										},
										nodeType: "YulFunctionCall",
										src: "375:40:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "365:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "424:59:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "468:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "479:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "464:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "464:18:17"
											}
										],
										functionName: {
											name: "abi_decode_address_fromMemory",
											nodeType: "YulIdentifier",
											src: "434:29:17"
										},
										nodeType: "YulFunctionCall",
										src: "434:49:17"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "424:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_address_fromMemory",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "252:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "263:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "275:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "283:6:17",
								type: ""
							}
						],
						src: "196:293:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "549:325:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "559:22:17",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "573:1:17",
												type: "",
												value: "1"
											},
											{
												name: "data",
												nodeType: "YulIdentifier",
												src: "576:4:17"
											}
										],
										functionName: {
											name: "shr",
											nodeType: "YulIdentifier",
											src: "569:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "569:12:17"
									},
									variableNames: [
										{
											name: "length",
											nodeType: "YulIdentifier",
											src: "559:6:17"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "590:38:17",
									value: {
										"arguments": [
											{
												name: "data",
												nodeType: "YulIdentifier",
												src: "620:4:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "626:1:17",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "and",
											nodeType: "YulIdentifier",
											src: "616:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "616:12:17"
									},
									variables: [
										{
											name: "outOfPlaceEncoding",
											nodeType: "YulTypedName",
											src: "594:18:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "667:31:17",
										statements: [
											{
												nodeType: "YulAssignment",
												src: "669:27:17",
												value: {
													"arguments": [
														{
															name: "length",
															nodeType: "YulIdentifier",
															src: "683:6:17"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "691:4:17",
															type: "",
															value: "0x7f"
														}
													],
													functionName: {
														name: "and",
														nodeType: "YulIdentifier",
														src: "679:3:17"
													},
													nodeType: "YulFunctionCall",
													src: "679:17:17"
												},
												variableNames: [
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "669:6:17"
													}
												]
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "outOfPlaceEncoding",
												nodeType: "YulIdentifier",
												src: "647:18:17"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "640:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "640:26:17"
									},
									nodeType: "YulIf",
									src: "637:61:17"
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "757:111:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "778:1:17",
															type: "",
															value: "0"
														},
														{
															"arguments": [
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "785:3:17",
																	type: "",
																	value: "224"
																},
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "790:10:17",
																	type: "",
																	value: "0x4e487b71"
																}
															],
															functionName: {
																name: "shl",
																nodeType: "YulIdentifier",
																src: "781:3:17"
															},
															nodeType: "YulFunctionCall",
															src: "781:20:17"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "771:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "771:31:17"
												},
												nodeType: "YulExpressionStatement",
												src: "771:31:17"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "822:1:17",
															type: "",
															value: "4"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "825:4:17",
															type: "",
															value: "0x22"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "815:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "815:15:17"
												},
												nodeType: "YulExpressionStatement",
												src: "815:15:17"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "850:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "853:4:17",
															type: "",
															value: "0x24"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "843:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "843:15:17"
												},
												nodeType: "YulExpressionStatement",
												src: "843:15:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "outOfPlaceEncoding",
												nodeType: "YulIdentifier",
												src: "713:18:17"
											},
											{
												"arguments": [
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "736:6:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "744:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "lt",
													nodeType: "YulIdentifier",
													src: "733:2:17"
												},
												nodeType: "YulFunctionCall",
												src: "733:14:17"
											}
										],
										functionName: {
											name: "eq",
											nodeType: "YulIdentifier",
											src: "710:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "710:38:17"
									},
									nodeType: "YulIf",
									src: "707:161:17"
								}
							]
						},
						name: "extract_byte_array_length",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "data",
								nodeType: "YulTypedName",
								src: "529:4:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "length",
								nodeType: "YulTypedName",
								src: "538:6:17",
								type: ""
							}
						],
						src: "494:380:17"
					}
				]
			},
			contents: "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
			id: 17,
			language: "Yul",
			name: "#utility.yul"
		}
	];
	var deployedGeneratedSources = [
		{
			ast: {
				nodeType: "YulBlock",
				src: "0:17674:17",
				statements: [
					{
						nodeType: "YulBlock",
						src: "6:3:17",
						statements: [
						]
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "58:87:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "123:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "132:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "135:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "125:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "125:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "125:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value",
														nodeType: "YulIdentifier",
														src: "81:5:17"
													},
													{
														"arguments": [
															{
																name: "value",
																nodeType: "YulIdentifier",
																src: "92:5:17"
															},
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "103:3:17",
																		type: "",
																		value: "224"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "108:10:17",
																		type: "",
																		value: "0xffffffff"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "99:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "99:20:17"
															}
														],
														functionName: {
															name: "and",
															nodeType: "YulIdentifier",
															src: "88:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "88:32:17"
													}
												],
												functionName: {
													name: "eq",
													nodeType: "YulIdentifier",
													src: "78:2:17"
												},
												nodeType: "YulFunctionCall",
												src: "78:43:17"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "71:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "71:51:17"
									},
									nodeType: "YulIf",
									src: "68:71:17"
								}
							]
						},
						name: "validator_revert_bytes4",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "47:5:17",
								type: ""
							}
						],
						src: "14:131:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "219:176:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "265:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "274:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "277:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "267:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "267:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "267:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "240:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "249:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "236:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "236:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "261:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "232:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "232:32:17"
									},
									nodeType: "YulIf",
									src: "229:52:17"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "290:36:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "316:9:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "303:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "303:23:17"
									},
									variables: [
										{
											name: "value",
											nodeType: "YulTypedName",
											src: "294:5:17",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "359:5:17"
											}
										],
										functionName: {
											name: "validator_revert_bytes4",
											nodeType: "YulIdentifier",
											src: "335:23:17"
										},
										nodeType: "YulFunctionCall",
										src: "335:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "335:30:17"
								},
								{
									nodeType: "YulAssignment",
									src: "374:15:17",
									value: {
										name: "value",
										nodeType: "YulIdentifier",
										src: "384:5:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "374:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_bytes4",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "185:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "196:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "208:6:17",
								type: ""
							}
						],
						src: "150:245:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "495:92:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "505:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "517:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "528:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "513:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "513:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "505:4:17"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "547:9:17"
											},
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "value0",
																nodeType: "YulIdentifier",
																src: "572:6:17"
															}
														],
														functionName: {
															name: "iszero",
															nodeType: "YulIdentifier",
															src: "565:6:17"
														},
														nodeType: "YulFunctionCall",
														src: "565:14:17"
													}
												],
												functionName: {
													name: "iszero",
													nodeType: "YulIdentifier",
													src: "558:6:17"
												},
												nodeType: "YulFunctionCall",
												src: "558:22:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "540:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "540:41:17"
									},
									nodeType: "YulExpressionStatement",
									src: "540:41:17"
								}
							]
						},
						name: "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "464:9:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "475:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "486:4:17",
								type: ""
							}
						],
						src: "400:187:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "624:95:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "641:1:17",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "648:3:17",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "653:10:17",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "644:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "644:20:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "634:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "634:31:17"
									},
									nodeType: "YulExpressionStatement",
									src: "634:31:17"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "681:1:17",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "684:4:17",
												type: "",
												value: "0x41"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "674:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "674:15:17"
									},
									nodeType: "YulExpressionStatement",
									src: "674:15:17"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "705:1:17",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "708:4:17",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "698:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "698:15:17"
									},
									nodeType: "YulExpressionStatement",
									src: "698:15:17"
								}
							]
						},
						name: "panic_error_0x41",
						nodeType: "YulFunctionDefinition",
						src: "592:127:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "799:557:17",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "809:28:17",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "819:18:17",
										type: "",
										value: "0xffffffffffffffff"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "813:2:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "864:22:17",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x41",
														nodeType: "YulIdentifier",
														src: "866:16:17"
													},
													nodeType: "YulFunctionCall",
													src: "866:18:17"
												},
												nodeType: "YulExpressionStatement",
												src: "866:18:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "852:6:17"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "860:2:17"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "849:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "849:14:17"
									},
									nodeType: "YulIf",
									src: "846:40:17"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "895:17:17",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "909:2:17",
												type: "",
												value: "31"
											}
										],
										functionName: {
											name: "not",
											nodeType: "YulIdentifier",
											src: "905:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "905:7:17"
									},
									variables: [
										{
											name: "_2",
											nodeType: "YulTypedName",
											src: "899:2:17",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "921:23:17",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "941:2:17",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "935:5:17"
										},
										nodeType: "YulFunctionCall",
										src: "935:9:17"
									},
									variables: [
										{
											name: "memPtr",
											nodeType: "YulTypedName",
											src: "925:6:17",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "953:73:17",
									value: {
										"arguments": [
											{
												name: "memPtr",
												nodeType: "YulIdentifier",
												src: "975:6:17"
											},
											{
												"arguments": [
													{
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				name: "length",
																				nodeType: "YulIdentifier",
																				src: "999:6:17"
																			},
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "1007:2:17",
																				type: "",
																				value: "31"
																			}
																		],
																		functionName: {
																			name: "add",
																			nodeType: "YulIdentifier",
																			src: "995:3:17"
																		},
																		nodeType: "YulFunctionCall",
																		src: "995:15:17"
																	},
																	{
																		name: "_2",
																		nodeType: "YulIdentifier",
																		src: "1012:2:17"
																	}
																],
																functionName: {
																	name: "and",
																	nodeType: "YulIdentifier",
																	src: "991:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "991:24:17"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "1017:2:17",
																type: "",
																value: "63"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "987:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "987:33:17"
													},
													{
														name: "_2",
														nodeType: "YulIdentifier",
														src: "1022:2:17"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "983:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "983:42:17"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "971:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "971:55:17"
									},
									variables: [
										{
											name: "newFreePtr",
											nodeType: "YulTypedName",
											src: "957:10:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "1085:22:17",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x41",
														nodeType: "YulIdentifier",
														src: "1087:16:17"
													},
													nodeType: "YulFunctionCall",
													src: "1087:18:17"
												},
												nodeType: "YulExpressionStatement",
												src: "1087:18:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "newFreePtr",
														nodeType: "YulIdentifier",
														src: "1044:10:17"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "1056:2:17"
													}
												],
												functionName: {
													name: "gt",
													nodeType: "YulIdentifier",
													src: "1041:2:17"
												},
												nodeType: "YulFunctionCall",
												src: "1041:18:17"
											},
											{
												"arguments": [
													{
														name: "newFreePtr",
														nodeType: "YulIdentifier",
														src: "1064:10:17"
													},
													{
														name: "memPtr",
														nodeType: "YulIdentifier",
														src: "1076:6:17"
													}
												],
												functionName: {
													name: "lt",
													nodeType: "YulIdentifier",
													src: "1061:2:17"
												},
												nodeType: "YulFunctionCall",
												src: "1061:22:17"
											}
										],
										functionName: {
											name: "or",
											nodeType: "YulIdentifier",
											src: "1038:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "1038:46:17"
									},
									nodeType: "YulIf",
									src: "1035:72:17"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1123:2:17",
												type: "",
												value: "64"
											},
											{
												name: "newFreePtr",
												nodeType: "YulIdentifier",
												src: "1127:10:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "1116:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "1116:22:17"
									},
									nodeType: "YulExpressionStatement",
									src: "1116:22:17"
								},
								{
									nodeType: "YulAssignment",
									src: "1147:15:17",
									value: {
										name: "memPtr",
										nodeType: "YulIdentifier",
										src: "1156:6:17"
									},
									variableNames: [
										{
											name: "array",
											nodeType: "YulIdentifier",
											src: "1147:5:17"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "memPtr",
												nodeType: "YulIdentifier",
												src: "1178:6:17"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "1186:6:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "1171:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "1171:22:17"
									},
									nodeType: "YulExpressionStatement",
									src: "1171:22:17"
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "1231:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1240:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1243:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "1233:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "1233:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "1233:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "src",
														nodeType: "YulIdentifier",
														src: "1212:3:17"
													},
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "1217:6:17"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1208:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "1208:16:17"
											},
											{
												name: "end",
												nodeType: "YulIdentifier",
												src: "1226:3:17"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "1205:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "1205:25:17"
									},
									nodeType: "YulIf",
									src: "1202:45:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "memPtr",
														nodeType: "YulIdentifier",
														src: "1273:6:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "1281:4:17",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1269:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "1269:17:17"
											},
											{
												name: "src",
												nodeType: "YulIdentifier",
												src: "1288:3:17"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "1293:6:17"
											}
										],
										functionName: {
											name: "calldatacopy",
											nodeType: "YulIdentifier",
											src: "1256:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "1256:44:17"
									},
									nodeType: "YulExpressionStatement",
									src: "1256:44:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "memPtr",
																nodeType: "YulIdentifier",
																src: "1324:6:17"
															},
															{
																name: "length",
																nodeType: "YulIdentifier",
																src: "1332:6:17"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "1320:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "1320:19:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "1341:4:17",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1316:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "1316:30:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1348:1:17",
												type: "",
												value: "0"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "1309:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "1309:41:17"
									},
									nodeType: "YulExpressionStatement",
									src: "1309:41:17"
								}
							]
						},
						name: "abi_decode_available_length_string",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "src",
								nodeType: "YulTypedName",
								src: "768:3:17",
								type: ""
							},
							{
								name: "length",
								nodeType: "YulTypedName",
								src: "773:6:17",
								type: ""
							},
							{
								name: "end",
								nodeType: "YulTypedName",
								src: "781:3:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "array",
								nodeType: "YulTypedName",
								src: "789:5:17",
								type: ""
							}
						],
						src: "724:632:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "1414:169:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "1463:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1472:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1475:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "1465:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "1465:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "1465:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "offset",
																nodeType: "YulIdentifier",
																src: "1442:6:17"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "1450:4:17",
																type: "",
																value: "0x1f"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "1438:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "1438:17:17"
													},
													{
														name: "end",
														nodeType: "YulIdentifier",
														src: "1457:3:17"
													}
												],
												functionName: {
													name: "slt",
													nodeType: "YulIdentifier",
													src: "1434:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "1434:27:17"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "1427:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "1427:35:17"
									},
									nodeType: "YulIf",
									src: "1424:55:17"
								},
								{
									nodeType: "YulAssignment",
									src: "1488:89:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "offset",
														nodeType: "YulIdentifier",
														src: "1536:6:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "1544:4:17",
														type: "",
														value: "0x20"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1532:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "1532:17:17"
											},
											{
												"arguments": [
													{
														name: "offset",
														nodeType: "YulIdentifier",
														src: "1564:6:17"
													}
												],
												functionName: {
													name: "calldataload",
													nodeType: "YulIdentifier",
													src: "1551:12:17"
												},
												nodeType: "YulFunctionCall",
												src: "1551:20:17"
											},
											{
												name: "end",
												nodeType: "YulIdentifier",
												src: "1573:3:17"
											}
										],
										functionName: {
											name: "abi_decode_available_length_string",
											nodeType: "YulIdentifier",
											src: "1497:34:17"
										},
										nodeType: "YulFunctionCall",
										src: "1497:80:17"
									},
									variableNames: [
										{
											name: "array",
											nodeType: "YulIdentifier",
											src: "1488:5:17"
										}
									]
								}
							]
						},
						name: "abi_decode_string",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "offset",
								nodeType: "YulTypedName",
								src: "1388:6:17",
								type: ""
							},
							{
								name: "end",
								nodeType: "YulTypedName",
								src: "1396:3:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "array",
								nodeType: "YulTypedName",
								src: "1404:5:17",
								type: ""
							}
						],
						src: "1361:222:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "1729:539:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "1776:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1785:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1788:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "1778:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "1778:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "1778:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "1750:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "1759:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "1746:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "1746:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "1771:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "1742:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "1742:33:17"
									},
									nodeType: "YulIf",
									src: "1739:53:17"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "1801:37:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "1828:9:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "1815:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "1815:23:17"
									},
									variables: [
										{
											name: "offset",
											nodeType: "YulTypedName",
											src: "1805:6:17",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "1847:28:17",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "1857:18:17",
										type: "",
										value: "0xffffffffffffffff"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "1851:2:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "1902:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1911:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "1914:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "1904:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "1904:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "1904:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "1890:6:17"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "1898:2:17"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "1887:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "1887:14:17"
									},
									nodeType: "YulIf",
									src: "1884:34:17"
								},
								{
									nodeType: "YulAssignment",
									src: "1927:60:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "1959:9:17"
													},
													{
														name: "offset",
														nodeType: "YulIdentifier",
														src: "1970:6:17"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "1955:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "1955:22:17"
											},
											{
												name: "dataEnd",
												nodeType: "YulIdentifier",
												src: "1979:7:17"
											}
										],
										functionName: {
											name: "abi_decode_string",
											nodeType: "YulIdentifier",
											src: "1937:17:17"
										},
										nodeType: "YulFunctionCall",
										src: "1937:50:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "1927:6:17"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "1996:48:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2029:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "2040:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "2025:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "2025:18:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "2012:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "2012:32:17"
									},
									variables: [
										{
											name: "offset_1",
											nodeType: "YulTypedName",
											src: "2000:8:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "2073:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "2082:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "2085:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "2075:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "2075:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "2075:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "offset_1",
												nodeType: "YulIdentifier",
												src: "2059:8:17"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "2069:2:17"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "2056:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "2056:16:17"
									},
									nodeType: "YulIf",
									src: "2053:36:17"
								},
								{
									nodeType: "YulAssignment",
									src: "2098:62:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2130:9:17"
													},
													{
														name: "offset_1",
														nodeType: "YulIdentifier",
														src: "2141:8:17"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "2126:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "2126:24:17"
											},
											{
												name: "dataEnd",
												nodeType: "YulIdentifier",
												src: "2152:7:17"
											}
										],
										functionName: {
											name: "abi_decode_string",
											nodeType: "YulIdentifier",
											src: "2108:17:17"
										},
										nodeType: "YulFunctionCall",
										src: "2108:52:17"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "2098:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "2169:42:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2196:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "2207:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "2192:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "2192:18:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "2179:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "2179:32:17"
									},
									variableNames: [
										{
											name: "value2",
											nodeType: "YulIdentifier",
											src: "2169:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "2220:42:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "2247:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "2258:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "2243:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "2243:18:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "2230:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "2230:32:17"
									},
									variableNames: [
										{
											name: "value3",
											nodeType: "YulIdentifier",
											src: "2220:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256t_bytes32",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "1671:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "1682:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "1694:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "1702:6:17",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "1710:6:17",
								type: ""
							},
							{
								name: "value3",
								nodeType: "YulTypedName",
								src: "1718:6:17",
								type: ""
							}
						],
						src: "1588:680:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "2374:76:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "2384:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "2396:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "2407:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "2392:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "2392:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "2384:4:17"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "2426:9:17"
											},
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "2437:6:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "2419:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "2419:25:17"
									},
									nodeType: "YulExpressionStatement",
									src: "2419:25:17"
								}
							]
						},
						name: "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "2343:9:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "2354:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "2365:4:17",
								type: ""
							}
						],
						src: "2273:177:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "2505:422:17",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "2515:26:17",
									value: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "2535:5:17"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "2529:5:17"
										},
										nodeType: "YulFunctionCall",
										src: "2529:12:17"
									},
									variables: [
										{
											name: "length",
											nodeType: "YulTypedName",
											src: "2519:6:17",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "pos",
												nodeType: "YulIdentifier",
												src: "2557:3:17"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "2562:6:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "2550:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "2550:19:17"
									},
									nodeType: "YulExpressionStatement",
									src: "2550:19:17"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "2578:10:17",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "2587:1:17",
										type: "",
										value: "0"
									},
									variables: [
										{
											name: "i",
											nodeType: "YulTypedName",
											src: "2582:1:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "2649:110:17",
										statements: [
											{
												nodeType: "YulVariableDeclaration",
												src: "2663:14:17",
												value: {
													kind: "number",
													nodeType: "YulLiteral",
													src: "2673:4:17",
													type: "",
													value: "0x20"
												},
												variables: [
													{
														name: "_1",
														nodeType: "YulTypedName",
														src: "2667:2:17",
														type: ""
													}
												]
											},
											{
												expression: {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			name: "pos",
																			nodeType: "YulIdentifier",
																			src: "2705:3:17"
																		},
																		{
																			name: "i",
																			nodeType: "YulIdentifier",
																			src: "2710:1:17"
																		}
																	],
																	functionName: {
																		name: "add",
																		nodeType: "YulIdentifier",
																		src: "2701:3:17"
																	},
																	nodeType: "YulFunctionCall",
																	src: "2701:11:17"
																},
																{
																	name: "_1",
																	nodeType: "YulIdentifier",
																	src: "2714:2:17"
																}
															],
															functionName: {
																name: "add",
																nodeType: "YulIdentifier",
																src: "2697:3:17"
															},
															nodeType: "YulFunctionCall",
															src: "2697:20:17"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					name: "value",
																					nodeType: "YulIdentifier",
																					src: "2733:5:17"
																				},
																				{
																					name: "i",
																					nodeType: "YulIdentifier",
																					src: "2740:1:17"
																				}
																			],
																			functionName: {
																				name: "add",
																				nodeType: "YulIdentifier",
																				src: "2729:3:17"
																			},
																			nodeType: "YulFunctionCall",
																			src: "2729:13:17"
																		},
																		{
																			name: "_1",
																			nodeType: "YulIdentifier",
																			src: "2744:2:17"
																		}
																	],
																	functionName: {
																		name: "add",
																		nodeType: "YulIdentifier",
																		src: "2725:3:17"
																	},
																	nodeType: "YulFunctionCall",
																	src: "2725:22:17"
																}
															],
															functionName: {
																name: "mload",
																nodeType: "YulIdentifier",
																src: "2719:5:17"
															},
															nodeType: "YulFunctionCall",
															src: "2719:29:17"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "2690:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "2690:59:17"
												},
												nodeType: "YulExpressionStatement",
												src: "2690:59:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "i",
												nodeType: "YulIdentifier",
												src: "2608:1:17"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "2611:6:17"
											}
										],
										functionName: {
											name: "lt",
											nodeType: "YulIdentifier",
											src: "2605:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "2605:13:17"
									},
									nodeType: "YulForLoop",
									post: {
										nodeType: "YulBlock",
										src: "2619:21:17",
										statements: [
											{
												nodeType: "YulAssignment",
												src: "2621:17:17",
												value: {
													"arguments": [
														{
															name: "i",
															nodeType: "YulIdentifier",
															src: "2630:1:17"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "2633:4:17",
															type: "",
															value: "0x20"
														}
													],
													functionName: {
														name: "add",
														nodeType: "YulIdentifier",
														src: "2626:3:17"
													},
													nodeType: "YulFunctionCall",
													src: "2626:12:17"
												},
												variableNames: [
													{
														name: "i",
														nodeType: "YulIdentifier",
														src: "2621:1:17"
													}
												]
											}
										]
									},
									pre: {
										nodeType: "YulBlock",
										src: "2601:3:17",
										statements: [
										]
									},
									src: "2597:162:17"
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "2793:62:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			name: "pos",
																			nodeType: "YulIdentifier",
																			src: "2822:3:17"
																		},
																		{
																			name: "length",
																			nodeType: "YulIdentifier",
																			src: "2827:6:17"
																		}
																	],
																	functionName: {
																		name: "add",
																		nodeType: "YulIdentifier",
																		src: "2818:3:17"
																	},
																	nodeType: "YulFunctionCall",
																	src: "2818:16:17"
																},
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "2836:4:17",
																	type: "",
																	value: "0x20"
																}
															],
															functionName: {
																name: "add",
																nodeType: "YulIdentifier",
																src: "2814:3:17"
															},
															nodeType: "YulFunctionCall",
															src: "2814:27:17"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "2843:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "2807:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "2807:38:17"
												},
												nodeType: "YulExpressionStatement",
												src: "2807:38:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "i",
												nodeType: "YulIdentifier",
												src: "2774:1:17"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "2777:6:17"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "2771:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "2771:13:17"
									},
									nodeType: "YulIf",
									src: "2768:87:17"
								},
								{
									nodeType: "YulAssignment",
									src: "2864:57:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "pos",
														nodeType: "YulIdentifier",
														src: "2879:3:17"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		name: "length",
																		nodeType: "YulIdentifier",
																		src: "2892:6:17"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "2900:2:17",
																		type: "",
																		value: "31"
																	}
																],
																functionName: {
																	name: "add",
																	nodeType: "YulIdentifier",
																	src: "2888:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "2888:15:17"
															},
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "2909:2:17",
																		type: "",
																		value: "31"
																	}
																],
																functionName: {
																	name: "not",
																	nodeType: "YulIdentifier",
																	src: "2905:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "2905:7:17"
															}
														],
														functionName: {
															name: "and",
															nodeType: "YulIdentifier",
															src: "2884:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "2884:29:17"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "2875:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "2875:39:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "2916:4:17",
												type: "",
												value: "0x20"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "2871:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "2871:50:17"
									},
									variableNames: [
										{
											name: "end",
											nodeType: "YulIdentifier",
											src: "2864:3:17"
										}
									]
								}
							]
						},
						name: "abi_encode_string",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "2482:5:17",
								type: ""
							},
							{
								name: "pos",
								nodeType: "YulTypedName",
								src: "2489:3:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "end",
								nodeType: "YulTypedName",
								src: "2497:3:17",
								type: ""
							}
						],
						src: "2455:472:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "3053:99:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "3070:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3081:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "3063:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "3063:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "3063:21:17"
								},
								{
									nodeType: "YulAssignment",
									src: "3093:53:17",
									value: {
										"arguments": [
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "3119:6:17"
											},
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "3131:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "3142:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "3127:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "3127:18:17"
											}
										],
										functionName: {
											name: "abi_encode_string",
											nodeType: "YulIdentifier",
											src: "3101:17:17"
										},
										nodeType: "YulFunctionCall",
										src: "3101:45:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "3093:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "3022:9:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "3033:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "3044:4:17",
								type: ""
							}
						],
						src: "2932:220:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "3227:110:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "3273:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3282:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3285:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "3275:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "3275:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "3275:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "3248:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "3257:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "3244:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "3244:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3269:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "3240:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "3240:32:17"
									},
									nodeType: "YulIf",
									src: "3237:52:17"
								},
								{
									nodeType: "YulAssignment",
									src: "3298:33:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "3321:9:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "3308:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "3308:23:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "3298:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "3193:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "3204:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "3216:6:17",
								type: ""
							}
						],
						src: "3157:180:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "3443:102:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "3453:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "3465:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3476:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "3461:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "3461:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "3453:4:17"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "3495:9:17"
											},
											{
												"arguments": [
													{
														name: "value0",
														nodeType: "YulIdentifier",
														src: "3510:6:17"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "3526:3:17",
																		type: "",
																		value: "160"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "3531:1:17",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "3522:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "3522:11:17"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "3535:1:17",
																type: "",
																value: "1"
															}
														],
														functionName: {
															name: "sub",
															nodeType: "YulIdentifier",
															src: "3518:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "3518:19:17"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "3506:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "3506:32:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "3488:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "3488:51:17"
									},
									nodeType: "YulExpressionStatement",
									src: "3488:51:17"
								}
							]
						},
						name: "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "3412:9:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "3423:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "3434:4:17",
								type: ""
							}
						],
						src: "3342:203:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "3599:124:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "3609:29:17",
									value: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "3631:6:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "3618:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "3618:20:17"
									},
									variableNames: [
										{
											name: "value",
											nodeType: "YulIdentifier",
											src: "3609:5:17"
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "3701:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3710:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3713:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "3703:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "3703:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "3703:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value",
														nodeType: "YulIdentifier",
														src: "3660:5:17"
													},
													{
														"arguments": [
															{
																name: "value",
																nodeType: "YulIdentifier",
																src: "3671:5:17"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "3686:3:17",
																				type: "",
																				value: "160"
																			},
																			{
																				kind: "number",
																				nodeType: "YulLiteral",
																				src: "3691:1:17",
																				type: "",
																				value: "1"
																			}
																		],
																		functionName: {
																			name: "shl",
																			nodeType: "YulIdentifier",
																			src: "3682:3:17"
																		},
																		nodeType: "YulFunctionCall",
																		src: "3682:11:17"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "3695:1:17",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "sub",
																	nodeType: "YulIdentifier",
																	src: "3678:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "3678:19:17"
															}
														],
														functionName: {
															name: "and",
															nodeType: "YulIdentifier",
															src: "3667:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "3667:31:17"
													}
												],
												functionName: {
													name: "eq",
													nodeType: "YulIdentifier",
													src: "3657:2:17"
												},
												nodeType: "YulFunctionCall",
												src: "3657:42:17"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "3650:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "3650:50:17"
									},
									nodeType: "YulIf",
									src: "3647:70:17"
								}
							]
						},
						name: "abi_decode_address",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "offset",
								nodeType: "YulTypedName",
								src: "3578:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "3589:5:17",
								type: ""
							}
						],
						src: "3550:173:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "3815:167:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "3861:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3870:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "3873:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "3863:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "3863:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "3863:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "3836:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "3845:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "3832:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "3832:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "3857:2:17",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "3828:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "3828:32:17"
									},
									nodeType: "YulIf",
									src: "3825:52:17"
								},
								{
									nodeType: "YulAssignment",
									src: "3886:39:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "3915:9:17"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "3896:18:17"
										},
										nodeType: "YulFunctionCall",
										src: "3896:29:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "3886:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "3934:42:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "3961:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "3972:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "3957:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "3957:18:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "3944:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "3944:32:17"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "3934:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "3773:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "3784:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "3796:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "3804:6:17",
								type: ""
							}
						],
						src: "3728:254:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "4116:145:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "4126:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "4138:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "4149:2:17",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "4134:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "4134:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "4126:4:17"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "4168:9:17"
											},
											{
												"arguments": [
													{
														name: "value0",
														nodeType: "YulIdentifier",
														src: "4183:6:17"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "4199:3:17",
																		type: "",
																		value: "160"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "4204:1:17",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "4195:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "4195:11:17"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "4208:1:17",
																type: "",
																value: "1"
															}
														],
														functionName: {
															name: "sub",
															nodeType: "YulIdentifier",
															src: "4191:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "4191:19:17"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "4179:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "4179:32:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "4161:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "4161:51:17"
									},
									nodeType: "YulExpressionStatement",
									src: "4161:51:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "4232:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "4243:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "4228:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "4228:18:17"
											},
											{
												name: "value1",
												nodeType: "YulIdentifier",
												src: "4248:6:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "4221:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "4221:34:17"
									},
									nodeType: "YulExpressionStatement",
									src: "4221:34:17"
								}
							]
						},
						name: "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "4077:9:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "4088:6:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "4096:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "4107:4:17",
								type: ""
							}
						],
						src: "3987:274:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "4370:224:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "4416:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4425:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4428:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "4418:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "4418:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "4418:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "4391:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "4400:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "4387:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "4387:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "4412:2:17",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "4383:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "4383:32:17"
									},
									nodeType: "YulIf",
									src: "4380:52:17"
								},
								{
									nodeType: "YulAssignment",
									src: "4441:39:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "4470:9:17"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "4451:18:17"
										},
										nodeType: "YulFunctionCall",
										src: "4451:29:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "4441:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "4489:48:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "4522:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "4533:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "4518:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "4518:18:17"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "4499:18:17"
										},
										nodeType: "YulFunctionCall",
										src: "4499:38:17"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "4489:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "4546:42:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "4573:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "4584:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "4569:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "4569:18:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "4556:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "4556:32:17"
									},
									variableNames: [
										{
											name: "value2",
											nodeType: "YulIdentifier",
											src: "4546:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_addresst_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "4320:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "4331:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "4343:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "4351:6:17",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "4359:6:17",
								type: ""
							}
						],
						src: "4266:328:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "4669:116:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "4715:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4724:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4727:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "4717:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "4717:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "4717:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "4690:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "4699:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "4686:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "4686:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "4711:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "4682:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "4682:32:17"
									},
									nodeType: "YulIf",
									src: "4679:52:17"
								},
								{
									nodeType: "YulAssignment",
									src: "4740:39:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "4769:9:17"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "4750:18:17"
										},
										nodeType: "YulFunctionCall",
										src: "4750:29:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "4740:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_address",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "4635:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "4646:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "4658:6:17",
								type: ""
							}
						],
						src: "4599:186:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "4877:161:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "4923:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4932:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "4935:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "4925:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "4925:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "4925:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "4898:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "4907:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "4894:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "4894:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "4919:2:17",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "4890:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "4890:32:17"
									},
									nodeType: "YulIf",
									src: "4887:52:17"
								},
								{
									nodeType: "YulAssignment",
									src: "4948:33:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "4971:9:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "4958:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "4958:23:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "4948:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "4990:42:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5017:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5028:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5013:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "5013:18:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "5000:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "5000:32:17"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "4990:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_uint256t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "4835:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "4846:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "4858:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "4866:6:17",
								type: ""
							}
						],
						src: "4790:248:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "5220:211:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "5237:9:17"
											},
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "5248:6:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "5230:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "5230:25:17"
									},
									nodeType: "YulExpressionStatement",
									src: "5230:25:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5275:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5286:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5271:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "5271:18:17"
											},
											{
												"arguments": [
													{
														name: "value1",
														nodeType: "YulIdentifier",
														src: "5295:6:17"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "5311:3:17",
																		type: "",
																		value: "160"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "5316:1:17",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "5307:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "5307:11:17"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "5320:1:17",
																type: "",
																value: "1"
															}
														],
														functionName: {
															name: "sub",
															nodeType: "YulIdentifier",
															src: "5303:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "5303:19:17"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "5291:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "5291:32:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "5264:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "5264:60:17"
									},
									nodeType: "YulExpressionStatement",
									src: "5264:60:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5344:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5355:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5340:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "5340:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "5360:2:17",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "5333:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "5333:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "5333:30:17"
								},
								{
									nodeType: "YulAssignment",
									src: "5372:53:17",
									value: {
										"arguments": [
											{
												name: "value2",
												nodeType: "YulIdentifier",
												src: "5398:6:17"
											},
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5410:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5421:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5406:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "5406:18:17"
											}
										],
										functionName: {
											name: "abi_encode_string",
											nodeType: "YulIdentifier",
											src: "5380:17:17"
										},
										nodeType: "YulFunctionCall",
										src: "5380:45:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "5372:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_bytes32_t_address_t_string_memory_ptr__to_t_bytes32_t_address_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "5173:9:17",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "5184:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "5192:6:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "5200:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "5211:4:17",
								type: ""
							}
						],
						src: "5043:388:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "5520:263:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "5566:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5575:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5578:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "5568:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "5568:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "5568:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "5541:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5550:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "5537:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "5537:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "5562:2:17",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "5533:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "5533:32:17"
									},
									nodeType: "YulIf",
									src: "5530:52:17"
								},
								{
									nodeType: "YulAssignment",
									src: "5591:39:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "5620:9:17"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "5601:18:17"
										},
										nodeType: "YulFunctionCall",
										src: "5601:29:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "5591:6:17"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "5639:45:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5669:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "5680:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "5665:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "5665:18:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "5652:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "5652:32:17"
									},
									variables: [
										{
											name: "value",
											nodeType: "YulTypedName",
											src: "5643:5:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "5737:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5746:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5749:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "5739:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "5739:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "5739:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "value",
														nodeType: "YulIdentifier",
														src: "5706:5:17"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		name: "value",
																		nodeType: "YulIdentifier",
																		src: "5727:5:17"
																	}
																],
																functionName: {
																	name: "iszero",
																	nodeType: "YulIdentifier",
																	src: "5720:6:17"
																},
																nodeType: "YulFunctionCall",
																src: "5720:13:17"
															}
														],
														functionName: {
															name: "iszero",
															nodeType: "YulIdentifier",
															src: "5713:6:17"
														},
														nodeType: "YulFunctionCall",
														src: "5713:21:17"
													}
												],
												functionName: {
													name: "eq",
													nodeType: "YulIdentifier",
													src: "5703:2:17"
												},
												nodeType: "YulFunctionCall",
												src: "5703:32:17"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "5696:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "5696:40:17"
									},
									nodeType: "YulIf",
									src: "5693:60:17"
								},
								{
									nodeType: "YulAssignment",
									src: "5762:15:17",
									value: {
										name: "value",
										nodeType: "YulIdentifier",
										src: "5772:5:17"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "5762:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_bool",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "5478:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "5489:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "5501:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "5509:6:17",
								type: ""
							}
						],
						src: "5436:347:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "5918:537:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "5965:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5974:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "5977:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "5967:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "5967:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "5967:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "5939:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "5948:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "5935:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "5935:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "5960:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "5931:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "5931:33:17"
									},
									nodeType: "YulIf",
									src: "5928:53:17"
								},
								{
									nodeType: "YulAssignment",
									src: "5990:39:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "6019:9:17"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "6000:18:17"
										},
										nodeType: "YulFunctionCall",
										src: "6000:29:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "5990:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "6038:48:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "6071:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "6082:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "6067:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "6067:18:17"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "6048:18:17"
										},
										nodeType: "YulFunctionCall",
										src: "6048:38:17"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "6038:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "6095:42:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "6122:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "6133:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "6118:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "6118:18:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "6105:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "6105:32:17"
									},
									variableNames: [
										{
											name: "value2",
											nodeType: "YulIdentifier",
											src: "6095:6:17"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6146:46:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "6177:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "6188:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "6173:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "6173:18:17"
											}
										],
										functionName: {
											name: "calldataload",
											nodeType: "YulIdentifier",
											src: "6160:12:17"
										},
										nodeType: "YulFunctionCall",
										src: "6160:32:17"
									},
									variables: [
										{
											name: "offset",
											nodeType: "YulTypedName",
											src: "6150:6:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "6235:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6244:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6247:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "6237:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "6237:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "6237:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "6207:6:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "6215:18:17",
												type: "",
												value: "0xffffffffffffffff"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "6204:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "6204:30:17"
									},
									nodeType: "YulIf",
									src: "6201:50:17"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6260:32:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "6274:9:17"
											},
											{
												name: "offset",
												nodeType: "YulIdentifier",
												src: "6285:6:17"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "6270:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "6270:22:17"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "6264:2:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "6340:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6349:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6352:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "6342:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "6342:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "6342:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "_1",
																nodeType: "YulIdentifier",
																src: "6319:2:17"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "6323:4:17",
																type: "",
																value: "0x1f"
															}
														],
														functionName: {
															name: "add",
															nodeType: "YulIdentifier",
															src: "6315:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "6315:13:17"
													},
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "6330:7:17"
													}
												],
												functionName: {
													name: "slt",
													nodeType: "YulIdentifier",
													src: "6311:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "6311:27:17"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "6304:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "6304:35:17"
									},
									nodeType: "YulIf",
									src: "6301:55:17"
								},
								{
									nodeType: "YulAssignment",
									src: "6365:84:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "6414:2:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "6418:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "6410:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "6410:11:17"
											},
											{
												"arguments": [
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "6436:2:17"
													}
												],
												functionName: {
													name: "calldataload",
													nodeType: "YulIdentifier",
													src: "6423:12:17"
												},
												nodeType: "YulFunctionCall",
												src: "6423:16:17"
											},
											{
												name: "dataEnd",
												nodeType: "YulIdentifier",
												src: "6441:7:17"
											}
										],
										functionName: {
											name: "abi_decode_available_length_string",
											nodeType: "YulIdentifier",
											src: "6375:34:17"
										},
										nodeType: "YulFunctionCall",
										src: "6375:74:17"
									},
									variableNames: [
										{
											name: "value3",
											nodeType: "YulIdentifier",
											src: "6365:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "5860:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "5871:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "5883:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "5891:6:17",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "5899:6:17",
								type: ""
							},
							{
								name: "value3",
								nodeType: "YulTypedName",
								src: "5907:6:17",
								type: ""
							}
						],
						src: "5788:667:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "6611:481:17",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "6621:12:17",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "6631:2:17",
										type: "",
										value: "32"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "6625:2:17",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6642:32:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "6660:9:17"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "6671:2:17"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "6656:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "6656:18:17"
									},
									variables: [
										{
											name: "tail_1",
											nodeType: "YulTypedName",
											src: "6646:6:17",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "6690:9:17"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "6701:2:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "6683:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "6683:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "6683:21:17"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6713:17:17",
									value: {
										name: "tail_1",
										nodeType: "YulIdentifier",
										src: "6724:6:17"
									},
									variables: [
										{
											name: "pos",
											nodeType: "YulTypedName",
											src: "6717:3:17",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6739:27:17",
									value: {
										"arguments": [
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "6759:6:17"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "6753:5:17"
										},
										nodeType: "YulFunctionCall",
										src: "6753:13:17"
									},
									variables: [
										{
											name: "length",
											nodeType: "YulTypedName",
											src: "6743:6:17",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "tail_1",
												nodeType: "YulIdentifier",
												src: "6782:6:17"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "6790:6:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "6775:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "6775:22:17"
									},
									nodeType: "YulExpressionStatement",
									src: "6775:22:17"
								},
								{
									nodeType: "YulAssignment",
									src: "6806:25:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "6817:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "6828:2:17",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "6813:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "6813:18:17"
									},
									variableNames: [
										{
											name: "pos",
											nodeType: "YulIdentifier",
											src: "6806:3:17"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6840:29:17",
									value: {
										"arguments": [
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "6858:6:17"
											},
											{
												name: "_1",
												nodeType: "YulIdentifier",
												src: "6866:2:17"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "6854:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "6854:15:17"
									},
									variables: [
										{
											name: "srcPtr",
											nodeType: "YulTypedName",
											src: "6844:6:17",
											type: ""
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "6878:10:17",
									value: {
										kind: "number",
										nodeType: "YulLiteral",
										src: "6887:1:17",
										type: "",
										value: "0"
									},
									variables: [
										{
											name: "i",
											nodeType: "YulTypedName",
											src: "6882:1:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "6946:120:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															name: "pos",
															nodeType: "YulIdentifier",
															src: "6967:3:17"
														},
														{
															"arguments": [
																{
																	name: "srcPtr",
																	nodeType: "YulIdentifier",
																	src: "6978:6:17"
																}
															],
															functionName: {
																name: "mload",
																nodeType: "YulIdentifier",
																src: "6972:5:17"
															},
															nodeType: "YulFunctionCall",
															src: "6972:13:17"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "6960:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "6960:26:17"
												},
												nodeType: "YulExpressionStatement",
												src: "6960:26:17"
											},
											{
												nodeType: "YulAssignment",
												src: "6999:19:17",
												value: {
													"arguments": [
														{
															name: "pos",
															nodeType: "YulIdentifier",
															src: "7010:3:17"
														},
														{
															name: "_1",
															nodeType: "YulIdentifier",
															src: "7015:2:17"
														}
													],
													functionName: {
														name: "add",
														nodeType: "YulIdentifier",
														src: "7006:3:17"
													},
													nodeType: "YulFunctionCall",
													src: "7006:12:17"
												},
												variableNames: [
													{
														name: "pos",
														nodeType: "YulIdentifier",
														src: "6999:3:17"
													}
												]
											},
											{
												nodeType: "YulAssignment",
												src: "7031:25:17",
												value: {
													"arguments": [
														{
															name: "srcPtr",
															nodeType: "YulIdentifier",
															src: "7045:6:17"
														},
														{
															name: "_1",
															nodeType: "YulIdentifier",
															src: "7053:2:17"
														}
													],
													functionName: {
														name: "add",
														nodeType: "YulIdentifier",
														src: "7041:3:17"
													},
													nodeType: "YulFunctionCall",
													src: "7041:15:17"
												},
												variableNames: [
													{
														name: "srcPtr",
														nodeType: "YulIdentifier",
														src: "7031:6:17"
													}
												]
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "i",
												nodeType: "YulIdentifier",
												src: "6908:1:17"
											},
											{
												name: "length",
												nodeType: "YulIdentifier",
												src: "6911:6:17"
											}
										],
										functionName: {
											name: "lt",
											nodeType: "YulIdentifier",
											src: "6905:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "6905:13:17"
									},
									nodeType: "YulForLoop",
									post: {
										nodeType: "YulBlock",
										src: "6919:18:17",
										statements: [
											{
												nodeType: "YulAssignment",
												src: "6921:14:17",
												value: {
													"arguments": [
														{
															name: "i",
															nodeType: "YulIdentifier",
															src: "6930:1:17"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "6933:1:17",
															type: "",
															value: "1"
														}
													],
													functionName: {
														name: "add",
														nodeType: "YulIdentifier",
														src: "6926:3:17"
													},
													nodeType: "YulFunctionCall",
													src: "6926:9:17"
												},
												variableNames: [
													{
														name: "i",
														nodeType: "YulIdentifier",
														src: "6921:1:17"
													}
												]
											}
										]
									},
									pre: {
										nodeType: "YulBlock",
										src: "6901:3:17",
										statements: [
										]
									},
									src: "6897:169:17"
								},
								{
									nodeType: "YulAssignment",
									src: "7075:11:17",
									value: {
										name: "pos",
										nodeType: "YulIdentifier",
										src: "7083:3:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "7075:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "6580:9:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "6591:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "6602:4:17",
								type: ""
							}
						],
						src: "6460:632:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "7184:173:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "7230:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7239:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7242:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "7232:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "7232:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "7232:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "7205:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "7214:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "7201:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "7201:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "7226:2:17",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "7197:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "7197:32:17"
									},
									nodeType: "YulIf",
									src: "7194:52:17"
								},
								{
									nodeType: "YulAssignment",
									src: "7255:39:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "7284:9:17"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "7265:18:17"
										},
										nodeType: "YulFunctionCall",
										src: "7265:29:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "7255:6:17"
										}
									]
								},
								{
									nodeType: "YulAssignment",
									src: "7303:48:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "7336:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "7347:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "7332:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "7332:18:17"
											}
										],
										functionName: {
											name: "abi_decode_address",
											nodeType: "YulIdentifier",
											src: "7313:18:17"
										},
										nodeType: "YulFunctionCall",
										src: "7313:38:17"
									},
									variableNames: [
										{
											name: "value1",
											nodeType: "YulIdentifier",
											src: "7303:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_addresst_address",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "7142:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "7153:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "7165:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "7173:6:17",
								type: ""
							}
						],
						src: "7097:260:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "7519:188:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "7529:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "7541:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "7552:2:17",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "7537:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "7537:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "7529:4:17"
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "7571:9:17"
											},
											{
												name: "value0",
												nodeType: "YulIdentifier",
												src: "7582:6:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "7564:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "7564:25:17"
									},
									nodeType: "YulExpressionStatement",
									src: "7564:25:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "7609:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "7620:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "7605:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "7605:18:17"
											},
											{
												"arguments": [
													{
														name: "value1",
														nodeType: "YulIdentifier",
														src: "7629:6:17"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "7645:3:17",
																		type: "",
																		value: "160"
																	},
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "7650:1:17",
																		type: "",
																		value: "1"
																	}
																],
																functionName: {
																	name: "shl",
																	nodeType: "YulIdentifier",
																	src: "7641:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "7641:11:17"
															},
															{
																kind: "number",
																nodeType: "YulLiteral",
																src: "7654:1:17",
																type: "",
																value: "1"
															}
														],
														functionName: {
															name: "sub",
															nodeType: "YulIdentifier",
															src: "7637:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "7637:19:17"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "7625:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "7625:32:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "7598:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "7598:60:17"
									},
									nodeType: "YulExpressionStatement",
									src: "7598:60:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "7678:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "7689:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "7674:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "7674:18:17"
											},
											{
												name: "value2",
												nodeType: "YulIdentifier",
												src: "7694:6:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "7667:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "7667:34:17"
									},
									nodeType: "YulExpressionStatement",
									src: "7667:34:17"
								}
							]
						},
						name: "abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "7472:9:17",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "7483:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "7491:6:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "7499:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "7510:4:17",
								type: ""
							}
						],
						src: "7362:345:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "7767:325:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "7777:22:17",
									value: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "7791:1:17",
												type: "",
												value: "1"
											},
											{
												name: "data",
												nodeType: "YulIdentifier",
												src: "7794:4:17"
											}
										],
										functionName: {
											name: "shr",
											nodeType: "YulIdentifier",
											src: "7787:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "7787:12:17"
									},
									variableNames: [
										{
											name: "length",
											nodeType: "YulIdentifier",
											src: "7777:6:17"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "7808:38:17",
									value: {
										"arguments": [
											{
												name: "data",
												nodeType: "YulIdentifier",
												src: "7838:4:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "7844:1:17",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "and",
											nodeType: "YulIdentifier",
											src: "7834:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "7834:12:17"
									},
									variables: [
										{
											name: "outOfPlaceEncoding",
											nodeType: "YulTypedName",
											src: "7812:18:17",
											type: ""
										}
									]
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "7885:31:17",
										statements: [
											{
												nodeType: "YulAssignment",
												src: "7887:27:17",
												value: {
													"arguments": [
														{
															name: "length",
															nodeType: "YulIdentifier",
															src: "7901:6:17"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7909:4:17",
															type: "",
															value: "0x7f"
														}
													],
													functionName: {
														name: "and",
														nodeType: "YulIdentifier",
														src: "7897:3:17"
													},
													nodeType: "YulFunctionCall",
													src: "7897:17:17"
												},
												variableNames: [
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "7887:6:17"
													}
												]
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "outOfPlaceEncoding",
												nodeType: "YulIdentifier",
												src: "7865:18:17"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "7858:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "7858:26:17"
									},
									nodeType: "YulIf",
									src: "7855:61:17"
								},
								{
									body: {
										nodeType: "YulBlock",
										src: "7975:111:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "7996:1:17",
															type: "",
															value: "0"
														},
														{
															"arguments": [
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "8003:3:17",
																	type: "",
																	value: "224"
																},
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "8008:10:17",
																	type: "",
																	value: "0x4e487b71"
																}
															],
															functionName: {
																name: "shl",
																nodeType: "YulIdentifier",
																src: "7999:3:17"
															},
															nodeType: "YulFunctionCall",
															src: "7999:20:17"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "7989:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "7989:31:17"
												},
												nodeType: "YulExpressionStatement",
												src: "7989:31:17"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "8040:1:17",
															type: "",
															value: "4"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "8043:4:17",
															type: "",
															value: "0x22"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "8033:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "8033:15:17"
												},
												nodeType: "YulExpressionStatement",
												src: "8033:15:17"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "8068:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "8071:4:17",
															type: "",
															value: "0x24"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "8061:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "8061:15:17"
												},
												nodeType: "YulExpressionStatement",
												src: "8061:15:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "outOfPlaceEncoding",
												nodeType: "YulIdentifier",
												src: "7931:18:17"
											},
											{
												"arguments": [
													{
														name: "length",
														nodeType: "YulIdentifier",
														src: "7954:6:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "7962:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "lt",
													nodeType: "YulIdentifier",
													src: "7951:2:17"
												},
												nodeType: "YulFunctionCall",
												src: "7951:14:17"
											}
										],
										functionName: {
											name: "eq",
											nodeType: "YulIdentifier",
											src: "7928:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "7928:38:17"
									},
									nodeType: "YulIf",
									src: "7925:161:17"
								}
							]
						},
						name: "extract_byte_array_length",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "data",
								nodeType: "YulTypedName",
								src: "7747:4:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "length",
								nodeType: "YulTypedName",
								src: "7756:6:17",
								type: ""
							}
						],
						src: "7712:380:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "8271:234:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "8288:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8299:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8281:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "8281:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "8281:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8322:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8333:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8318:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "8318:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8338:2:17",
												type: "",
												value: "44"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8311:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "8311:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "8311:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8361:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8372:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8357:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "8357:18:17"
											},
											{
												hexValue: "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578",
												kind: "string",
												nodeType: "YulLiteral",
												src: "8377:34:17",
												type: "",
												value: "ERC721: approved query for nonex"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8350:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "8350:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "8350:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8432:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8443:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8428:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "8428:18:17"
											},
											{
												hexValue: "697374656e7420746f6b656e",
												kind: "string",
												nodeType: "YulLiteral",
												src: "8448:14:17",
												type: "",
												value: "istent token"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8421:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "8421:42:17"
									},
									nodeType: "YulExpressionStatement",
									src: "8421:42:17"
								},
								{
									nodeType: "YulAssignment",
									src: "8472:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "8484:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8495:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "8480:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "8480:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "8472:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "8248:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "8262:4:17",
								type: ""
							}
						],
						src: "8097:408:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "8684:223:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "8701:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8712:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8694:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "8694:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "8694:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8735:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8746:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8731:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "8731:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8751:2:17",
												type: "",
												value: "33"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8724:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "8724:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "8724:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8774:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8785:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8770:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "8770:18:17"
											},
											{
												hexValue: "4552433732313a20617070726f76616c20746f2063757272656e74206f776e65",
												kind: "string",
												nodeType: "YulLiteral",
												src: "8790:34:17",
												type: "",
												value: "ERC721: approval to current owne"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8763:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "8763:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "8763:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "8845:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "8856:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "8841:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "8841:18:17"
											},
											{
												hexValue: "72",
												kind: "string",
												nodeType: "YulLiteral",
												src: "8861:3:17",
												type: "",
												value: "r"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "8834:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "8834:31:17"
									},
									nodeType: "YulExpressionStatement",
									src: "8834:31:17"
								},
								{
									nodeType: "YulAssignment",
									src: "8874:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "8886:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "8897:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "8882:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "8882:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "8874:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "8661:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "8675:4:17",
								type: ""
							}
						],
						src: "8510:397:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "9086:246:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "9103:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9114:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9096:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9096:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9096:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9137:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9148:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9133:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "9133:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9153:2:17",
												type: "",
												value: "56"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9126:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9126:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9126:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9176:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9187:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9172:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "9172:18:17"
											},
											{
												hexValue: "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77",
												kind: "string",
												nodeType: "YulLiteral",
												src: "9192:34:17",
												type: "",
												value: "ERC721: approve caller is not ow"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9165:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9165:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9165:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9247:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9258:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9243:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "9243:18:17"
											},
											{
												hexValue: "6e6572206e6f7220617070726f76656420666f7220616c6c",
												kind: "string",
												nodeType: "YulLiteral",
												src: "9263:26:17",
												type: "",
												value: "ner nor approved for all"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9236:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9236:54:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9236:54:17"
								},
								{
									nodeType: "YulAssignment",
									src: "9299:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "9311:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9322:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "9307:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "9307:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "9299:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "9063:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "9077:4:17",
								type: ""
							}
						],
						src: "8912:420:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "9511:239:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "9528:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9539:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9521:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9521:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9521:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9562:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9573:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9558:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "9558:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9578:2:17",
												type: "",
												value: "49"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9551:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9551:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9551:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9601:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9612:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9597:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "9597:18:17"
											},
											{
												hexValue: "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f",
												kind: "string",
												nodeType: "YulLiteral",
												src: "9617:34:17",
												type: "",
												value: "ERC721: transfer caller is not o"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9590:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9590:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9590:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9672:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9683:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9668:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "9668:18:17"
											},
											{
												hexValue: "776e6572206e6f7220617070726f766564",
												kind: "string",
												nodeType: "YulLiteral",
												src: "9688:19:17",
												type: "",
												value: "wner nor approved"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9661:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9661:47:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9661:47:17"
								},
								{
									nodeType: "YulAssignment",
									src: "9717:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "9729:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9740:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "9725:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "9725:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "9717:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "9488:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "9502:4:17",
								type: ""
							}
						],
						src: "9337:413:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "9929:182:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "9946:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9957:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9939:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9939:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9939:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "9980:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "9991:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "9976:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "9976:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "9996:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "9969:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "9969:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "9969:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "10019:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10030:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "10015:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "10015:18:17"
											},
											{
												hexValue: "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
												kind: "string",
												nodeType: "YulLiteral",
												src: "10035:34:17",
												type: "",
												value: "Ownable: caller is not the owner"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10008:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "10008:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "10008:62:17"
								},
								{
									nodeType: "YulAssignment",
									src: "10079:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "10091:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10102:2:17",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "10087:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "10087:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "10079:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "9906:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "9920:4:17",
								type: ""
							}
						],
						src: "9755:356:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "10245:175:17",
							statements: [
								{
									nodeType: "YulAssignment",
									src: "10255:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "10267:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10278:2:17",
												type: "",
												value: "64"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "10263:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "10263:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "10255:4:17"
										}
									]
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "10290:29:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10308:3:17",
														type: "",
														value: "160"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10313:1:17",
														type: "",
														value: "1"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "10304:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "10304:11:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10317:1:17",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "sub",
											nodeType: "YulIdentifier",
											src: "10300:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "10300:19:17"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "10294:2:17",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "10335:9:17"
											},
											{
												"arguments": [
													{
														name: "value0",
														nodeType: "YulIdentifier",
														src: "10350:6:17"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "10358:2:17"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "10346:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "10346:15:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10328:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "10328:34:17"
									},
									nodeType: "YulExpressionStatement",
									src: "10328:34:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "10382:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10393:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "10378:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "10378:18:17"
											},
											{
												"arguments": [
													{
														name: "value1",
														nodeType: "YulIdentifier",
														src: "10402:6:17"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "10410:2:17"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "10398:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "10398:15:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10371:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "10371:43:17"
									},
									nodeType: "YulExpressionStatement",
									src: "10371:43:17"
								}
							]
						},
						name: "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "10206:9:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "10217:6:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "10225:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "10236:4:17",
								type: ""
							}
						],
						src: "10116:304:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "10457:95:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10474:1:17",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10481:3:17",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "10486:10:17",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "10477:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "10477:20:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10467:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "10467:31:17"
									},
									nodeType: "YulExpressionStatement",
									src: "10467:31:17"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10514:1:17",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10517:4:17",
												type: "",
												value: "0x11"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "10507:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "10507:15:17"
									},
									nodeType: "YulExpressionStatement",
									src: "10507:15:17"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10538:1:17",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "10541:4:17",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "10531:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "10531:15:17"
									},
									nodeType: "YulExpressionStatement",
									src: "10531:15:17"
								}
							]
						},
						name: "panic_error_0x11",
						nodeType: "YulFunctionDefinition",
						src: "10425:127:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "10609:116:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "10668:22:17",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x11",
														nodeType: "YulIdentifier",
														src: "10670:16:17"
													},
													nodeType: "YulFunctionCall",
													src: "10670:18:17"
												},
												nodeType: "YulExpressionStatement",
												src: "10670:18:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														"arguments": [
															{
																name: "x",
																nodeType: "YulIdentifier",
																src: "10640:1:17"
															}
														],
														functionName: {
															name: "iszero",
															nodeType: "YulIdentifier",
															src: "10633:6:17"
														},
														nodeType: "YulFunctionCall",
														src: "10633:9:17"
													}
												],
												functionName: {
													name: "iszero",
													nodeType: "YulIdentifier",
													src: "10626:6:17"
												},
												nodeType: "YulFunctionCall",
												src: "10626:17:17"
											},
											{
												"arguments": [
													{
														name: "y",
														nodeType: "YulIdentifier",
														src: "10648:1:17"
													},
													{
														"arguments": [
															{
																"arguments": [
																	{
																		kind: "number",
																		nodeType: "YulLiteral",
																		src: "10659:1:17",
																		type: "",
																		value: "0"
																	}
																],
																functionName: {
																	name: "not",
																	nodeType: "YulIdentifier",
																	src: "10655:3:17"
																},
																nodeType: "YulFunctionCall",
																src: "10655:6:17"
															},
															{
																name: "x",
																nodeType: "YulIdentifier",
																src: "10663:1:17"
															}
														],
														functionName: {
															name: "div",
															nodeType: "YulIdentifier",
															src: "10651:3:17"
														},
														nodeType: "YulFunctionCall",
														src: "10651:14:17"
													}
												],
												functionName: {
													name: "gt",
													nodeType: "YulIdentifier",
													src: "10645:2:17"
												},
												nodeType: "YulFunctionCall",
												src: "10645:21:17"
											}
										],
										functionName: {
											name: "and",
											nodeType: "YulIdentifier",
											src: "10622:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "10622:45:17"
									},
									nodeType: "YulIf",
									src: "10619:71:17"
								},
								{
									nodeType: "YulAssignment",
									src: "10699:20:17",
									value: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "10714:1:17"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "10717:1:17"
											}
										],
										functionName: {
											name: "mul",
											nodeType: "YulIdentifier",
											src: "10710:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "10710:9:17"
									},
									variableNames: [
										{
											name: "product",
											nodeType: "YulIdentifier",
											src: "10699:7:17"
										}
									]
								}
							]
						},
						name: "checked_mul_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "x",
								nodeType: "YulTypedName",
								src: "10588:1:17",
								type: ""
							},
							{
								name: "y",
								nodeType: "YulTypedName",
								src: "10591:1:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "product",
								nodeType: "YulTypedName",
								src: "10597:7:17",
								type: ""
							}
						],
						src: "10557:168:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "10776:171:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "10807:111:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "10828:1:17",
															type: "",
															value: "0"
														},
														{
															"arguments": [
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "10835:3:17",
																	type: "",
																	value: "224"
																},
																{
																	kind: "number",
																	nodeType: "YulLiteral",
																	src: "10840:10:17",
																	type: "",
																	value: "0x4e487b71"
																}
															],
															functionName: {
																name: "shl",
																nodeType: "YulIdentifier",
																src: "10831:3:17"
															},
															nodeType: "YulFunctionCall",
															src: "10831:20:17"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "10821:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "10821:31:17"
												},
												nodeType: "YulExpressionStatement",
												src: "10821:31:17"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "10872:1:17",
															type: "",
															value: "4"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "10875:4:17",
															type: "",
															value: "0x12"
														}
													],
													functionName: {
														name: "mstore",
														nodeType: "YulIdentifier",
														src: "10865:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "10865:15:17"
												},
												nodeType: "YulExpressionStatement",
												src: "10865:15:17"
											},
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "10900:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "10903:4:17",
															type: "",
															value: "0x24"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "10893:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "10893:15:17"
												},
												nodeType: "YulExpressionStatement",
												src: "10893:15:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "10796:1:17"
											}
										],
										functionName: {
											name: "iszero",
											nodeType: "YulIdentifier",
											src: "10789:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "10789:9:17"
									},
									nodeType: "YulIf",
									src: "10786:132:17"
								},
								{
									nodeType: "YulAssignment",
									src: "10927:14:17",
									value: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "10936:1:17"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "10939:1:17"
											}
										],
										functionName: {
											name: "div",
											nodeType: "YulIdentifier",
											src: "10932:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "10932:9:17"
									},
									variableNames: [
										{
											name: "r",
											nodeType: "YulIdentifier",
											src: "10927:1:17"
										}
									]
								}
							]
						},
						name: "checked_div_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "x",
								nodeType: "YulTypedName",
								src: "10761:1:17",
								type: ""
							},
							{
								name: "y",
								nodeType: "YulTypedName",
								src: "10764:1:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "r",
								nodeType: "YulTypedName",
								src: "10770:1:17",
								type: ""
							}
						],
						src: "10730:217:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "11126:233:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "11143:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11154:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11136:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11136:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11136:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11177:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11188:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11173:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "11173:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11193:2:17",
												type: "",
												value: "43"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11166:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11166:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11166:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11216:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11227:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11212:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "11212:18:17"
											},
											{
												hexValue: "455243373231456e756d657261626c653a206f776e657220696e646578206f75",
												kind: "string",
												nodeType: "YulLiteral",
												src: "11232:34:17",
												type: "",
												value: "ERC721Enumerable: owner index ou"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11205:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11205:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11205:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11287:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11298:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11283:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "11283:18:17"
											},
											{
												hexValue: "74206f6620626f756e6473",
												kind: "string",
												nodeType: "YulLiteral",
												src: "11303:13:17",
												type: "",
												value: "t of bounds"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11276:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11276:41:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11276:41:17"
								},
								{
									nodeType: "YulAssignment",
									src: "11326:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "11338:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11349:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "11334:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "11334:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "11326:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "11103:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "11117:4:17",
								type: ""
							}
						],
						src: "10952:407:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "11538:234:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "11555:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11566:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11548:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11548:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11548:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11589:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11600:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11585:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "11585:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11605:2:17",
												type: "",
												value: "44"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11578:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11578:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11578:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11628:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11639:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11624:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "11624:18:17"
											},
											{
												hexValue: "455243373231456e756d657261626c653a20676c6f62616c20696e646578206f",
												kind: "string",
												nodeType: "YulLiteral",
												src: "11644:34:17",
												type: "",
												value: "ERC721Enumerable: global index o"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11617:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11617:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11617:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "11699:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11710:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "11695:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "11695:18:17"
											},
											{
												hexValue: "7574206f6620626f756e6473",
												kind: "string",
												nodeType: "YulLiteral",
												src: "11715:14:17",
												type: "",
												value: "ut of bounds"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11688:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11688:42:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11688:42:17"
								},
								{
									nodeType: "YulAssignment",
									src: "11739:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "11751:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11762:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "11747:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "11747:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "11739:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "11515:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "11529:4:17",
								type: ""
							}
						],
						src: "11364:408:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "11809:95:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11826:1:17",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11833:3:17",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "11838:10:17",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "11829:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "11829:20:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11819:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11819:31:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11819:31:17"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11866:1:17",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11869:4:17",
												type: "",
												value: "0x32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "11859:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11859:15:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11859:15:17"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11890:1:17",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "11893:4:17",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "11883:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "11883:15:17"
									},
									nodeType: "YulExpressionStatement",
									src: "11883:15:17"
								}
							]
						},
						name: "panic_error_0x32",
						nodeType: "YulFunctionDefinition",
						src: "11777:127:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "12083:231:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12100:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12111:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12093:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12093:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12093:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12134:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12145:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12130:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "12130:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12150:2:17",
												type: "",
												value: "41"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12123:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12123:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12123:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12173:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12184:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12169:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "12169:18:17"
											},
											{
												hexValue: "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12189:34:17",
												type: "",
												value: "ERC721: owner query for nonexist"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12162:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12162:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12162:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12244:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12255:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12240:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "12240:18:17"
											},
											{
												hexValue: "656e7420746f6b656e",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12260:11:17",
												type: "",
												value: "ent token"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12233:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12233:39:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12233:39:17"
								},
								{
									nodeType: "YulAssignment",
									src: "12281:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12293:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12304:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "12289:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "12289:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "12281:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "12060:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "12074:4:17",
								type: ""
							}
						],
						src: "11909:405:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "12493:232:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12510:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12521:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12503:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12503:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12503:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12544:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12555:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12540:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "12540:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12560:2:17",
												type: "",
												value: "42"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12533:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12533:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12533:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12583:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12594:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12579:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "12579:18:17"
											},
											{
												hexValue: "4552433732313a2062616c616e636520717565727920666f7220746865207a65",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12599:34:17",
												type: "",
												value: "ERC721: balance query for the ze"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12572:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12572:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12572:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12654:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12665:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12650:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "12650:18:17"
											},
											{
												hexValue: "726f2061646472657373",
												kind: "string",
												nodeType: "YulLiteral",
												src: "12670:12:17",
												type: "",
												value: "ro address"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12643:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12643:40:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12643:40:17"
								},
								{
									nodeType: "YulAssignment",
									src: "12692:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12704:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12715:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "12700:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "12700:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "12692:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "12470:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "12484:4:17",
								type: ""
							}
						],
						src: "12319:406:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "12904:174:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "12921:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12932:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12914:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12914:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12914:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12955:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "12966:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12951:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "12951:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "12971:2:17",
												type: "",
												value: "24"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12944:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12944:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12944:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "12994:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "13005:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "12990:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "12990:18:17"
											},
											{
												hexValue: "4552433732313a20696e76616c696420746f6b656e204944",
												kind: "string",
												nodeType: "YulLiteral",
												src: "13010:26:17",
												type: "",
												value: "ERC721: invalid token ID"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "12983:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "12983:54:17"
									},
									nodeType: "YulExpressionStatement",
									src: "12983:54:17"
								},
								{
									nodeType: "YulAssignment",
									src: "13046:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "13058:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "13069:2:17",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "13054:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "13054:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "13046:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "12881:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "12895:4:17",
								type: ""
							}
						],
						src: "12730:348:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "13130:88:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "13161:22:17",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x11",
														nodeType: "YulIdentifier",
														src: "13163:16:17"
													},
													nodeType: "YulFunctionCall",
													src: "13163:18:17"
												},
												nodeType: "YulExpressionStatement",
												src: "13163:18:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "13146:5:17"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "13157:1:17",
														type: "",
														value: "0"
													}
												],
												functionName: {
													name: "not",
													nodeType: "YulIdentifier",
													src: "13153:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "13153:6:17"
											}
										],
										functionName: {
											name: "eq",
											nodeType: "YulIdentifier",
											src: "13143:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "13143:17:17"
									},
									nodeType: "YulIf",
									src: "13140:43:17"
								},
								{
									nodeType: "YulAssignment",
									src: "13192:20:17",
									value: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "13203:5:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "13210:1:17",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "13199:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "13199:13:17"
									},
									variableNames: [
										{
											name: "ret",
											nodeType: "YulIdentifier",
											src: "13192:3:17"
										}
									]
								}
							]
						},
						name: "increment_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "value",
								nodeType: "YulTypedName",
								src: "13112:5:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "ret",
								nodeType: "YulTypedName",
								src: "13122:3:17",
								type: ""
							}
						],
						src: "13083:135:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "13304:103:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "13350:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "13359:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "13362:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "13352:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "13352:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "13352:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "13325:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "13334:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "13321:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "13321:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "13346:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "13317:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "13317:32:17"
									},
									nodeType: "YulIf",
									src: "13314:52:17"
								},
								{
									nodeType: "YulAssignment",
									src: "13375:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "13391:9:17"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "13385:5:17"
										},
										nodeType: "YulFunctionCall",
										src: "13385:16:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "13375:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_uint256_fromMemory",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "13270:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "13281:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "13293:6:17",
								type: ""
							}
						],
						src: "13223:184:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "13586:228:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "13603:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "13614:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "13596:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "13596:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "13596:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "13637:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "13648:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "13633:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "13633:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "13653:2:17",
												type: "",
												value: "38"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "13626:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "13626:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "13626:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "13676:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "13687:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "13672:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "13672:18:17"
											},
											{
												hexValue: "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
												kind: "string",
												nodeType: "YulLiteral",
												src: "13692:34:17",
												type: "",
												value: "Ownable: new owner is the zero a"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "13665:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "13665:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "13665:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "13747:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "13758:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "13743:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "13743:18:17"
											},
											{
												hexValue: "646472657373",
												kind: "string",
												nodeType: "YulLiteral",
												src: "13763:8:17",
												type: "",
												value: "ddress"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "13736:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "13736:36:17"
									},
									nodeType: "YulExpressionStatement",
									src: "13736:36:17"
								},
								{
									nodeType: "YulAssignment",
									src: "13781:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "13793:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "13804:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "13789:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "13789:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "13781:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "13563:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "13577:4:17",
								type: ""
							}
						],
						src: "13412:402:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "13993:234:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "14010:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14021:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14003:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14003:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14003:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14044:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14055:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14040:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "14040:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14060:2:17",
												type: "",
												value: "44"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14033:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14033:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14033:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14083:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14094:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14079:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "14079:18:17"
											},
											{
												hexValue: "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14099:34:17",
												type: "",
												value: "ERC721: operator query for nonex"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14072:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14072:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14072:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14154:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14165:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14150:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "14150:18:17"
											},
											{
												hexValue: "697374656e7420746f6b656e",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14170:14:17",
												type: "",
												value: "istent token"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14143:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14143:42:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14143:42:17"
								},
								{
									nodeType: "YulAssignment",
									src: "14194:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "14206:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14217:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "14202:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "14202:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "14194:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "13970:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "13984:4:17",
								type: ""
							}
						],
						src: "13819:408:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "14406:227:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "14423:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14434:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14416:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14416:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14416:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14457:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14468:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14453:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "14453:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14473:2:17",
												type: "",
												value: "37"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14446:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14446:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14446:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14496:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14507:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14492:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "14492:18:17"
											},
											{
												hexValue: "4552433732313a207472616e736665722066726f6d20696e636f727265637420",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14512:34:17",
												type: "",
												value: "ERC721: transfer from incorrect "
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14485:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14485:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14485:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14567:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14578:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14563:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "14563:18:17"
											},
											{
												hexValue: "6f776e6572",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14583:7:17",
												type: "",
												value: "owner"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14556:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14556:35:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14556:35:17"
								},
								{
									nodeType: "YulAssignment",
									src: "14600:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "14612:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14623:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "14608:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "14608:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "14600:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "14383:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "14397:4:17",
								type: ""
							}
						],
						src: "14232:401:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "14812:226:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "14829:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14840:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14822:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14822:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14822:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14863:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14874:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14859:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "14859:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "14879:2:17",
												type: "",
												value: "36"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14852:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14852:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14852:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14902:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14913:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14898:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "14898:18:17"
											},
											{
												hexValue: "4552433732313a207472616e7366657220746f20746865207a65726f20616464",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14918:34:17",
												type: "",
												value: "ERC721: transfer to the zero add"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14891:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14891:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14891:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "14973:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "14984:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "14969:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "14969:18:17"
											},
											{
												hexValue: "72657373",
												kind: "string",
												nodeType: "YulLiteral",
												src: "14989:6:17",
												type: "",
												value: "ress"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "14962:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "14962:34:17"
									},
									nodeType: "YulExpressionStatement",
									src: "14962:34:17"
								},
								{
									nodeType: "YulAssignment",
									src: "15005:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "15017:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15028:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "15013:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "15013:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "15005:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "14789:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "14803:4:17",
								type: ""
							}
						],
						src: "14638:400:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "15092:76:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "15114:22:17",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x11",
														nodeType: "YulIdentifier",
														src: "15116:16:17"
													},
													nodeType: "YulFunctionCall",
													src: "15116:18:17"
												},
												nodeType: "YulExpressionStatement",
												src: "15116:18:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "15108:1:17"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "15111:1:17"
											}
										],
										functionName: {
											name: "lt",
											nodeType: "YulIdentifier",
											src: "15105:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "15105:8:17"
									},
									nodeType: "YulIf",
									src: "15102:34:17"
								},
								{
									nodeType: "YulAssignment",
									src: "15145:17:17",
									value: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "15157:1:17"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "15160:1:17"
											}
										],
										functionName: {
											name: "sub",
											nodeType: "YulIdentifier",
											src: "15153:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "15153:9:17"
									},
									variableNames: [
										{
											name: "diff",
											nodeType: "YulIdentifier",
											src: "15145:4:17"
										}
									]
								}
							]
						},
						name: "checked_sub_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "x",
								nodeType: "YulTypedName",
								src: "15074:1:17",
								type: ""
							},
							{
								name: "y",
								nodeType: "YulTypedName",
								src: "15077:1:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "diff",
								nodeType: "YulTypedName",
								src: "15083:4:17",
								type: ""
							}
						],
						src: "15043:125:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "15221:80:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "15248:22:17",
										statements: [
											{
												expression: {
													"arguments": [
													],
													functionName: {
														name: "panic_error_0x11",
														nodeType: "YulIdentifier",
														src: "15250:16:17"
													},
													nodeType: "YulFunctionCall",
													src: "15250:18:17"
												},
												nodeType: "YulExpressionStatement",
												src: "15250:18:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "15237:1:17"
											},
											{
												"arguments": [
													{
														name: "y",
														nodeType: "YulIdentifier",
														src: "15244:1:17"
													}
												],
												functionName: {
													name: "not",
													nodeType: "YulIdentifier",
													src: "15240:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "15240:6:17"
											}
										],
										functionName: {
											name: "gt",
											nodeType: "YulIdentifier",
											src: "15234:2:17"
										},
										nodeType: "YulFunctionCall",
										src: "15234:13:17"
									},
									nodeType: "YulIf",
									src: "15231:39:17"
								},
								{
									nodeType: "YulAssignment",
									src: "15279:16:17",
									value: {
										"arguments": [
											{
												name: "x",
												nodeType: "YulIdentifier",
												src: "15290:1:17"
											},
											{
												name: "y",
												nodeType: "YulIdentifier",
												src: "15293:1:17"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "15286:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "15286:9:17"
									},
									variableNames: [
										{
											name: "sum",
											nodeType: "YulIdentifier",
											src: "15279:3:17"
										}
									]
								}
							]
						},
						name: "checked_add_t_uint256",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "x",
								nodeType: "YulTypedName",
								src: "15204:1:17",
								type: ""
							},
							{
								name: "y",
								nodeType: "YulTypedName",
								src: "15207:1:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "sum",
								nodeType: "YulTypedName",
								src: "15213:3:17",
								type: ""
							}
						],
						src: "15173:128:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "15480:175:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "15497:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15508:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15490:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "15490:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "15490:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15531:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15542:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15527:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "15527:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15547:2:17",
												type: "",
												value: "25"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15520:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "15520:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "15520:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15570:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15581:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15566:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "15566:18:17"
											},
											{
												hexValue: "4552433732313a20617070726f766520746f2063616c6c6572",
												kind: "string",
												nodeType: "YulLiteral",
												src: "15586:27:17",
												type: "",
												value: "ERC721: approve to caller"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15559:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "15559:55:17"
									},
									nodeType: "YulExpressionStatement",
									src: "15559:55:17"
								},
								{
									nodeType: "YulAssignment",
									src: "15623:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "15635:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15646:2:17",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "15631:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "15631:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "15623:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "15457:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "15471:4:17",
								type: ""
							}
						],
						src: "15306:349:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "15834:240:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "15851:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15862:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15844:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "15844:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "15844:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15885:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15896:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15881:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "15881:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "15901:2:17",
												type: "",
												value: "50"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15874:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "15874:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "15874:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15924:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "15935:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15920:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "15920:18:17"
											},
											{
												hexValue: "4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
												kind: "string",
												nodeType: "YulLiteral",
												src: "15940:34:17",
												type: "",
												value: "ERC721: transfer to non ERC721Re"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15913:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "15913:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "15913:62:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "15995:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16006:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "15991:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "15991:18:17"
											},
											{
												hexValue: "63656976657220696d706c656d656e746572",
												kind: "string",
												nodeType: "YulLiteral",
												src: "16011:20:17",
												type: "",
												value: "ceiver implementer"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "15984:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "15984:48:17"
									},
									nodeType: "YulExpressionStatement",
									src: "15984:48:17"
								},
								{
									nodeType: "YulAssignment",
									src: "16041:27:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "16053:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16064:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "16049:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "16049:19:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "16041:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "15811:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "15825:4:17",
								type: ""
							}
						],
						src: "15660:414:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "16253:182:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "16270:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16281:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16263:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "16263:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "16263:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "16304:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16315:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "16300:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "16300:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16320:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16293:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "16293:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "16293:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "16343:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16354:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "16339:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "16339:18:17"
											},
											{
												hexValue: "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
												kind: "string",
												nodeType: "YulLiteral",
												src: "16359:34:17",
												type: "",
												value: "ERC721: mint to the zero address"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16332:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "16332:62:17"
									},
									nodeType: "YulExpressionStatement",
									src: "16332:62:17"
								},
								{
									nodeType: "YulAssignment",
									src: "16403:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "16415:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16426:2:17",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "16411:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "16411:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "16403:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "16230:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "16244:4:17",
								type: ""
							}
						],
						src: "16079:356:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "16614:178:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "16631:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16642:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16624:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "16624:21:17"
									},
									nodeType: "YulExpressionStatement",
									src: "16624:21:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "16665:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16676:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "16661:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "16661:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16681:2:17",
												type: "",
												value: "28"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16654:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "16654:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "16654:30:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "16704:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "16715:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "16700:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "16700:18:17"
											},
											{
												hexValue: "4552433732313a20746f6b656e20616c7265616479206d696e746564",
												kind: "string",
												nodeType: "YulLiteral",
												src: "16720:30:17",
												type: "",
												value: "ERC721: token already minted"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "16693:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "16693:58:17"
									},
									nodeType: "YulExpressionStatement",
									src: "16693:58:17"
								},
								{
									nodeType: "YulAssignment",
									src: "16760:26:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "16772:9:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "16783:2:17",
												type: "",
												value: "96"
											}
										],
										functionName: {
											name: "add",
											nodeType: "YulIdentifier",
											src: "16768:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "16768:18:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "16760:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "16591:9:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "16605:4:17",
								type: ""
							}
						],
						src: "16440:352:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "17000:286:17",
							statements: [
								{
									nodeType: "YulVariableDeclaration",
									src: "17010:29:17",
									value: {
										"arguments": [
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17028:3:17",
														type: "",
														value: "160"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17033:1:17",
														type: "",
														value: "1"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "17024:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "17024:11:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17037:1:17",
												type: "",
												value: "1"
											}
										],
										functionName: {
											name: "sub",
											nodeType: "YulIdentifier",
											src: "17020:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "17020:19:17"
									},
									variables: [
										{
											name: "_1",
											nodeType: "YulTypedName",
											src: "17014:2:17",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "17055:9:17"
											},
											{
												"arguments": [
													{
														name: "value0",
														nodeType: "YulIdentifier",
														src: "17070:6:17"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "17078:2:17"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "17066:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "17066:15:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17048:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "17048:34:17"
									},
									nodeType: "YulExpressionStatement",
									src: "17048:34:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17102:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17113:2:17",
														type: "",
														value: "32"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17098:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "17098:18:17"
											},
											{
												"arguments": [
													{
														name: "value1",
														nodeType: "YulIdentifier",
														src: "17122:6:17"
													},
													{
														name: "_1",
														nodeType: "YulIdentifier",
														src: "17130:2:17"
													}
												],
												functionName: {
													name: "and",
													nodeType: "YulIdentifier",
													src: "17118:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "17118:15:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17091:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "17091:43:17"
									},
									nodeType: "YulExpressionStatement",
									src: "17091:43:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17154:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17165:2:17",
														type: "",
														value: "64"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17150:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "17150:18:17"
											},
											{
												name: "value2",
												nodeType: "YulIdentifier",
												src: "17170:6:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17143:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "17143:34:17"
									},
									nodeType: "YulExpressionStatement",
									src: "17143:34:17"
								},
								{
									expression: {
										"arguments": [
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17197:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17208:2:17",
														type: "",
														value: "96"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17193:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "17193:18:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17213:3:17",
												type: "",
												value: "128"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17186:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "17186:31:17"
									},
									nodeType: "YulExpressionStatement",
									src: "17186:31:17"
								},
								{
									nodeType: "YulAssignment",
									src: "17226:54:17",
									value: {
										"arguments": [
											{
												name: "value3",
												nodeType: "YulIdentifier",
												src: "17252:6:17"
											},
											{
												"arguments": [
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17264:9:17"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17275:3:17",
														type: "",
														value: "128"
													}
												],
												functionName: {
													name: "add",
													nodeType: "YulIdentifier",
													src: "17260:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "17260:19:17"
											}
										],
										functionName: {
											name: "abi_encode_string",
											nodeType: "YulIdentifier",
											src: "17234:17:17"
										},
										nodeType: "YulFunctionCall",
										src: "17234:46:17"
									},
									variableNames: [
										{
											name: "tail",
											nodeType: "YulIdentifier",
											src: "17226:4:17"
										}
									]
								}
							]
						},
						name: "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "16945:9:17",
								type: ""
							},
							{
								name: "value3",
								nodeType: "YulTypedName",
								src: "16956:6:17",
								type: ""
							},
							{
								name: "value2",
								nodeType: "YulTypedName",
								src: "16964:6:17",
								type: ""
							},
							{
								name: "value1",
								nodeType: "YulTypedName",
								src: "16972:6:17",
								type: ""
							},
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "16980:6:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "tail",
								nodeType: "YulTypedName",
								src: "16991:4:17",
								type: ""
							}
						],
						src: "16797:489:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "17371:169:17",
							statements: [
								{
									body: {
										nodeType: "YulBlock",
										src: "17417:16:17",
										statements: [
											{
												expression: {
													"arguments": [
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "17426:1:17",
															type: "",
															value: "0"
														},
														{
															kind: "number",
															nodeType: "YulLiteral",
															src: "17429:1:17",
															type: "",
															value: "0"
														}
													],
													functionName: {
														name: "revert",
														nodeType: "YulIdentifier",
														src: "17419:6:17"
													},
													nodeType: "YulFunctionCall",
													src: "17419:12:17"
												},
												nodeType: "YulExpressionStatement",
												src: "17419:12:17"
											}
										]
									},
									condition: {
										"arguments": [
											{
												"arguments": [
													{
														name: "dataEnd",
														nodeType: "YulIdentifier",
														src: "17392:7:17"
													},
													{
														name: "headStart",
														nodeType: "YulIdentifier",
														src: "17401:9:17"
													}
												],
												functionName: {
													name: "sub",
													nodeType: "YulIdentifier",
													src: "17388:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "17388:23:17"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17413:2:17",
												type: "",
												value: "32"
											}
										],
										functionName: {
											name: "slt",
											nodeType: "YulIdentifier",
											src: "17384:3:17"
										},
										nodeType: "YulFunctionCall",
										src: "17384:32:17"
									},
									nodeType: "YulIf",
									src: "17381:52:17"
								},
								{
									nodeType: "YulVariableDeclaration",
									src: "17442:29:17",
									value: {
										"arguments": [
											{
												name: "headStart",
												nodeType: "YulIdentifier",
												src: "17461:9:17"
											}
										],
										functionName: {
											name: "mload",
											nodeType: "YulIdentifier",
											src: "17455:5:17"
										},
										nodeType: "YulFunctionCall",
										src: "17455:16:17"
									},
									variables: [
										{
											name: "value",
											nodeType: "YulTypedName",
											src: "17446:5:17",
											type: ""
										}
									]
								},
								{
									expression: {
										"arguments": [
											{
												name: "value",
												nodeType: "YulIdentifier",
												src: "17504:5:17"
											}
										],
										functionName: {
											name: "validator_revert_bytes4",
											nodeType: "YulIdentifier",
											src: "17480:23:17"
										},
										nodeType: "YulFunctionCall",
										src: "17480:30:17"
									},
									nodeType: "YulExpressionStatement",
									src: "17480:30:17"
								},
								{
									nodeType: "YulAssignment",
									src: "17519:15:17",
									value: {
										name: "value",
										nodeType: "YulIdentifier",
										src: "17529:5:17"
									},
									variableNames: [
										{
											name: "value0",
											nodeType: "YulIdentifier",
											src: "17519:6:17"
										}
									]
								}
							]
						},
						name: "abi_decode_tuple_t_bytes4_fromMemory",
						nodeType: "YulFunctionDefinition",
						parameters: [
							{
								name: "headStart",
								nodeType: "YulTypedName",
								src: "17337:9:17",
								type: ""
							},
							{
								name: "dataEnd",
								nodeType: "YulTypedName",
								src: "17348:7:17",
								type: ""
							}
						],
						returnVariables: [
							{
								name: "value0",
								nodeType: "YulTypedName",
								src: "17360:6:17",
								type: ""
							}
						],
						src: "17291:249:17"
					},
					{
						body: {
							nodeType: "YulBlock",
							src: "17577:95:17",
							statements: [
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17594:1:17",
												type: "",
												value: "0"
											},
											{
												"arguments": [
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17601:3:17",
														type: "",
														value: "224"
													},
													{
														kind: "number",
														nodeType: "YulLiteral",
														src: "17606:10:17",
														type: "",
														value: "0x4e487b71"
													}
												],
												functionName: {
													name: "shl",
													nodeType: "YulIdentifier",
													src: "17597:3:17"
												},
												nodeType: "YulFunctionCall",
												src: "17597:20:17"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17587:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "17587:31:17"
									},
									nodeType: "YulExpressionStatement",
									src: "17587:31:17"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17634:1:17",
												type: "",
												value: "4"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17637:4:17",
												type: "",
												value: "0x31"
											}
										],
										functionName: {
											name: "mstore",
											nodeType: "YulIdentifier",
											src: "17627:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "17627:15:17"
									},
									nodeType: "YulExpressionStatement",
									src: "17627:15:17"
								},
								{
									expression: {
										"arguments": [
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17658:1:17",
												type: "",
												value: "0"
											},
											{
												kind: "number",
												nodeType: "YulLiteral",
												src: "17661:4:17",
												type: "",
												value: "0x24"
											}
										],
										functionName: {
											name: "revert",
											nodeType: "YulIdentifier",
											src: "17651:6:17"
										},
										nodeType: "YulFunctionCall",
										src: "17651:15:17"
									},
									nodeType: "YulExpressionStatement",
									src: "17651:15:17"
								}
							]
						},
						name: "panic_error_0x31",
						nodeType: "YulFunctionDefinition",
						src: "17545:127:17"
					}
				]
			},
			contents: "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(pos, length), 0x20), 0)\n        }\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_string_memory_ptr__to_t_bytes32_t_address_t_string_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_string(value2, add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: approved query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not ow\")\n        mstore(add(headStart, 96), \"ner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"ERC721: transfer caller is not o\")\n        mstore(add(headStart, 96), \"wner nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"ERC721Enumerable: owner index ou\")\n        mstore(add(headStart, 96), \"t of bounds\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721Enumerable: global index o\")\n        mstore(add(headStart, 96), \"ut of bounds\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: owner query for nonexist\")\n        mstore(add(headStart, 96), \"ent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC721: balance query for the ze\")\n        mstore(add(headStart, 96), \"ro address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: operator query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}",
			id: 17,
			language: "Yul",
			name: "#utility.yul"
		}
	];
	var sourceMap = "3599:2127:16:-:0;;;653:1;628:26;;3951:223;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390:113:2;;;;;;;;;;;;-1:-1:-1;;;1390:113:2;;;;;;;;;;;;;;;;;;;;;1456:13;;1390:113;;;1456:13;;-1:-1:-1;;1456:13:2;:::i;:::-;-1:-1:-1;1479:17:2;;;;:7;;:17;;;;;:::i;:::-;;1390:113;;921:32:0;940:12;:10;;;:12;;:::i;:::-;921:18;:32::i;:::-;4077:15:16::1;:34:::0;;-1:-1:-1;;;;;4077:34:16;;::::1;-1:-1:-1::0;;;;;;4077:34:16;;::::1;;::::0;;;4121:21:::1;:46:::0;;;;;::::1;::::0;::::1;;::::0;;3599:2127;;640:96:9;719:10;;640:96::o;2270:187:0:-;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;3599:2127:16:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3599:2127:16;;;-1:-1:-1;3599:2127:16;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:17;93:13;;-1:-1:-1;;;;;135:31:17;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;494:380::-;573:1;569:12;;;;616;;;637:61;;691:4;683:6;679:17;669:27;;637:61;744:2;736:6;733:14;713:18;710:38;707:161;;;790:10;785:3;781:20;778:1;771:31;825:4;822:1;815:15;853:4;850:1;843:15;707:161;;494:380;;;:::o;:::-;3599:2127:16;;;;;;";
	var deployedSourceMap = "3599:2127:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2600:267;;;;;;;;;;-1:-1:-1;2600:267:16;;;;;:::i;:::-;;:::i;:::-;;;565:14:17;;558:22;540:41;;528:2;513:18;2600:267:16;;;;;;;;5002:585;;;;;;:::i;:::-;;:::i;:::-;;;2419:25:17;;;2407:2;2392:18;5002:585:16;2273:177:17;2488:98:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4000:217::-;;;;;;;;;;-1:-1:-1;4000:217:2;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3506:32:17;;;3488:51;;3476:2;3461:18;4000:217:2;3342:203:17;3538:401:2;;;;;;;;;;-1:-1:-1;3538:401:2;;;;;:::i;:::-;;:::i;:::-;;1615:111:5;;;;;;;;;;-1:-1:-1;1702:10:5;:17;1615:111;;1006:59:16;;;;;;;;;;-1:-1:-1;1006:59:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1006:59:16;;;;;;;;;;-1:-1:-1;;;;;4179:32:17;;;4161:51;;4243:2;4228:18;;4221:34;;;;4134:18;1006:59:16;3987:274:17;4727:330:2;;;;;;;;;;-1:-1:-1;4727:330:2;;;;;:::i;:::-;;:::i;4500:380:16:-;;;;;;;;;;-1:-1:-1;4500:380:16;;;;;:::i;:::-;;:::i;2873:399::-;;;;;;;;;;-1:-1:-1;2873:399:16;;;;;:::i;:::-;;:::i;1291:253:5:-;;;;;;;;;;-1:-1:-1;1291:253:5;;;;;:::i;:::-;;:::i;5123:179:2:-;;;;;;;;;;-1:-1:-1;5123:179:2;;;;;:::i;:::-;;:::i;1798:230:5:-;;;;;;;;;;-1:-1:-1;1798:230:5;;;;;:::i;:::-;;:::i;4180:314:16:-;;;;;;;;;;-1:-1:-1;4180:314:16;;;;;:::i;:::-;;:::i;5593:131::-;;;;;;;;;;-1:-1:-1;5593:131:16;;;;;:::i;:::-;5650:7;5676:27;;;:18;:27;;;;;:41;;;-1:-1:-1;;;;;5676:41:16;;5593:131;945:55;;;;;;;;;;-1:-1:-1;945:55:16;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;628:26::-;;;;;;;;;;;;;;;;2191:235:2;;;;;;;;;;-1:-1:-1;2191:235:2;;;;;:::i;:::-;;:::i;1929:205::-;;;;;;;;;;-1:-1:-1;1929:205:2;;;;;:::i;:::-;;:::i;1668:101:0:-;;;;;;;;;;;;;:::i;1036:85::-;;;;;;;;;;-1:-1:-1;1108:6:0;;-1:-1:-1;;;;;1108:6:0;1036:85;;3709:36:16;;;;;;;;;;-1:-1:-1;3709:36:16;;;;-1:-1:-1;;;;;3709:36:16;;;2650:102:2;;;;;;;;;;;;;:::i;4284:153::-;;;;;;;;;;-1:-1:-1;4284:153:2;;;;;:::i;:::-;;:::i;5368:320::-;;;;;;;;;;-1:-1:-1;5368:320:2;;;;;:::i;:::-;;:::i;1130:242:16:-;;;;;;;;;;-1:-1:-1;1130:242:16;;;;;:::i;:::-;;:::i;1072:51::-;;;;;;;;;;;;1118:5;1072:51;;1971:623;;;;;;;;;;-1:-1:-1;1971:623:16;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4886:110::-;;;;;;;;;;;;;:::i;4503:162:2:-;;;;;;;;;;-1:-1:-1;4503:162:2;;;;;:::i;:::-;-1:-1:-1;;;;;4623:25:2;;;4600:4;4623:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4503:162;3673:30:16;;;;;;;;;;-1:-1:-1;3673:30:16;;;;-1:-1:-1;;;;;3673:30:16;;;1918:198:0;;;;;;;;;;-1:-1:-1;1918:198:0;;;;;:::i;:::-;;:::i;2600:267:16:-;2752:4;-1:-1:-1;;;;;;2779:41:16;;-1:-1:-1;;;2779:41:16;;:81;;;2824:36;2848:11;2824:23;:36::i;:::-;2772:88;2600:267;-1:-1:-1;;2600:267:16:o;5002:585::-;5185:7;5204:15;5222:72;5234:11;5247:12;5261:10;5273:20;5222:11;:72::i;:::-;5445:21;;5418:137;;-1:-1:-1;;;5418:137:16;;;;;7564:25:17;;;5540:4:16;7605:18:17;;;7598:60;7674:18;;;7667:34;;;5204:90:16;;-1:-1:-1;;;;;;5445:21:16;;5418:82;;5508:9;;7537:18:17;;5418:137:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5573:7:16;;-1:-1:-1;;;;;5002:585:16;;;;;;;:::o;2488:98:2:-;2542:13;2574:5;2567:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2488:98;:::o;4000:217::-;4076:7;7248:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7248:16:2;4095:73;;;;-1:-1:-1;;;4095:73:2;;8299:2:17;4095:73:2;;;8281:21:17;8338:2;8318:18;;;8311:30;8377:34;8357:18;;;8350:62;-1:-1:-1;;;8428:18:17;;;8421:42;8480:19;;4095:73:2;;;;;;;;;-1:-1:-1;4186:24:2;;;;:15;:24;;;;;;-1:-1:-1;;;;;4186:24:2;;4000:217::o;3538:401::-;3618:13;3634:23;3649:7;3634:14;:23::i;:::-;3618:39;;3681:5;-1:-1:-1;;;;;3675:11:2;:2;-1:-1:-1;;;;;3675:11:2;;;3667:57;;;;-1:-1:-1;;;3667:57:2;;8712:2:17;3667:57:2;;;8694:21:17;8751:2;8731:18;;;8724:30;8790:34;8770:18;;;8763:62;-1:-1:-1;;;8841:18:17;;;8834:31;8882:19;;3667:57:2;8510:397:17;3667:57:2;719:10:9;-1:-1:-1;;;;;3756:21:2;;;;:62;;-1:-1:-1;3781:37:2;3798:5;719:10:9;4503:162:2;:::i;3781:37::-;3735:165;;;;-1:-1:-1;;;3735:165:2;;9114:2:17;3735:165:2;;;9096:21:17;9153:2;9133:18;;;9126:30;9192:34;9172:18;;;9165:62;9263:26;9243:18;;;9236:54;9307:19;;3735:165:2;8912:420:17;3735:165:2;3911:21;3920:2;3924:7;3911:8;:21::i;:::-;3608:331;3538:401;;:::o;4727:330::-;4916:41;719:10:9;4949:7:2;4916:18;:41::i;:::-;4908:103;;;;-1:-1:-1;;;4908:103:2;;;;;;;:::i;:::-;5022:28;5032:4;5038:2;5042:7;5022:9;:28::i;4500:380:16:-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:9;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4631:21:16::1;::::0;-1:-1:-1;;;;;4603:49:16;;::::1;4631:21:::0;::::1;4603:49;;4595:58;;;::::0;::::1;;4698:21;::::0;;-1:-1:-1;;;;;4729:48:16;;::::1;-1:-1:-1::0;;;;;;4729:48:16;::::1;::::0;::::1;::::0;;;4793:80:::1;::::0;;4698:21;;;::::1;10328:34:17::0;;;10393:2;10378:18;;10371:43;;;;4793:80:16::1;::::0;10263:18:17;4793:80:16::1;;;;;;;;4585:295;4500:380:::0;:::o;2873:399::-;2996:16;3084:30;;;:20;:30;;;;;;;;3051:63;;;;;;;;;;-1:-1:-1;;;;;3051:63:16;;;;;;;;;;;;2996:16;;;;1118:5;;3146:44;;:10;:44;:::i;:::-;3145:68;;;;:::i;:::-;3231:21;;;;;-1:-1:-1;2873:399:16;;-1:-1:-1;;;;2873:399:16:o;1291:253:5:-;1388:7;1423:23;1440:5;1423:16;:23::i;:::-;1415:5;:31;1407:87;;;;-1:-1:-1;;;1407:87:5;;11154:2:17;1407:87:5;;;11136:21:17;11193:2;11173:18;;;11166:30;11232:34;11212:18;;;11205:62;-1:-1:-1;;;11283:18:17;;;11276:41;11334:19;;1407:87:5;10952:407:17;1407:87:5;-1:-1:-1;;;;;;1511:19:5;;;;;;;;:12;:19;;;;;;;;:26;;;;;;;;;1291:253::o;5123:179:2:-;5256:39;5273:4;5279:2;5283:7;5256:39;;;;;;;;;;;;:16;:39::i;1798:230:5:-;1873:7;1908:30;1702:10;:17;;1615:111;1908:30;1900:5;:38;1892:95;;;;-1:-1:-1;;;1892:95:5;;11566:2:17;1892:95:5;;;11548:21:17;11605:2;11585:18;;;11578:30;11644:34;11624:18;;;11617:62;-1:-1:-1;;;11695:18:17;;;11688:42;11747:19;;1892:95:5;11364:408:17;1892:95:5;2004:10;2015:5;2004:17;;;;;;;;:::i;:::-;;;;;;;;;1997:24;;1798:230;;;:::o;4180:314:16:-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:9;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;4293:15:16::1;::::0;-1:-1:-1;;;;;4271:37:16;;::::1;4293:15:::0;::::1;4271:37;;4263:46;;;::::0;::::1;;4348:15;::::0;;-1:-1:-1;;;;;4373:36:16;;::::1;-1:-1:-1::0;;;;;;4373:36:16;::::1;::::0;::::1;::::0;;;4425:62:::1;::::0;;4348:15;;;::::1;10328:34:17::0;;;10393:2;10378:18;;10371:43;;;;4425:62:16::1;::::0;10263:18:17;4425:62:16::1;10116:304:17::0;945:55:16;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;945:55:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2191:235:2:-;2263:7;2298:16;;;:7;:16;;;;;;-1:-1:-1;;;;;2298:16:2;2332:19;2324:73;;;;-1:-1:-1;;;2324:73:2;;12111:2:17;2324:73:2;;;12093:21:17;12150:2;12130:18;;;12123:30;12189:34;12169:18;;;12162:62;-1:-1:-1;;;12240:18:17;;;12233:39;12289:19;;2324:73:2;11909:405:17;1929:205:2;2001:7;-1:-1:-1;;;;;2028:19:2;;2020:74;;;;-1:-1:-1;;;2020:74:2;;12521:2:17;2020:74:2;;;12503:21:17;12560:2;12540:18;;;12533:30;12599:34;12579:18;;;12572:62;-1:-1:-1;;;12650:18:17;;;12643:40;12700:19;;2020:74:2;12319:406:17;2020:74:2;-1:-1:-1;;;;;;2111:16:2;;;;;:9;:16;;;;;;;1929:205::o;1668:101:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:9;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;2650:102:2:-;2706:13;2738:7;2731:14;;;;;:::i;4284:153::-;4378:52;719:10:9;4411:8:2;4421;4378:18;:52::i;:::-;4284:153;;:::o;5368:320::-;5537:41;719:10:9;5570:7:2;5537:18;:41::i;:::-;5529:103;;;;-1:-1:-1;;;5529:103:2;;;;;;;:::i;:::-;5642:39;5656:4;5662:2;5666:7;5675:5;5642:13;:39::i;:::-;5368:320;;;;:::o;1130:242:16:-;1247:19;;;;:10;:19;;;;;1241:33;;1195:13;;1247:19;1241:33;;;:::i;:::-;:38;;;-1:-1:-1;1220:109:16;;;;-1:-1:-1;;;1220:109:16;;12932:2:17;1220:109:16;;;12914:21:17;12971:2;12951:18;;;12944:30;13010:26;12990:18;;;12983:54;13054:18;;1220:109:16;12730:348:17;1220:109:16;1346:19;;;;:10;:19;;;;;1339:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1130:242;;;:::o;1971:623::-;2058:16;2090:19;2140:1;2123:160;2148:7;;2143:1;:12;2123:160;;2180:21;;;;:18;:21;;;;;:35;;;-1:-1:-1;;;;;2180:45:16;;;:35;;:45;2176:97;;;2245:13;;;;:::i;:::-;;;;2176:97;2157:3;;;;:::i;:::-;;;;2123:160;;;;2292:23;2332:11;2318:26;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2318:26:16;-1:-1:-1;2292:52:16;-1:-1:-1;2354:22:16;2407:1;2390:175;2415:7;;2410:1;:12;2390:175;;2447:21;;;;:18;:21;;;;;:35;;;-1:-1:-1;;;;;2447:45:16;;;:35;;:45;2443:112;;;2539:1;2512:6;2519:16;;;;:::i;:::-;;;2512:24;;;;;;;;:::i;:::-;;;;;;:28;;;;;2443:112;2424:3;;;;:::i;:::-;;;;2390:175;;;-1:-1:-1;2581:6:16;;1971:623;-1:-1:-1;;;;1971:623:16:o;4886:110::-;4964:15;;4951:38;;;-1:-1:-1;;;4951:38:16;;;;4925:7;;-1:-1:-1;;;;;4964:15:16;;4951:36;;:38;;;;;;;;;;;;;;4964:15;4951:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4944:45;;4886:110;:::o;1918:198:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:9;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;13614:2:17;1998:73:0::1;::::0;::::1;13596:21:17::0;13653:2;13633:18;;;13626:30;13692:34;13672:18;;;13665:62;-1:-1:-1;;;13743:18:17;;;13736:36;13789:19;;1998:73:0::1;13412:402:17::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;990:222:5:-;1092:4;-1:-1:-1;;;;;;1115:50:5;;-1:-1:-1;;;1115:50:5;;:90;;;1169:36;1193:11;1169:23;:36::i;1378:587:16:-;1556:7;1575:15;1595:7;;1593:9;;;;;:::i;:::-;;;;;-1:-1:-1;1641:46:16;;;;;;;;;;;1664:10;1641:46;;;;;;;;;;;;;-1:-1:-1;1697:27:16;;;:18;:27;;;;;;:39;;;;;;;;;;;-1:-1:-1;;;;;;1697:39:16;-1:-1:-1;;;;;1697:39:16;;;;;;;;;;;;;1593:9;;-1:-1:-1;1641:46:16;;;;1697:27;;:39;;;;;;;;;;:::i;:::-;;;;;1746:26;1752:10;1764:7;1746:5;:26::i;:::-;1782:19;;;;:10;:19;;;;;;;;:34;;;;;;;;:::i;:::-;-1:-1:-1;1830:24:16;;1826:109;;3416:31;3450:30;;;:20;:30;;;;;3490:34;;-1:-1:-1;;;;;;3490:34:16;1891:10;3490:34;;;-1:-1:-1;3534:31:16;:54;;;1870;-1:-1:-1;1951:7:16;1378:587;-1:-1:-1;;;;;1378:587:16:o;11169:171:2:-;11243:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;11243:29:2;-1:-1:-1;;;;;11243:29:2;;;;;;;;:24;;11296:23;11243:24;11296:14;:23::i;:::-;-1:-1:-1;;;;;11287:46:2;;;;;;;;;;;11169:171;;:::o;7443:344::-;7536:4;7248:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7248:16:2;7552:73;;;;-1:-1:-1;;;7552:73:2;;14021:2:17;7552:73:2;;;14003:21:17;14060:2;14040:18;;;14033:30;14099:34;14079:18;;;14072:62;-1:-1:-1;;;14150:18:17;;;14143:42;14202:19;;7552:73:2;13819:408:17;7552:73:2;7635:13;7651:23;7666:7;7651:14;:23::i;:::-;7635:39;;7703:5;-1:-1:-1;;;;;7692:16:2;:7;-1:-1:-1;;;;;7692:16:2;;:52;;;-1:-1:-1;;;;;;4623:25:2;;;4600:4;4623:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7712:32;7692:87;;;;7772:7;-1:-1:-1;;;;;7748:31:2;:20;7760:7;7748:11;:20::i;:::-;-1:-1:-1;;;;;7748:31:2;;7684:96;7443:344;-1:-1:-1;;;;7443:344:2:o;10453:605::-;10607:4;-1:-1:-1;;;;;10580:31:2;:23;10595:7;10580:14;:23::i;:::-;-1:-1:-1;;;;;10580:31:2;;10572:81;;;;-1:-1:-1;;;10572:81:2;;14434:2:17;10572:81:2;;;14416:21:17;14473:2;14453:18;;;14446:30;14512:34;14492:18;;;14485:62;-1:-1:-1;;;14563:18:17;;;14556:35;14608:19;;10572:81:2;14232:401:17;10572:81:2;-1:-1:-1;;;;;10671:16:2;;10663:65;;;;-1:-1:-1;;;10663:65:2;;14840:2:17;10663:65:2;;;14822:21:17;14879:2;14859:18;;;14852:30;14918:34;14898:18;;;14891:62;-1:-1:-1;;;14969:18:17;;;14962:34;15013:19;;10663:65:2;14638:400:17;10663:65:2;10739:39;10760:4;10766:2;10770:7;10739:20;:39::i;:::-;10840:29;10857:1;10861:7;10840:8;:29::i;:::-;-1:-1:-1;;;;;10880:15:2;;;;;;:9;:15;;;;;:20;;10899:1;;10880:15;:20;;10899:1;;10880:20;:::i;:::-;;;;-1:-1:-1;;;;;;;10910:13:2;;;;;;:9;:13;;;;;:18;;10927:1;;10910:13;:18;;10927:1;;10910:18;:::i;:::-;;;;-1:-1:-1;;10938:16:2;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;10938:21:2;-1:-1:-1;;;;;10938:21:2;;;;;;;;;10975:27;;10938:16;;10975:27;;;;;;;3608:331;3538:401;;:::o;2270:187:0:-;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;11475:307:2:-;11625:8;-1:-1:-1;;;;;11616:17:2;:5;-1:-1:-1;;;;;11616:17:2;;;11608:55;;;;-1:-1:-1;;;11608:55:2;;15508:2:17;11608:55:2;;;15490:21:17;15547:2;15527:18;;;15520:30;15586:27;15566:18;;;15559:55;15631:18;;11608:55:2;15306:349:17;11608:55:2;-1:-1:-1;;;;;11673:25:2;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;11673:46:2;;;;;;;;;;11734:41;;540::17;;;11734::2;;513:18:17;11734:41:2;;;;;;;11475:307;;;:::o;6550:::-;6701:28;6711:4;6717:2;6721:7;6701:9;:28::i;:::-;6747:48;6770:4;6776:2;6780:7;6789:5;6747:22;:48::i;:::-;6739:111;;;;-1:-1:-1;;;6739:111:2;;;;;;;:::i;1570:300::-;1672:4;-1:-1:-1;;;;;;1707:40:2;;-1:-1:-1;;;1707:40:2;;:104;;-1:-1:-1;;;;;;;1763:48:2;;-1:-1:-1;;;1763:48:2;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:11;;;1827:36:2;829:155:11;9079:427:2;-1:-1:-1;;;;;9158:16:2;;9150:61;;;;-1:-1:-1;;;9150:61:2;;16281:2:17;9150:61:2;;;16263:21:17;;;16300:18;;;16293:30;16359:34;16339:18;;;16332:62;16411:18;;9150:61:2;16079:356:17;9150:61:2;7225:4;7248:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7248:16:2;:30;9221:58;;;;-1:-1:-1;;;9221:58:2;;16642:2:17;9221:58:2;;;16624:21:17;16681:2;16661:18;;;16654:30;16720;16700:18;;;16693:58;16768:18;;9221:58:2;16440:352:17;9221:58:2;9290:45;9319:1;9323:2;9327:7;9290:20;:45::i;:::-;-1:-1:-1;;;;;9346:13:2;;;;;;:9;:13;;;;;:18;;9363:1;;9346:13;:18;;9363:1;;9346:18;:::i;:::-;;;;-1:-1:-1;;9374:16:2;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9374:21:2;-1:-1:-1;;;;;9374:21:2;;;;;;;;9411:33;;9374:16;;;9411:33;;9374:16;;9411:33;4284:153;;:::o;2624:572:5:-;-1:-1:-1;;;;;2823:18:5;;2819:183;;2857:40;2889:7;4005:10;:17;;3978:24;;;;:15;:24;;;;;:44;;;4032:24;;;;;;;;;;;;3902:161;2857:40;2819:183;;;2926:2;-1:-1:-1;;;;;2918:10:5;:4;-1:-1:-1;;;;;2918:10:5;;2914:88;;2944:47;2977:4;2983:7;2944:32;:47::i;:::-;-1:-1:-1;;;;;3015:16:5;;3011:179;;3047:45;3084:7;3047:36;:45::i;3011:179::-;3119:4;-1:-1:-1;;;;;3113:10:5;:2;-1:-1:-1;;;;;3113:10:5;;3109:81;;3139:40;3167:2;3171:7;3139:27;:40::i;12335:778:2:-;12485:4;-1:-1:-1;;;;;12505:13:2;;1465:19:8;:23;12501:606:2;;12540:72;;-1:-1:-1;;;12540:72:2;;-1:-1:-1;;;;;12540:36:2;;;;;:72;;719:10:9;;12591:4:2;;12597:7;;12606:5;;12540:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12540:72:2;;;;;;;;-1:-1:-1;;12540:72:2;;;;;;;;;;;;:::i;:::-;;;12536:519;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12779:13:2;;12775:266;;12821:60;;-1:-1:-1;;;12821:60:2;;;;;;;:::i;12775:266::-;12993:6;12987:13;12978:6;12974:2;12970:15;12963:38;12536:519;-1:-1:-1;;;;;;12662:51:2;-1:-1:-1;;;12662:51:2;;-1:-1:-1;12655:58:2;;12501:606;-1:-1:-1;13092:4:2;13085:11;;4680:970:5;4942:22;4992:1;4967:22;4984:4;4967:16;:22::i;:::-;:26;;;;:::i;:::-;5003:18;5024:26;;;:17;:26;;;;;;4942:51;;-1:-1:-1;5154:28:5;;;5150:323;;-1:-1:-1;;;;;5220:18:5;;5198:19;5220:18;;;:12;:18;;;;;;;;:34;;;;;;;;;5269:30;;;;;;:44;;;5385:30;;:17;:30;;;;;:43;;;5150:323;-1:-1:-1;5566:26:5;;;;:17;:26;;;;;;;;5559:33;;;-1:-1:-1;;;;;5609:18:5;;;;;:12;:18;;;;;:34;;;;;;;5602:41;4680:970::o;5938:1061::-;6212:10;:17;6187:22;;6212:21;;6232:1;;6212:21;:::i;:::-;6243:18;6264:24;;;:15;:24;;;;;;6632:10;:26;;6187:46;;-1:-1:-1;6264:24:5;;6187:46;;6632:26;;;;;;:::i;:::-;;;;;;;;;6610:48;;6694:11;6669:10;6680;6669:22;;;;;;;;:::i;:::-;;;;;;;;;;;;:36;;;;6773:28;;;:15;:28;;;;;;;:41;;;6942:24;;;;;6935:31;6976:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;6009:990;;;5938:1061;:::o;3490:217::-;3574:14;3591:20;3608:2;3591:16;:20::i;:::-;-1:-1:-1;;;;;3621:16:5;;;;;;;:12;:16;;;;;;;;:24;;;;;;;;:34;;;3665:26;;;:17;:26;;;;;;:35;;;;-1:-1:-1;3490:217:5:o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:17;-1:-1:-1;;;;;;88:32:17;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;:::-;384:5;150:245;-1:-1:-1;;;150:245:17:o;592:127::-;653:10;648:3;644:20;641:1;634:31;684:4;681:1;674:15;708:4;705:1;698:15;724:632;789:5;819:18;860:2;852:6;849:14;846:40;;;866:18;;:::i;:::-;941:2;935:9;909:2;995:15;;-1:-1:-1;;991:24:17;;;1017:2;987:33;983:42;971:55;;;1041:18;;;1061:22;;;1038:46;1035:72;;;1087:18;;:::i;:::-;1127:10;1123:2;1116:22;1156:6;1147:15;;1186:6;1178;1171:22;1226:3;1217:6;1212:3;1208:16;1205:25;1202:45;;;1243:1;1240;1233:12;1202:45;1293:6;1288:3;1281:4;1273:6;1269:17;1256:44;1348:1;1341:4;1332:6;1324;1320:19;1316:30;1309:41;;;;724:632;;;;;:::o;1361:222::-;1404:5;1457:3;1450:4;1442:6;1438:17;1434:27;1424:55;;1475:1;1472;1465:12;1424:55;1497:80;1573:3;1564:6;1551:20;1544:4;1536:6;1532:17;1497:80;:::i;1588:680::-;1694:6;1702;1710;1718;1771:3;1759:9;1750:7;1746:23;1742:33;1739:53;;;1788:1;1785;1778:12;1739:53;1828:9;1815:23;1857:18;1898:2;1890:6;1887:14;1884:34;;;1914:1;1911;1904:12;1884:34;1937:50;1979:7;1970:6;1959:9;1955:22;1937:50;:::i;:::-;1927:60;;2040:2;2029:9;2025:18;2012:32;1996:48;;2069:2;2059:8;2056:16;2053:36;;;2085:1;2082;2075:12;2053:36;;2108:52;2152:7;2141:8;2130:9;2126:24;2108:52;:::i;:::-;1588:680;;2098:62;;-1:-1:-1;;;;2207:2:17;2192:18;;2179:32;;2258:2;2243:18;2230:32;;1588:680;-1:-1:-1;1588:680:17:o;2455:472::-;2497:3;2535:5;2529:12;2562:6;2557:3;2550:19;2587:1;2597:162;2611:6;2608:1;2605:13;2597:162;;;2673:4;2729:13;;;2725:22;;2719:29;2701:11;;;2697:20;;2690:59;2626:12;2597:162;;;2777:6;2774:1;2771:13;2768:87;;;2843:1;2836:4;2827:6;2822:3;2818:16;2814:27;2807:38;2768:87;-1:-1:-1;2909:2:17;2888:15;-1:-1:-1;;2884:29:17;2875:39;;;;2916:4;2871:50;;2455:472;-1:-1:-1;;2455:472:17:o;2932:220::-;3081:2;3070:9;3063:21;3044:4;3101:45;3142:2;3131:9;3127:18;3119:6;3101:45;:::i;3157:180::-;3216:6;3269:2;3257:9;3248:7;3244:23;3240:32;3237:52;;;3285:1;3282;3275:12;3237:52;-1:-1:-1;3308:23:17;;3157:180;-1:-1:-1;3157:180:17:o;3550:173::-;3618:20;;-1:-1:-1;;;;;3667:31:17;;3657:42;;3647:70;;3713:1;3710;3703:12;3647:70;3550:173;;;:::o;3728:254::-;3796:6;3804;3857:2;3845:9;3836:7;3832:23;3828:32;3825:52;;;3873:1;3870;3863:12;3825:52;3896:29;3915:9;3896:29;:::i;:::-;3886:39;3972:2;3957:18;;;;3944:32;;-1:-1:-1;;;3728:254:17:o;4266:328::-;4343:6;4351;4359;4412:2;4400:9;4391:7;4387:23;4383:32;4380:52;;;4428:1;4425;4418:12;4380:52;4451:29;4470:9;4451:29;:::i;:::-;4441:39;;4499:38;4533:2;4522:9;4518:18;4499:38;:::i;:::-;4489:48;;4584:2;4573:9;4569:18;4556:32;4546:42;;4266:328;;;;;:::o;4599:186::-;4658:6;4711:2;4699:9;4690:7;4686:23;4682:32;4679:52;;;4727:1;4724;4717:12;4679:52;4750:29;4769:9;4750:29;:::i;4790:248::-;4858:6;4866;4919:2;4907:9;4898:7;4894:23;4890:32;4887:52;;;4935:1;4932;4925:12;4887:52;-1:-1:-1;;4958:23:17;;;5028:2;5013:18;;;5000:32;;-1:-1:-1;4790:248:17:o;5043:388::-;5230:25;;;-1:-1:-1;;;;;5291:32:17;;5286:2;5271:18;;5264:60;5360:2;5355;5340:18;;5333:30;;;-1:-1:-1;;5380:45:17;;5406:18;;5398:6;5380:45;:::i;:::-;5372:53;5043:388;-1:-1:-1;;;;;5043:388:17:o;5436:347::-;5501:6;5509;5562:2;5550:9;5541:7;5537:23;5533:32;5530:52;;;5578:1;5575;5568:12;5530:52;5601:29;5620:9;5601:29;:::i;:::-;5591:39;;5680:2;5669:9;5665:18;5652:32;5727:5;5720:13;5713:21;5706:5;5703:32;5693:60;;5749:1;5746;5739:12;5693:60;5772:5;5762:15;;;5436:347;;;;;:::o;5788:667::-;5883:6;5891;5899;5907;5960:3;5948:9;5939:7;5935:23;5931:33;5928:53;;;5977:1;5974;5967:12;5928:53;6000:29;6019:9;6000:29;:::i;:::-;5990:39;;6048:38;6082:2;6071:9;6067:18;6048:38;:::i;:::-;6038:48;;6133:2;6122:9;6118:18;6105:32;6095:42;;6188:2;6177:9;6173:18;6160:32;6215:18;6207:6;6204:30;6201:50;;;6247:1;6244;6237:12;6201:50;6270:22;;6323:4;6315:13;;6311:27;-1:-1:-1;6301:55:17;;6352:1;6349;6342:12;6301:55;6375:74;6441:7;6436:2;6423:16;6418:2;6414;6410:11;6375:74;:::i;:::-;6365:84;;;5788:667;;;;;;;:::o;6460:632::-;6631:2;6683:21;;;6753:13;;6656:18;;;6775:22;;;6602:4;;6631:2;6854:15;;;;6828:2;6813:18;;;6602:4;6897:169;6911:6;6908:1;6905:13;6897:169;;;6972:13;;6960:26;;7041:15;;;;7006:12;;;;6933:1;6926:9;6897:169;;;-1:-1:-1;7083:3:17;;6460:632;-1:-1:-1;;;;;;6460:632:17:o;7097:260::-;7165:6;7173;7226:2;7214:9;7205:7;7201:23;7197:32;7194:52;;;7242:1;7239;7232:12;7194:52;7265:29;7284:9;7265:29;:::i;:::-;7255:39;;7313:38;7347:2;7336:9;7332:18;7313:38;:::i;:::-;7303:48;;7097:260;;;;;:::o;7712:380::-;7791:1;7787:12;;;;7834;;;7855:61;;7909:4;7901:6;7897:17;7887:27;;7855:61;7962:2;7954:6;7951:14;7931:18;7928:38;7925:161;;;8008:10;8003:3;7999:20;7996:1;7989:31;8043:4;8040:1;8033:15;8071:4;8068:1;8061:15;7925:161;;7712:380;;;:::o;9337:413::-;9539:2;9521:21;;;9578:2;9558:18;;;9551:30;9617:34;9612:2;9597:18;;9590:62;-1:-1:-1;;;9683:2:17;9668:18;;9661:47;9740:3;9725:19;;9337:413::o;9755:356::-;9957:2;9939:21;;;9976:18;;;9969:30;10035:34;10030:2;10015:18;;10008:62;10102:2;10087:18;;9755:356::o;10425:127::-;10486:10;10481:3;10477:20;10474:1;10467:31;10517:4;10514:1;10507:15;10541:4;10538:1;10531:15;10557:168;10597:7;10663:1;10659;10655:6;10651:14;10648:1;10645:21;10640:1;10633:9;10626:17;10622:45;10619:71;;;10670:18;;:::i;:::-;-1:-1:-1;10710:9:17;;10557:168::o;10730:217::-;10770:1;10796;10786:132;;10840:10;10835:3;10831:20;10828:1;10821:31;10875:4;10872:1;10865:15;10903:4;10900:1;10893:15;10786:132;-1:-1:-1;10932:9:17;;10730:217::o;11777:127::-;11838:10;11833:3;11829:20;11826:1;11819:31;11869:4;11866:1;11859:15;11893:4;11890:1;11883:15;13083:135;13122:3;-1:-1:-1;;13143:17:17;;13140:43;;;13163:18;;:::i;:::-;-1:-1:-1;13210:1:17;13199:13;;13083:135::o;13223:184::-;13293:6;13346:2;13334:9;13325:7;13321:23;13317:32;13314:52;;;13362:1;13359;13352:12;13314:52;-1:-1:-1;13385:16:17;;13223:184;-1:-1:-1;13223:184:17:o;15043:125::-;15083:4;15111:1;15108;15105:8;15102:34;;;15116:18;;:::i;:::-;-1:-1:-1;15153:9:17;;15043:125::o;15173:128::-;15213:3;15244:1;15240:6;15237:1;15234:13;15231:39;;;15250:18;;:::i;:::-;-1:-1:-1;15286:9:17;;15173:128::o;15660:414::-;15862:2;15844:21;;;15901:2;15881:18;;;15874:30;15940:34;15935:2;15920:18;;15913:62;-1:-1:-1;;;16006:2:17;15991:18;;15984:48;16064:3;16049:19;;15660:414::o;16797:489::-;-1:-1:-1;;;;;17066:15:17;;;17048:34;;17118:15;;17113:2;17098:18;;17091:43;17165:2;17150:18;;17143:34;;;17213:3;17208:2;17193:18;;17186:31;;;16991:4;;17234:46;;17260:19;;17252:6;17234:46;:::i;:::-;17226:54;16797:489;-1:-1:-1;;;;;;16797:489:17:o;17291:249::-;17360:6;17413:2;17401:9;17392:7;17388:23;17384:32;17381:52;;;17429:1;17426;17419:12;17381:52;17461:9;17455:16;17480:30;17504:5;17480:30;:::i;17545:127::-;17606:10;17601:3;17597:20;17594:1;17587:31;17637:4;17634:1;17627:15;17661:4;17658:1;17651:15";
	var source = "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport \"./IVWBLSupportIPFS.sol\";\nimport \"../access-condition/IAccessControlCheckerByNFT.sol\";\nimport \"../gateway/IVWBLGateway.sol\";\n\nabstract contract VWBLProtocol is ERC721Enumerable, IERC2981 {\n    mapping(uint256 => string) private _tokenURIs;\n    \n    uint256 public counter = 0;\n    \n    struct TokenInfo {\n        bytes32 documentId;\n        address minterAddress;\n        string getKeyURl;\n    }\n\n    struct RoyaltyInfo {\n        address recipient;\n        uint256 royaltiesPercentage; // if percentage is 3.5, royaltiesPercentage=3.5*10^2 (decimal is 2)\n    }\n\n    mapping(uint256 => TokenInfo) public tokenIdToTokenInfo;\n    mapping(uint256 => RoyaltyInfo) public tokenIdToRoyaltyInfo;\n\n    uint256 public constant INVERSE_BASIS_POINT = 10000;\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(\n            bytes(_tokenURIs[tokenId]).length != 0,\n            \"ERC721: invalid token ID\"\n        );\n        return _tokenURIs[tokenId];\n    }\n\n    function _mint(\n        bytes32 _documentId, \n        string memory _metadataURl,\n        string memory _getKeyURl, \n        uint256 _royaltiesPercentage\n    ) internal returns (uint256) {\n        uint256 tokenId = ++counter;\n        TokenInfo memory tokenInfo = TokenInfo(_documentId, msg.sender, _getKeyURl);\n        tokenIdToTokenInfo[tokenId] = tokenInfo;\n        _mint(msg.sender, tokenId);\n        _tokenURIs[tokenId] = _metadataURl;\n        if (_royaltiesPercentage > 0) {\n            _setRoyalty(tokenId, msg.sender, _royaltiesPercentage);\n        }\n        return tokenId;\n    }\n\n    function getTokenByMinter(address minter)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 resultCount = 0;\n        for (uint256 i = 1; i <= counter; i++) {\n            if (tokenIdToTokenInfo[i].minterAddress == minter) {\n                resultCount++;\n            }\n        }\n        uint256[] memory tokens = new uint256[](resultCount);\n        uint256 currentCounter = 0;\n        for (uint256 i = 1; i <= counter; i++) {\n            if (tokenIdToTokenInfo[i].minterAddress == minter) {\n                tokens[currentCounter++] = i;\n            }\n        }\n        return tokens;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC721Enumerable)\n        returns (bool)\n    {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        RoyaltyInfo memory royaltyInfo = tokenIdToRoyaltyInfo[_tokenId];\n        uint256 _royalties = (_salePrice * royaltyInfo.royaltiesPercentage) / INVERSE_BASIS_POINT;\n        return (royaltyInfo.recipient, _royalties);\n    }\n\n    function _setRoyalty(\n        uint256 _tokenId,\n        address _recipient,\n        uint256 _royaltiesPercentage\n    ) internal {\n        RoyaltyInfo storage royaltyInfo = tokenIdToRoyaltyInfo[_tokenId];\n        royaltyInfo.recipient = _recipient;\n        royaltyInfo.royaltiesPercentage = _royaltiesPercentage;\n    }\n}\n\ncontract VWBLSupportIPFS is VWBLProtocol, Ownable, IVWBLSupportIPFS {\n    address public gatewayContract;\n    address public accessCheckerContract;\n\n    event gatewayContractChanged(address oldGatewayContract, address newGatewayContract);\n    event accessCheckerContractChanged(address oldAccessCheckerContract, address newAccessCheckerContract);\n\n    constructor(\n        address _gatewayContract, \n        address _accessCheckerContract\n    ) ERC721(\"VWBL\", \"VWBL\") {\n        gatewayContract = _gatewayContract;\n        accessCheckerContract = _accessCheckerContract;\n    }\n\n    function setGatewayContract(address newGatewayContract) public onlyOwner {\n        require(newGatewayContract != gatewayContract);\n        address oldGatewayContract = gatewayContract;\n        gatewayContract = newGatewayContract;\n\n        emit gatewayContractChanged(oldGatewayContract, newGatewayContract);\n    }\n\n    function setAccessCheckerContract(address newAccessCheckerContract) public onlyOwner {\n        require(newAccessCheckerContract != accessCheckerContract);\n        address oldAccessCheckerContract = accessCheckerContract;\n        accessCheckerContract = newAccessCheckerContract;\n\n        emit accessCheckerContractChanged(oldAccessCheckerContract, newAccessCheckerContract);\n    }\n\n    function getFee() public view returns (uint256) {\n        return IVWBLGateway(gatewayContract).feeWei();\n    }\n\n    function mint(\n        string memory _metadataURl,\n        string memory _getKeyURl, \n        uint256 _royaltiesPercentage, \n        bytes32 _documentId\n    ) public payable returns (uint256) {\n        uint256 tokenId = super._mint(_documentId, _metadataURl, _getKeyURl, _royaltiesPercentage);\n\n        // grant access control to nft and pay vwbl fee and register nft data to access control checker contract\n        IAccessControlCheckerByNFT(accessCheckerContract).grantAccessControlAndRegisterNFT{value: msg.value}(_documentId, address(this), tokenId);\n\n        return tokenId;\n    }\n\n    function getMinter(uint256 tokenId) public view returns (address) {\n        return tokenIdToTokenInfo[tokenId].minterAddress;\n    }\n}\n";
	var sourcePath = "/Users/hashimotoitsuki/VWBL-protocol/contracts/ERC721/ipfs/VWBLSupportIPFS.sol";
	var ast = {
		absolutePath: "project:/contracts/ERC721/ipfs/VWBLSupportIPFS.sol",
		exportedSymbols: {
			Address: [
				1814
			],
			Context: [
				1836
			],
			ERC165: [
				2063
			],
			ERC721: [
				989
			],
			ERC721Enumerable: [
				1461
			],
			IAccessControlCheckerByNFT: [
				2087
			],
			IERC165: [
				2075
			],
			IERC2981: [
				123
			],
			IERC721: [
				1105
			],
			IERC721Enumerable: [
				1492
			],
			IERC721Metadata: [
				1519
			],
			IERC721Receiver: [
				1123
			],
			IVWBLGateway: [
				2126
			],
			IVWBLSupportIPFS: [
				2155
			],
			Ownable: [
				104
			],
			Strings: [
				2039
			],
			VWBLProtocol: [
				2456
			],
			VWBLSupportIPFS: [
				2619
			]
		},
		id: 2620,
		license: "MIT",
		nodeType: "SourceUnit",
		nodes: [
			{
				id: 2157,
				literals: [
					"solidity",
					"^",
					"0.8",
					".0"
				],
				nodeType: "PragmaDirective",
				src: "32:23:16"
			},
			{
				absolutePath: "@openzeppelin/contracts/token/ERC721/ERC721.sol",
				file: "@openzeppelin/contracts/token/ERC721/ERC721.sol",
				id: 2158,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 2620,
				sourceUnit: 990,
				src: "57:57:16",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol",
				file: "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol",
				id: 2159,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 2620,
				sourceUnit: 1462,
				src: "115:78:16",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "@openzeppelin/contracts/access/Ownable.sol",
				file: "@openzeppelin/contracts/access/Ownable.sol",
				id: 2160,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 2620,
				sourceUnit: 105,
				src: "194:52:16",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "@openzeppelin/contracts/interfaces/IERC2981.sol",
				file: "@openzeppelin/contracts/interfaces/IERC2981.sol",
				id: 2161,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 2620,
				sourceUnit: 124,
				src: "247:57:16",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "@openzeppelin/contracts/utils/introspection/IERC165.sol",
				file: "@openzeppelin/contracts/utils/introspection/IERC165.sol",
				id: 2162,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 2620,
				sourceUnit: 2076,
				src: "305:65:16",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "project:/contracts/ERC721/ipfs/IVWBLSupportIPFS.sol",
				file: "./IVWBLSupportIPFS.sol",
				id: 2163,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 2620,
				sourceUnit: 2156,
				src: "372:32:16",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "project:/contracts/ERC721/access-condition/IAccessControlCheckerByNFT.sol",
				file: "../access-condition/IAccessControlCheckerByNFT.sol",
				id: 2164,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 2620,
				sourceUnit: 2088,
				src: "405:60:16",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				absolutePath: "project:/contracts/ERC721/gateway/IVWBLGateway.sol",
				file: "../gateway/IVWBLGateway.sol",
				id: 2165,
				nameLocation: "-1:-1:-1",
				nodeType: "ImportDirective",
				scope: 2620,
				sourceUnit: 2127,
				src: "466:37:16",
				symbolAliases: [
				],
				unitAlias: ""
			},
			{
				abstract: true,
				baseContracts: [
					{
						baseName: {
							id: 2166,
							name: "ERC721Enumerable",
							nodeType: "IdentifierPath",
							referencedDeclaration: 1461,
							src: "539:16:16"
						},
						id: 2167,
						nodeType: "InheritanceSpecifier",
						src: "539:16:16"
					},
					{
						baseName: {
							id: 2168,
							name: "IERC2981",
							nodeType: "IdentifierPath",
							referencedDeclaration: 123,
							src: "557:8:16"
						},
						id: 2169,
						nodeType: "InheritanceSpecifier",
						src: "557:8:16"
					}
				],
				canonicalName: "VWBLProtocol",
				contractDependencies: [
				],
				contractKind: "contract",
				fullyImplemented: false,
				id: 2456,
				linearizedBaseContracts: [
					2456,
					123,
					1461,
					1492,
					989,
					1519,
					1105,
					2063,
					2075,
					1836
				],
				name: "VWBLProtocol",
				nameLocation: "523:12:16",
				nodeType: "ContractDefinition",
				nodes: [
					{
						constant: false,
						id: 2173,
						mutability: "mutable",
						name: "_tokenURIs",
						nameLocation: "607:10:16",
						nodeType: "VariableDeclaration",
						scope: 2456,
						src: "572:45:16",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_mapping$_t_uint256_$_t_string_storage_$",
							typeString: "mapping(uint256 => string)"
						},
						typeName: {
							id: 2172,
							keyType: {
								id: 2170,
								name: "uint256",
								nodeType: "ElementaryTypeName",
								src: "580:7:16",
								typeDescriptions: {
									typeIdentifier: "t_uint256",
									typeString: "uint256"
								}
							},
							nodeType: "Mapping",
							src: "572:26:16",
							typeDescriptions: {
								typeIdentifier: "t_mapping$_t_uint256_$_t_string_storage_$",
								typeString: "mapping(uint256 => string)"
							},
							valueType: {
								id: 2171,
								name: "string",
								nodeType: "ElementaryTypeName",
								src: "591:6:16",
								typeDescriptions: {
									typeIdentifier: "t_string_storage_ptr",
									typeString: "string"
								}
							}
						},
						visibility: "private"
					},
					{
						constant: false,
						functionSelector: "61bc221a",
						id: 2176,
						mutability: "mutable",
						name: "counter",
						nameLocation: "643:7:16",
						nodeType: "VariableDeclaration",
						scope: 2456,
						src: "628:26:16",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_uint256",
							typeString: "uint256"
						},
						typeName: {
							id: 2174,
							name: "uint256",
							nodeType: "ElementaryTypeName",
							src: "628:7:16",
							typeDescriptions: {
								typeIdentifier: "t_uint256",
								typeString: "uint256"
							}
						},
						value: {
							hexValue: "30",
							id: 2175,
							isConstant: false,
							isLValue: false,
							isPure: true,
							kind: "number",
							lValueRequested: false,
							nodeType: "Literal",
							src: "653:1:16",
							typeDescriptions: {
								typeIdentifier: "t_rational_0_by_1",
								typeString: "int_const 0"
							},
							value: "0"
						},
						visibility: "public"
					},
					{
						canonicalName: "VWBLProtocol.TokenInfo",
						id: 2183,
						members: [
							{
								constant: false,
								id: 2178,
								mutability: "mutable",
								name: "documentId",
								nameLocation: "700:10:16",
								nodeType: "VariableDeclaration",
								scope: 2183,
								src: "692:18:16",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_bytes32",
									typeString: "bytes32"
								},
								typeName: {
									id: 2177,
									name: "bytes32",
									nodeType: "ElementaryTypeName",
									src: "692:7:16",
									typeDescriptions: {
										typeIdentifier: "t_bytes32",
										typeString: "bytes32"
									}
								},
								visibility: "internal"
							},
							{
								constant: false,
								id: 2180,
								mutability: "mutable",
								name: "minterAddress",
								nameLocation: "728:13:16",
								nodeType: "VariableDeclaration",
								scope: 2183,
								src: "720:21:16",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_address",
									typeString: "address"
								},
								typeName: {
									id: 2179,
									name: "address",
									nodeType: "ElementaryTypeName",
									src: "720:7:16",
									stateMutability: "nonpayable",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									}
								},
								visibility: "internal"
							},
							{
								constant: false,
								id: 2182,
								mutability: "mutable",
								name: "getKeyURl",
								nameLocation: "758:9:16",
								nodeType: "VariableDeclaration",
								scope: 2183,
								src: "751:16:16",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_string_storage_ptr",
									typeString: "string"
								},
								typeName: {
									id: 2181,
									name: "string",
									nodeType: "ElementaryTypeName",
									src: "751:6:16",
									typeDescriptions: {
										typeIdentifier: "t_string_storage_ptr",
										typeString: "string"
									}
								},
								visibility: "internal"
							}
						],
						name: "TokenInfo",
						nameLocation: "672:9:16",
						nodeType: "StructDefinition",
						scope: 2456,
						src: "665:109:16",
						visibility: "public"
					},
					{
						canonicalName: "VWBLProtocol.RoyaltyInfo",
						id: 2188,
						members: [
							{
								constant: false,
								id: 2185,
								mutability: "mutable",
								name: "recipient",
								nameLocation: "817:9:16",
								nodeType: "VariableDeclaration",
								scope: 2188,
								src: "809:17:16",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_address",
									typeString: "address"
								},
								typeName: {
									id: 2184,
									name: "address",
									nodeType: "ElementaryTypeName",
									src: "809:7:16",
									stateMutability: "nonpayable",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									}
								},
								visibility: "internal"
							},
							{
								constant: false,
								id: 2187,
								mutability: "mutable",
								name: "royaltiesPercentage",
								nameLocation: "844:19:16",
								nodeType: "VariableDeclaration",
								scope: 2188,
								src: "836:27:16",
								stateVariable: false,
								storageLocation: "default",
								typeDescriptions: {
									typeIdentifier: "t_uint256",
									typeString: "uint256"
								},
								typeName: {
									id: 2186,
									name: "uint256",
									nodeType: "ElementaryTypeName",
									src: "836:7:16",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									}
								},
								visibility: "internal"
							}
						],
						name: "RoyaltyInfo",
						nameLocation: "787:11:16",
						nodeType: "StructDefinition",
						scope: 2456,
						src: "780:159:16",
						visibility: "public"
					},
					{
						constant: false,
						functionSelector: "5fb8bcd5",
						id: 2193,
						mutability: "mutable",
						name: "tokenIdToTokenInfo",
						nameLocation: "982:18:16",
						nodeType: "VariableDeclaration",
						scope: 2456,
						src: "945:55:16",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$2183_storage_$",
							typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo)"
						},
						typeName: {
							id: 2192,
							keyType: {
								id: 2189,
								name: "uint256",
								nodeType: "ElementaryTypeName",
								src: "953:7:16",
								typeDescriptions: {
									typeIdentifier: "t_uint256",
									typeString: "uint256"
								}
							},
							nodeType: "Mapping",
							src: "945:29:16",
							typeDescriptions: {
								typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$2183_storage_$",
								typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo)"
							},
							valueType: {
								id: 2191,
								nodeType: "UserDefinedTypeName",
								pathNode: {
									id: 2190,
									name: "TokenInfo",
									nodeType: "IdentifierPath",
									referencedDeclaration: 2183,
									src: "964:9:16"
								},
								referencedDeclaration: 2183,
								src: "964:9:16",
								typeDescriptions: {
									typeIdentifier: "t_struct$_TokenInfo_$2183_storage_ptr",
									typeString: "struct VWBLProtocol.TokenInfo"
								}
							}
						},
						visibility: "public"
					},
					{
						constant: false,
						functionSelector: "19daf1bf",
						id: 2198,
						mutability: "mutable",
						name: "tokenIdToRoyaltyInfo",
						nameLocation: "1045:20:16",
						nodeType: "VariableDeclaration",
						scope: 2456,
						src: "1006:59:16",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$2188_storage_$",
							typeString: "mapping(uint256 => struct VWBLProtocol.RoyaltyInfo)"
						},
						typeName: {
							id: 2197,
							keyType: {
								id: 2194,
								name: "uint256",
								nodeType: "ElementaryTypeName",
								src: "1014:7:16",
								typeDescriptions: {
									typeIdentifier: "t_uint256",
									typeString: "uint256"
								}
							},
							nodeType: "Mapping",
							src: "1006:31:16",
							typeDescriptions: {
								typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$2188_storage_$",
								typeString: "mapping(uint256 => struct VWBLProtocol.RoyaltyInfo)"
							},
							valueType: {
								id: 2196,
								nodeType: "UserDefinedTypeName",
								pathNode: {
									id: 2195,
									name: "RoyaltyInfo",
									nodeType: "IdentifierPath",
									referencedDeclaration: 2188,
									src: "1025:11:16"
								},
								referencedDeclaration: 2188,
								src: "1025:11:16",
								typeDescriptions: {
									typeIdentifier: "t_struct$_RoyaltyInfo_$2188_storage_ptr",
									typeString: "struct VWBLProtocol.RoyaltyInfo"
								}
							}
						},
						visibility: "public"
					},
					{
						constant: true,
						functionSelector: "cae6047f",
						id: 2201,
						mutability: "constant",
						name: "INVERSE_BASIS_POINT",
						nameLocation: "1096:19:16",
						nodeType: "VariableDeclaration",
						scope: 2456,
						src: "1072:51:16",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_uint256",
							typeString: "uint256"
						},
						typeName: {
							id: 2199,
							name: "uint256",
							nodeType: "ElementaryTypeName",
							src: "1072:7:16",
							typeDescriptions: {
								typeIdentifier: "t_uint256",
								typeString: "uint256"
							}
						},
						value: {
							hexValue: "3130303030",
							id: 2200,
							isConstant: false,
							isLValue: false,
							isPure: true,
							kind: "number",
							lValueRequested: false,
							nodeType: "Literal",
							src: "1118:5:16",
							typeDescriptions: {
								typeIdentifier: "t_rational_10000_by_1",
								typeString: "int_const 10000"
							},
							value: "10000"
						},
						visibility: "public"
					},
					{
						baseFunctions: [
							331
						],
						body: {
							id: 2226,
							nodeType: "Block",
							src: "1210:162:16",
							statements: [
								{
									expression: {
										"arguments": [
											{
												commonType: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												},
												id: 2218,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												leftExpression: {
													expression: {
														"arguments": [
															{
																baseExpression: {
																	id: 2212,
																	name: "_tokenURIs",
																	nodeType: "Identifier",
																	overloadedDeclarations: [
																	],
																	referencedDeclaration: 2173,
																	src: "1247:10:16",
																	typeDescriptions: {
																		typeIdentifier: "t_mapping$_t_uint256_$_t_string_storage_$",
																		typeString: "mapping(uint256 => string storage ref)"
																	}
																},
																id: 2214,
																indexExpression: {
																	id: 2213,
																	name: "tokenId",
																	nodeType: "Identifier",
																	overloadedDeclarations: [
																	],
																	referencedDeclaration: 2203,
																	src: "1258:7:16",
																	typeDescriptions: {
																		typeIdentifier: "t_uint256",
																		typeString: "uint256"
																	}
																},
																isConstant: false,
																isLValue: true,
																isPure: false,
																lValueRequested: false,
																nodeType: "IndexAccess",
																src: "1247:19:16",
																typeDescriptions: {
																	typeIdentifier: "t_string_storage",
																	typeString: "string storage ref"
																}
															}
														],
														expression: {
															argumentTypes: [
																{
																	typeIdentifier: "t_string_storage",
																	typeString: "string storage ref"
																}
															],
															id: 2211,
															isConstant: false,
															isLValue: false,
															isPure: true,
															lValueRequested: false,
															nodeType: "ElementaryTypeNameExpression",
															src: "1241:5:16",
															typeDescriptions: {
																typeIdentifier: "t_type$_t_bytes_storage_ptr_$",
																typeString: "type(bytes storage pointer)"
															},
															typeName: {
																id: 2210,
																name: "bytes",
																nodeType: "ElementaryTypeName",
																src: "1241:5:16",
																typeDescriptions: {
																}
															}
														},
														id: 2215,
														isConstant: false,
														isLValue: false,
														isPure: false,
														kind: "typeConversion",
														lValueRequested: false,
														names: [
														],
														nodeType: "FunctionCall",
														src: "1241:26:16",
														tryCall: false,
														typeDescriptions: {
															typeIdentifier: "t_bytes_storage_ptr",
															typeString: "bytes storage pointer"
														}
													},
													id: 2216,
													isConstant: false,
													isLValue: false,
													isPure: false,
													lValueRequested: false,
													memberName: "length",
													nodeType: "MemberAccess",
													src: "1241:33:16",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												},
												nodeType: "BinaryOperation",
												operator: "!=",
												rightExpression: {
													hexValue: "30",
													id: 2217,
													isConstant: false,
													isLValue: false,
													isPure: true,
													kind: "number",
													lValueRequested: false,
													nodeType: "Literal",
													src: "1278:1:16",
													typeDescriptions: {
														typeIdentifier: "t_rational_0_by_1",
														typeString: "int_const 0"
													},
													value: "0"
												},
												src: "1241:38:16",
												typeDescriptions: {
													typeIdentifier: "t_bool",
													typeString: "bool"
												}
											},
											{
												hexValue: "4552433732313a20696e76616c696420746f6b656e204944",
												id: 2219,
												isConstant: false,
												isLValue: false,
												isPure: true,
												kind: "string",
												lValueRequested: false,
												nodeType: "Literal",
												src: "1293:26:16",
												typeDescriptions: {
													typeIdentifier: "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
													typeString: "literal_string \"ERC721: invalid token ID\""
												},
												value: "ERC721: invalid token ID"
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bool",
													typeString: "bool"
												},
												{
													typeIdentifier: "t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f",
													typeString: "literal_string \"ERC721: invalid token ID\""
												}
											],
											id: 2209,
											name: "require",
											nodeType: "Identifier",
											overloadedDeclarations: [
												4294967278,
												4294967278
											],
											referencedDeclaration: 4294967278,
											src: "1220:7:16",
											typeDescriptions: {
												typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
												typeString: "function (bool,string memory) pure"
											}
										},
										id: 2220,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "1220:109:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 2221,
									nodeType: "ExpressionStatement",
									src: "1220:109:16"
								},
								{
									expression: {
										baseExpression: {
											id: 2222,
											name: "_tokenURIs",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2173,
											src: "1346:10:16",
											typeDescriptions: {
												typeIdentifier: "t_mapping$_t_uint256_$_t_string_storage_$",
												typeString: "mapping(uint256 => string storage ref)"
											}
										},
										id: 2224,
										indexExpression: {
											id: 2223,
											name: "tokenId",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2203,
											src: "1357:7:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										isConstant: false,
										isLValue: true,
										isPure: false,
										lValueRequested: false,
										nodeType: "IndexAccess",
										src: "1346:19:16",
										typeDescriptions: {
											typeIdentifier: "t_string_storage",
											typeString: "string storage ref"
										}
									},
									functionReturnParameters: 2208,
									id: 2225,
									nodeType: "Return",
									src: "1339:26:16"
								}
							]
						},
						functionSelector: "c87b56dd",
						id: 2227,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "tokenURI",
						nameLocation: "1139:8:16",
						nodeType: "FunctionDefinition",
						overrides: {
							id: 2205,
							nodeType: "OverrideSpecifier",
							overrides: [
							],
							src: "1177:8:16"
						},
						parameters: {
							id: 2204,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2203,
									mutability: "mutable",
									name: "tokenId",
									nameLocation: "1156:7:16",
									nodeType: "VariableDeclaration",
									scope: 2227,
									src: "1148:15:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2202,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "1148:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "1147:17:16"
						},
						returnParameters: {
							id: 2208,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2207,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 2227,
									src: "1195:13:16",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 2206,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "1195:6:16",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								}
							],
							src: "1194:15:16"
						},
						scope: 2456,
						src: "1130:242:16",
						stateMutability: "view",
						virtual: false,
						visibility: "public"
					},
					{
						body: {
							id: 2287,
							nodeType: "Block",
							src: "1565:400:16",
							statements: [
								{
									assignments: [
										2241
									],
									declarations: [
										{
											constant: false,
											id: 2241,
											mutability: "mutable",
											name: "tokenId",
											nameLocation: "1583:7:16",
											nodeType: "VariableDeclaration",
											scope: 2287,
											src: "1575:15:16",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 2240,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "1575:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 2244,
									initialValue: {
										id: 2243,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										nodeType: "UnaryOperation",
										operator: "++",
										prefix: true,
										src: "1593:9:16",
										subExpression: {
											id: 2242,
											name: "counter",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2176,
											src: "1595:7:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "1575:27:16"
								},
								{
									assignments: [
										2247
									],
									declarations: [
										{
											constant: false,
											id: 2247,
											mutability: "mutable",
											name: "tokenInfo",
											nameLocation: "1629:9:16",
											nodeType: "VariableDeclaration",
											scope: 2287,
											src: "1612:26:16",
											stateVariable: false,
											storageLocation: "memory",
											typeDescriptions: {
												typeIdentifier: "t_struct$_TokenInfo_$2183_memory_ptr",
												typeString: "struct VWBLProtocol.TokenInfo"
											},
											typeName: {
												id: 2246,
												nodeType: "UserDefinedTypeName",
												pathNode: {
													id: 2245,
													name: "TokenInfo",
													nodeType: "IdentifierPath",
													referencedDeclaration: 2183,
													src: "1612:9:16"
												},
												referencedDeclaration: 2183,
												src: "1612:9:16",
												typeDescriptions: {
													typeIdentifier: "t_struct$_TokenInfo_$2183_storage_ptr",
													typeString: "struct VWBLProtocol.TokenInfo"
												}
											},
											visibility: "internal"
										}
									],
									id: 2254,
									initialValue: {
										"arguments": [
											{
												id: 2249,
												name: "_documentId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2229,
												src: "1651:11:16",
												typeDescriptions: {
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												}
											},
											{
												expression: {
													id: 2250,
													name: "msg",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 4294967281,
													src: "1664:3:16",
													typeDescriptions: {
														typeIdentifier: "t_magic_message",
														typeString: "msg"
													}
												},
												id: 2251,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												memberName: "sender",
												nodeType: "MemberAccess",
												src: "1664:10:16",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 2252,
												name: "_getKeyURl",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2233,
												src: "1676:10:16",
												typeDescriptions: {
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												},
												{
													typeIdentifier: "t_address",
													typeString: "address"
												},
												{
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												}
											],
											id: 2248,
											name: "TokenInfo",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2183,
											src: "1641:9:16",
											typeDescriptions: {
												typeIdentifier: "t_type$_t_struct$_TokenInfo_$2183_storage_ptr_$",
												typeString: "type(struct VWBLProtocol.TokenInfo storage pointer)"
											}
										},
										id: 2253,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "structConstructorCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "1641:46:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_struct$_TokenInfo_$2183_memory_ptr",
											typeString: "struct VWBLProtocol.TokenInfo memory"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "1612:75:16"
								},
								{
									expression: {
										id: 2259,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											baseExpression: {
												id: 2255,
												name: "tokenIdToTokenInfo",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2193,
												src: "1697:18:16",
												typeDescriptions: {
													typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$2183_storage_$",
													typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo storage ref)"
												}
											},
											id: 2257,
											indexExpression: {
												id: 2256,
												name: "tokenId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2241,
												src: "1716:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											isConstant: false,
											isLValue: true,
											isPure: false,
											lValueRequested: true,
											nodeType: "IndexAccess",
											src: "1697:27:16",
											typeDescriptions: {
												typeIdentifier: "t_struct$_TokenInfo_$2183_storage",
												typeString: "struct VWBLProtocol.TokenInfo storage ref"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 2258,
											name: "tokenInfo",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2247,
											src: "1727:9:16",
											typeDescriptions: {
												typeIdentifier: "t_struct$_TokenInfo_$2183_memory_ptr",
												typeString: "struct VWBLProtocol.TokenInfo memory"
											}
										},
										src: "1697:39:16",
										typeDescriptions: {
											typeIdentifier: "t_struct$_TokenInfo_$2183_storage",
											typeString: "struct VWBLProtocol.TokenInfo storage ref"
										}
									},
									id: 2260,
									nodeType: "ExpressionStatement",
									src: "1697:39:16"
								},
								{
									expression: {
										"arguments": [
											{
												expression: {
													id: 2262,
													name: "msg",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 4294967281,
													src: "1752:3:16",
													typeDescriptions: {
														typeIdentifier: "t_magic_message",
														typeString: "msg"
													}
												},
												id: 2263,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												memberName: "sender",
												nodeType: "MemberAccess",
												src: "1752:10:16",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 2264,
												name: "tokenId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2241,
												src: "1764:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_address",
													typeString: "address"
												},
												{
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											],
											id: 2261,
											name: "_mint",
											nodeType: "Identifier",
											overloadedDeclarations: [
												2288,
												713
											],
											referencedDeclaration: 713,
											src: "1746:5:16",
											typeDescriptions: {
												typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
												typeString: "function (address,uint256)"
											}
										},
										id: 2265,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "1746:26:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 2266,
									nodeType: "ExpressionStatement",
									src: "1746:26:16"
								},
								{
									expression: {
										id: 2271,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											baseExpression: {
												id: 2267,
												name: "_tokenURIs",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2173,
												src: "1782:10:16",
												typeDescriptions: {
													typeIdentifier: "t_mapping$_t_uint256_$_t_string_storage_$",
													typeString: "mapping(uint256 => string storage ref)"
												}
											},
											id: 2269,
											indexExpression: {
												id: 2268,
												name: "tokenId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2241,
												src: "1793:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											isConstant: false,
											isLValue: true,
											isPure: false,
											lValueRequested: true,
											nodeType: "IndexAccess",
											src: "1782:19:16",
											typeDescriptions: {
												typeIdentifier: "t_string_storage",
												typeString: "string storage ref"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 2270,
											name: "_metadataURl",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2231,
											src: "1804:12:16",
											typeDescriptions: {
												typeIdentifier: "t_string_memory_ptr",
												typeString: "string memory"
											}
										},
										src: "1782:34:16",
										typeDescriptions: {
											typeIdentifier: "t_string_storage",
											typeString: "string storage ref"
										}
									},
									id: 2272,
									nodeType: "ExpressionStatement",
									src: "1782:34:16"
								},
								{
									condition: {
										commonType: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										},
										id: 2275,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											id: 2273,
											name: "_royaltiesPercentage",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2235,
											src: "1830:20:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "BinaryOperation",
										operator: ">",
										rightExpression: {
											hexValue: "30",
											id: 2274,
											isConstant: false,
											isLValue: false,
											isPure: true,
											kind: "number",
											lValueRequested: false,
											nodeType: "Literal",
											src: "1853:1:16",
											typeDescriptions: {
												typeIdentifier: "t_rational_0_by_1",
												typeString: "int_const 0"
											},
											value: "0"
										},
										src: "1830:24:16",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									id: 2284,
									nodeType: "IfStatement",
									src: "1826:109:16",
									trueBody: {
										id: 2283,
										nodeType: "Block",
										src: "1856:79:16",
										statements: [
											{
												expression: {
													"arguments": [
														{
															id: 2277,
															name: "tokenId",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 2241,
															src: "1882:7:16",
															typeDescriptions: {
																typeIdentifier: "t_uint256",
																typeString: "uint256"
															}
														},
														{
															expression: {
																id: 2278,
																name: "msg",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 4294967281,
																src: "1891:3:16",
																typeDescriptions: {
																	typeIdentifier: "t_magic_message",
																	typeString: "msg"
																}
															},
															id: 2279,
															isConstant: false,
															isLValue: false,
															isPure: false,
															lValueRequested: false,
															memberName: "sender",
															nodeType: "MemberAccess",
															src: "1891:10:16",
															typeDescriptions: {
																typeIdentifier: "t_address",
																typeString: "address"
															}
														},
														{
															id: 2280,
															name: "_royaltiesPercentage",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 2235,
															src: "1903:20:16",
															typeDescriptions: {
																typeIdentifier: "t_uint256",
																typeString: "uint256"
															}
														}
													],
													expression: {
														argumentTypes: [
															{
																typeIdentifier: "t_uint256",
																typeString: "uint256"
															},
															{
																typeIdentifier: "t_address",
																typeString: "address"
															},
															{
																typeIdentifier: "t_uint256",
																typeString: "uint256"
															}
														],
														id: 2276,
														name: "_setRoyalty",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 2455,
														src: "1870:11:16",
														typeDescriptions: {
															typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
															typeString: "function (uint256,address,uint256)"
														}
													},
													id: 2281,
													isConstant: false,
													isLValue: false,
													isPure: false,
													kind: "functionCall",
													lValueRequested: false,
													names: [
													],
													nodeType: "FunctionCall",
													src: "1870:54:16",
													tryCall: false,
													typeDescriptions: {
														typeIdentifier: "t_tuple$__$",
														typeString: "tuple()"
													}
												},
												id: 2282,
												nodeType: "ExpressionStatement",
												src: "1870:54:16"
											}
										]
									}
								},
								{
									expression: {
										id: 2285,
										name: "tokenId",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 2241,
										src: "1951:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									functionReturnParameters: 2239,
									id: 2286,
									nodeType: "Return",
									src: "1944:14:16"
								}
							]
						},
						id: 2288,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "_mint",
						nameLocation: "1387:5:16",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 2236,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2229,
									mutability: "mutable",
									name: "_documentId",
									nameLocation: "1410:11:16",
									nodeType: "VariableDeclaration",
									scope: 2288,
									src: "1402:19:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_bytes32",
										typeString: "bytes32"
									},
									typeName: {
										id: 2228,
										name: "bytes32",
										nodeType: "ElementaryTypeName",
										src: "1402:7:16",
										typeDescriptions: {
											typeIdentifier: "t_bytes32",
											typeString: "bytes32"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2231,
									mutability: "mutable",
									name: "_metadataURl",
									nameLocation: "1446:12:16",
									nodeType: "VariableDeclaration",
									scope: 2288,
									src: "1432:26:16",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 2230,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "1432:6:16",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2233,
									mutability: "mutable",
									name: "_getKeyURl",
									nameLocation: "1482:10:16",
									nodeType: "VariableDeclaration",
									scope: 2288,
									src: "1468:24:16",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 2232,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "1468:6:16",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2235,
									mutability: "mutable",
									name: "_royaltiesPercentage",
									nameLocation: "1511:20:16",
									nodeType: "VariableDeclaration",
									scope: 2288,
									src: "1503:28:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2234,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "1503:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "1392:145:16"
						},
						returnParameters: {
							id: 2239,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2238,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 2288,
									src: "1556:7:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2237,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "1556:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "1555:9:16"
						},
						scope: 2456,
						src: "1378:587:16",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "internal"
					},
					{
						body: {
							id: 2367,
							nodeType: "Block",
							src: "2080:514:16",
							statements: [
								{
									assignments: [
										2297
									],
									declarations: [
										{
											constant: false,
											id: 2297,
											mutability: "mutable",
											name: "resultCount",
											nameLocation: "2098:11:16",
											nodeType: "VariableDeclaration",
											scope: 2367,
											src: "2090:19:16",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 2296,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "2090:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 2299,
									initialValue: {
										hexValue: "30",
										id: 2298,
										isConstant: false,
										isLValue: false,
										isPure: true,
										kind: "number",
										lValueRequested: false,
										nodeType: "Literal",
										src: "2112:1:16",
										typeDescriptions: {
											typeIdentifier: "t_rational_0_by_1",
											typeString: "int_const 0"
										},
										value: "0"
									},
									nodeType: "VariableDeclarationStatement",
									src: "2090:23:16"
								},
								{
									body: {
										id: 2321,
										nodeType: "Block",
										src: "2162:121:16",
										statements: [
											{
												condition: {
													commonType: {
														typeIdentifier: "t_address",
														typeString: "address"
													},
													id: 2315,
													isConstant: false,
													isLValue: false,
													isPure: false,
													lValueRequested: false,
													leftExpression: {
														expression: {
															baseExpression: {
																id: 2310,
																name: "tokenIdToTokenInfo",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 2193,
																src: "2180:18:16",
																typeDescriptions: {
																	typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$2183_storage_$",
																	typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo storage ref)"
																}
															},
															id: 2312,
															indexExpression: {
																id: 2311,
																name: "i",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 2301,
																src: "2199:1:16",
																typeDescriptions: {
																	typeIdentifier: "t_uint256",
																	typeString: "uint256"
																}
															},
															isConstant: false,
															isLValue: true,
															isPure: false,
															lValueRequested: false,
															nodeType: "IndexAccess",
															src: "2180:21:16",
															typeDescriptions: {
																typeIdentifier: "t_struct$_TokenInfo_$2183_storage",
																typeString: "struct VWBLProtocol.TokenInfo storage ref"
															}
														},
														id: 2313,
														isConstant: false,
														isLValue: true,
														isPure: false,
														lValueRequested: false,
														memberName: "minterAddress",
														nodeType: "MemberAccess",
														referencedDeclaration: 2180,
														src: "2180:35:16",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													},
													nodeType: "BinaryOperation",
													operator: "==",
													rightExpression: {
														id: 2314,
														name: "minter",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 2290,
														src: "2219:6:16",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													},
													src: "2180:45:16",
													typeDescriptions: {
														typeIdentifier: "t_bool",
														typeString: "bool"
													}
												},
												id: 2320,
												nodeType: "IfStatement",
												src: "2176:97:16",
												trueBody: {
													id: 2319,
													nodeType: "Block",
													src: "2227:46:16",
													statements: [
														{
															expression: {
																id: 2317,
																isConstant: false,
																isLValue: false,
																isPure: false,
																lValueRequested: false,
																nodeType: "UnaryOperation",
																operator: "++",
																prefix: false,
																src: "2245:13:16",
																subExpression: {
																	id: 2316,
																	name: "resultCount",
																	nodeType: "Identifier",
																	overloadedDeclarations: [
																	],
																	referencedDeclaration: 2297,
																	src: "2245:11:16",
																	typeDescriptions: {
																		typeIdentifier: "t_uint256",
																		typeString: "uint256"
																	}
																},
																typeDescriptions: {
																	typeIdentifier: "t_uint256",
																	typeString: "uint256"
																}
															},
															id: 2318,
															nodeType: "ExpressionStatement",
															src: "2245:13:16"
														}
													]
												}
											}
										]
									},
									condition: {
										commonType: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										},
										id: 2306,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											id: 2304,
											name: "i",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2301,
											src: "2143:1:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "BinaryOperation",
										operator: "<=",
										rightExpression: {
											id: 2305,
											name: "counter",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2176,
											src: "2148:7:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										src: "2143:12:16",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									id: 2322,
									initializationExpression: {
										assignments: [
											2301
										],
										declarations: [
											{
												constant: false,
												id: 2301,
												mutability: "mutable",
												name: "i",
												nameLocation: "2136:1:16",
												nodeType: "VariableDeclaration",
												scope: 2322,
												src: "2128:9:16",
												stateVariable: false,
												storageLocation: "default",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												},
												typeName: {
													id: 2300,
													name: "uint256",
													nodeType: "ElementaryTypeName",
													src: "2128:7:16",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												},
												visibility: "internal"
											}
										],
										id: 2303,
										initialValue: {
											hexValue: "31",
											id: 2302,
											isConstant: false,
											isLValue: false,
											isPure: true,
											kind: "number",
											lValueRequested: false,
											nodeType: "Literal",
											src: "2140:1:16",
											typeDescriptions: {
												typeIdentifier: "t_rational_1_by_1",
												typeString: "int_const 1"
											},
											value: "1"
										},
										nodeType: "VariableDeclarationStatement",
										src: "2128:13:16"
									},
									loopExpression: {
										expression: {
											id: 2308,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											nodeType: "UnaryOperation",
											operator: "++",
											prefix: false,
											src: "2157:3:16",
											subExpression: {
												id: 2307,
												name: "i",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2301,
												src: "2157:1:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										id: 2309,
										nodeType: "ExpressionStatement",
										src: "2157:3:16"
									},
									nodeType: "ForStatement",
									src: "2123:160:16"
								},
								{
									assignments: [
										2327
									],
									declarations: [
										{
											constant: false,
											id: 2327,
											mutability: "mutable",
											name: "tokens",
											nameLocation: "2309:6:16",
											nodeType: "VariableDeclaration",
											scope: 2367,
											src: "2292:23:16",
											stateVariable: false,
											storageLocation: "memory",
											typeDescriptions: {
												typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
												typeString: "uint256[]"
											},
											typeName: {
												baseType: {
													id: 2325,
													name: "uint256",
													nodeType: "ElementaryTypeName",
													src: "2292:7:16",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												},
												id: 2326,
												nodeType: "ArrayTypeName",
												src: "2292:9:16",
												typeDescriptions: {
													typeIdentifier: "t_array$_t_uint256_$dyn_storage_ptr",
													typeString: "uint256[]"
												}
											},
											visibility: "internal"
										}
									],
									id: 2333,
									initialValue: {
										"arguments": [
											{
												id: 2331,
												name: "resultCount",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2297,
												src: "2332:11:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											],
											id: 2330,
											isConstant: false,
											isLValue: false,
											isPure: true,
											lValueRequested: false,
											nodeType: "NewExpression",
											src: "2318:13:16",
											typeDescriptions: {
												typeIdentifier: "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
												typeString: "function (uint256) pure returns (uint256[] memory)"
											},
											typeName: {
												baseType: {
													id: 2328,
													name: "uint256",
													nodeType: "ElementaryTypeName",
													src: "2322:7:16",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												},
												id: 2329,
												nodeType: "ArrayTypeName",
												src: "2322:9:16",
												typeDescriptions: {
													typeIdentifier: "t_array$_t_uint256_$dyn_storage_ptr",
													typeString: "uint256[]"
												}
											}
										},
										id: 2332,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "2318:26:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
											typeString: "uint256[] memory"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "2292:52:16"
								},
								{
									assignments: [
										2335
									],
									declarations: [
										{
											constant: false,
											id: 2335,
											mutability: "mutable",
											name: "currentCounter",
											nameLocation: "2362:14:16",
											nodeType: "VariableDeclaration",
											scope: 2367,
											src: "2354:22:16",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 2334,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "2354:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 2337,
									initialValue: {
										hexValue: "30",
										id: 2336,
										isConstant: false,
										isLValue: false,
										isPure: true,
										kind: "number",
										lValueRequested: false,
										nodeType: "Literal",
										src: "2379:1:16",
										typeDescriptions: {
											typeIdentifier: "t_rational_0_by_1",
											typeString: "int_const 0"
										},
										value: "0"
									},
									nodeType: "VariableDeclarationStatement",
									src: "2354:26:16"
								},
								{
									body: {
										id: 2363,
										nodeType: "Block",
										src: "2429:136:16",
										statements: [
											{
												condition: {
													commonType: {
														typeIdentifier: "t_address",
														typeString: "address"
													},
													id: 2353,
													isConstant: false,
													isLValue: false,
													isPure: false,
													lValueRequested: false,
													leftExpression: {
														expression: {
															baseExpression: {
																id: 2348,
																name: "tokenIdToTokenInfo",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 2193,
																src: "2447:18:16",
																typeDescriptions: {
																	typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$2183_storage_$",
																	typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo storage ref)"
																}
															},
															id: 2350,
															indexExpression: {
																id: 2349,
																name: "i",
																nodeType: "Identifier",
																overloadedDeclarations: [
																],
																referencedDeclaration: 2339,
																src: "2466:1:16",
																typeDescriptions: {
																	typeIdentifier: "t_uint256",
																	typeString: "uint256"
																}
															},
															isConstant: false,
															isLValue: true,
															isPure: false,
															lValueRequested: false,
															nodeType: "IndexAccess",
															src: "2447:21:16",
															typeDescriptions: {
																typeIdentifier: "t_struct$_TokenInfo_$2183_storage",
																typeString: "struct VWBLProtocol.TokenInfo storage ref"
															}
														},
														id: 2351,
														isConstant: false,
														isLValue: true,
														isPure: false,
														lValueRequested: false,
														memberName: "minterAddress",
														nodeType: "MemberAccess",
														referencedDeclaration: 2180,
														src: "2447:35:16",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													},
													nodeType: "BinaryOperation",
													operator: "==",
													rightExpression: {
														id: 2352,
														name: "minter",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 2290,
														src: "2486:6:16",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													},
													src: "2447:45:16",
													typeDescriptions: {
														typeIdentifier: "t_bool",
														typeString: "bool"
													}
												},
												id: 2362,
												nodeType: "IfStatement",
												src: "2443:112:16",
												trueBody: {
													id: 2361,
													nodeType: "Block",
													src: "2494:61:16",
													statements: [
														{
															expression: {
																id: 2359,
																isConstant: false,
																isLValue: false,
																isPure: false,
																lValueRequested: false,
																leftHandSide: {
																	baseExpression: {
																		id: 2354,
																		name: "tokens",
																		nodeType: "Identifier",
																		overloadedDeclarations: [
																		],
																		referencedDeclaration: 2327,
																		src: "2512:6:16",
																		typeDescriptions: {
																			typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
																			typeString: "uint256[] memory"
																		}
																	},
																	id: 2357,
																	indexExpression: {
																		id: 2356,
																		isConstant: false,
																		isLValue: false,
																		isPure: false,
																		lValueRequested: false,
																		nodeType: "UnaryOperation",
																		operator: "++",
																		prefix: false,
																		src: "2519:16:16",
																		subExpression: {
																			id: 2355,
																			name: "currentCounter",
																			nodeType: "Identifier",
																			overloadedDeclarations: [
																			],
																			referencedDeclaration: 2335,
																			src: "2519:14:16",
																			typeDescriptions: {
																				typeIdentifier: "t_uint256",
																				typeString: "uint256"
																			}
																		},
																		typeDescriptions: {
																			typeIdentifier: "t_uint256",
																			typeString: "uint256"
																		}
																	},
																	isConstant: false,
																	isLValue: true,
																	isPure: false,
																	lValueRequested: true,
																	nodeType: "IndexAccess",
																	src: "2512:24:16",
																	typeDescriptions: {
																		typeIdentifier: "t_uint256",
																		typeString: "uint256"
																	}
																},
																nodeType: "Assignment",
																operator: "=",
																rightHandSide: {
																	id: 2358,
																	name: "i",
																	nodeType: "Identifier",
																	overloadedDeclarations: [
																	],
																	referencedDeclaration: 2339,
																	src: "2539:1:16",
																	typeDescriptions: {
																		typeIdentifier: "t_uint256",
																		typeString: "uint256"
																	}
																},
																src: "2512:28:16",
																typeDescriptions: {
																	typeIdentifier: "t_uint256",
																	typeString: "uint256"
																}
															},
															id: 2360,
															nodeType: "ExpressionStatement",
															src: "2512:28:16"
														}
													]
												}
											}
										]
									},
									condition: {
										commonType: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										},
										id: 2344,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											id: 2342,
											name: "i",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2339,
											src: "2410:1:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "BinaryOperation",
										operator: "<=",
										rightExpression: {
											id: 2343,
											name: "counter",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2176,
											src: "2415:7:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										src: "2410:12:16",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									id: 2364,
									initializationExpression: {
										assignments: [
											2339
										],
										declarations: [
											{
												constant: false,
												id: 2339,
												mutability: "mutable",
												name: "i",
												nameLocation: "2403:1:16",
												nodeType: "VariableDeclaration",
												scope: 2364,
												src: "2395:9:16",
												stateVariable: false,
												storageLocation: "default",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												},
												typeName: {
													id: 2338,
													name: "uint256",
													nodeType: "ElementaryTypeName",
													src: "2395:7:16",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												},
												visibility: "internal"
											}
										],
										id: 2341,
										initialValue: {
											hexValue: "31",
											id: 2340,
											isConstant: false,
											isLValue: false,
											isPure: true,
											kind: "number",
											lValueRequested: false,
											nodeType: "Literal",
											src: "2407:1:16",
											typeDescriptions: {
												typeIdentifier: "t_rational_1_by_1",
												typeString: "int_const 1"
											},
											value: "1"
										},
										nodeType: "VariableDeclarationStatement",
										src: "2395:13:16"
									},
									loopExpression: {
										expression: {
											id: 2346,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											nodeType: "UnaryOperation",
											operator: "++",
											prefix: false,
											src: "2424:3:16",
											subExpression: {
												id: 2345,
												name: "i",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2339,
												src: "2424:1:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										id: 2347,
										nodeType: "ExpressionStatement",
										src: "2424:3:16"
									},
									nodeType: "ForStatement",
									src: "2390:175:16"
								},
								{
									expression: {
										id: 2365,
										name: "tokens",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 2327,
										src: "2581:6:16",
										typeDescriptions: {
											typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
											typeString: "uint256[] memory"
										}
									},
									functionReturnParameters: 2295,
									id: 2366,
									nodeType: "Return",
									src: "2574:13:16"
								}
							]
						},
						functionSelector: "ce5af336",
						id: 2368,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "getTokenByMinter",
						nameLocation: "1980:16:16",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 2291,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2290,
									mutability: "mutable",
									name: "minter",
									nameLocation: "2005:6:16",
									nodeType: "VariableDeclaration",
									scope: 2368,
									src: "1997:14:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2289,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "1997:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "1996:16:16"
						},
						returnParameters: {
							id: 2295,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2294,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 2368,
									src: "2058:16:16",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
										typeString: "uint256[]"
									},
									typeName: {
										baseType: {
											id: 2292,
											name: "uint256",
											nodeType: "ElementaryTypeName",
											src: "2058:7:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										id: 2293,
										nodeType: "ArrayTypeName",
										src: "2058:9:16",
										typeDescriptions: {
											typeIdentifier: "t_array$_t_uint256_$dyn_storage_ptr",
											typeString: "uint256[]"
										}
									},
									visibility: "internal"
								}
							],
							src: "2057:18:16"
						},
						scope: 2456,
						src: "1971:623:16",
						stateMutability: "view",
						virtual: false,
						visibility: "public"
					},
					{
						baseFunctions: [
							1173,
							2074
						],
						body: {
							id: 2390,
							nodeType: "Block",
							src: "2762:105:16",
							statements: [
								{
									expression: {
										commonType: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										},
										id: 2388,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											commonType: {
												typeIdentifier: "t_bytes4",
												typeString: "bytes4"
											},
											id: 2383,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											leftExpression: {
												id: 2378,
												name: "interfaceId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2370,
												src: "2779:11:16",
												typeDescriptions: {
													typeIdentifier: "t_bytes4",
													typeString: "bytes4"
												}
											},
											nodeType: "BinaryOperation",
											operator: "==",
											rightExpression: {
												expression: {
													"arguments": [
														{
															id: 2380,
															name: "IERC2981",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 123,
															src: "2799:8:16",
															typeDescriptions: {
																typeIdentifier: "t_type$_t_contract$_IERC2981_$123_$",
																typeString: "type(contract IERC2981)"
															}
														}
													],
													expression: {
														argumentTypes: [
															{
																typeIdentifier: "t_type$_t_contract$_IERC2981_$123_$",
																typeString: "type(contract IERC2981)"
															}
														],
														id: 2379,
														name: "type",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 4294967269,
														src: "2794:4:16",
														typeDescriptions: {
															typeIdentifier: "t_function_metatype_pure$__$returns$__$",
															typeString: "function () pure"
														}
													},
													id: 2381,
													isConstant: false,
													isLValue: false,
													isPure: true,
													kind: "functionCall",
													lValueRequested: false,
													names: [
													],
													nodeType: "FunctionCall",
													src: "2794:14:16",
													tryCall: false,
													typeDescriptions: {
														typeIdentifier: "t_magic_meta_type_t_contract$_IERC2981_$123",
														typeString: "type(contract IERC2981)"
													}
												},
												id: 2382,
												isConstant: false,
												isLValue: false,
												isPure: true,
												lValueRequested: false,
												memberName: "interfaceId",
												nodeType: "MemberAccess",
												src: "2794:26:16",
												typeDescriptions: {
													typeIdentifier: "t_bytes4",
													typeString: "bytes4"
												}
											},
											src: "2779:41:16",
											typeDescriptions: {
												typeIdentifier: "t_bool",
												typeString: "bool"
											}
										},
										nodeType: "BinaryOperation",
										operator: "||",
										rightExpression: {
											"arguments": [
												{
													id: 2386,
													name: "interfaceId",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 2370,
													src: "2848:11:16",
													typeDescriptions: {
														typeIdentifier: "t_bytes4",
														typeString: "bytes4"
													}
												}
											],
											expression: {
												argumentTypes: [
													{
														typeIdentifier: "t_bytes4",
														typeString: "bytes4"
													}
												],
												expression: {
													id: 2384,
													name: "super",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 4294967271,
													src: "2824:5:16",
													typeDescriptions: {
														typeIdentifier: "t_type$_t_super$_VWBLProtocol_$2456_$",
														typeString: "type(contract super VWBLProtocol)"
													}
												},
												id: 2385,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												memberName: "supportsInterface",
												nodeType: "MemberAccess",
												referencedDeclaration: 1173,
												src: "2824:23:16",
												typeDescriptions: {
													typeIdentifier: "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
													typeString: "function (bytes4) view returns (bool)"
												}
											},
											id: 2387,
											isConstant: false,
											isLValue: false,
											isPure: false,
											kind: "functionCall",
											lValueRequested: false,
											names: [
											],
											nodeType: "FunctionCall",
											src: "2824:36:16",
											tryCall: false,
											typeDescriptions: {
												typeIdentifier: "t_bool",
												typeString: "bool"
											}
										},
										src: "2779:81:16",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									functionReturnParameters: 2377,
									id: 2389,
									nodeType: "Return",
									src: "2772:88:16"
								}
							]
						},
						functionSelector: "01ffc9a7",
						id: 2391,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "supportsInterface",
						nameLocation: "2609:17:16",
						nodeType: "FunctionDefinition",
						overrides: {
							id: 2374,
							nodeType: "OverrideSpecifier",
							overrides: [
								{
									id: 2372,
									name: "IERC165",
									nodeType: "IdentifierPath",
									referencedDeclaration: 2075,
									src: "2708:7:16"
								},
								{
									id: 2373,
									name: "ERC721Enumerable",
									nodeType: "IdentifierPath",
									referencedDeclaration: 1461,
									src: "2717:16:16"
								}
							],
							src: "2699:35:16"
						},
						parameters: {
							id: 2371,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2370,
									mutability: "mutable",
									name: "interfaceId",
									nameLocation: "2634:11:16",
									nodeType: "VariableDeclaration",
									scope: 2391,
									src: "2627:18:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_bytes4",
										typeString: "bytes4"
									},
									typeName: {
										id: 2369,
										name: "bytes4",
										nodeType: "ElementaryTypeName",
										src: "2627:6:16",
										typeDescriptions: {
											typeIdentifier: "t_bytes4",
											typeString: "bytes4"
										}
									},
									visibility: "internal"
								}
							],
							src: "2626:20:16"
						},
						returnParameters: {
							id: 2377,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2376,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 2391,
									src: "2752:4:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_bool",
										typeString: "bool"
									},
									typeName: {
										id: 2375,
										name: "bool",
										nodeType: "ElementaryTypeName",
										src: "2752:4:16",
										typeDescriptions: {
											typeIdentifier: "t_bool",
											typeString: "bool"
										}
									},
									visibility: "internal"
								}
							],
							src: "2751:6:16"
						},
						scope: 2456,
						src: "2600:267:16",
						stateMutability: "view",
						virtual: true,
						visibility: "public"
					},
					{
						baseFunctions: [
							122
						],
						body: {
							id: 2425,
							nodeType: "Block",
							src: "3041:231:16",
							statements: [
								{
									assignments: [
										2405
									],
									declarations: [
										{
											constant: false,
											id: 2405,
											mutability: "mutable",
											name: "royaltyInfo",
											nameLocation: "3070:11:16",
											nodeType: "VariableDeclaration",
											scope: 2425,
											src: "3051:30:16",
											stateVariable: false,
											storageLocation: "memory",
											typeDescriptions: {
												typeIdentifier: "t_struct$_RoyaltyInfo_$2188_memory_ptr",
												typeString: "struct VWBLProtocol.RoyaltyInfo"
											},
											typeName: {
												id: 2404,
												nodeType: "UserDefinedTypeName",
												pathNode: {
													id: 2403,
													name: "RoyaltyInfo",
													nodeType: "IdentifierPath",
													referencedDeclaration: 2188,
													src: "3051:11:16"
												},
												referencedDeclaration: 2188,
												src: "3051:11:16",
												typeDescriptions: {
													typeIdentifier: "t_struct$_RoyaltyInfo_$2188_storage_ptr",
													typeString: "struct VWBLProtocol.RoyaltyInfo"
												}
											},
											visibility: "internal"
										}
									],
									id: 2409,
									initialValue: {
										baseExpression: {
											id: 2406,
											name: "tokenIdToRoyaltyInfo",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2198,
											src: "3084:20:16",
											typeDescriptions: {
												typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$2188_storage_$",
												typeString: "mapping(uint256 => struct VWBLProtocol.RoyaltyInfo storage ref)"
											}
										},
										id: 2408,
										indexExpression: {
											id: 2407,
											name: "_tokenId",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2393,
											src: "3105:8:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										isConstant: false,
										isLValue: true,
										isPure: false,
										lValueRequested: false,
										nodeType: "IndexAccess",
										src: "3084:30:16",
										typeDescriptions: {
											typeIdentifier: "t_struct$_RoyaltyInfo_$2188_storage",
											typeString: "struct VWBLProtocol.RoyaltyInfo storage ref"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "3051:63:16"
								},
								{
									assignments: [
										2411
									],
									declarations: [
										{
											constant: false,
											id: 2411,
											mutability: "mutable",
											name: "_royalties",
											nameLocation: "3132:10:16",
											nodeType: "VariableDeclaration",
											scope: 2425,
											src: "3124:18:16",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 2410,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "3124:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 2419,
									initialValue: {
										commonType: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										},
										id: 2418,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftExpression: {
											components: [
												{
													commonType: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													},
													id: 2415,
													isConstant: false,
													isLValue: false,
													isPure: false,
													lValueRequested: false,
													leftExpression: {
														id: 2412,
														name: "_salePrice",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 2395,
														src: "3146:10:16",
														typeDescriptions: {
															typeIdentifier: "t_uint256",
															typeString: "uint256"
														}
													},
													nodeType: "BinaryOperation",
													operator: "*",
													rightExpression: {
														expression: {
															id: 2413,
															name: "royaltyInfo",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 2405,
															src: "3159:11:16",
															typeDescriptions: {
																typeIdentifier: "t_struct$_RoyaltyInfo_$2188_memory_ptr",
																typeString: "struct VWBLProtocol.RoyaltyInfo memory"
															}
														},
														id: 2414,
														isConstant: false,
														isLValue: true,
														isPure: false,
														lValueRequested: false,
														memberName: "royaltiesPercentage",
														nodeType: "MemberAccess",
														referencedDeclaration: 2187,
														src: "3159:31:16",
														typeDescriptions: {
															typeIdentifier: "t_uint256",
															typeString: "uint256"
														}
													},
													src: "3146:44:16",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												}
											],
											id: 2416,
											isConstant: false,
											isInlineArray: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											nodeType: "TupleExpression",
											src: "3145:46:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "BinaryOperation",
										operator: "/",
										rightExpression: {
											id: 2417,
											name: "INVERSE_BASIS_POINT",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2201,
											src: "3194:19:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										src: "3145:68:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "3124:89:16"
								},
								{
									expression: {
										components: [
											{
												expression: {
													id: 2420,
													name: "royaltyInfo",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 2405,
													src: "3231:11:16",
													typeDescriptions: {
														typeIdentifier: "t_struct$_RoyaltyInfo_$2188_memory_ptr",
														typeString: "struct VWBLProtocol.RoyaltyInfo memory"
													}
												},
												id: 2421,
												isConstant: false,
												isLValue: true,
												isPure: false,
												lValueRequested: false,
												memberName: "recipient",
												nodeType: "MemberAccess",
												referencedDeclaration: 2185,
												src: "3231:21:16",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 2422,
												name: "_royalties",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2411,
												src: "3254:10:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										id: 2423,
										isConstant: false,
										isInlineArray: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										nodeType: "TupleExpression",
										src: "3230:35:16",
										typeDescriptions: {
											typeIdentifier: "t_tuple$_t_address_$_t_uint256_$",
											typeString: "tuple(address,uint256)"
										}
									},
									functionReturnParameters: 2402,
									id: 2424,
									nodeType: "Return",
									src: "3223:42:16"
								}
							]
						},
						functionSelector: "2a55205a",
						id: 2426,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "royaltyInfo",
						nameLocation: "2882:11:16",
						nodeType: "FunctionDefinition",
						overrides: {
							id: 2397,
							nodeType: "OverrideSpecifier",
							overrides: [
							],
							src: "2970:8:16"
						},
						parameters: {
							id: 2396,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2393,
									mutability: "mutable",
									name: "_tokenId",
									nameLocation: "2902:8:16",
									nodeType: "VariableDeclaration",
									scope: 2426,
									src: "2894:16:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2392,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "2894:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2395,
									mutability: "mutable",
									name: "_salePrice",
									nameLocation: "2920:10:16",
									nodeType: "VariableDeclaration",
									scope: 2426,
									src: "2912:18:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2394,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "2912:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "2893:38:16"
						},
						returnParameters: {
							id: 2402,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2399,
									mutability: "mutable",
									name: "receiver",
									nameLocation: "3004:8:16",
									nodeType: "VariableDeclaration",
									scope: 2426,
									src: "2996:16:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2398,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "2996:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2401,
									mutability: "mutable",
									name: "royaltyAmount",
									nameLocation: "3022:13:16",
									nodeType: "VariableDeclaration",
									scope: 2426,
									src: "3014:21:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2400,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "3014:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "2995:41:16"
						},
						scope: 2456,
						src: "2873:399:16",
						stateMutability: "view",
						virtual: false,
						visibility: "external"
					},
					{
						body: {
							id: 2454,
							nodeType: "Block",
							src: "3406:189:16",
							statements: [
								{
									assignments: [
										2437
									],
									declarations: [
										{
											constant: false,
											id: 2437,
											mutability: "mutable",
											name: "royaltyInfo",
											nameLocation: "3436:11:16",
											nodeType: "VariableDeclaration",
											scope: 2454,
											src: "3416:31:16",
											stateVariable: false,
											storageLocation: "storage",
											typeDescriptions: {
												typeIdentifier: "t_struct$_RoyaltyInfo_$2188_storage_ptr",
												typeString: "struct VWBLProtocol.RoyaltyInfo"
											},
											typeName: {
												id: 2436,
												nodeType: "UserDefinedTypeName",
												pathNode: {
													id: 2435,
													name: "RoyaltyInfo",
													nodeType: "IdentifierPath",
													referencedDeclaration: 2188,
													src: "3416:11:16"
												},
												referencedDeclaration: 2188,
												src: "3416:11:16",
												typeDescriptions: {
													typeIdentifier: "t_struct$_RoyaltyInfo_$2188_storage_ptr",
													typeString: "struct VWBLProtocol.RoyaltyInfo"
												}
											},
											visibility: "internal"
										}
									],
									id: 2441,
									initialValue: {
										baseExpression: {
											id: 2438,
											name: "tokenIdToRoyaltyInfo",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2198,
											src: "3450:20:16",
											typeDescriptions: {
												typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$2188_storage_$",
												typeString: "mapping(uint256 => struct VWBLProtocol.RoyaltyInfo storage ref)"
											}
										},
										id: 2440,
										indexExpression: {
											id: 2439,
											name: "_tokenId",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2428,
											src: "3471:8:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										isConstant: false,
										isLValue: true,
										isPure: false,
										lValueRequested: false,
										nodeType: "IndexAccess",
										src: "3450:30:16",
										typeDescriptions: {
											typeIdentifier: "t_struct$_RoyaltyInfo_$2188_storage",
											typeString: "struct VWBLProtocol.RoyaltyInfo storage ref"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "3416:64:16"
								},
								{
									expression: {
										id: 2446,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											expression: {
												id: 2442,
												name: "royaltyInfo",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2437,
												src: "3490:11:16",
												typeDescriptions: {
													typeIdentifier: "t_struct$_RoyaltyInfo_$2188_storage_ptr",
													typeString: "struct VWBLProtocol.RoyaltyInfo storage pointer"
												}
											},
											id: 2444,
											isConstant: false,
											isLValue: true,
											isPure: false,
											lValueRequested: true,
											memberName: "recipient",
											nodeType: "MemberAccess",
											referencedDeclaration: 2185,
											src: "3490:21:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 2445,
											name: "_recipient",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2430,
											src: "3514:10:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										src: "3490:34:16",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									id: 2447,
									nodeType: "ExpressionStatement",
									src: "3490:34:16"
								},
								{
									expression: {
										id: 2452,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											expression: {
												id: 2448,
												name: "royaltyInfo",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2437,
												src: "3534:11:16",
												typeDescriptions: {
													typeIdentifier: "t_struct$_RoyaltyInfo_$2188_storage_ptr",
													typeString: "struct VWBLProtocol.RoyaltyInfo storage pointer"
												}
											},
											id: 2450,
											isConstant: false,
											isLValue: true,
											isPure: false,
											lValueRequested: true,
											memberName: "royaltiesPercentage",
											nodeType: "MemberAccess",
											referencedDeclaration: 2187,
											src: "3534:31:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 2451,
											name: "_royaltiesPercentage",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2432,
											src: "3568:20:16",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											}
										},
										src: "3534:54:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									id: 2453,
									nodeType: "ExpressionStatement",
									src: "3534:54:16"
								}
							]
						},
						id: 2455,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "_setRoyalty",
						nameLocation: "3287:11:16",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 2433,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2428,
									mutability: "mutable",
									name: "_tokenId",
									nameLocation: "3316:8:16",
									nodeType: "VariableDeclaration",
									scope: 2455,
									src: "3308:16:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2427,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "3308:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2430,
									mutability: "mutable",
									name: "_recipient",
									nameLocation: "3342:10:16",
									nodeType: "VariableDeclaration",
									scope: 2455,
									src: "3334:18:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2429,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3334:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2432,
									mutability: "mutable",
									name: "_royaltiesPercentage",
									nameLocation: "3370:20:16",
									nodeType: "VariableDeclaration",
									scope: 2455,
									src: "3362:28:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2431,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "3362:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "3298:98:16"
						},
						returnParameters: {
							id: 2434,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "3406:0:16"
						},
						scope: 2456,
						src: "3278:317:16",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "internal"
					}
				],
				scope: 2620,
				src: "505:3092:16",
				usedErrors: [
				]
			},
			{
				abstract: false,
				baseContracts: [
					{
						baseName: {
							id: 2457,
							name: "VWBLProtocol",
							nodeType: "IdentifierPath",
							referencedDeclaration: 2456,
							src: "3627:12:16"
						},
						id: 2458,
						nodeType: "InheritanceSpecifier",
						src: "3627:12:16"
					},
					{
						baseName: {
							id: 2459,
							name: "Ownable",
							nodeType: "IdentifierPath",
							referencedDeclaration: 104,
							src: "3641:7:16"
						},
						id: 2460,
						nodeType: "InheritanceSpecifier",
						src: "3641:7:16"
					},
					{
						baseName: {
							id: 2461,
							name: "IVWBLSupportIPFS",
							nodeType: "IdentifierPath",
							referencedDeclaration: 2155,
							src: "3650:16:16"
						},
						id: 2462,
						nodeType: "InheritanceSpecifier",
						src: "3650:16:16"
					}
				],
				canonicalName: "VWBLSupportIPFS",
				contractDependencies: [
				],
				contractKind: "contract",
				fullyImplemented: true,
				id: 2619,
				linearizedBaseContracts: [
					2619,
					2155,
					104,
					2456,
					123,
					1461,
					1492,
					989,
					1519,
					1105,
					2063,
					2075,
					1836
				],
				name: "VWBLSupportIPFS",
				nameLocation: "3608:15:16",
				nodeType: "ContractDefinition",
				nodes: [
					{
						constant: false,
						functionSelector: "eb0cde1d",
						id: 2464,
						mutability: "mutable",
						name: "gatewayContract",
						nameLocation: "3688:15:16",
						nodeType: "VariableDeclaration",
						scope: 2619,
						src: "3673:30:16",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_address",
							typeString: "address"
						},
						typeName: {
							id: 2463,
							name: "address",
							nodeType: "ElementaryTypeName",
							src: "3673:7:16",
							stateMutability: "nonpayable",
							typeDescriptions: {
								typeIdentifier: "t_address",
								typeString: "address"
							}
						},
						visibility: "public"
					},
					{
						constant: false,
						functionSelector: "93fab57b",
						id: 2466,
						mutability: "mutable",
						name: "accessCheckerContract",
						nameLocation: "3724:21:16",
						nodeType: "VariableDeclaration",
						scope: 2619,
						src: "3709:36:16",
						stateVariable: true,
						storageLocation: "default",
						typeDescriptions: {
							typeIdentifier: "t_address",
							typeString: "address"
						},
						typeName: {
							id: 2465,
							name: "address",
							nodeType: "ElementaryTypeName",
							src: "3709:7:16",
							stateMutability: "nonpayable",
							typeDescriptions: {
								typeIdentifier: "t_address",
								typeString: "address"
							}
						},
						visibility: "public"
					},
					{
						anonymous: false,
						id: 2472,
						name: "gatewayContractChanged",
						nameLocation: "3758:22:16",
						nodeType: "EventDefinition",
						parameters: {
							id: 2471,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2468,
									indexed: false,
									mutability: "mutable",
									name: "oldGatewayContract",
									nameLocation: "3789:18:16",
									nodeType: "VariableDeclaration",
									scope: 2472,
									src: "3781:26:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2467,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3781:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2470,
									indexed: false,
									mutability: "mutable",
									name: "newGatewayContract",
									nameLocation: "3817:18:16",
									nodeType: "VariableDeclaration",
									scope: 2472,
									src: "3809:26:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2469,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3809:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "3780:56:16"
						},
						src: "3752:85:16"
					},
					{
						anonymous: false,
						id: 2478,
						name: "accessCheckerContractChanged",
						nameLocation: "3848:28:16",
						nodeType: "EventDefinition",
						parameters: {
							id: 2477,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2474,
									indexed: false,
									mutability: "mutable",
									name: "oldAccessCheckerContract",
									nameLocation: "3885:24:16",
									nodeType: "VariableDeclaration",
									scope: 2478,
									src: "3877:32:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2473,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3877:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2476,
									indexed: false,
									mutability: "mutable",
									name: "newAccessCheckerContract",
									nameLocation: "3919:24:16",
									nodeType: "VariableDeclaration",
									scope: 2478,
									src: "3911:32:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2475,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3911:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "3876:68:16"
						},
						src: "3842:103:16"
					},
					{
						body: {
							id: 2497,
							nodeType: "Block",
							src: "4067:107:16",
							statements: [
								{
									expression: {
										id: 2491,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											id: 2489,
											name: "gatewayContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2464,
											src: "4077:15:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 2490,
											name: "_gatewayContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2480,
											src: "4095:16:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										src: "4077:34:16",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									id: 2492,
									nodeType: "ExpressionStatement",
									src: "4077:34:16"
								},
								{
									expression: {
										id: 2495,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											id: 2493,
											name: "accessCheckerContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2466,
											src: "4121:21:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 2494,
											name: "_accessCheckerContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2482,
											src: "4145:22:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										src: "4121:46:16",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									id: 2496,
									nodeType: "ExpressionStatement",
									src: "4121:46:16"
								}
							]
						},
						id: 2498,
						implemented: true,
						kind: "constructor",
						modifiers: [
							{
								"arguments": [
									{
										hexValue: "5657424c",
										id: 2485,
										isConstant: false,
										isLValue: false,
										isPure: true,
										kind: "string",
										lValueRequested: false,
										nodeType: "Literal",
										src: "4051:6:16",
										typeDescriptions: {
											typeIdentifier: "t_stringliteral_f898ba01e09ceb3d15dd620998801e26619b7c5f63726e839062f3f977b9b60e",
											typeString: "literal_string \"VWBL\""
										},
										value: "VWBL"
									},
									{
										hexValue: "5657424c",
										id: 2486,
										isConstant: false,
										isLValue: false,
										isPure: true,
										kind: "string",
										lValueRequested: false,
										nodeType: "Literal",
										src: "4059:6:16",
										typeDescriptions: {
											typeIdentifier: "t_stringliteral_f898ba01e09ceb3d15dd620998801e26619b7c5f63726e839062f3f977b9b60e",
											typeString: "literal_string \"VWBL\""
										},
										value: "VWBL"
									}
								],
								id: 2487,
								kind: "baseConstructorSpecifier",
								modifierName: {
									id: 2484,
									name: "ERC721",
									nodeType: "IdentifierPath",
									referencedDeclaration: 989,
									src: "4044:6:16"
								},
								nodeType: "ModifierInvocation",
								src: "4044:22:16"
							}
						],
						name: "",
						nameLocation: "-1:-1:-1",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 2483,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2480,
									mutability: "mutable",
									name: "_gatewayContract",
									nameLocation: "3980:16:16",
									nodeType: "VariableDeclaration",
									scope: 2498,
									src: "3972:24:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2479,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "3972:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2482,
									mutability: "mutable",
									name: "_accessCheckerContract",
									nameLocation: "4015:22:16",
									nodeType: "VariableDeclaration",
									scope: 2498,
									src: "4007:30:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2481,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "4007:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "3962:81:16"
						},
						returnParameters: {
							id: 2488,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "4067:0:16"
						},
						scope: 2619,
						src: "3951:223:16",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "public"
					},
					{
						body: {
							id: 2524,
							nodeType: "Block",
							src: "4253:241:16",
							statements: [
								{
									expression: {
										"arguments": [
											{
												commonType: {
													typeIdentifier: "t_address",
													typeString: "address"
												},
												id: 2508,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												leftExpression: {
													id: 2506,
													name: "newGatewayContract",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 2500,
													src: "4271:18:16",
													typeDescriptions: {
														typeIdentifier: "t_address",
														typeString: "address"
													}
												},
												nodeType: "BinaryOperation",
												operator: "!=",
												rightExpression: {
													id: 2507,
													name: "gatewayContract",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 2464,
													src: "4293:15:16",
													typeDescriptions: {
														typeIdentifier: "t_address",
														typeString: "address"
													}
												},
												src: "4271:37:16",
												typeDescriptions: {
													typeIdentifier: "t_bool",
													typeString: "bool"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bool",
													typeString: "bool"
												}
											],
											id: 2505,
											name: "require",
											nodeType: "Identifier",
											overloadedDeclarations: [
												4294967278,
												4294967278
											],
											referencedDeclaration: 4294967278,
											src: "4263:7:16",
											typeDescriptions: {
												typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
												typeString: "function (bool) pure"
											}
										},
										id: 2509,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "4263:46:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 2510,
									nodeType: "ExpressionStatement",
									src: "4263:46:16"
								},
								{
									assignments: [
										2512
									],
									declarations: [
										{
											constant: false,
											id: 2512,
											mutability: "mutable",
											name: "oldGatewayContract",
											nameLocation: "4327:18:16",
											nodeType: "VariableDeclaration",
											scope: 2524,
											src: "4319:26:16",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											},
											typeName: {
												id: 2511,
												name: "address",
												nodeType: "ElementaryTypeName",
												src: "4319:7:16",
												stateMutability: "nonpayable",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											visibility: "internal"
										}
									],
									id: 2514,
									initialValue: {
										id: 2513,
										name: "gatewayContract",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 2464,
										src: "4348:15:16",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "4319:44:16"
								},
								{
									expression: {
										id: 2517,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											id: 2515,
											name: "gatewayContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2464,
											src: "4373:15:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 2516,
											name: "newGatewayContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2500,
											src: "4391:18:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										src: "4373:36:16",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									id: 2518,
									nodeType: "ExpressionStatement",
									src: "4373:36:16"
								},
								{
									eventCall: {
										"arguments": [
											{
												id: 2520,
												name: "oldGatewayContract",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2512,
												src: "4448:18:16",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 2521,
												name: "newGatewayContract",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2500,
												src: "4468:18:16",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_address",
													typeString: "address"
												},
												{
													typeIdentifier: "t_address",
													typeString: "address"
												}
											],
											id: 2519,
											name: "gatewayContractChanged",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2472,
											src: "4425:22:16",
											typeDescriptions: {
												typeIdentifier: "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
												typeString: "function (address,address)"
											}
										},
										id: 2522,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "4425:62:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 2523,
									nodeType: "EmitStatement",
									src: "4420:67:16"
								}
							]
						},
						functionSelector: "50932cb5",
						id: 2525,
						implemented: true,
						kind: "function",
						modifiers: [
							{
								id: 2503,
								kind: "modifierInvocation",
								modifierName: {
									id: 2502,
									name: "onlyOwner",
									nodeType: "IdentifierPath",
									referencedDeclaration: 46,
									src: "4243:9:16"
								},
								nodeType: "ModifierInvocation",
								src: "4243:9:16"
							}
						],
						name: "setGatewayContract",
						nameLocation: "4189:18:16",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 2501,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2500,
									mutability: "mutable",
									name: "newGatewayContract",
									nameLocation: "4216:18:16",
									nodeType: "VariableDeclaration",
									scope: 2525,
									src: "4208:26:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2499,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "4208:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "4207:28:16"
						},
						returnParameters: {
							id: 2504,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "4253:0:16"
						},
						scope: 2619,
						src: "4180:314:16",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "public"
					},
					{
						body: {
							id: 2551,
							nodeType: "Block",
							src: "4585:295:16",
							statements: [
								{
									expression: {
										"arguments": [
											{
												commonType: {
													typeIdentifier: "t_address",
													typeString: "address"
												},
												id: 2535,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												leftExpression: {
													id: 2533,
													name: "newAccessCheckerContract",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 2527,
													src: "4603:24:16",
													typeDescriptions: {
														typeIdentifier: "t_address",
														typeString: "address"
													}
												},
												nodeType: "BinaryOperation",
												operator: "!=",
												rightExpression: {
													id: 2534,
													name: "accessCheckerContract",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 2466,
													src: "4631:21:16",
													typeDescriptions: {
														typeIdentifier: "t_address",
														typeString: "address"
													}
												},
												src: "4603:49:16",
												typeDescriptions: {
													typeIdentifier: "t_bool",
													typeString: "bool"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bool",
													typeString: "bool"
												}
											],
											id: 2532,
											name: "require",
											nodeType: "Identifier",
											overloadedDeclarations: [
												4294967278,
												4294967278
											],
											referencedDeclaration: 4294967278,
											src: "4595:7:16",
											typeDescriptions: {
												typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
												typeString: "function (bool) pure"
											}
										},
										id: 2536,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "4595:58:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 2537,
									nodeType: "ExpressionStatement",
									src: "4595:58:16"
								},
								{
									assignments: [
										2539
									],
									declarations: [
										{
											constant: false,
											id: 2539,
											mutability: "mutable",
											name: "oldAccessCheckerContract",
											nameLocation: "4671:24:16",
											nodeType: "VariableDeclaration",
											scope: 2551,
											src: "4663:32:16",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											},
											typeName: {
												id: 2538,
												name: "address",
												nodeType: "ElementaryTypeName",
												src: "4663:7:16",
												stateMutability: "nonpayable",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											visibility: "internal"
										}
									],
									id: 2541,
									initialValue: {
										id: 2540,
										name: "accessCheckerContract",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 2466,
										src: "4698:21:16",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "4663:56:16"
								},
								{
									expression: {
										id: 2544,
										isConstant: false,
										isLValue: false,
										isPure: false,
										lValueRequested: false,
										leftHandSide: {
											id: 2542,
											name: "accessCheckerContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2466,
											src: "4729:21:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										nodeType: "Assignment",
										operator: "=",
										rightHandSide: {
											id: 2543,
											name: "newAccessCheckerContract",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2527,
											src: "4753:24:16",
											typeDescriptions: {
												typeIdentifier: "t_address",
												typeString: "address"
											}
										},
										src: "4729:48:16",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									id: 2545,
									nodeType: "ExpressionStatement",
									src: "4729:48:16"
								},
								{
									eventCall: {
										"arguments": [
											{
												id: 2547,
												name: "oldAccessCheckerContract",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2539,
												src: "4822:24:16",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 2548,
												name: "newAccessCheckerContract",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2527,
												src: "4848:24:16",
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_address",
													typeString: "address"
												},
												{
													typeIdentifier: "t_address",
													typeString: "address"
												}
											],
											id: 2546,
											name: "accessCheckerContractChanged",
											nodeType: "Identifier",
											overloadedDeclarations: [
											],
											referencedDeclaration: 2478,
											src: "4793:28:16",
											typeDescriptions: {
												typeIdentifier: "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
												typeString: "function (address,address)"
											}
										},
										id: 2549,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "4793:80:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 2550,
									nodeType: "EmitStatement",
									src: "4788:85:16"
								}
							]
						},
						functionSelector: "2812a3d2",
						id: 2552,
						implemented: true,
						kind: "function",
						modifiers: [
							{
								id: 2530,
								kind: "modifierInvocation",
								modifierName: {
									id: 2529,
									name: "onlyOwner",
									nodeType: "IdentifierPath",
									referencedDeclaration: 46,
									src: "4575:9:16"
								},
								nodeType: "ModifierInvocation",
								src: "4575:9:16"
							}
						],
						name: "setAccessCheckerContract",
						nameLocation: "4509:24:16",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 2528,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2527,
									mutability: "mutable",
									name: "newAccessCheckerContract",
									nameLocation: "4542:24:16",
									nodeType: "VariableDeclaration",
									scope: 2552,
									src: "4534:32:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2526,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "4534:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "4533:34:16"
						},
						returnParameters: {
							id: 2531,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "4585:0:16"
						},
						scope: 2619,
						src: "4500:380:16",
						stateMutability: "nonpayable",
						virtual: false,
						visibility: "public"
					},
					{
						baseFunctions: [
							2134
						],
						body: {
							id: 2563,
							nodeType: "Block",
							src: "4934:62:16",
							statements: [
								{
									expression: {
										"arguments": [
										],
										expression: {
											argumentTypes: [
											],
											expression: {
												"arguments": [
													{
														id: 2558,
														name: "gatewayContract",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 2464,
														src: "4964:15:16",
														typeDescriptions: {
															typeIdentifier: "t_address",
															typeString: "address"
														}
													}
												],
												expression: {
													argumentTypes: [
														{
															typeIdentifier: "t_address",
															typeString: "address"
														}
													],
													id: 2557,
													name: "IVWBLGateway",
													nodeType: "Identifier",
													overloadedDeclarations: [
													],
													referencedDeclaration: 2126,
													src: "4951:12:16",
													typeDescriptions: {
														typeIdentifier: "t_type$_t_contract$_IVWBLGateway_$2126_$",
														typeString: "type(contract IVWBLGateway)"
													}
												},
												id: 2559,
												isConstant: false,
												isLValue: false,
												isPure: false,
												kind: "typeConversion",
												lValueRequested: false,
												names: [
												],
												nodeType: "FunctionCall",
												src: "4951:29:16",
												tryCall: false,
												typeDescriptions: {
													typeIdentifier: "t_contract$_IVWBLGateway_$2126",
													typeString: "contract IVWBLGateway"
												}
											},
											id: 2560,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											memberName: "feeWei",
											nodeType: "MemberAccess",
											referencedDeclaration: 2125,
											src: "4951:36:16",
											typeDescriptions: {
												typeIdentifier: "t_function_external_view$__$returns$_t_uint256_$",
												typeString: "function () view external returns (uint256)"
											}
										},
										id: 2561,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "4951:38:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									functionReturnParameters: 2556,
									id: 2562,
									nodeType: "Return",
									src: "4944:45:16"
								}
							]
						},
						functionSelector: "ced72f87",
						id: 2564,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "getFee",
						nameLocation: "4895:6:16",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 2553,
							nodeType: "ParameterList",
							parameters: [
							],
							src: "4901:2:16"
						},
						returnParameters: {
							id: 2556,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2555,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 2564,
									src: "4925:7:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2554,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "4925:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "4924:9:16"
						},
						scope: 2619,
						src: "4886:110:16",
						stateMutability: "view",
						virtual: false,
						visibility: "public"
					},
					{
						baseFunctions: [
							2147
						],
						body: {
							id: 2604,
							nodeType: "Block",
							src: "5194:393:16",
							statements: [
								{
									assignments: [
										2578
									],
									declarations: [
										{
											constant: false,
											id: 2578,
											mutability: "mutable",
											name: "tokenId",
											nameLocation: "5212:7:16",
											nodeType: "VariableDeclaration",
											scope: 2604,
											src: "5204:15:16",
											stateVariable: false,
											storageLocation: "default",
											typeDescriptions: {
												typeIdentifier: "t_uint256",
												typeString: "uint256"
											},
											typeName: {
												id: 2577,
												name: "uint256",
												nodeType: "ElementaryTypeName",
												src: "5204:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											visibility: "internal"
										}
									],
									id: 2586,
									initialValue: {
										"arguments": [
											{
												id: 2581,
												name: "_documentId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2572,
												src: "5234:11:16",
												typeDescriptions: {
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												}
											},
											{
												id: 2582,
												name: "_metadataURl",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2566,
												src: "5247:12:16",
												typeDescriptions: {
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												}
											},
											{
												id: 2583,
												name: "_getKeyURl",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2568,
												src: "5261:10:16",
												typeDescriptions: {
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												}
											},
											{
												id: 2584,
												name: "_royaltiesPercentage",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2570,
												src: "5273:20:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												},
												{
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												},
												{
													typeIdentifier: "t_string_memory_ptr",
													typeString: "string memory"
												},
												{
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											],
											expression: {
												id: 2579,
												name: "super",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 4294967271,
												src: "5222:5:16",
												typeDescriptions: {
													typeIdentifier: "t_type$_t_super$_VWBLSupportIPFS_$2619_$",
													typeString: "type(contract super VWBLSupportIPFS)"
												}
											},
											id: 2580,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											memberName: "_mint",
											nodeType: "MemberAccess",
											referencedDeclaration: 2288,
											src: "5222:11:16",
											typeDescriptions: {
												typeIdentifier: "t_function_internal_nonpayable$_t_bytes32_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
												typeString: "function (bytes32,string memory,string memory,uint256) returns (uint256)"
											}
										},
										id: 2585,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "5222:72:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									nodeType: "VariableDeclarationStatement",
									src: "5204:90:16"
								},
								{
									expression: {
										"arguments": [
											{
												id: 2594,
												name: "_documentId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2572,
												src: "5519:11:16",
												typeDescriptions: {
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												}
											},
											{
												"arguments": [
													{
														id: 2597,
														name: "this",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 4294967268,
														src: "5540:4:16",
														typeDescriptions: {
															typeIdentifier: "t_contract$_VWBLSupportIPFS_$2619",
															typeString: "contract VWBLSupportIPFS"
														}
													}
												],
												expression: {
													argumentTypes: [
														{
															typeIdentifier: "t_contract$_VWBLSupportIPFS_$2619",
															typeString: "contract VWBLSupportIPFS"
														}
													],
													id: 2596,
													isConstant: false,
													isLValue: false,
													isPure: true,
													lValueRequested: false,
													nodeType: "ElementaryTypeNameExpression",
													src: "5532:7:16",
													typeDescriptions: {
														typeIdentifier: "t_type$_t_address_$",
														typeString: "type(address)"
													},
													typeName: {
														id: 2595,
														name: "address",
														nodeType: "ElementaryTypeName",
														src: "5532:7:16",
														typeDescriptions: {
														}
													}
												},
												id: 2598,
												isConstant: false,
												isLValue: false,
												isPure: false,
												kind: "typeConversion",
												lValueRequested: false,
												names: [
												],
												nodeType: "FunctionCall",
												src: "5532:13:16",
												tryCall: false,
												typeDescriptions: {
													typeIdentifier: "t_address",
													typeString: "address"
												}
											},
											{
												id: 2599,
												name: "tokenId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2578,
												src: "5547:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											}
										],
										expression: {
											argumentTypes: [
												{
													typeIdentifier: "t_bytes32",
													typeString: "bytes32"
												},
												{
													typeIdentifier: "t_address",
													typeString: "address"
												},
												{
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											],
											expression: {
												argumentTypes: [
													{
														typeIdentifier: "t_bytes32",
														typeString: "bytes32"
													},
													{
														typeIdentifier: "t_address",
														typeString: "address"
													},
													{
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												],
												expression: {
													"arguments": [
														{
															id: 2588,
															name: "accessCheckerContract",
															nodeType: "Identifier",
															overloadedDeclarations: [
															],
															referencedDeclaration: 2466,
															src: "5445:21:16",
															typeDescriptions: {
																typeIdentifier: "t_address",
																typeString: "address"
															}
														}
													],
													expression: {
														argumentTypes: [
															{
																typeIdentifier: "t_address",
																typeString: "address"
															}
														],
														id: 2587,
														name: "IAccessControlCheckerByNFT",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 2087,
														src: "5418:26:16",
														typeDescriptions: {
															typeIdentifier: "t_type$_t_contract$_IAccessControlCheckerByNFT_$2087_$",
															typeString: "type(contract IAccessControlCheckerByNFT)"
														}
													},
													id: 2589,
													isConstant: false,
													isLValue: false,
													isPure: false,
													kind: "typeConversion",
													lValueRequested: false,
													names: [
													],
													nodeType: "FunctionCall",
													src: "5418:49:16",
													tryCall: false,
													typeDescriptions: {
														typeIdentifier: "t_contract$_IAccessControlCheckerByNFT_$2087",
														typeString: "contract IAccessControlCheckerByNFT"
													}
												},
												id: 2590,
												isConstant: false,
												isLValue: false,
												isPure: false,
												lValueRequested: false,
												memberName: "grantAccessControlAndRegisterNFT",
												nodeType: "MemberAccess",
												referencedDeclaration: 2086,
												src: "5418:82:16",
												typeDescriptions: {
													typeIdentifier: "t_function_external_payable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$",
													typeString: "function (bytes32,address,uint256) payable external"
												}
											},
											id: 2593,
											isConstant: false,
											isLValue: false,
											isPure: false,
											lValueRequested: false,
											names: [
												"value"
											],
											nodeType: "FunctionCallOptions",
											options: [
												{
													expression: {
														id: 2591,
														name: "msg",
														nodeType: "Identifier",
														overloadedDeclarations: [
														],
														referencedDeclaration: 4294967281,
														src: "5508:3:16",
														typeDescriptions: {
															typeIdentifier: "t_magic_message",
															typeString: "msg"
														}
													},
													id: 2592,
													isConstant: false,
													isLValue: false,
													isPure: false,
													lValueRequested: false,
													memberName: "value",
													nodeType: "MemberAccess",
													src: "5508:9:16",
													typeDescriptions: {
														typeIdentifier: "t_uint256",
														typeString: "uint256"
													}
												}
											],
											src: "5418:100:16",
											typeDescriptions: {
												typeIdentifier: "t_function_external_payable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$value",
												typeString: "function (bytes32,address,uint256) payable external"
											}
										},
										id: 2600,
										isConstant: false,
										isLValue: false,
										isPure: false,
										kind: "functionCall",
										lValueRequested: false,
										names: [
										],
										nodeType: "FunctionCall",
										src: "5418:137:16",
										tryCall: false,
										typeDescriptions: {
											typeIdentifier: "t_tuple$__$",
											typeString: "tuple()"
										}
									},
									id: 2601,
									nodeType: "ExpressionStatement",
									src: "5418:137:16"
								},
								{
									expression: {
										id: 2602,
										name: "tokenId",
										nodeType: "Identifier",
										overloadedDeclarations: [
										],
										referencedDeclaration: 2578,
										src: "5573:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									functionReturnParameters: 2576,
									id: 2603,
									nodeType: "Return",
									src: "5566:14:16"
								}
							]
						},
						functionSelector: "02f02499",
						id: 2605,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "mint",
						nameLocation: "5011:4:16",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 2573,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2566,
									mutability: "mutable",
									name: "_metadataURl",
									nameLocation: "5039:12:16",
									nodeType: "VariableDeclaration",
									scope: 2605,
									src: "5025:26:16",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 2565,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "5025:6:16",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2568,
									mutability: "mutable",
									name: "_getKeyURl",
									nameLocation: "5075:10:16",
									nodeType: "VariableDeclaration",
									scope: 2605,
									src: "5061:24:16",
									stateVariable: false,
									storageLocation: "memory",
									typeDescriptions: {
										typeIdentifier: "t_string_memory_ptr",
										typeString: "string"
									},
									typeName: {
										id: 2567,
										name: "string",
										nodeType: "ElementaryTypeName",
										src: "5061:6:16",
										typeDescriptions: {
											typeIdentifier: "t_string_storage_ptr",
											typeString: "string"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2570,
									mutability: "mutable",
									name: "_royaltiesPercentage",
									nameLocation: "5104:20:16",
									nodeType: "VariableDeclaration",
									scope: 2605,
									src: "5096:28:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2569,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "5096:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								},
								{
									constant: false,
									id: 2572,
									mutability: "mutable",
									name: "_documentId",
									nameLocation: "5143:11:16",
									nodeType: "VariableDeclaration",
									scope: 2605,
									src: "5135:19:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_bytes32",
										typeString: "bytes32"
									},
									typeName: {
										id: 2571,
										name: "bytes32",
										nodeType: "ElementaryTypeName",
										src: "5135:7:16",
										typeDescriptions: {
											typeIdentifier: "t_bytes32",
											typeString: "bytes32"
										}
									},
									visibility: "internal"
								}
							],
							src: "5015:145:16"
						},
						returnParameters: {
							id: 2576,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2575,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 2605,
									src: "5185:7:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2574,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "5185:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "5184:9:16"
						},
						scope: 2619,
						src: "5002:585:16",
						stateMutability: "payable",
						virtual: false,
						visibility: "public"
					},
					{
						baseFunctions: [
							2154
						],
						body: {
							id: 2617,
							nodeType: "Block",
							src: "5659:65:16",
							statements: [
								{
									expression: {
										expression: {
											baseExpression: {
												id: 2612,
												name: "tokenIdToTokenInfo",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2193,
												src: "5676:18:16",
												typeDescriptions: {
													typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_TokenInfo_$2183_storage_$",
													typeString: "mapping(uint256 => struct VWBLProtocol.TokenInfo storage ref)"
												}
											},
											id: 2614,
											indexExpression: {
												id: 2613,
												name: "tokenId",
												nodeType: "Identifier",
												overloadedDeclarations: [
												],
												referencedDeclaration: 2607,
												src: "5695:7:16",
												typeDescriptions: {
													typeIdentifier: "t_uint256",
													typeString: "uint256"
												}
											},
											isConstant: false,
											isLValue: true,
											isPure: false,
											lValueRequested: false,
											nodeType: "IndexAccess",
											src: "5676:27:16",
											typeDescriptions: {
												typeIdentifier: "t_struct$_TokenInfo_$2183_storage",
												typeString: "struct VWBLProtocol.TokenInfo storage ref"
											}
										},
										id: 2615,
										isConstant: false,
										isLValue: true,
										isPure: false,
										lValueRequested: false,
										memberName: "minterAddress",
										nodeType: "MemberAccess",
										referencedDeclaration: 2180,
										src: "5676:41:16",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									functionReturnParameters: 2611,
									id: 2616,
									nodeType: "Return",
									src: "5669:48:16"
								}
							]
						},
						functionSelector: "5b7121f8",
						id: 2618,
						implemented: true,
						kind: "function",
						modifiers: [
						],
						name: "getMinter",
						nameLocation: "5602:9:16",
						nodeType: "FunctionDefinition",
						parameters: {
							id: 2608,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2607,
									mutability: "mutable",
									name: "tokenId",
									nameLocation: "5620:7:16",
									nodeType: "VariableDeclaration",
									scope: 2618,
									src: "5612:15:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_uint256",
										typeString: "uint256"
									},
									typeName: {
										id: 2606,
										name: "uint256",
										nodeType: "ElementaryTypeName",
										src: "5612:7:16",
										typeDescriptions: {
											typeIdentifier: "t_uint256",
											typeString: "uint256"
										}
									},
									visibility: "internal"
								}
							],
							src: "5611:17:16"
						},
						returnParameters: {
							id: 2611,
							nodeType: "ParameterList",
							parameters: [
								{
									constant: false,
									id: 2610,
									mutability: "mutable",
									name: "",
									nameLocation: "-1:-1:-1",
									nodeType: "VariableDeclaration",
									scope: 2618,
									src: "5650:7:16",
									stateVariable: false,
									storageLocation: "default",
									typeDescriptions: {
										typeIdentifier: "t_address",
										typeString: "address"
									},
									typeName: {
										id: 2609,
										name: "address",
										nodeType: "ElementaryTypeName",
										src: "5650:7:16",
										stateMutability: "nonpayable",
										typeDescriptions: {
											typeIdentifier: "t_address",
											typeString: "address"
										}
									},
									visibility: "internal"
								}
							],
							src: "5649:9:16"
						},
						scope: 2619,
						src: "5593:131:16",
						stateMutability: "view",
						virtual: false,
						visibility: "public"
					}
				],
				scope: 2620,
				src: "3599:2127:16",
				usedErrors: [
				]
			}
		],
		src: "32:5695:16"
	};
	var compiler = {
		name: "solc",
		version: "0.8.11+commit.d7f03943.Emscripten.clang"
	};
	var networks$1 = {
		"1657542140823": {
			events: {
			},
			links: {
			},
			address: "0x519028bFb58d3425b97608d7Bd499F07B643bEf7",
			transactionHash: "0x09ead8140ad51a6c959c4c733bef15ccf48d5a1e84862c95b724360f2755f536"
		}
	};
	var schemaVersion = "3.4.7";
	var updatedAt = "2022-07-11T12:47:33.172Z";
	var networkType = "ethereum";
	var devdoc = {
		kind: "dev",
		methods: {
			"approve(address,uint256)": {
				details: "See {IERC721-approve}."
			},
			"balanceOf(address)": {
				details: "See {IERC721-balanceOf}."
			},
			"getApproved(uint256)": {
				details: "See {IERC721-getApproved}."
			},
			"isApprovedForAll(address,address)": {
				details: "See {IERC721-isApprovedForAll}."
			},
			"name()": {
				details: "See {IERC721Metadata-name}."
			},
			"owner()": {
				details: "Returns the address of the current owner."
			},
			"ownerOf(uint256)": {
				details: "See {IERC721-ownerOf}."
			},
			"renounceOwnership()": {
				details: "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
			},
			"safeTransferFrom(address,address,uint256)": {
				details: "See {IERC721-safeTransferFrom}."
			},
			"safeTransferFrom(address,address,uint256,bytes)": {
				details: "See {IERC721-safeTransferFrom}."
			},
			"setApprovalForAll(address,bool)": {
				details: "See {IERC721-setApprovalForAll}."
			},
			"symbol()": {
				details: "See {IERC721Metadata-symbol}."
			},
			"tokenByIndex(uint256)": {
				details: "See {IERC721Enumerable-tokenByIndex}."
			},
			"tokenOfOwnerByIndex(address,uint256)": {
				details: "See {IERC721Enumerable-tokenOfOwnerByIndex}."
			},
			"tokenURI(uint256)": {
				details: "See {IERC721Metadata-tokenURI}."
			},
			"totalSupply()": {
				details: "See {IERC721Enumerable-totalSupply}."
			},
			"transferFrom(address,address,uint256)": {
				details: "See {IERC721-transferFrom}."
			},
			"transferOwnership(address)": {
				details: "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			}
		},
		version: 1
	};
	var userdoc = {
		kind: "user",
		methods: {
		},
		version: 1
	};
	var require$$2$2 = {
		contractName: contractName$3,
		abi: abi$6,
		metadata: metadata$1,
		bytecode: bytecode$3,
		deployedBytecode: deployedBytecode$3,
		immutableReferences: immutableReferences,
		generatedSources: generatedSources,
		deployedGeneratedSources: deployedGeneratedSources,
		sourceMap: sourceMap,
		deployedSourceMap: deployedSourceMap,
		source: source,
		sourcePath: sourcePath,
		ast: ast,
		compiler: compiler,
		networks: networks$1,
		schemaVersion: schemaVersion,
		updatedAt: updatedAt,
		networkType: networkType,
		devdoc: devdoc,
		userdoc: userdoc
	};

	"use strict";
	var __createBinding$6 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$6 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$6 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$6(result, mod, k);
	  __setModuleDefault$6(result, mod);
	  return result;
	};
	var __awaiter$r = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$r = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	Object.defineProperty(VWBLProtocol$1, "__esModule", {
	  value: true
	});
	var VWBLNFT_1 = VWBLProtocol$1.VWBLNFT = void 0;
	var vwbl$1 = __importStar$6(require$$1$3);
	var vwblIPFS$1 = __importStar$6(require$$2$2);
	var VWBLNFT = /** @class */function () {
	  function VWBLNFT(web3, address, isIpfs) {
	    this.web3 = web3;
	    this.contract = isIpfs ? new web3.eth.Contract(vwblIPFS$1.abi, address) : new web3.eth.Contract(vwbl$1.abi, address);
	  }
	  VWBLNFT.prototype.mintToken = function (decryptUrl, royaltiesPercentage, documentId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      var myAddress, fee, receipt, tokenId;
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getFee()];
	          case 2:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.methods.mint(decryptUrl, royaltiesPercentage, documentId).send({
	              from: myAddress,
	              value: fee,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenId = receipt.events.Transfer.returnValues.tokenId;
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.mintTokenForIPFS = function (metadataUrl, decryptUrl, royaltiesPercentage, documentId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      var myAddress, fee, receipt, tokenId;
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getFee()];
	          case 2:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.methods.mint(metadataUrl, decryptUrl, royaltiesPercentage, documentId).send({
	              from: myAddress,
	              value: fee,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenId = receipt.events.Transfer.returnValues.tokenId;
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.getOwnTokenIds = function () {
	    return __awaiter$r(this, void 0, void 0, function () {
	      var myAddress, balance;
	      var _this = this;
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.contract.methods.balanceOf(myAddress).call()];
	          case 2:
	            balance = _a.sent();
	            return [4 /*yield*/, Promise.all(range$4(Number.parseInt(balance)).map(function (i) {
	              return __awaiter$r(_this, void 0, void 0, function () {
	                var ownTokenId;
	                return __generator$r(this, function (_a) {
	                  switch (_a.label) {
	                    case 0:
	                      return [4 /*yield*/, this.contract.methods.tokenOfOwnerByIndex(myAddress, i).call()];
	                    case 1:
	                      ownTokenId = _a.sent();
	                      return [2 /*return*/, Number.parseInt(ownTokenId)];
	                  }
	                });
	              });
	            }))];
	          case 3:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.getTokenByMinter = function (address) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.getTokenByMinter(address).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.getMetadataUrl = function (tokenId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.tokenURI(tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.getOwner = function (tokenId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.ownerOf(tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.getMinter = function (tokenId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.getMinter(tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.isOwnerOf = function (tokenId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      var myAddress, owner;
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getOwner(tokenId)];
	          case 2:
	            owner = _a.sent();
	            return [2 /*return*/, myAddress === owner];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.isMinterOf = function (tokenId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      var myAddress, minter;
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getMinter(tokenId)];
	          case 2:
	            minter = _a.sent();
	            return [2 /*return*/, myAddress === minter];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.getFee = function () {
	    return __awaiter$r(this, void 0, void 0, function () {
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.getFee().call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.getTokenInfo = function (tokenId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.tokenIdToTokenInfo(tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.approve = function (operator, tokenId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      var myAddress;
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.contract.methods.approve(operator, tokenId).send({
	              from: myAddress,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 2:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLNFT.prototype.getApproved = function (tokenId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.getApproved(tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.setApprovalForAll = function (operator) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      var myAddress;
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.contract.methods.setApprovalForAll(operator, true).send({
	              from: myAddress,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 2:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLNFT.prototype.isApprovedForAll = function (owner, operator) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.isApprovedForAll(owner, operator).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFT.prototype.safeTransfer = function (to, tokenId) {
	    return __awaiter$r(this, void 0, void 0, function () {
	      var myAddress;
	      return __generator$r(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.contract.methods.safeTransferFrom(myAddress, to, tokenId).send({
	              from: myAddress,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 2:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  return VWBLNFT;
	}();
	VWBLNFT_1 = VWBLProtocol$1.VWBLNFT = VWBLNFT;
	var range$4 = function (length) {
	  return Array.from(Array(length).keys());
	};

	var VWBLMetaTxProtocol = {};

	var lib$v = {};

	var ethers$1 = {};

	var lib$u = {};

	var lib$t = {};

	var fragments$1 = {};

	var lib$s = {};

	var bignumber = {};

	var bnExports$1 = {};
	var bn$3 = {
	  get exports(){ return bnExports$1; },
	  set exports(v){ bnExports$1 = v; },
	};

	(function (module) {
		(function (module, exports) {
		  'use strict';

		  // Utils
		  function assert (val, msg) {
		    if (!val) throw new Error(msg || 'Assertion failed');
		  }

		  // Could use `inherits` module, but don't want to move from single file
		  // architecture yet.
		  function inherits (ctor, superCtor) {
		    ctor.super_ = superCtor;
		    var TempCtor = function () {};
		    TempCtor.prototype = superCtor.prototype;
		    ctor.prototype = new TempCtor();
		    ctor.prototype.constructor = ctor;
		  }

		  // BN

		  function BN (number, base, endian) {
		    if (BN.isBN(number)) {
		      return number;
		    }

		    this.negative = 0;
		    this.words = null;
		    this.length = 0;

		    // Reduction context
		    this.red = null;

		    if (number !== null) {
		      if (base === 'le' || base === 'be') {
		        endian = base;
		        base = 10;
		      }

		      this._init(number || 0, base || 10, endian || 'be');
		    }
		  }
		  if (typeof module === 'object') {
		    module.exports = BN;
		  } else {
		    exports.BN = BN;
		  }

		  BN.BN = BN;
		  BN.wordSize = 26;

		  var Buffer;
		  try {
		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		      Buffer = window.Buffer;
		    } else {
		      Buffer = require$$0$2.Buffer;
		    }
		  } catch (e) {
		  }

		  BN.isBN = function isBN (num) {
		    if (num instanceof BN) {
		      return true;
		    }

		    return num !== null && typeof num === 'object' &&
		      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
		  };

		  BN.max = function max (left, right) {
		    if (left.cmp(right) > 0) return left;
		    return right;
		  };

		  BN.min = function min (left, right) {
		    if (left.cmp(right) < 0) return left;
		    return right;
		  };

		  BN.prototype._init = function init (number, base, endian) {
		    if (typeof number === 'number') {
		      return this._initNumber(number, base, endian);
		    }

		    if (typeof number === 'object') {
		      return this._initArray(number, base, endian);
		    }

		    if (base === 'hex') {
		      base = 16;
		    }
		    assert(base === (base | 0) && base >= 2 && base <= 36);

		    number = number.toString().replace(/\s+/g, '');
		    var start = 0;
		    if (number[0] === '-') {
		      start++;
		      this.negative = 1;
		    }

		    if (start < number.length) {
		      if (base === 16) {
		        this._parseHex(number, start, endian);
		      } else {
		        this._parseBase(number, base, start);
		        if (endian === 'le') {
		          this._initArray(this.toArray(), base, endian);
		        }
		      }
		    }
		  };

		  BN.prototype._initNumber = function _initNumber (number, base, endian) {
		    if (number < 0) {
		      this.negative = 1;
		      number = -number;
		    }
		    if (number < 0x4000000) {
		      this.words = [number & 0x3ffffff];
		      this.length = 1;
		    } else if (number < 0x10000000000000) {
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff
		      ];
		      this.length = 2;
		    } else {
		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff,
		        1
		      ];
		      this.length = 3;
		    }

		    if (endian !== 'le') return;

		    // Reverse the bytes
		    this._initArray(this.toArray(), base, endian);
		  };

		  BN.prototype._initArray = function _initArray (number, base, endian) {
		    // Perhaps a Uint8Array
		    assert(typeof number.length === 'number');
		    if (number.length <= 0) {
		      this.words = [0];
		      this.length = 1;
		      return this;
		    }

		    this.length = Math.ceil(number.length / 3);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    var j, w;
		    var off = 0;
		    if (endian === 'be') {
		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
		        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    } else if (endian === 'le') {
		      for (i = 0, j = 0; i < number.length; i += 3) {
		        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    }
		    return this._strip();
		  };

		  function parseHex4Bits (string, index) {
		    var c = string.charCodeAt(index);
		    // '0' - '9'
		    if (c >= 48 && c <= 57) {
		      return c - 48;
		    // 'A' - 'F'
		    } else if (c >= 65 && c <= 70) {
		      return c - 55;
		    // 'a' - 'f'
		    } else if (c >= 97 && c <= 102) {
		      return c - 87;
		    } else {
		      assert(false, 'Invalid character in ' + string);
		    }
		  }

		  function parseHexByte (string, lowerBound, index) {
		    var r = parseHex4Bits(string, index);
		    if (index - 1 >= lowerBound) {
		      r |= parseHex4Bits(string, index - 1) << 4;
		    }
		    return r;
		  }

		  BN.prototype._parseHex = function _parseHex (number, start, endian) {
		    // Create possibly bigger array to ensure that it fits the number
		    this.length = Math.ceil((number.length - start) / 6);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    // 24-bits chunks
		    var off = 0;
		    var j = 0;

		    var w;
		    if (endian === 'be') {
		      for (i = number.length - 1; i >= start; i -= 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    } else {
		      var parseLength = number.length - start;
		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    }

		    this._strip();
		  };

		  function parseBase (str, start, end, mul) {
		    var r = 0;
		    var b = 0;
		    var len = Math.min(str.length, end);
		    for (var i = start; i < len; i++) {
		      var c = str.charCodeAt(i) - 48;

		      r *= mul;

		      // 'a'
		      if (c >= 49) {
		        b = c - 49 + 0xa;

		      // 'A'
		      } else if (c >= 17) {
		        b = c - 17 + 0xa;

		      // '0' - '9'
		      } else {
		        b = c;
		      }
		      assert(c >= 0 && b < mul, 'Invalid character');
		      r += b;
		    }
		    return r;
		  }

		  BN.prototype._parseBase = function _parseBase (number, base, start) {
		    // Initialize as zero
		    this.words = [0];
		    this.length = 1;

		    // Find length of limb in base
		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		      limbLen++;
		    }
		    limbLen--;
		    limbPow = (limbPow / base) | 0;

		    var total = number.length - start;
		    var mod = total % limbLen;
		    var end = Math.min(total, total - mod) + start;

		    var word = 0;
		    for (var i = start; i < end; i += limbLen) {
		      word = parseBase(number, i, i + limbLen, base);

		      this.imuln(limbPow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    if (mod !== 0) {
		      var pow = 1;
		      word = parseBase(number, i, number.length, base);

		      for (i = 0; i < mod; i++) {
		        pow *= base;
		      }

		      this.imuln(pow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    this._strip();
		  };

		  BN.prototype.copy = function copy (dest) {
		    dest.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      dest.words[i] = this.words[i];
		    }
		    dest.length = this.length;
		    dest.negative = this.negative;
		    dest.red = this.red;
		  };

		  function move (dest, src) {
		    dest.words = src.words;
		    dest.length = src.length;
		    dest.negative = src.negative;
		    dest.red = src.red;
		  }

		  BN.prototype._move = function _move (dest) {
		    move(dest, this);
		  };

		  BN.prototype.clone = function clone () {
		    var r = new BN(null);
		    this.copy(r);
		    return r;
		  };

		  BN.prototype._expand = function _expand (size) {
		    while (this.length < size) {
		      this.words[this.length++] = 0;
		    }
		    return this;
		  };

		  // Remove leading `0` from `this`
		  BN.prototype._strip = function strip () {
		    while (this.length > 1 && this.words[this.length - 1] === 0) {
		      this.length--;
		    }
		    return this._normSign();
		  };

		  BN.prototype._normSign = function _normSign () {
		    // -0 = 0
		    if (this.length === 1 && this.words[0] === 0) {
		      this.negative = 0;
		    }
		    return this;
		  };

		  // Check Symbol.for because not everywhere where Symbol defined
		  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
		  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
		    try {
		      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
		    } catch (e) {
		      BN.prototype.inspect = inspect;
		    }
		  } else {
		    BN.prototype.inspect = inspect;
		  }

		  function inspect () {
		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
		  }

		  /*

		  var zeros = [];
		  var groupSizes = [];
		  var groupBases = [];

		  var s = '';
		  var i = -1;
		  while (++i < BN.wordSize) {
		    zeros[i] = s;
		    s += '0';
		  }
		  groupSizes[0] = 0;
		  groupSizes[1] = 0;
		  groupBases[0] = 0;
		  groupBases[1] = 0;
		  var base = 2 - 1;
		  while (++base < 36 + 1) {
		    var groupSize = 0;
		    var groupBase = 1;
		    while (groupBase < (1 << BN.wordSize) / base) {
		      groupBase *= base;
		      groupSize += 1;
		    }
		    groupSizes[base] = groupSize;
		    groupBases[base] = groupBase;
		  }

		  */

		  var zeros = [
		    '',
		    '0',
		    '00',
		    '000',
		    '0000',
		    '00000',
		    '000000',
		    '0000000',
		    '00000000',
		    '000000000',
		    '0000000000',
		    '00000000000',
		    '000000000000',
		    '0000000000000',
		    '00000000000000',
		    '000000000000000',
		    '0000000000000000',
		    '00000000000000000',
		    '000000000000000000',
		    '0000000000000000000',
		    '00000000000000000000',
		    '000000000000000000000',
		    '0000000000000000000000',
		    '00000000000000000000000',
		    '000000000000000000000000',
		    '0000000000000000000000000'
		  ];

		  var groupSizes = [
		    0, 0,
		    25, 16, 12, 11, 10, 9, 8,
		    8, 7, 7, 7, 7, 6, 6,
		    6, 6, 6, 6, 6, 5, 5,
		    5, 5, 5, 5, 5, 5, 5,
		    5, 5, 5, 5, 5, 5, 5
		  ];

		  var groupBases = [
		    0, 0,
		    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
		    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
		    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
		    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
		    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
		  ];

		  BN.prototype.toString = function toString (base, padding) {
		    base = base || 10;
		    padding = padding | 0 || 1;

		    var out;
		    if (base === 16 || base === 'hex') {
		      out = '';
		      var off = 0;
		      var carry = 0;
		      for (var i = 0; i < this.length; i++) {
		        var w = this.words[i];
		        var word = (((w << off) | carry) & 0xffffff).toString(16);
		        carry = (w >>> (24 - off)) & 0xffffff;
		        off += 2;
		        if (off >= 26) {
		          off -= 26;
		          i--;
		        }
		        if (carry !== 0 || i !== this.length - 1) {
		          out = zeros[6 - word.length] + word + out;
		        } else {
		          out = word + out;
		        }
		      }
		      if (carry !== 0) {
		        out = carry.toString(16) + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    if (base === (base | 0) && base >= 2 && base <= 36) {
		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		      var groupSize = groupSizes[base];
		      // var groupBase = Math.pow(base, groupSize);
		      var groupBase = groupBases[base];
		      out = '';
		      var c = this.clone();
		      c.negative = 0;
		      while (!c.isZero()) {
		        var r = c.modrn(groupBase).toString(base);
		        c = c.idivn(groupBase);

		        if (!c.isZero()) {
		          out = zeros[groupSize - r.length] + r + out;
		        } else {
		          out = r + out;
		        }
		      }
		      if (this.isZero()) {
		        out = '0' + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    assert(false, 'Base should be between 2 and 36');
		  };

		  BN.prototype.toNumber = function toNumber () {
		    var ret = this.words[0];
		    if (this.length === 2) {
		      ret += this.words[1] * 0x4000000;
		    } else if (this.length === 3 && this.words[2] === 0x01) {
		      // NOTE: at this stage it is known that the top bit is set
		      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
		    } else if (this.length > 2) {
		      assert(false, 'Number can only safely store up to 53 bits');
		    }
		    return (this.negative !== 0) ? -ret : ret;
		  };

		  BN.prototype.toJSON = function toJSON () {
		    return this.toString(16, 2);
		  };

		  if (Buffer) {
		    BN.prototype.toBuffer = function toBuffer (endian, length) {
		      return this.toArrayLike(Buffer, endian, length);
		    };
		  }

		  BN.prototype.toArray = function toArray (endian, length) {
		    return this.toArrayLike(Array, endian, length);
		  };

		  var allocate = function allocate (ArrayType, size) {
		    if (ArrayType.allocUnsafe) {
		      return ArrayType.allocUnsafe(size);
		    }
		    return new ArrayType(size);
		  };

		  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
		    this._strip();

		    var byteLength = this.byteLength();
		    var reqLength = length || Math.max(1, byteLength);
		    assert(byteLength <= reqLength, 'byte array longer than desired length');
		    assert(reqLength > 0, 'Requested array length <= 0');

		    var res = allocate(ArrayType, reqLength);
		    var postfix = endian === 'le' ? 'LE' : 'BE';
		    this['_toArrayLike' + postfix](res, byteLength);
		    return res;
		  };

		  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
		    var position = 0;
		    var carry = 0;

		    for (var i = 0, shift = 0; i < this.length; i++) {
		      var word = (this.words[i] << shift) | carry;

		      res[position++] = word & 0xff;
		      if (position < res.length) {
		        res[position++] = (word >> 8) & 0xff;
		      }
		      if (position < res.length) {
		        res[position++] = (word >> 16) & 0xff;
		      }

		      if (shift === 6) {
		        if (position < res.length) {
		          res[position++] = (word >> 24) & 0xff;
		        }
		        carry = 0;
		        shift = 0;
		      } else {
		        carry = word >>> 24;
		        shift += 2;
		      }
		    }

		    if (position < res.length) {
		      res[position++] = carry;

		      while (position < res.length) {
		        res[position++] = 0;
		      }
		    }
		  };

		  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
		    var position = res.length - 1;
		    var carry = 0;

		    for (var i = 0, shift = 0; i < this.length; i++) {
		      var word = (this.words[i] << shift) | carry;

		      res[position--] = word & 0xff;
		      if (position >= 0) {
		        res[position--] = (word >> 8) & 0xff;
		      }
		      if (position >= 0) {
		        res[position--] = (word >> 16) & 0xff;
		      }

		      if (shift === 6) {
		        if (position >= 0) {
		          res[position--] = (word >> 24) & 0xff;
		        }
		        carry = 0;
		        shift = 0;
		      } else {
		        carry = word >>> 24;
		        shift += 2;
		      }
		    }

		    if (position >= 0) {
		      res[position--] = carry;

		      while (position >= 0) {
		        res[position--] = 0;
		      }
		    }
		  };

		  if (Math.clz32) {
		    BN.prototype._countBits = function _countBits (w) {
		      return 32 - Math.clz32(w);
		    };
		  } else {
		    BN.prototype._countBits = function _countBits (w) {
		      var t = w;
		      var r = 0;
		      if (t >= 0x1000) {
		        r += 13;
		        t >>>= 13;
		      }
		      if (t >= 0x40) {
		        r += 7;
		        t >>>= 7;
		      }
		      if (t >= 0x8) {
		        r += 4;
		        t >>>= 4;
		      }
		      if (t >= 0x02) {
		        r += 2;
		        t >>>= 2;
		      }
		      return r + t;
		    };
		  }

		  BN.prototype._zeroBits = function _zeroBits (w) {
		    // Short-cut
		    if (w === 0) return 26;

		    var t = w;
		    var r = 0;
		    if ((t & 0x1fff) === 0) {
		      r += 13;
		      t >>>= 13;
		    }
		    if ((t & 0x7f) === 0) {
		      r += 7;
		      t >>>= 7;
		    }
		    if ((t & 0xf) === 0) {
		      r += 4;
		      t >>>= 4;
		    }
		    if ((t & 0x3) === 0) {
		      r += 2;
		      t >>>= 2;
		    }
		    if ((t & 0x1) === 0) {
		      r++;
		    }
		    return r;
		  };

		  // Return number of used bits in a BN
		  BN.prototype.bitLength = function bitLength () {
		    var w = this.words[this.length - 1];
		    var hi = this._countBits(w);
		    return (this.length - 1) * 26 + hi;
		  };

		  function toBitArray (num) {
		    var w = new Array(num.bitLength());

		    for (var bit = 0; bit < w.length; bit++) {
		      var off = (bit / 26) | 0;
		      var wbit = bit % 26;

		      w[bit] = (num.words[off] >>> wbit) & 0x01;
		    }

		    return w;
		  }

		  // Number of trailing zero bits
		  BN.prototype.zeroBits = function zeroBits () {
		    if (this.isZero()) return 0;

		    var r = 0;
		    for (var i = 0; i < this.length; i++) {
		      var b = this._zeroBits(this.words[i]);
		      r += b;
		      if (b !== 26) break;
		    }
		    return r;
		  };

		  BN.prototype.byteLength = function byteLength () {
		    return Math.ceil(this.bitLength() / 8);
		  };

		  BN.prototype.toTwos = function toTwos (width) {
		    if (this.negative !== 0) {
		      return this.abs().inotn(width).iaddn(1);
		    }
		    return this.clone();
		  };

		  BN.prototype.fromTwos = function fromTwos (width) {
		    if (this.testn(width - 1)) {
		      return this.notn(width).iaddn(1).ineg();
		    }
		    return this.clone();
		  };

		  BN.prototype.isNeg = function isNeg () {
		    return this.negative !== 0;
		  };

		  // Return negative clone of `this`
		  BN.prototype.neg = function neg () {
		    return this.clone().ineg();
		  };

		  BN.prototype.ineg = function ineg () {
		    if (!this.isZero()) {
		      this.negative ^= 1;
		    }

		    return this;
		  };

		  // Or `num` with `this` in-place
		  BN.prototype.iuor = function iuor (num) {
		    while (this.length < num.length) {
		      this.words[this.length++] = 0;
		    }

		    for (var i = 0; i < num.length; i++) {
		      this.words[i] = this.words[i] | num.words[i];
		    }

		    return this._strip();
		  };

		  BN.prototype.ior = function ior (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuor(num);
		  };

		  // Or `num` with `this`
		  BN.prototype.or = function or (num) {
		    if (this.length > num.length) return this.clone().ior(num);
		    return num.clone().ior(this);
		  };

		  BN.prototype.uor = function uor (num) {
		    if (this.length > num.length) return this.clone().iuor(num);
		    return num.clone().iuor(this);
		  };

		  // And `num` with `this` in-place
		  BN.prototype.iuand = function iuand (num) {
		    // b = min-length(num, this)
		    var b;
		    if (this.length > num.length) {
		      b = num;
		    } else {
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = this.words[i] & num.words[i];
		    }

		    this.length = b.length;

		    return this._strip();
		  };

		  BN.prototype.iand = function iand (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuand(num);
		  };

		  // And `num` with `this`
		  BN.prototype.and = function and (num) {
		    if (this.length > num.length) return this.clone().iand(num);
		    return num.clone().iand(this);
		  };

		  BN.prototype.uand = function uand (num) {
		    if (this.length > num.length) return this.clone().iuand(num);
		    return num.clone().iuand(this);
		  };

		  // Xor `num` with `this` in-place
		  BN.prototype.iuxor = function iuxor (num) {
		    // a.length > b.length
		    var a;
		    var b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = a.words[i] ^ b.words[i];
		    }

		    if (this !== a) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = a.length;

		    return this._strip();
		  };

		  BN.prototype.ixor = function ixor (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuxor(num);
		  };

		  // Xor `num` with `this`
		  BN.prototype.xor = function xor (num) {
		    if (this.length > num.length) return this.clone().ixor(num);
		    return num.clone().ixor(this);
		  };

		  BN.prototype.uxor = function uxor (num) {
		    if (this.length > num.length) return this.clone().iuxor(num);
		    return num.clone().iuxor(this);
		  };

		  // Not ``this`` with ``width`` bitwidth
		  BN.prototype.inotn = function inotn (width) {
		    assert(typeof width === 'number' && width >= 0);

		    var bytesNeeded = Math.ceil(width / 26) | 0;
		    var bitsLeft = width % 26;

		    // Extend the buffer with leading zeroes
		    this._expand(bytesNeeded);

		    if (bitsLeft > 0) {
		      bytesNeeded--;
		    }

		    // Handle complete words
		    for (var i = 0; i < bytesNeeded; i++) {
		      this.words[i] = ~this.words[i] & 0x3ffffff;
		    }

		    // Handle the residue
		    if (bitsLeft > 0) {
		      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
		    }

		    // And remove leading zeroes
		    return this._strip();
		  };

		  BN.prototype.notn = function notn (width) {
		    return this.clone().inotn(width);
		  };

		  // Set `bit` of `this`
		  BN.prototype.setn = function setn (bit, val) {
		    assert(typeof bit === 'number' && bit >= 0);

		    var off = (bit / 26) | 0;
		    var wbit = bit % 26;

		    this._expand(off + 1);

		    if (val) {
		      this.words[off] = this.words[off] | (1 << wbit);
		    } else {
		      this.words[off] = this.words[off] & ~(1 << wbit);
		    }

		    return this._strip();
		  };

		  // Add `num` to `this` in-place
		  BN.prototype.iadd = function iadd (num) {
		    var r;

		    // negative + positive
		    if (this.negative !== 0 && num.negative === 0) {
		      this.negative = 0;
		      r = this.isub(num);
		      this.negative ^= 1;
		      return this._normSign();

		    // positive + negative
		    } else if (this.negative === 0 && num.negative !== 0) {
		      num.negative = 0;
		      r = this.isub(num);
		      num.negative = 1;
		      return r._normSign();
		    }

		    // a.length > b.length
		    var a, b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }

		    this.length = a.length;
		    if (carry !== 0) {
		      this.words[this.length] = carry;
		      this.length++;
		    // Copy the rest of the words
		    } else if (a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    return this;
		  };

		  // Add `num` to `this`
		  BN.prototype.add = function add (num) {
		    var res;
		    if (num.negative !== 0 && this.negative === 0) {
		      num.negative = 0;
		      res = this.sub(num);
		      num.negative ^= 1;
		      return res;
		    } else if (num.negative === 0 && this.negative !== 0) {
		      this.negative = 0;
		      res = num.sub(this);
		      this.negative = 1;
		      return res;
		    }

		    if (this.length > num.length) return this.clone().iadd(num);

		    return num.clone().iadd(this);
		  };

		  // Subtract `num` from `this` in-place
		  BN.prototype.isub = function isub (num) {
		    // this - (-num) = this + num
		    if (num.negative !== 0) {
		      num.negative = 0;
		      var r = this.iadd(num);
		      num.negative = 1;
		      return r._normSign();

		    // -this - num = -(this + num)
		    } else if (this.negative !== 0) {
		      this.negative = 0;
		      this.iadd(num);
		      this.negative = 1;
		      return this._normSign();
		    }

		    // At this point both numbers are positive
		    var cmp = this.cmp(num);

		    // Optimization - zeroify
		    if (cmp === 0) {
		      this.negative = 0;
		      this.length = 1;
		      this.words[0] = 0;
		      return this;
		    }

		    // a > b
		    var a, b;
		    if (cmp > 0) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }

		    // Copy rest of the words
		    if (carry === 0 && i < a.length && a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = Math.max(this.length, i);

		    if (a !== this) {
		      this.negative = 1;
		    }

		    return this._strip();
		  };

		  // Subtract `num` from `this`
		  BN.prototype.sub = function sub (num) {
		    return this.clone().isub(num);
		  };

		  function smallMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    var len = (self.length + num.length) | 0;
		    out.length = len;
		    len = (len - 1) | 0;

		    // Peel one iteration (compiler can't do it, because of code complexity)
		    var a = self.words[0] | 0;
		    var b = num.words[0] | 0;
		    var r = a * b;

		    var lo = r & 0x3ffffff;
		    var carry = (r / 0x4000000) | 0;
		    out.words[0] = lo;

		    for (var k = 1; k < len; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = carry >>> 26;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = (k - j) | 0;
		        a = self.words[i] | 0;
		        b = num.words[j] | 0;
		        r = a * b + rword;
		        ncarry += (r / 0x4000000) | 0;
		        rword = r & 0x3ffffff;
		      }
		      out.words[k] = rword | 0;
		      carry = ncarry | 0;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry | 0;
		    } else {
		      out.length--;
		    }

		    return out._strip();
		  }

		  // TODO(indutny): it may be reasonable to omit it for users who don't need
		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
		  // multiplication (like elliptic secp256k1).
		  var comb10MulTo = function comb10MulTo (self, num, out) {
		    var a = self.words;
		    var b = num.words;
		    var o = out.words;
		    var c = 0;
		    var lo;
		    var mid;
		    var hi;
		    var a0 = a[0] | 0;
		    var al0 = a0 & 0x1fff;
		    var ah0 = a0 >>> 13;
		    var a1 = a[1] | 0;
		    var al1 = a1 & 0x1fff;
		    var ah1 = a1 >>> 13;
		    var a2 = a[2] | 0;
		    var al2 = a2 & 0x1fff;
		    var ah2 = a2 >>> 13;
		    var a3 = a[3] | 0;
		    var al3 = a3 & 0x1fff;
		    var ah3 = a3 >>> 13;
		    var a4 = a[4] | 0;
		    var al4 = a4 & 0x1fff;
		    var ah4 = a4 >>> 13;
		    var a5 = a[5] | 0;
		    var al5 = a5 & 0x1fff;
		    var ah5 = a5 >>> 13;
		    var a6 = a[6] | 0;
		    var al6 = a6 & 0x1fff;
		    var ah6 = a6 >>> 13;
		    var a7 = a[7] | 0;
		    var al7 = a7 & 0x1fff;
		    var ah7 = a7 >>> 13;
		    var a8 = a[8] | 0;
		    var al8 = a8 & 0x1fff;
		    var ah8 = a8 >>> 13;
		    var a9 = a[9] | 0;
		    var al9 = a9 & 0x1fff;
		    var ah9 = a9 >>> 13;
		    var b0 = b[0] | 0;
		    var bl0 = b0 & 0x1fff;
		    var bh0 = b0 >>> 13;
		    var b1 = b[1] | 0;
		    var bl1 = b1 & 0x1fff;
		    var bh1 = b1 >>> 13;
		    var b2 = b[2] | 0;
		    var bl2 = b2 & 0x1fff;
		    var bh2 = b2 >>> 13;
		    var b3 = b[3] | 0;
		    var bl3 = b3 & 0x1fff;
		    var bh3 = b3 >>> 13;
		    var b4 = b[4] | 0;
		    var bl4 = b4 & 0x1fff;
		    var bh4 = b4 >>> 13;
		    var b5 = b[5] | 0;
		    var bl5 = b5 & 0x1fff;
		    var bh5 = b5 >>> 13;
		    var b6 = b[6] | 0;
		    var bl6 = b6 & 0x1fff;
		    var bh6 = b6 >>> 13;
		    var b7 = b[7] | 0;
		    var bl7 = b7 & 0x1fff;
		    var bh7 = b7 >>> 13;
		    var b8 = b[8] | 0;
		    var bl8 = b8 & 0x1fff;
		    var bh8 = b8 >>> 13;
		    var b9 = b[9] | 0;
		    var bl9 = b9 & 0x1fff;
		    var bh9 = b9 >>> 13;

		    out.negative = self.negative ^ num.negative;
		    out.length = 19;
		    /* k = 0 */
		    lo = Math.imul(al0, bl0);
		    mid = Math.imul(al0, bh0);
		    mid = (mid + Math.imul(ah0, bl0)) | 0;
		    hi = Math.imul(ah0, bh0);
		    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
		    w0 &= 0x3ffffff;
		    /* k = 1 */
		    lo = Math.imul(al1, bl0);
		    mid = Math.imul(al1, bh0);
		    mid = (mid + Math.imul(ah1, bl0)) | 0;
		    hi = Math.imul(ah1, bh0);
		    lo = (lo + Math.imul(al0, bl1)) | 0;
		    mid = (mid + Math.imul(al0, bh1)) | 0;
		    mid = (mid + Math.imul(ah0, bl1)) | 0;
		    hi = (hi + Math.imul(ah0, bh1)) | 0;
		    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
		    w1 &= 0x3ffffff;
		    /* k = 2 */
		    lo = Math.imul(al2, bl0);
		    mid = Math.imul(al2, bh0);
		    mid = (mid + Math.imul(ah2, bl0)) | 0;
		    hi = Math.imul(ah2, bh0);
		    lo = (lo + Math.imul(al1, bl1)) | 0;
		    mid = (mid + Math.imul(al1, bh1)) | 0;
		    mid = (mid + Math.imul(ah1, bl1)) | 0;
		    hi = (hi + Math.imul(ah1, bh1)) | 0;
		    lo = (lo + Math.imul(al0, bl2)) | 0;
		    mid = (mid + Math.imul(al0, bh2)) | 0;
		    mid = (mid + Math.imul(ah0, bl2)) | 0;
		    hi = (hi + Math.imul(ah0, bh2)) | 0;
		    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
		    w2 &= 0x3ffffff;
		    /* k = 3 */
		    lo = Math.imul(al3, bl0);
		    mid = Math.imul(al3, bh0);
		    mid = (mid + Math.imul(ah3, bl0)) | 0;
		    hi = Math.imul(ah3, bh0);
		    lo = (lo + Math.imul(al2, bl1)) | 0;
		    mid = (mid + Math.imul(al2, bh1)) | 0;
		    mid = (mid + Math.imul(ah2, bl1)) | 0;
		    hi = (hi + Math.imul(ah2, bh1)) | 0;
		    lo = (lo + Math.imul(al1, bl2)) | 0;
		    mid = (mid + Math.imul(al1, bh2)) | 0;
		    mid = (mid + Math.imul(ah1, bl2)) | 0;
		    hi = (hi + Math.imul(ah1, bh2)) | 0;
		    lo = (lo + Math.imul(al0, bl3)) | 0;
		    mid = (mid + Math.imul(al0, bh3)) | 0;
		    mid = (mid + Math.imul(ah0, bl3)) | 0;
		    hi = (hi + Math.imul(ah0, bh3)) | 0;
		    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
		    w3 &= 0x3ffffff;
		    /* k = 4 */
		    lo = Math.imul(al4, bl0);
		    mid = Math.imul(al4, bh0);
		    mid = (mid + Math.imul(ah4, bl0)) | 0;
		    hi = Math.imul(ah4, bh0);
		    lo = (lo + Math.imul(al3, bl1)) | 0;
		    mid = (mid + Math.imul(al3, bh1)) | 0;
		    mid = (mid + Math.imul(ah3, bl1)) | 0;
		    hi = (hi + Math.imul(ah3, bh1)) | 0;
		    lo = (lo + Math.imul(al2, bl2)) | 0;
		    mid = (mid + Math.imul(al2, bh2)) | 0;
		    mid = (mid + Math.imul(ah2, bl2)) | 0;
		    hi = (hi + Math.imul(ah2, bh2)) | 0;
		    lo = (lo + Math.imul(al1, bl3)) | 0;
		    mid = (mid + Math.imul(al1, bh3)) | 0;
		    mid = (mid + Math.imul(ah1, bl3)) | 0;
		    hi = (hi + Math.imul(ah1, bh3)) | 0;
		    lo = (lo + Math.imul(al0, bl4)) | 0;
		    mid = (mid + Math.imul(al0, bh4)) | 0;
		    mid = (mid + Math.imul(ah0, bl4)) | 0;
		    hi = (hi + Math.imul(ah0, bh4)) | 0;
		    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
		    w4 &= 0x3ffffff;
		    /* k = 5 */
		    lo = Math.imul(al5, bl0);
		    mid = Math.imul(al5, bh0);
		    mid = (mid + Math.imul(ah5, bl0)) | 0;
		    hi = Math.imul(ah5, bh0);
		    lo = (lo + Math.imul(al4, bl1)) | 0;
		    mid = (mid + Math.imul(al4, bh1)) | 0;
		    mid = (mid + Math.imul(ah4, bl1)) | 0;
		    hi = (hi + Math.imul(ah4, bh1)) | 0;
		    lo = (lo + Math.imul(al3, bl2)) | 0;
		    mid = (mid + Math.imul(al3, bh2)) | 0;
		    mid = (mid + Math.imul(ah3, bl2)) | 0;
		    hi = (hi + Math.imul(ah3, bh2)) | 0;
		    lo = (lo + Math.imul(al2, bl3)) | 0;
		    mid = (mid + Math.imul(al2, bh3)) | 0;
		    mid = (mid + Math.imul(ah2, bl3)) | 0;
		    hi = (hi + Math.imul(ah2, bh3)) | 0;
		    lo = (lo + Math.imul(al1, bl4)) | 0;
		    mid = (mid + Math.imul(al1, bh4)) | 0;
		    mid = (mid + Math.imul(ah1, bl4)) | 0;
		    hi = (hi + Math.imul(ah1, bh4)) | 0;
		    lo = (lo + Math.imul(al0, bl5)) | 0;
		    mid = (mid + Math.imul(al0, bh5)) | 0;
		    mid = (mid + Math.imul(ah0, bl5)) | 0;
		    hi = (hi + Math.imul(ah0, bh5)) | 0;
		    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
		    w5 &= 0x3ffffff;
		    /* k = 6 */
		    lo = Math.imul(al6, bl0);
		    mid = Math.imul(al6, bh0);
		    mid = (mid + Math.imul(ah6, bl0)) | 0;
		    hi = Math.imul(ah6, bh0);
		    lo = (lo + Math.imul(al5, bl1)) | 0;
		    mid = (mid + Math.imul(al5, bh1)) | 0;
		    mid = (mid + Math.imul(ah5, bl1)) | 0;
		    hi = (hi + Math.imul(ah5, bh1)) | 0;
		    lo = (lo + Math.imul(al4, bl2)) | 0;
		    mid = (mid + Math.imul(al4, bh2)) | 0;
		    mid = (mid + Math.imul(ah4, bl2)) | 0;
		    hi = (hi + Math.imul(ah4, bh2)) | 0;
		    lo = (lo + Math.imul(al3, bl3)) | 0;
		    mid = (mid + Math.imul(al3, bh3)) | 0;
		    mid = (mid + Math.imul(ah3, bl3)) | 0;
		    hi = (hi + Math.imul(ah3, bh3)) | 0;
		    lo = (lo + Math.imul(al2, bl4)) | 0;
		    mid = (mid + Math.imul(al2, bh4)) | 0;
		    mid = (mid + Math.imul(ah2, bl4)) | 0;
		    hi = (hi + Math.imul(ah2, bh4)) | 0;
		    lo = (lo + Math.imul(al1, bl5)) | 0;
		    mid = (mid + Math.imul(al1, bh5)) | 0;
		    mid = (mid + Math.imul(ah1, bl5)) | 0;
		    hi = (hi + Math.imul(ah1, bh5)) | 0;
		    lo = (lo + Math.imul(al0, bl6)) | 0;
		    mid = (mid + Math.imul(al0, bh6)) | 0;
		    mid = (mid + Math.imul(ah0, bl6)) | 0;
		    hi = (hi + Math.imul(ah0, bh6)) | 0;
		    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
		    w6 &= 0x3ffffff;
		    /* k = 7 */
		    lo = Math.imul(al7, bl0);
		    mid = Math.imul(al7, bh0);
		    mid = (mid + Math.imul(ah7, bl0)) | 0;
		    hi = Math.imul(ah7, bh0);
		    lo = (lo + Math.imul(al6, bl1)) | 0;
		    mid = (mid + Math.imul(al6, bh1)) | 0;
		    mid = (mid + Math.imul(ah6, bl1)) | 0;
		    hi = (hi + Math.imul(ah6, bh1)) | 0;
		    lo = (lo + Math.imul(al5, bl2)) | 0;
		    mid = (mid + Math.imul(al5, bh2)) | 0;
		    mid = (mid + Math.imul(ah5, bl2)) | 0;
		    hi = (hi + Math.imul(ah5, bh2)) | 0;
		    lo = (lo + Math.imul(al4, bl3)) | 0;
		    mid = (mid + Math.imul(al4, bh3)) | 0;
		    mid = (mid + Math.imul(ah4, bl3)) | 0;
		    hi = (hi + Math.imul(ah4, bh3)) | 0;
		    lo = (lo + Math.imul(al3, bl4)) | 0;
		    mid = (mid + Math.imul(al3, bh4)) | 0;
		    mid = (mid + Math.imul(ah3, bl4)) | 0;
		    hi = (hi + Math.imul(ah3, bh4)) | 0;
		    lo = (lo + Math.imul(al2, bl5)) | 0;
		    mid = (mid + Math.imul(al2, bh5)) | 0;
		    mid = (mid + Math.imul(ah2, bl5)) | 0;
		    hi = (hi + Math.imul(ah2, bh5)) | 0;
		    lo = (lo + Math.imul(al1, bl6)) | 0;
		    mid = (mid + Math.imul(al1, bh6)) | 0;
		    mid = (mid + Math.imul(ah1, bl6)) | 0;
		    hi = (hi + Math.imul(ah1, bh6)) | 0;
		    lo = (lo + Math.imul(al0, bl7)) | 0;
		    mid = (mid + Math.imul(al0, bh7)) | 0;
		    mid = (mid + Math.imul(ah0, bl7)) | 0;
		    hi = (hi + Math.imul(ah0, bh7)) | 0;
		    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
		    w7 &= 0x3ffffff;
		    /* k = 8 */
		    lo = Math.imul(al8, bl0);
		    mid = Math.imul(al8, bh0);
		    mid = (mid + Math.imul(ah8, bl0)) | 0;
		    hi = Math.imul(ah8, bh0);
		    lo = (lo + Math.imul(al7, bl1)) | 0;
		    mid = (mid + Math.imul(al7, bh1)) | 0;
		    mid = (mid + Math.imul(ah7, bl1)) | 0;
		    hi = (hi + Math.imul(ah7, bh1)) | 0;
		    lo = (lo + Math.imul(al6, bl2)) | 0;
		    mid = (mid + Math.imul(al6, bh2)) | 0;
		    mid = (mid + Math.imul(ah6, bl2)) | 0;
		    hi = (hi + Math.imul(ah6, bh2)) | 0;
		    lo = (lo + Math.imul(al5, bl3)) | 0;
		    mid = (mid + Math.imul(al5, bh3)) | 0;
		    mid = (mid + Math.imul(ah5, bl3)) | 0;
		    hi = (hi + Math.imul(ah5, bh3)) | 0;
		    lo = (lo + Math.imul(al4, bl4)) | 0;
		    mid = (mid + Math.imul(al4, bh4)) | 0;
		    mid = (mid + Math.imul(ah4, bl4)) | 0;
		    hi = (hi + Math.imul(ah4, bh4)) | 0;
		    lo = (lo + Math.imul(al3, bl5)) | 0;
		    mid = (mid + Math.imul(al3, bh5)) | 0;
		    mid = (mid + Math.imul(ah3, bl5)) | 0;
		    hi = (hi + Math.imul(ah3, bh5)) | 0;
		    lo = (lo + Math.imul(al2, bl6)) | 0;
		    mid = (mid + Math.imul(al2, bh6)) | 0;
		    mid = (mid + Math.imul(ah2, bl6)) | 0;
		    hi = (hi + Math.imul(ah2, bh6)) | 0;
		    lo = (lo + Math.imul(al1, bl7)) | 0;
		    mid = (mid + Math.imul(al1, bh7)) | 0;
		    mid = (mid + Math.imul(ah1, bl7)) | 0;
		    hi = (hi + Math.imul(ah1, bh7)) | 0;
		    lo = (lo + Math.imul(al0, bl8)) | 0;
		    mid = (mid + Math.imul(al0, bh8)) | 0;
		    mid = (mid + Math.imul(ah0, bl8)) | 0;
		    hi = (hi + Math.imul(ah0, bh8)) | 0;
		    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
		    w8 &= 0x3ffffff;
		    /* k = 9 */
		    lo = Math.imul(al9, bl0);
		    mid = Math.imul(al9, bh0);
		    mid = (mid + Math.imul(ah9, bl0)) | 0;
		    hi = Math.imul(ah9, bh0);
		    lo = (lo + Math.imul(al8, bl1)) | 0;
		    mid = (mid + Math.imul(al8, bh1)) | 0;
		    mid = (mid + Math.imul(ah8, bl1)) | 0;
		    hi = (hi + Math.imul(ah8, bh1)) | 0;
		    lo = (lo + Math.imul(al7, bl2)) | 0;
		    mid = (mid + Math.imul(al7, bh2)) | 0;
		    mid = (mid + Math.imul(ah7, bl2)) | 0;
		    hi = (hi + Math.imul(ah7, bh2)) | 0;
		    lo = (lo + Math.imul(al6, bl3)) | 0;
		    mid = (mid + Math.imul(al6, bh3)) | 0;
		    mid = (mid + Math.imul(ah6, bl3)) | 0;
		    hi = (hi + Math.imul(ah6, bh3)) | 0;
		    lo = (lo + Math.imul(al5, bl4)) | 0;
		    mid = (mid + Math.imul(al5, bh4)) | 0;
		    mid = (mid + Math.imul(ah5, bl4)) | 0;
		    hi = (hi + Math.imul(ah5, bh4)) | 0;
		    lo = (lo + Math.imul(al4, bl5)) | 0;
		    mid = (mid + Math.imul(al4, bh5)) | 0;
		    mid = (mid + Math.imul(ah4, bl5)) | 0;
		    hi = (hi + Math.imul(ah4, bh5)) | 0;
		    lo = (lo + Math.imul(al3, bl6)) | 0;
		    mid = (mid + Math.imul(al3, bh6)) | 0;
		    mid = (mid + Math.imul(ah3, bl6)) | 0;
		    hi = (hi + Math.imul(ah3, bh6)) | 0;
		    lo = (lo + Math.imul(al2, bl7)) | 0;
		    mid = (mid + Math.imul(al2, bh7)) | 0;
		    mid = (mid + Math.imul(ah2, bl7)) | 0;
		    hi = (hi + Math.imul(ah2, bh7)) | 0;
		    lo = (lo + Math.imul(al1, bl8)) | 0;
		    mid = (mid + Math.imul(al1, bh8)) | 0;
		    mid = (mid + Math.imul(ah1, bl8)) | 0;
		    hi = (hi + Math.imul(ah1, bh8)) | 0;
		    lo = (lo + Math.imul(al0, bl9)) | 0;
		    mid = (mid + Math.imul(al0, bh9)) | 0;
		    mid = (mid + Math.imul(ah0, bl9)) | 0;
		    hi = (hi + Math.imul(ah0, bh9)) | 0;
		    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
		    w9 &= 0x3ffffff;
		    /* k = 10 */
		    lo = Math.imul(al9, bl1);
		    mid = Math.imul(al9, bh1);
		    mid = (mid + Math.imul(ah9, bl1)) | 0;
		    hi = Math.imul(ah9, bh1);
		    lo = (lo + Math.imul(al8, bl2)) | 0;
		    mid = (mid + Math.imul(al8, bh2)) | 0;
		    mid = (mid + Math.imul(ah8, bl2)) | 0;
		    hi = (hi + Math.imul(ah8, bh2)) | 0;
		    lo = (lo + Math.imul(al7, bl3)) | 0;
		    mid = (mid + Math.imul(al7, bh3)) | 0;
		    mid = (mid + Math.imul(ah7, bl3)) | 0;
		    hi = (hi + Math.imul(ah7, bh3)) | 0;
		    lo = (lo + Math.imul(al6, bl4)) | 0;
		    mid = (mid + Math.imul(al6, bh4)) | 0;
		    mid = (mid + Math.imul(ah6, bl4)) | 0;
		    hi = (hi + Math.imul(ah6, bh4)) | 0;
		    lo = (lo + Math.imul(al5, bl5)) | 0;
		    mid = (mid + Math.imul(al5, bh5)) | 0;
		    mid = (mid + Math.imul(ah5, bl5)) | 0;
		    hi = (hi + Math.imul(ah5, bh5)) | 0;
		    lo = (lo + Math.imul(al4, bl6)) | 0;
		    mid = (mid + Math.imul(al4, bh6)) | 0;
		    mid = (mid + Math.imul(ah4, bl6)) | 0;
		    hi = (hi + Math.imul(ah4, bh6)) | 0;
		    lo = (lo + Math.imul(al3, bl7)) | 0;
		    mid = (mid + Math.imul(al3, bh7)) | 0;
		    mid = (mid + Math.imul(ah3, bl7)) | 0;
		    hi = (hi + Math.imul(ah3, bh7)) | 0;
		    lo = (lo + Math.imul(al2, bl8)) | 0;
		    mid = (mid + Math.imul(al2, bh8)) | 0;
		    mid = (mid + Math.imul(ah2, bl8)) | 0;
		    hi = (hi + Math.imul(ah2, bh8)) | 0;
		    lo = (lo + Math.imul(al1, bl9)) | 0;
		    mid = (mid + Math.imul(al1, bh9)) | 0;
		    mid = (mid + Math.imul(ah1, bl9)) | 0;
		    hi = (hi + Math.imul(ah1, bh9)) | 0;
		    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
		    w10 &= 0x3ffffff;
		    /* k = 11 */
		    lo = Math.imul(al9, bl2);
		    mid = Math.imul(al9, bh2);
		    mid = (mid + Math.imul(ah9, bl2)) | 0;
		    hi = Math.imul(ah9, bh2);
		    lo = (lo + Math.imul(al8, bl3)) | 0;
		    mid = (mid + Math.imul(al8, bh3)) | 0;
		    mid = (mid + Math.imul(ah8, bl3)) | 0;
		    hi = (hi + Math.imul(ah8, bh3)) | 0;
		    lo = (lo + Math.imul(al7, bl4)) | 0;
		    mid = (mid + Math.imul(al7, bh4)) | 0;
		    mid = (mid + Math.imul(ah7, bl4)) | 0;
		    hi = (hi + Math.imul(ah7, bh4)) | 0;
		    lo = (lo + Math.imul(al6, bl5)) | 0;
		    mid = (mid + Math.imul(al6, bh5)) | 0;
		    mid = (mid + Math.imul(ah6, bl5)) | 0;
		    hi = (hi + Math.imul(ah6, bh5)) | 0;
		    lo = (lo + Math.imul(al5, bl6)) | 0;
		    mid = (mid + Math.imul(al5, bh6)) | 0;
		    mid = (mid + Math.imul(ah5, bl6)) | 0;
		    hi = (hi + Math.imul(ah5, bh6)) | 0;
		    lo = (lo + Math.imul(al4, bl7)) | 0;
		    mid = (mid + Math.imul(al4, bh7)) | 0;
		    mid = (mid + Math.imul(ah4, bl7)) | 0;
		    hi = (hi + Math.imul(ah4, bh7)) | 0;
		    lo = (lo + Math.imul(al3, bl8)) | 0;
		    mid = (mid + Math.imul(al3, bh8)) | 0;
		    mid = (mid + Math.imul(ah3, bl8)) | 0;
		    hi = (hi + Math.imul(ah3, bh8)) | 0;
		    lo = (lo + Math.imul(al2, bl9)) | 0;
		    mid = (mid + Math.imul(al2, bh9)) | 0;
		    mid = (mid + Math.imul(ah2, bl9)) | 0;
		    hi = (hi + Math.imul(ah2, bh9)) | 0;
		    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
		    w11 &= 0x3ffffff;
		    /* k = 12 */
		    lo = Math.imul(al9, bl3);
		    mid = Math.imul(al9, bh3);
		    mid = (mid + Math.imul(ah9, bl3)) | 0;
		    hi = Math.imul(ah9, bh3);
		    lo = (lo + Math.imul(al8, bl4)) | 0;
		    mid = (mid + Math.imul(al8, bh4)) | 0;
		    mid = (mid + Math.imul(ah8, bl4)) | 0;
		    hi = (hi + Math.imul(ah8, bh4)) | 0;
		    lo = (lo + Math.imul(al7, bl5)) | 0;
		    mid = (mid + Math.imul(al7, bh5)) | 0;
		    mid = (mid + Math.imul(ah7, bl5)) | 0;
		    hi = (hi + Math.imul(ah7, bh5)) | 0;
		    lo = (lo + Math.imul(al6, bl6)) | 0;
		    mid = (mid + Math.imul(al6, bh6)) | 0;
		    mid = (mid + Math.imul(ah6, bl6)) | 0;
		    hi = (hi + Math.imul(ah6, bh6)) | 0;
		    lo = (lo + Math.imul(al5, bl7)) | 0;
		    mid = (mid + Math.imul(al5, bh7)) | 0;
		    mid = (mid + Math.imul(ah5, bl7)) | 0;
		    hi = (hi + Math.imul(ah5, bh7)) | 0;
		    lo = (lo + Math.imul(al4, bl8)) | 0;
		    mid = (mid + Math.imul(al4, bh8)) | 0;
		    mid = (mid + Math.imul(ah4, bl8)) | 0;
		    hi = (hi + Math.imul(ah4, bh8)) | 0;
		    lo = (lo + Math.imul(al3, bl9)) | 0;
		    mid = (mid + Math.imul(al3, bh9)) | 0;
		    mid = (mid + Math.imul(ah3, bl9)) | 0;
		    hi = (hi + Math.imul(ah3, bh9)) | 0;
		    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
		    w12 &= 0x3ffffff;
		    /* k = 13 */
		    lo = Math.imul(al9, bl4);
		    mid = Math.imul(al9, bh4);
		    mid = (mid + Math.imul(ah9, bl4)) | 0;
		    hi = Math.imul(ah9, bh4);
		    lo = (lo + Math.imul(al8, bl5)) | 0;
		    mid = (mid + Math.imul(al8, bh5)) | 0;
		    mid = (mid + Math.imul(ah8, bl5)) | 0;
		    hi = (hi + Math.imul(ah8, bh5)) | 0;
		    lo = (lo + Math.imul(al7, bl6)) | 0;
		    mid = (mid + Math.imul(al7, bh6)) | 0;
		    mid = (mid + Math.imul(ah7, bl6)) | 0;
		    hi = (hi + Math.imul(ah7, bh6)) | 0;
		    lo = (lo + Math.imul(al6, bl7)) | 0;
		    mid = (mid + Math.imul(al6, bh7)) | 0;
		    mid = (mid + Math.imul(ah6, bl7)) | 0;
		    hi = (hi + Math.imul(ah6, bh7)) | 0;
		    lo = (lo + Math.imul(al5, bl8)) | 0;
		    mid = (mid + Math.imul(al5, bh8)) | 0;
		    mid = (mid + Math.imul(ah5, bl8)) | 0;
		    hi = (hi + Math.imul(ah5, bh8)) | 0;
		    lo = (lo + Math.imul(al4, bl9)) | 0;
		    mid = (mid + Math.imul(al4, bh9)) | 0;
		    mid = (mid + Math.imul(ah4, bl9)) | 0;
		    hi = (hi + Math.imul(ah4, bh9)) | 0;
		    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
		    w13 &= 0x3ffffff;
		    /* k = 14 */
		    lo = Math.imul(al9, bl5);
		    mid = Math.imul(al9, bh5);
		    mid = (mid + Math.imul(ah9, bl5)) | 0;
		    hi = Math.imul(ah9, bh5);
		    lo = (lo + Math.imul(al8, bl6)) | 0;
		    mid = (mid + Math.imul(al8, bh6)) | 0;
		    mid = (mid + Math.imul(ah8, bl6)) | 0;
		    hi = (hi + Math.imul(ah8, bh6)) | 0;
		    lo = (lo + Math.imul(al7, bl7)) | 0;
		    mid = (mid + Math.imul(al7, bh7)) | 0;
		    mid = (mid + Math.imul(ah7, bl7)) | 0;
		    hi = (hi + Math.imul(ah7, bh7)) | 0;
		    lo = (lo + Math.imul(al6, bl8)) | 0;
		    mid = (mid + Math.imul(al6, bh8)) | 0;
		    mid = (mid + Math.imul(ah6, bl8)) | 0;
		    hi = (hi + Math.imul(ah6, bh8)) | 0;
		    lo = (lo + Math.imul(al5, bl9)) | 0;
		    mid = (mid + Math.imul(al5, bh9)) | 0;
		    mid = (mid + Math.imul(ah5, bl9)) | 0;
		    hi = (hi + Math.imul(ah5, bh9)) | 0;
		    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
		    w14 &= 0x3ffffff;
		    /* k = 15 */
		    lo = Math.imul(al9, bl6);
		    mid = Math.imul(al9, bh6);
		    mid = (mid + Math.imul(ah9, bl6)) | 0;
		    hi = Math.imul(ah9, bh6);
		    lo = (lo + Math.imul(al8, bl7)) | 0;
		    mid = (mid + Math.imul(al8, bh7)) | 0;
		    mid = (mid + Math.imul(ah8, bl7)) | 0;
		    hi = (hi + Math.imul(ah8, bh7)) | 0;
		    lo = (lo + Math.imul(al7, bl8)) | 0;
		    mid = (mid + Math.imul(al7, bh8)) | 0;
		    mid = (mid + Math.imul(ah7, bl8)) | 0;
		    hi = (hi + Math.imul(ah7, bh8)) | 0;
		    lo = (lo + Math.imul(al6, bl9)) | 0;
		    mid = (mid + Math.imul(al6, bh9)) | 0;
		    mid = (mid + Math.imul(ah6, bl9)) | 0;
		    hi = (hi + Math.imul(ah6, bh9)) | 0;
		    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
		    w15 &= 0x3ffffff;
		    /* k = 16 */
		    lo = Math.imul(al9, bl7);
		    mid = Math.imul(al9, bh7);
		    mid = (mid + Math.imul(ah9, bl7)) | 0;
		    hi = Math.imul(ah9, bh7);
		    lo = (lo + Math.imul(al8, bl8)) | 0;
		    mid = (mid + Math.imul(al8, bh8)) | 0;
		    mid = (mid + Math.imul(ah8, bl8)) | 0;
		    hi = (hi + Math.imul(ah8, bh8)) | 0;
		    lo = (lo + Math.imul(al7, bl9)) | 0;
		    mid = (mid + Math.imul(al7, bh9)) | 0;
		    mid = (mid + Math.imul(ah7, bl9)) | 0;
		    hi = (hi + Math.imul(ah7, bh9)) | 0;
		    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
		    w16 &= 0x3ffffff;
		    /* k = 17 */
		    lo = Math.imul(al9, bl8);
		    mid = Math.imul(al9, bh8);
		    mid = (mid + Math.imul(ah9, bl8)) | 0;
		    hi = Math.imul(ah9, bh8);
		    lo = (lo + Math.imul(al8, bl9)) | 0;
		    mid = (mid + Math.imul(al8, bh9)) | 0;
		    mid = (mid + Math.imul(ah8, bl9)) | 0;
		    hi = (hi + Math.imul(ah8, bh9)) | 0;
		    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
		    w17 &= 0x3ffffff;
		    /* k = 18 */
		    lo = Math.imul(al9, bl9);
		    mid = Math.imul(al9, bh9);
		    mid = (mid + Math.imul(ah9, bl9)) | 0;
		    hi = Math.imul(ah9, bh9);
		    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
		    w18 &= 0x3ffffff;
		    o[0] = w0;
		    o[1] = w1;
		    o[2] = w2;
		    o[3] = w3;
		    o[4] = w4;
		    o[5] = w5;
		    o[6] = w6;
		    o[7] = w7;
		    o[8] = w8;
		    o[9] = w9;
		    o[10] = w10;
		    o[11] = w11;
		    o[12] = w12;
		    o[13] = w13;
		    o[14] = w14;
		    o[15] = w15;
		    o[16] = w16;
		    o[17] = w17;
		    o[18] = w18;
		    if (c !== 0) {
		      o[19] = c;
		      out.length++;
		    }
		    return out;
		  };

		  // Polyfill comb
		  if (!Math.imul) {
		    comb10MulTo = smallMulTo;
		  }

		  function bigMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    out.length = self.length + num.length;

		    var carry = 0;
		    var hncarry = 0;
		    for (var k = 0; k < out.length - 1; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = hncarry;
		      hncarry = 0;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j;
		        var a = self.words[i] | 0;
		        var b = num.words[j] | 0;
		        var r = a * b;

		        var lo = r & 0x3ffffff;
		        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
		        lo = (lo + rword) | 0;
		        rword = lo & 0x3ffffff;
		        ncarry = (ncarry + (lo >>> 26)) | 0;

		        hncarry += ncarry >>> 26;
		        ncarry &= 0x3ffffff;
		      }
		      out.words[k] = rword;
		      carry = ncarry;
		      ncarry = hncarry;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry;
		    } else {
		      out.length--;
		    }

		    return out._strip();
		  }

		  function jumboMulTo (self, num, out) {
		    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
		    // var fftm = new FFTM();
		    // return fftm.mulp(self, num, out);
		    return bigMulTo(self, num, out);
		  }

		  BN.prototype.mulTo = function mulTo (num, out) {
		    var res;
		    var len = this.length + num.length;
		    if (this.length === 10 && num.length === 10) {
		      res = comb10MulTo(this, num, out);
		    } else if (len < 63) {
		      res = smallMulTo(this, num, out);
		    } else if (len < 1024) {
		      res = bigMulTo(this, num, out);
		    } else {
		      res = jumboMulTo(this, num, out);
		    }

		    return res;
		  };

		  // Cooley-Tukey algorithm for FFT
		  // slightly revisited to rely on looping instead of recursion

		  function FFTM (x, y) {
		    this.x = x;
		    this.y = y;
		  }

		  FFTM.prototype.makeRBT = function makeRBT (N) {
		    var t = new Array(N);
		    var l = BN.prototype._countBits(N) - 1;
		    for (var i = 0; i < N; i++) {
		      t[i] = this.revBin(i, l, N);
		    }

		    return t;
		  };

		  // Returns binary-reversed representation of `x`
		  FFTM.prototype.revBin = function revBin (x, l, N) {
		    if (x === 0 || x === N - 1) return x;

		    var rb = 0;
		    for (var i = 0; i < l; i++) {
		      rb |= (x & 1) << (l - i - 1);
		      x >>= 1;
		    }

		    return rb;
		  };

		  // Performs "tweedling" phase, therefore 'emulating'
		  // behaviour of the recursive algorithm
		  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
		    for (var i = 0; i < N; i++) {
		      rtws[i] = rws[rbt[i]];
		      itws[i] = iws[rbt[i]];
		    }
		  };

		  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
		    this.permute(rbt, rws, iws, rtws, itws, N);

		    for (var s = 1; s < N; s <<= 1) {
		      var l = s << 1;

		      var rtwdf = Math.cos(2 * Math.PI / l);
		      var itwdf = Math.sin(2 * Math.PI / l);

		      for (var p = 0; p < N; p += l) {
		        var rtwdf_ = rtwdf;
		        var itwdf_ = itwdf;

		        for (var j = 0; j < s; j++) {
		          var re = rtws[p + j];
		          var ie = itws[p + j];

		          var ro = rtws[p + j + s];
		          var io = itws[p + j + s];

		          var rx = rtwdf_ * ro - itwdf_ * io;

		          io = rtwdf_ * io + itwdf_ * ro;
		          ro = rx;

		          rtws[p + j] = re + ro;
		          itws[p + j] = ie + io;

		          rtws[p + j + s] = re - ro;
		          itws[p + j + s] = ie - io;

		          /* jshint maxdepth : false */
		          if (j !== l) {
		            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

		            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
		            rtwdf_ = rx;
		          }
		        }
		      }
		    }
		  };

		  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
		    var N = Math.max(m, n) | 1;
		    var odd = N & 1;
		    var i = 0;
		    for (N = N / 2 | 0; N; N = N >>> 1) {
		      i++;
		    }

		    return 1 << i + 1 + odd;
		  };

		  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
		    if (N <= 1) return;

		    for (var i = 0; i < N / 2; i++) {
		      var t = rws[i];

		      rws[i] = rws[N - i - 1];
		      rws[N - i - 1] = t;

		      t = iws[i];

		      iws[i] = -iws[N - i - 1];
		      iws[N - i - 1] = -t;
		    }
		  };

		  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
		    var carry = 0;
		    for (var i = 0; i < N / 2; i++) {
		      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
		        Math.round(ws[2 * i] / N) +
		        carry;

		      ws[i] = w & 0x3ffffff;

		      if (w < 0x4000000) {
		        carry = 0;
		      } else {
		        carry = w / 0x4000000 | 0;
		      }
		    }

		    return ws;
		  };

		  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
		    var carry = 0;
		    for (var i = 0; i < len; i++) {
		      carry = carry + (ws[i] | 0);

		      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
		      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
		    }

		    // Pad with zeroes
		    for (i = 2 * len; i < N; ++i) {
		      rws[i] = 0;
		    }

		    assert(carry === 0);
		    assert((carry & ~0x1fff) === 0);
		  };

		  FFTM.prototype.stub = function stub (N) {
		    var ph = new Array(N);
		    for (var i = 0; i < N; i++) {
		      ph[i] = 0;
		    }

		    return ph;
		  };

		  FFTM.prototype.mulp = function mulp (x, y, out) {
		    var N = 2 * this.guessLen13b(x.length, y.length);

		    var rbt = this.makeRBT(N);

		    var _ = this.stub(N);

		    var rws = new Array(N);
		    var rwst = new Array(N);
		    var iwst = new Array(N);

		    var nrws = new Array(N);
		    var nrwst = new Array(N);
		    var niwst = new Array(N);

		    var rmws = out.words;
		    rmws.length = N;

		    this.convert13b(x.words, x.length, rws, N);
		    this.convert13b(y.words, y.length, nrws, N);

		    this.transform(rws, _, rwst, iwst, N, rbt);
		    this.transform(nrws, _, nrwst, niwst, N, rbt);

		    for (var i = 0; i < N; i++) {
		      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		      rwst[i] = rx;
		    }

		    this.conjugate(rwst, iwst, N);
		    this.transform(rwst, iwst, rmws, _, N, rbt);
		    this.conjugate(rmws, _, N);
		    this.normalize13b(rmws, N);

		    out.negative = x.negative ^ y.negative;
		    out.length = x.length + y.length;
		    return out._strip();
		  };

		  // Multiply `this` by `num`
		  BN.prototype.mul = function mul (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return this.mulTo(num, out);
		  };

		  // Multiply employing FFT
		  BN.prototype.mulf = function mulf (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return jumboMulTo(this, num, out);
		  };

		  // In-place Multiplication
		  BN.prototype.imul = function imul (num) {
		    return this.clone().mulTo(num, this);
		  };

		  BN.prototype.imuln = function imuln (num) {
		    var isNegNum = num < 0;
		    if (isNegNum) num = -num;

		    assert(typeof num === 'number');
		    assert(num < 0x4000000);

		    // Carry
		    var carry = 0;
		    for (var i = 0; i < this.length; i++) {
		      var w = (this.words[i] | 0) * num;
		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		      carry >>= 26;
		      carry += (w / 0x4000000) | 0;
		      // NOTE: lo is 27bit maximum
		      carry += lo >>> 26;
		      this.words[i] = lo & 0x3ffffff;
		    }

		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }

		    return isNegNum ? this.ineg() : this;
		  };

		  BN.prototype.muln = function muln (num) {
		    return this.clone().imuln(num);
		  };

		  // `this` * `this`
		  BN.prototype.sqr = function sqr () {
		    return this.mul(this);
		  };

		  // `this` * `this` in-place
		  BN.prototype.isqr = function isqr () {
		    return this.imul(this.clone());
		  };

		  // Math.pow(`this`, `num`)
		  BN.prototype.pow = function pow (num) {
		    var w = toBitArray(num);
		    if (w.length === 0) return new BN(1);

		    // Skip leading zeroes
		    var res = this;
		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
		      if (w[i] !== 0) break;
		    }

		    if (++i < w.length) {
		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
		        if (w[i] === 0) continue;

		        res = res.mul(q);
		      }
		    }

		    return res;
		  };

		  // Shift-left in-place
		  BN.prototype.iushln = function iushln (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
		    var i;

		    if (r !== 0) {
		      var carry = 0;

		      for (i = 0; i < this.length; i++) {
		        var newCarry = this.words[i] & carryMask;
		        var c = ((this.words[i] | 0) - newCarry) << r;
		        this.words[i] = c | carry;
		        carry = newCarry >>> (26 - r);
		      }

		      if (carry) {
		        this.words[i] = carry;
		        this.length++;
		      }
		    }

		    if (s !== 0) {
		      for (i = this.length - 1; i >= 0; i--) {
		        this.words[i + s] = this.words[i];
		      }

		      for (i = 0; i < s; i++) {
		        this.words[i] = 0;
		      }

		      this.length += s;
		    }

		    return this._strip();
		  };

		  BN.prototype.ishln = function ishln (bits) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushln(bits);
		  };

		  // Shift-right in-place
		  // NOTE: `hint` is a lowest bit before trailing zeroes
		  // NOTE: if `extended` is present - it will be filled with destroyed bits
		  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var h;
		    if (hint) {
		      h = (hint - (hint % 26)) / 26;
		    } else {
		      h = 0;
		    }

		    var r = bits % 26;
		    var s = Math.min((bits - r) / 26, this.length);
		    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		    var maskedWords = extended;

		    h -= s;
		    h = Math.max(0, h);

		    // Extended mode, copy masked part
		    if (maskedWords) {
		      for (var i = 0; i < s; i++) {
		        maskedWords.words[i] = this.words[i];
		      }
		      maskedWords.length = s;
		    }

		    if (s === 0) {
		      // No-op, we should not move anything at all
		    } else if (this.length > s) {
		      this.length -= s;
		      for (i = 0; i < this.length; i++) {
		        this.words[i] = this.words[i + s];
		      }
		    } else {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    var carry = 0;
		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		      var word = this.words[i] | 0;
		      this.words[i] = (carry << (26 - r)) | (word >>> r);
		      carry = word & mask;
		    }

		    // Push carried bits as a mask
		    if (maskedWords && carry !== 0) {
		      maskedWords.words[maskedWords.length++] = carry;
		    }

		    if (this.length === 0) {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    return this._strip();
		  };

		  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushrn(bits, hint, extended);
		  };

		  // Shift-left
		  BN.prototype.shln = function shln (bits) {
		    return this.clone().ishln(bits);
		  };

		  BN.prototype.ushln = function ushln (bits) {
		    return this.clone().iushln(bits);
		  };

		  // Shift-right
		  BN.prototype.shrn = function shrn (bits) {
		    return this.clone().ishrn(bits);
		  };

		  BN.prototype.ushrn = function ushrn (bits) {
		    return this.clone().iushrn(bits);
		  };

		  // Test if n bit is set
		  BN.prototype.testn = function testn (bit) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) return false;

		    // Check bit and return
		    var w = this.words[s];

		    return !!(w & q);
		  };

		  // Return only lowers bits of number (in-place)
		  BN.prototype.imaskn = function imaskn (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;

		    assert(this.negative === 0, 'imaskn works only with positive numbers');

		    if (this.length <= s) {
		      return this;
		    }

		    if (r !== 0) {
		      s++;
		    }
		    this.length = Math.min(s, this.length);

		    if (r !== 0) {
		      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		      this.words[this.length - 1] &= mask;
		    }

		    return this._strip();
		  };

		  // Return only lowers bits of number
		  BN.prototype.maskn = function maskn (bits) {
		    return this.clone().imaskn(bits);
		  };

		  // Add plain number `num` to `this`
		  BN.prototype.iaddn = function iaddn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.isubn(-num);

		    // Possible sign change
		    if (this.negative !== 0) {
		      if (this.length === 1 && (this.words[0] | 0) <= num) {
		        this.words[0] = num - (this.words[0] | 0);
		        this.negative = 0;
		        return this;
		      }

		      this.negative = 0;
		      this.isubn(num);
		      this.negative = 1;
		      return this;
		    }

		    // Add without checks
		    return this._iaddn(num);
		  };

		  BN.prototype._iaddn = function _iaddn (num) {
		    this.words[0] += num;

		    // Carry
		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		      this.words[i] -= 0x4000000;
		      if (i === this.length - 1) {
		        this.words[i + 1] = 1;
		      } else {
		        this.words[i + 1]++;
		      }
		    }
		    this.length = Math.max(this.length, i + 1);

		    return this;
		  };

		  // Subtract plain number `num` from `this`
		  BN.prototype.isubn = function isubn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.iaddn(-num);

		    if (this.negative !== 0) {
		      this.negative = 0;
		      this.iaddn(num);
		      this.negative = 1;
		      return this;
		    }

		    this.words[0] -= num;

		    if (this.length === 1 && this.words[0] < 0) {
		      this.words[0] = -this.words[0];
		      this.negative = 1;
		    } else {
		      // Carry
		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
		        this.words[i] += 0x4000000;
		        this.words[i + 1] -= 1;
		      }
		    }

		    return this._strip();
		  };

		  BN.prototype.addn = function addn (num) {
		    return this.clone().iaddn(num);
		  };

		  BN.prototype.subn = function subn (num) {
		    return this.clone().isubn(num);
		  };

		  BN.prototype.iabs = function iabs () {
		    this.negative = 0;

		    return this;
		  };

		  BN.prototype.abs = function abs () {
		    return this.clone().iabs();
		  };

		  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
		    var len = num.length + shift;
		    var i;

		    this._expand(len);

		    var w;
		    var carry = 0;
		    for (i = 0; i < num.length; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      var right = (num.words[i] | 0) * mul;
		      w -= right & 0x3ffffff;
		      carry = (w >> 26) - ((right / 0x4000000) | 0);
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    for (; i < this.length - shift; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      carry = w >> 26;
		      this.words[i + shift] = w & 0x3ffffff;
		    }

		    if (carry === 0) return this._strip();

		    // Subtraction overflow
		    assert(carry === -1);
		    carry = 0;
		    for (i = 0; i < this.length; i++) {
		      w = -(this.words[i] | 0) + carry;
		      carry = w >> 26;
		      this.words[i] = w & 0x3ffffff;
		    }
		    this.negative = 1;

		    return this._strip();
		  };

		  BN.prototype._wordDiv = function _wordDiv (num, mode) {
		    var shift = this.length - num.length;

		    var a = this.clone();
		    var b = num;

		    // Normalize
		    var bhi = b.words[b.length - 1] | 0;
		    var bhiBits = this._countBits(bhi);
		    shift = 26 - bhiBits;
		    if (shift !== 0) {
		      b = b.ushln(shift);
		      a.iushln(shift);
		      bhi = b.words[b.length - 1] | 0;
		    }

		    // Initialize quotient
		    var m = a.length - b.length;
		    var q;

		    if (mode !== 'mod') {
		      q = new BN(null);
		      q.length = m + 1;
		      q.words = new Array(q.length);
		      for (var i = 0; i < q.length; i++) {
		        q.words[i] = 0;
		      }
		    }

		    var diff = a.clone()._ishlnsubmul(b, 1, m);
		    if (diff.negative === 0) {
		      a = diff;
		      if (q) {
		        q.words[m] = 1;
		      }
		    }

		    for (var j = m - 1; j >= 0; j--) {
		      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
		        (a.words[b.length + j - 1] | 0);

		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		      // (0x7ffffff)
		      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

		      a._ishlnsubmul(b, qj, j);
		      while (a.negative !== 0) {
		        qj--;
		        a.negative = 0;
		        a._ishlnsubmul(b, 1, j);
		        if (!a.isZero()) {
		          a.negative ^= 1;
		        }
		      }
		      if (q) {
		        q.words[j] = qj;
		      }
		    }
		    if (q) {
		      q._strip();
		    }
		    a._strip();

		    // Denormalize
		    if (mode !== 'div' && shift !== 0) {
		      a.iushrn(shift);
		    }

		    return {
		      div: q || null,
		      mod: a
		    };
		  };

		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
		  //       to `div` to request div only, or be absent to
		  //       request both div & mod
		  //       2) `positive` is true if unsigned mod is requested
		  BN.prototype.divmod = function divmod (num, mode, positive) {
		    assert(!num.isZero());

		    if (this.isZero()) {
		      return {
		        div: new BN(0),
		        mod: new BN(0)
		      };
		    }

		    var div, mod, res;
		    if (this.negative !== 0 && num.negative === 0) {
		      res = this.neg().divmod(num, mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.iadd(num);
		        }
		      }

		      return {
		        div: div,
		        mod: mod
		      };
		    }

		    if (this.negative === 0 && num.negative !== 0) {
		      res = this.divmod(num.neg(), mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      return {
		        div: div,
		        mod: res.mod
		      };
		    }

		    if ((this.negative & num.negative) !== 0) {
		      res = this.neg().divmod(num.neg(), mode);

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.isub(num);
		        }
		      }

		      return {
		        div: res.div,
		        mod: mod
		      };
		    }

		    // Both numbers are positive at this point

		    // Strip both numbers to approximate shift value
		    if (num.length > this.length || this.cmp(num) < 0) {
		      return {
		        div: new BN(0),
		        mod: this
		      };
		    }

		    // Very short reduction
		    if (num.length === 1) {
		      if (mode === 'div') {
		        return {
		          div: this.divn(num.words[0]),
		          mod: null
		        };
		      }

		      if (mode === 'mod') {
		        return {
		          div: null,
		          mod: new BN(this.modrn(num.words[0]))
		        };
		      }

		      return {
		        div: this.divn(num.words[0]),
		        mod: new BN(this.modrn(num.words[0]))
		      };
		    }

		    return this._wordDiv(num, mode);
		  };

		  // Find `this` / `num`
		  BN.prototype.div = function div (num) {
		    return this.divmod(num, 'div', false).div;
		  };

		  // Find `this` % `num`
		  BN.prototype.mod = function mod (num) {
		    return this.divmod(num, 'mod', false).mod;
		  };

		  BN.prototype.umod = function umod (num) {
		    return this.divmod(num, 'mod', true).mod;
		  };

		  // Find Round(`this` / `num`)
		  BN.prototype.divRound = function divRound (num) {
		    var dm = this.divmod(num);

		    // Fast case - exact division
		    if (dm.mod.isZero()) return dm.div;

		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

		    var half = num.ushrn(1);
		    var r2 = num.andln(1);
		    var cmp = mod.cmp(half);

		    // Round down
		    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

		    // Round up
		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
		  };

		  BN.prototype.modrn = function modrn (num) {
		    var isNegNum = num < 0;
		    if (isNegNum) num = -num;

		    assert(num <= 0x3ffffff);
		    var p = (1 << 26) % num;

		    var acc = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      acc = (p * acc + (this.words[i] | 0)) % num;
		    }

		    return isNegNum ? -acc : acc;
		  };

		  // WARNING: DEPRECATED
		  BN.prototype.modn = function modn (num) {
		    return this.modrn(num);
		  };

		  // In-place division by number
		  BN.prototype.idivn = function idivn (num) {
		    var isNegNum = num < 0;
		    if (isNegNum) num = -num;

		    assert(num <= 0x3ffffff);

		    var carry = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var w = (this.words[i] | 0) + carry * 0x4000000;
		      this.words[i] = (w / num) | 0;
		      carry = w % num;
		    }

		    this._strip();
		    return isNegNum ? this.ineg() : this;
		  };

		  BN.prototype.divn = function divn (num) {
		    return this.clone().idivn(num);
		  };

		  BN.prototype.egcd = function egcd (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var x = this;
		    var y = p.clone();

		    if (x.negative !== 0) {
		      x = x.umod(p);
		    } else {
		      x = x.clone();
		    }

		    // A * x + B * y = x
		    var A = new BN(1);
		    var B = new BN(0);

		    // C * x + D * y = y
		    var C = new BN(0);
		    var D = new BN(1);

		    var g = 0;

		    while (x.isEven() && y.isEven()) {
		      x.iushrn(1);
		      y.iushrn(1);
		      ++g;
		    }

		    var yp = y.clone();
		    var xp = x.clone();

		    while (!x.isZero()) {
		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        x.iushrn(i);
		        while (i-- > 0) {
		          if (A.isOdd() || B.isOdd()) {
		            A.iadd(yp);
		            B.isub(xp);
		          }

		          A.iushrn(1);
		          B.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        y.iushrn(j);
		        while (j-- > 0) {
		          if (C.isOdd() || D.isOdd()) {
		            C.iadd(yp);
		            D.isub(xp);
		          }

		          C.iushrn(1);
		          D.iushrn(1);
		        }
		      }

		      if (x.cmp(y) >= 0) {
		        x.isub(y);
		        A.isub(C);
		        B.isub(D);
		      } else {
		        y.isub(x);
		        C.isub(A);
		        D.isub(B);
		      }
		    }

		    return {
		      a: C,
		      b: D,
		      gcd: y.iushln(g)
		    };
		  };

		  // This is reduced incarnation of the binary EEA
		  // above, designated to invert members of the
		  // _prime_ fields F(p) at a maximal speed
		  BN.prototype._invmp = function _invmp (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var a = this;
		    var b = p.clone();

		    if (a.negative !== 0) {
		      a = a.umod(p);
		    } else {
		      a = a.clone();
		    }

		    var x1 = new BN(1);
		    var x2 = new BN(0);

		    var delta = b.clone();

		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        a.iushrn(i);
		        while (i-- > 0) {
		          if (x1.isOdd()) {
		            x1.iadd(delta);
		          }

		          x1.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        b.iushrn(j);
		        while (j-- > 0) {
		          if (x2.isOdd()) {
		            x2.iadd(delta);
		          }

		          x2.iushrn(1);
		        }
		      }

		      if (a.cmp(b) >= 0) {
		        a.isub(b);
		        x1.isub(x2);
		      } else {
		        b.isub(a);
		        x2.isub(x1);
		      }
		    }

		    var res;
		    if (a.cmpn(1) === 0) {
		      res = x1;
		    } else {
		      res = x2;
		    }

		    if (res.cmpn(0) < 0) {
		      res.iadd(p);
		    }

		    return res;
		  };

		  BN.prototype.gcd = function gcd (num) {
		    if (this.isZero()) return num.abs();
		    if (num.isZero()) return this.abs();

		    var a = this.clone();
		    var b = num.clone();
		    a.negative = 0;
		    b.negative = 0;

		    // Remove common factor of two
		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		      a.iushrn(1);
		      b.iushrn(1);
		    }

		    do {
		      while (a.isEven()) {
		        a.iushrn(1);
		      }
		      while (b.isEven()) {
		        b.iushrn(1);
		      }

		      var r = a.cmp(b);
		      if (r < 0) {
		        // Swap `a` and `b` to make `a` always bigger than `b`
		        var t = a;
		        a = b;
		        b = t;
		      } else if (r === 0 || b.cmpn(1) === 0) {
		        break;
		      }

		      a.isub(b);
		    } while (true);

		    return b.iushln(shift);
		  };

		  // Invert number in the field F(num)
		  BN.prototype.invm = function invm (num) {
		    return this.egcd(num).a.umod(num);
		  };

		  BN.prototype.isEven = function isEven () {
		    return (this.words[0] & 1) === 0;
		  };

		  BN.prototype.isOdd = function isOdd () {
		    return (this.words[0] & 1) === 1;
		  };

		  // And first word and num
		  BN.prototype.andln = function andln (num) {
		    return this.words[0] & num;
		  };

		  // Increment at the bit position in-line
		  BN.prototype.bincn = function bincn (bit) {
		    assert(typeof bit === 'number');
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) {
		      this._expand(s + 1);
		      this.words[s] |= q;
		      return this;
		    }

		    // Add bit and propagate, if needed
		    var carry = q;
		    for (var i = s; carry !== 0 && i < this.length; i++) {
		      var w = this.words[i] | 0;
		      w += carry;
		      carry = w >>> 26;
		      w &= 0x3ffffff;
		      this.words[i] = w;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };

		  BN.prototype.isZero = function isZero () {
		    return this.length === 1 && this.words[0] === 0;
		  };

		  BN.prototype.cmpn = function cmpn (num) {
		    var negative = num < 0;

		    if (this.negative !== 0 && !negative) return -1;
		    if (this.negative === 0 && negative) return 1;

		    this._strip();

		    var res;
		    if (this.length > 1) {
		      res = 1;
		    } else {
		      if (negative) {
		        num = -num;
		      }

		      assert(num <= 0x3ffffff, 'Number is too big');

		      var w = this.words[0] | 0;
		      res = w === num ? 0 : w < num ? -1 : 1;
		    }
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Compare two numbers and return:
		  // 1 - if `this` > `num`
		  // 0 - if `this` == `num`
		  // -1 - if `this` < `num`
		  BN.prototype.cmp = function cmp (num) {
		    if (this.negative !== 0 && num.negative === 0) return -1;
		    if (this.negative === 0 && num.negative !== 0) return 1;

		    var res = this.ucmp(num);
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Unsigned comparison
		  BN.prototype.ucmp = function ucmp (num) {
		    // At this point both numbers have the same sign
		    if (this.length > num.length) return 1;
		    if (this.length < num.length) return -1;

		    var res = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var a = this.words[i] | 0;
		      var b = num.words[i] | 0;

		      if (a === b) continue;
		      if (a < b) {
		        res = -1;
		      } else if (a > b) {
		        res = 1;
		      }
		      break;
		    }
		    return res;
		  };

		  BN.prototype.gtn = function gtn (num) {
		    return this.cmpn(num) === 1;
		  };

		  BN.prototype.gt = function gt (num) {
		    return this.cmp(num) === 1;
		  };

		  BN.prototype.gten = function gten (num) {
		    return this.cmpn(num) >= 0;
		  };

		  BN.prototype.gte = function gte (num) {
		    return this.cmp(num) >= 0;
		  };

		  BN.prototype.ltn = function ltn (num) {
		    return this.cmpn(num) === -1;
		  };

		  BN.prototype.lt = function lt (num) {
		    return this.cmp(num) === -1;
		  };

		  BN.prototype.lten = function lten (num) {
		    return this.cmpn(num) <= 0;
		  };

		  BN.prototype.lte = function lte (num) {
		    return this.cmp(num) <= 0;
		  };

		  BN.prototype.eqn = function eqn (num) {
		    return this.cmpn(num) === 0;
		  };

		  BN.prototype.eq = function eq (num) {
		    return this.cmp(num) === 0;
		  };

		  //
		  // A reduce context, could be using montgomery or something better, depending
		  // on the `m` itself.
		  //
		  BN.red = function red (num) {
		    return new Red(num);
		  };

		  BN.prototype.toRed = function toRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    assert(this.negative === 0, 'red works only with positives');
		    return ctx.convertTo(this)._forceRed(ctx);
		  };

		  BN.prototype.fromRed = function fromRed () {
		    assert(this.red, 'fromRed works only with numbers in reduction context');
		    return this.red.convertFrom(this);
		  };

		  BN.prototype._forceRed = function _forceRed (ctx) {
		    this.red = ctx;
		    return this;
		  };

		  BN.prototype.forceRed = function forceRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    return this._forceRed(ctx);
		  };

		  BN.prototype.redAdd = function redAdd (num) {
		    assert(this.red, 'redAdd works only with red numbers');
		    return this.red.add(this, num);
		  };

		  BN.prototype.redIAdd = function redIAdd (num) {
		    assert(this.red, 'redIAdd works only with red numbers');
		    return this.red.iadd(this, num);
		  };

		  BN.prototype.redSub = function redSub (num) {
		    assert(this.red, 'redSub works only with red numbers');
		    return this.red.sub(this, num);
		  };

		  BN.prototype.redISub = function redISub (num) {
		    assert(this.red, 'redISub works only with red numbers');
		    return this.red.isub(this, num);
		  };

		  BN.prototype.redShl = function redShl (num) {
		    assert(this.red, 'redShl works only with red numbers');
		    return this.red.shl(this, num);
		  };

		  BN.prototype.redMul = function redMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.mul(this, num);
		  };

		  BN.prototype.redIMul = function redIMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.imul(this, num);
		  };

		  BN.prototype.redSqr = function redSqr () {
		    assert(this.red, 'redSqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqr(this);
		  };

		  BN.prototype.redISqr = function redISqr () {
		    assert(this.red, 'redISqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.isqr(this);
		  };

		  // Square root over p
		  BN.prototype.redSqrt = function redSqrt () {
		    assert(this.red, 'redSqrt works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqrt(this);
		  };

		  BN.prototype.redInvm = function redInvm () {
		    assert(this.red, 'redInvm works only with red numbers');
		    this.red._verify1(this);
		    return this.red.invm(this);
		  };

		  // Return negative clone of `this` % `red modulo`
		  BN.prototype.redNeg = function redNeg () {
		    assert(this.red, 'redNeg works only with red numbers');
		    this.red._verify1(this);
		    return this.red.neg(this);
		  };

		  BN.prototype.redPow = function redPow (num) {
		    assert(this.red && !num.red, 'redPow(normalNum)');
		    this.red._verify1(this);
		    return this.red.pow(this, num);
		  };

		  // Prime numbers with efficient reduction
		  var primes = {
		    k256: null,
		    p224: null,
		    p192: null,
		    p25519: null
		  };

		  // Pseudo-Mersenne prime
		  function MPrime (name, p) {
		    // P = 2 ^ N - K
		    this.name = name;
		    this.p = new BN(p, 16);
		    this.n = this.p.bitLength();
		    this.k = new BN(1).iushln(this.n).isub(this.p);

		    this.tmp = this._tmp();
		  }

		  MPrime.prototype._tmp = function _tmp () {
		    var tmp = new BN(null);
		    tmp.words = new Array(Math.ceil(this.n / 13));
		    return tmp;
		  };

		  MPrime.prototype.ireduce = function ireduce (num) {
		    // Assumes that `num` is less than `P^2`
		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		    var r = num;
		    var rlen;

		    do {
		      this.split(r, this.tmp);
		      r = this.imulK(r);
		      r = r.iadd(this.tmp);
		      rlen = r.bitLength();
		    } while (rlen > this.n);

		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		    if (cmp === 0) {
		      r.words[0] = 0;
		      r.length = 1;
		    } else if (cmp > 0) {
		      r.isub(this.p);
		    } else {
		      if (r.strip !== undefined) {
		        // r is a BN v4 instance
		        r.strip();
		      } else {
		        // r is a BN v5 instance
		        r._strip();
		      }
		    }

		    return r;
		  };

		  MPrime.prototype.split = function split (input, out) {
		    input.iushrn(this.n, 0, out);
		  };

		  MPrime.prototype.imulK = function imulK (num) {
		    return num.imul(this.k);
		  };

		  function K256 () {
		    MPrime.call(
		      this,
		      'k256',
		      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
		  }
		  inherits(K256, MPrime);

		  K256.prototype.split = function split (input, output) {
		    // 256 = 9 * 26 + 22
		    var mask = 0x3fffff;

		    var outLen = Math.min(input.length, 9);
		    for (var i = 0; i < outLen; i++) {
		      output.words[i] = input.words[i];
		    }
		    output.length = outLen;

		    if (input.length <= 9) {
		      input.words[0] = 0;
		      input.length = 1;
		      return;
		    }

		    // Shift by 9 limbs
		    var prev = input.words[9];
		    output.words[output.length++] = prev & mask;

		    for (i = 10; i < input.length; i++) {
		      var next = input.words[i] | 0;
		      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
		      prev = next;
		    }
		    prev >>>= 22;
		    input.words[i - 10] = prev;
		    if (prev === 0 && input.length > 10) {
		      input.length -= 10;
		    } else {
		      input.length -= 9;
		    }
		  };

		  K256.prototype.imulK = function imulK (num) {
		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		    num.words[num.length] = 0;
		    num.words[num.length + 1] = 0;
		    num.length += 2;

		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		    var lo = 0;
		    for (var i = 0; i < num.length; i++) {
		      var w = num.words[i] | 0;
		      lo += w * 0x3d1;
		      num.words[i] = lo & 0x3ffffff;
		      lo = w * 0x40 + ((lo / 0x4000000) | 0);
		    }

		    // Fast length reduction
		    if (num.words[num.length - 1] === 0) {
		      num.length--;
		      if (num.words[num.length - 1] === 0) {
		        num.length--;
		      }
		    }
		    return num;
		  };

		  function P224 () {
		    MPrime.call(
		      this,
		      'p224',
		      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
		  }
		  inherits(P224, MPrime);

		  function P192 () {
		    MPrime.call(
		      this,
		      'p192',
		      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
		  }
		  inherits(P192, MPrime);

		  function P25519 () {
		    // 2 ^ 255 - 19
		    MPrime.call(
		      this,
		      '25519',
		      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
		  }
		  inherits(P25519, MPrime);

		  P25519.prototype.imulK = function imulK (num) {
		    // K = 0x13
		    var carry = 0;
		    for (var i = 0; i < num.length; i++) {
		      var hi = (num.words[i] | 0) * 0x13 + carry;
		      var lo = hi & 0x3ffffff;
		      hi >>>= 26;

		      num.words[i] = lo;
		      carry = hi;
		    }
		    if (carry !== 0) {
		      num.words[num.length++] = carry;
		    }
		    return num;
		  };

		  // Exported mostly for testing purposes, use plain name instead
		  BN._prime = function prime (name) {
		    // Cached version of prime
		    if (primes[name]) return primes[name];

		    var prime;
		    if (name === 'k256') {
		      prime = new K256();
		    } else if (name === 'p224') {
		      prime = new P224();
		    } else if (name === 'p192') {
		      prime = new P192();
		    } else if (name === 'p25519') {
		      prime = new P25519();
		    } else {
		      throw new Error('Unknown prime ' + name);
		    }
		    primes[name] = prime;

		    return prime;
		  };

		  //
		  // Base reduction engine
		  //
		  function Red (m) {
		    if (typeof m === 'string') {
		      var prime = BN._prime(m);
		      this.m = prime.p;
		      this.prime = prime;
		    } else {
		      assert(m.gtn(1), 'modulus must be greater than 1');
		      this.m = m;
		      this.prime = null;
		    }
		  }

		  Red.prototype._verify1 = function _verify1 (a) {
		    assert(a.negative === 0, 'red works only with positives');
		    assert(a.red, 'red works only with red numbers');
		  };

		  Red.prototype._verify2 = function _verify2 (a, b) {
		    assert((a.negative | b.negative) === 0, 'red works only with positives');
		    assert(a.red && a.red === b.red,
		      'red works only with red numbers');
		  };

		  Red.prototype.imod = function imod (a) {
		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

		    move(a, a.umod(this.m)._forceRed(this));
		    return a;
		  };

		  Red.prototype.neg = function neg (a) {
		    if (a.isZero()) {
		      return a.clone();
		    }

		    return this.m.sub(a)._forceRed(this);
		  };

		  Red.prototype.add = function add (a, b) {
		    this._verify2(a, b);

		    var res = a.add(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.iadd = function iadd (a, b) {
		    this._verify2(a, b);

		    var res = a.iadd(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res;
		  };

		  Red.prototype.sub = function sub (a, b) {
		    this._verify2(a, b);

		    var res = a.sub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.isub = function isub (a, b) {
		    this._verify2(a, b);

		    var res = a.isub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res;
		  };

		  Red.prototype.shl = function shl (a, num) {
		    this._verify1(a);
		    return this.imod(a.ushln(num));
		  };

		  Red.prototype.imul = function imul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.imul(b));
		  };

		  Red.prototype.mul = function mul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.mul(b));
		  };

		  Red.prototype.isqr = function isqr (a) {
		    return this.imul(a, a.clone());
		  };

		  Red.prototype.sqr = function sqr (a) {
		    return this.mul(a, a);
		  };

		  Red.prototype.sqrt = function sqrt (a) {
		    if (a.isZero()) return a.clone();

		    var mod3 = this.m.andln(3);
		    assert(mod3 % 2 === 1);

		    // Fast case
		    if (mod3 === 3) {
		      var pow = this.m.add(new BN(1)).iushrn(2);
		      return this.pow(a, pow);
		    }

		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
		    //
		    // Find Q and S, that Q * 2 ^ S = (P - 1)
		    var q = this.m.subn(1);
		    var s = 0;
		    while (!q.isZero() && q.andln(1) === 0) {
		      s++;
		      q.iushrn(1);
		    }
		    assert(!q.isZero());

		    var one = new BN(1).toRed(this);
		    var nOne = one.redNeg();

		    // Find quadratic non-residue
		    // NOTE: Max is such because of generalized Riemann hypothesis.
		    var lpow = this.m.subn(1).iushrn(1);
		    var z = this.m.bitLength();
		    z = new BN(2 * z * z).toRed(this);

		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
		      z.redIAdd(nOne);
		    }

		    var c = this.pow(z, q);
		    var r = this.pow(a, q.addn(1).iushrn(1));
		    var t = this.pow(a, q);
		    var m = s;
		    while (t.cmp(one) !== 0) {
		      var tmp = t;
		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
		        tmp = tmp.redSqr();
		      }
		      assert(i < m);
		      var b = this.pow(c, new BN(1).iushln(m - i - 1));

		      r = r.redMul(b);
		      c = b.redSqr();
		      t = t.redMul(c);
		      m = i;
		    }

		    return r;
		  };

		  Red.prototype.invm = function invm (a) {
		    var inv = a._invmp(this.m);
		    if (inv.negative !== 0) {
		      inv.negative = 0;
		      return this.imod(inv).redNeg();
		    } else {
		      return this.imod(inv);
		    }
		  };

		  Red.prototype.pow = function pow (a, num) {
		    if (num.isZero()) return new BN(1).toRed(this);
		    if (num.cmpn(1) === 0) return a.clone();

		    var windowSize = 4;
		    var wnd = new Array(1 << windowSize);
		    wnd[0] = new BN(1).toRed(this);
		    wnd[1] = a;
		    for (var i = 2; i < wnd.length; i++) {
		      wnd[i] = this.mul(wnd[i - 1], a);
		    }

		    var res = wnd[0];
		    var current = 0;
		    var currentLen = 0;
		    var start = num.bitLength() % 26;
		    if (start === 0) {
		      start = 26;
		    }

		    for (i = num.length - 1; i >= 0; i--) {
		      var word = num.words[i];
		      for (var j = start - 1; j >= 0; j--) {
		        var bit = (word >> j) & 1;
		        if (res !== wnd[0]) {
		          res = this.sqr(res);
		        }

		        if (bit === 0 && current === 0) {
		          currentLen = 0;
		          continue;
		        }

		        current <<= 1;
		        current |= bit;
		        currentLen++;
		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

		        res = this.mul(res, wnd[current]);
		        currentLen = 0;
		        current = 0;
		      }
		      start = 26;
		    }

		    return res;
		  };

		  Red.prototype.convertTo = function convertTo (num) {
		    var r = num.umod(this.m);

		    return r === num ? r.clone() : r;
		  };

		  Red.prototype.convertFrom = function convertFrom (num) {
		    var res = num.clone();
		    res.red = null;
		    return res;
		  };

		  //
		  // Montgomery method engine
		  //

		  BN.mont = function mont (num) {
		    return new Mont(num);
		  };

		  function Mont (m) {
		    Red.call(this, m);

		    this.shift = this.m.bitLength();
		    if (this.shift % 26 !== 0) {
		      this.shift += 26 - (this.shift % 26);
		    }

		    this.r = new BN(1).iushln(this.shift);
		    this.r2 = this.imod(this.r.sqr());
		    this.rinv = this.r._invmp(this.m);

		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		    this.minv = this.minv.umod(this.r);
		    this.minv = this.r.sub(this.minv);
		  }
		  inherits(Mont, Red);

		  Mont.prototype.convertTo = function convertTo (num) {
		    return this.imod(num.ushln(this.shift));
		  };

		  Mont.prototype.convertFrom = function convertFrom (num) {
		    var r = this.imod(num.mul(this.rinv));
		    r.red = null;
		    return r;
		  };

		  Mont.prototype.imul = function imul (a, b) {
		    if (a.isZero() || b.isZero()) {
		      a.words[0] = 0;
		      a.length = 1;
		      return a;
		    }

		    var t = a.imul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;

		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.mul = function mul (a, b) {
		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

		    var t = a.mul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.invm = function invm (a) {
		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		    var res = this.imod(a._invmp(this.m).mul(this.r2));
		    return res._forceRed(this);
		  };
		})('object' === 'undefined' || module, commonjsGlobal);
	} (bn$3));

	var bn$2 = bnExports$1;

	var lib$r = {};

	var lib$q = {};

	var _version$p = {};

	"use strict";
	Object.defineProperty(_version$p, "__esModule", { value: true });
	var version$q = _version$p.version = void 0;
	version$q = _version$p.version = "logger/5.7.0";

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Logger = exports.ErrorCode = exports.LogLevel = void 0;
		var _permanentCensorErrors = false;
		var _censorErrors = false;
		var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
		var _logLevel = LogLevels["default"];
		var _version_1 = _version$p;
		var _globalLogger = null;
		function _checkNormalize() {
		    try {
		        var missing_1 = [];
		        // Make sure all forms of normalization are supported
		        ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
		            try {
		                if ("test".normalize(form) !== "test") {
		                    throw new Error("bad normalize");
		                }
		                ;
		            }
		            catch (error) {
		                missing_1.push(form);
		            }
		        });
		        if (missing_1.length) {
		            throw new Error("missing " + missing_1.join(", "));
		        }
		        if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
		            throw new Error("broken implementation");
		        }
		    }
		    catch (error) {
		        return error.message;
		    }
		    return null;
		}
		var _normalizeError = _checkNormalize();
		var LogLevel;
		(function (LogLevel) {
		    LogLevel["DEBUG"] = "DEBUG";
		    LogLevel["INFO"] = "INFO";
		    LogLevel["WARNING"] = "WARNING";
		    LogLevel["ERROR"] = "ERROR";
		    LogLevel["OFF"] = "OFF";
		})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
		var ErrorCode;
		(function (ErrorCode) {
		    ///////////////////
		    // Generic Errors
		    // Unknown Error
		    ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
		    // Not Implemented
		    ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
		    // Unsupported Operation
		    //   - operation
		    ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
		    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
		    //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
		    ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
		    // Some sort of bad response from the server
		    ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
		    // Timeout
		    ErrorCode["TIMEOUT"] = "TIMEOUT";
		    ///////////////////
		    // Operational  Errors
		    // Buffer Overrun
		    ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
		    // Numeric Fault
		    //   - operation: the operation being executed
		    //   - fault: the reason this faulted
		    ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
		    ///////////////////
		    // Argument Errors
		    // Missing new operator to an object
		    //  - name: The name of the class
		    ErrorCode["MISSING_NEW"] = "MISSING_NEW";
		    // Invalid argument (e.g. value is incompatible with type) to a function:
		    //   - argument: The argument name that was invalid
		    //   - value: The value of the argument
		    ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
		    // Missing argument to a function:
		    //   - count: The number of arguments received
		    //   - expectedCount: The number of arguments expected
		    ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
		    // Too many arguments
		    //   - count: The number of arguments received
		    //   - expectedCount: The number of arguments expected
		    ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
		    ///////////////////
		    // Blockchain Errors
		    // Call exception
		    //  - transaction: the transaction
		    //  - address?: the contract address
		    //  - args?: The arguments passed into the function
		    //  - method?: The Solidity method signature
		    //  - errorSignature?: The EIP848 error signature
		    //  - errorArgs?: The EIP848 error parameters
		    //  - reason: The reason (only for EIP848 "Error(string)")
		    ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
		    // Insufficient funds (< value + gasLimit * gasPrice)
		    //   - transaction: the transaction attempted
		    ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
		    // Nonce has already been used
		    //   - transaction: the transaction attempted
		    ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
		    // The replacement fee for the transaction is too low
		    //   - transaction: the transaction attempted
		    ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
		    // The gas limit could not be estimated
		    //   - transaction: the transaction passed to estimateGas
		    ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
		    // The transaction was replaced by one with a higher gas price
		    //   - reason: "cancelled", "replaced" or "repriced"
		    //   - cancelled: true if reason == "cancelled" or reason == "replaced")
		    //   - hash: original transaction hash
		    //   - replacement: the full TransactionsResponse for the replacement
		    //   - receipt: the receipt of the replacement
		    ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
		    ///////////////////
		    // Interaction Errors
		    // The user rejected the action, such as signing a message or sending
		    // a transaction
		    ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
		})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
		;
		var HEX = "0123456789abcdef";
		var Logger = /** @class */ (function () {
		    function Logger(version) {
		        Object.defineProperty(this, "version", {
		            enumerable: true,
		            value: version,
		            writable: false
		        });
		    }
		    Logger.prototype._log = function (logLevel, args) {
		        var level = logLevel.toLowerCase();
		        if (LogLevels[level] == null) {
		            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
		        }
		        if (_logLevel > LogLevels[level]) {
		            return;
		        }
		        console.log.apply(console, args);
		    };
		    Logger.prototype.debug = function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i] = arguments[_i];
		        }
		        this._log(Logger.levels.DEBUG, args);
		    };
		    Logger.prototype.info = function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i] = arguments[_i];
		        }
		        this._log(Logger.levels.INFO, args);
		    };
		    Logger.prototype.warn = function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i] = arguments[_i];
		        }
		        this._log(Logger.levels.WARNING, args);
		    };
		    Logger.prototype.makeError = function (message, code, params) {
		        // Errors are being censored
		        if (_censorErrors) {
		            return this.makeError("censored error", code, {});
		        }
		        if (!code) {
		            code = Logger.errors.UNKNOWN_ERROR;
		        }
		        if (!params) {
		            params = {};
		        }
		        var messageDetails = [];
		        Object.keys(params).forEach(function (key) {
		            var value = params[key];
		            try {
		                if (value instanceof Uint8Array) {
		                    var hex = "";
		                    for (var i = 0; i < value.length; i++) {
		                        hex += HEX[value[i] >> 4];
		                        hex += HEX[value[i] & 0x0f];
		                    }
		                    messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
		                }
		                else {
		                    messageDetails.push(key + "=" + JSON.stringify(value));
		                }
		            }
		            catch (error) {
		                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
		            }
		        });
		        messageDetails.push("code=" + code);
		        messageDetails.push("version=" + this.version);
		        var reason = message;
		        var url = "";
		        switch (code) {
		            case ErrorCode.NUMERIC_FAULT: {
		                url = "NUMERIC_FAULT";
		                var fault = message;
		                switch (fault) {
		                    case "overflow":
		                    case "underflow":
		                    case "division-by-zero":
		                        url += "-" + fault;
		                        break;
		                    case "negative-power":
		                    case "negative-width":
		                        url += "-unsupported";
		                        break;
		                    case "unbound-bitwise-result":
		                        url += "-unbound-result";
		                        break;
		                }
		                break;
		            }
		            case ErrorCode.CALL_EXCEPTION:
		            case ErrorCode.INSUFFICIENT_FUNDS:
		            case ErrorCode.MISSING_NEW:
		            case ErrorCode.NONCE_EXPIRED:
		            case ErrorCode.REPLACEMENT_UNDERPRICED:
		            case ErrorCode.TRANSACTION_REPLACED:
		            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
		                url = code;
		                break;
		        }
		        if (url) {
		            message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
		        }
		        if (messageDetails.length) {
		            message += " (" + messageDetails.join(", ") + ")";
		        }
		        // @TODO: Any??
		        var error = new Error(message);
		        error.reason = reason;
		        error.code = code;
		        Object.keys(params).forEach(function (key) {
		            error[key] = params[key];
		        });
		        return error;
		    };
		    Logger.prototype.throwError = function (message, code, params) {
		        throw this.makeError(message, code, params);
		    };
		    Logger.prototype.throwArgumentError = function (message, name, value) {
		        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
		            argument: name,
		            value: value
		        });
		    };
		    Logger.prototype.assert = function (condition, message, code, params) {
		        if (!!condition) {
		            return;
		        }
		        this.throwError(message, code, params);
		    };
		    Logger.prototype.assertArgument = function (condition, message, name, value) {
		        if (!!condition) {
		            return;
		        }
		        this.throwArgumentError(message, name, value);
		    };
		    Logger.prototype.checkNormalize = function (message) {
		        if (message == null) {
		            message = "platform missing String.prototype.normalize";
		        }
		        if (_normalizeError) {
		            this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
		                operation: "String.prototype.normalize", form: _normalizeError
		            });
		        }
		    };
		    Logger.prototype.checkSafeUint53 = function (value, message) {
		        if (typeof (value) !== "number") {
		            return;
		        }
		        if (message == null) {
		            message = "value not safe";
		        }
		        if (value < 0 || value >= 0x1fffffffffffff) {
		            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
		                operation: "checkSafeInteger",
		                fault: "out-of-safe-range",
		                value: value
		            });
		        }
		        if (value % 1) {
		            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
		                operation: "checkSafeInteger",
		                fault: "non-integer",
		                value: value
		            });
		        }
		    };
		    Logger.prototype.checkArgumentCount = function (count, expectedCount, message) {
		        if (message) {
		            message = ": " + message;
		        }
		        else {
		            message = "";
		        }
		        if (count < expectedCount) {
		            this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
		                count: count,
		                expectedCount: expectedCount
		            });
		        }
		        if (count > expectedCount) {
		            this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
		                count: count,
		                expectedCount: expectedCount
		            });
		        }
		    };
		    Logger.prototype.checkNew = function (target, kind) {
		        if (target === Object || target == null) {
		            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
		        }
		    };
		    Logger.prototype.checkAbstract = function (target, kind) {
		        if (target === kind) {
		            this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
		        }
		        else if (target === Object || target == null) {
		            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
		        }
		    };
		    Logger.globalLogger = function () {
		        if (!_globalLogger) {
		            _globalLogger = new Logger(_version_1.version);
		        }
		        return _globalLogger;
		    };
		    Logger.setCensorship = function (censorship, permanent) {
		        if (!censorship && permanent) {
		            this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
		                operation: "setCensorship"
		            });
		        }
		        if (_permanentCensorErrors) {
		            if (!censorship) {
		                return;
		            }
		            this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
		                operation: "setCensorship"
		            });
		        }
		        _censorErrors = !!censorship;
		        _permanentCensorErrors = !!permanent;
		    };
		    Logger.setLogLevel = function (logLevel) {
		        var level = LogLevels[logLevel.toLowerCase()];
		        if (level == null) {
		            Logger.globalLogger().warn("invalid log level - " + logLevel);
		            return;
		        }
		        _logLevel = level;
		    };
		    Logger.from = function (version) {
		        return new Logger(version);
		    };
		    Logger.errors = ErrorCode;
		    Logger.levels = LogLevel;
		    return Logger;
		}());
		exports.Logger = Logger;
		
	} (lib$q));

	var index$j = /*@__PURE__*/getDefaultExportFromCjs(lib$q);

	var _version$o = {};

	"use strict";
	Object.defineProperty(_version$o, "__esModule", { value: true });
	var version$p = _version$o.version = void 0;
	version$p = _version$o.version = "bytes/5.7.0";

	"use strict";
	Object.defineProperty(lib$r, "__esModule", { value: true });
	var joinSignature_1 = lib$r.joinSignature = splitSignature_1 = lib$r.splitSignature = hexZeroPad_1 = lib$r.hexZeroPad = hexStripZeros_1 = lib$r.hexStripZeros = hexValue_1 = lib$r.hexValue = hexConcat_1 = lib$r.hexConcat = hexDataSlice_1 = lib$r.hexDataSlice = hexDataLength_1 = lib$r.hexDataLength = hexlify_1 = lib$r.hexlify = isHexString_1 = lib$r.isHexString = zeroPad_1 = lib$r.zeroPad = stripZeros_1 = lib$r.stripZeros = concat_1 = lib$r.concat = arrayify_1 = lib$r.arrayify = isBytes_1 = lib$r.isBytes = isBytesLike_1 = lib$r.isBytesLike = void 0;
	var logger_1$D = lib$q;
	var _version_1$D = _version$o;
	var logger$C = new logger_1$D.Logger(_version_1$D.version);
	///////////////////////////////
	function isHexable(value) {
	    return !!(value.toHexString);
	}
	function addSlice(array) {
	    if (array.slice) {
	        return array;
	    }
	    array.slice = function () {
	        var args = Array.prototype.slice.call(arguments);
	        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
	    };
	    return array;
	}
	function isBytesLike(value) {
	    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
	}
	var isBytesLike_1 = lib$r.isBytesLike = isBytesLike;
	function isInteger(value) {
	    return (typeof (value) === "number" && value == value && (value % 1) === 0);
	}
	function isBytes(value) {
	    if (value == null) {
	        return false;
	    }
	    if (value.constructor === Uint8Array) {
	        return true;
	    }
	    if (typeof (value) === "string") {
	        return false;
	    }
	    if (!isInteger(value.length) || value.length < 0) {
	        return false;
	    }
	    for (var i = 0; i < value.length; i++) {
	        var v = value[i];
	        if (!isInteger(v) || v < 0 || v >= 256) {
	            return false;
	        }
	    }
	    return true;
	}
	var isBytes_1 = lib$r.isBytes = isBytes;
	function arrayify(value, options) {
	    if (!options) {
	        options = {};
	    }
	    if (typeof (value) === "number") {
	        logger$C.checkSafeUint53(value, "invalid arrayify value");
	        var result = [];
	        while (value) {
	            result.unshift(value & 0xff);
	            value = parseInt(String(value / 256));
	        }
	        if (result.length === 0) {
	            result.push(0);
	        }
	        return addSlice(new Uint8Array(result));
	    }
	    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    if (isHexable(value)) {
	        value = value.toHexString();
	    }
	    if (isHexString(value)) {
	        var hex = value.substring(2);
	        if (hex.length % 2) {
	            if (options.hexPad === "left") {
	                hex = "0" + hex;
	            }
	            else if (options.hexPad === "right") {
	                hex += "0";
	            }
	            else {
	                logger$C.throwArgumentError("hex data is odd-length", "value", value);
	            }
	        }
	        var result = [];
	        for (var i = 0; i < hex.length; i += 2) {
	            result.push(parseInt(hex.substring(i, i + 2), 16));
	        }
	        return addSlice(new Uint8Array(result));
	    }
	    if (isBytes(value)) {
	        return addSlice(new Uint8Array(value));
	    }
	    return logger$C.throwArgumentError("invalid arrayify value", "value", value);
	}
	var arrayify_1 = lib$r.arrayify = arrayify;
	function concat(items) {
	    var objects = items.map(function (item) { return arrayify(item); });
	    var length = objects.reduce(function (accum, item) { return (accum + item.length); }, 0);
	    var result = new Uint8Array(length);
	    objects.reduce(function (offset, object) {
	        result.set(object, offset);
	        return offset + object.length;
	    }, 0);
	    return addSlice(result);
	}
	var concat_1 = lib$r.concat = concat;
	function stripZeros(value) {
	    var result = arrayify(value);
	    if (result.length === 0) {
	        return result;
	    }
	    // Find the first non-zero entry
	    var start = 0;
	    while (start < result.length && result[start] === 0) {
	        start++;
	    }
	    // If we started with zeros, strip them
	    if (start) {
	        result = result.slice(start);
	    }
	    return result;
	}
	var stripZeros_1 = lib$r.stripZeros = stripZeros;
	function zeroPad(value, length) {
	    value = arrayify(value);
	    if (value.length > length) {
	        logger$C.throwArgumentError("value out of range", "value", arguments[0]);
	    }
	    var result = new Uint8Array(length);
	    result.set(value, length - value.length);
	    return addSlice(result);
	}
	var zeroPad_1 = lib$r.zeroPad = zeroPad;
	function isHexString(value, length) {
	    if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
	        return false;
	    }
	    if (length && value.length !== 2 + 2 * length) {
	        return false;
	    }
	    return true;
	}
	var isHexString_1 = lib$r.isHexString = isHexString;
	var HexCharacters = "0123456789abcdef";
	function hexlify(value, options) {
	    if (!options) {
	        options = {};
	    }
	    if (typeof (value) === "number") {
	        logger$C.checkSafeUint53(value, "invalid hexlify value");
	        var hex = "";
	        while (value) {
	            hex = HexCharacters[value & 0xf] + hex;
	            value = Math.floor(value / 16);
	        }
	        if (hex.length) {
	            if (hex.length % 2) {
	                hex = "0" + hex;
	            }
	            return "0x" + hex;
	        }
	        return "0x00";
	    }
	    if (typeof (value) === "bigint") {
	        value = value.toString(16);
	        if (value.length % 2) {
	            return ("0x0" + value);
	        }
	        return "0x" + value;
	    }
	    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    if (isHexable(value)) {
	        return value.toHexString();
	    }
	    if (isHexString(value)) {
	        if (value.length % 2) {
	            if (options.hexPad === "left") {
	                value = "0x0" + value.substring(2);
	            }
	            else if (options.hexPad === "right") {
	                value += "0";
	            }
	            else {
	                logger$C.throwArgumentError("hex data is odd-length", "value", value);
	            }
	        }
	        return value.toLowerCase();
	    }
	    if (isBytes(value)) {
	        var result = "0x";
	        for (var i = 0; i < value.length; i++) {
	            var v = value[i];
	            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
	        }
	        return result;
	    }
	    return logger$C.throwArgumentError("invalid hexlify value", "value", value);
	}
	var hexlify_1 = lib$r.hexlify = hexlify;
	/*
	function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
	    if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
	        return "0x0" + value.substring(2);
	    }
	    return value;
	}
	*/
	function hexDataLength(data) {
	    if (typeof (data) !== "string") {
	        data = hexlify(data);
	    }
	    else if (!isHexString(data) || (data.length % 2)) {
	        return null;
	    }
	    return (data.length - 2) / 2;
	}
	var hexDataLength_1 = lib$r.hexDataLength = hexDataLength;
	function hexDataSlice(data, offset, endOffset) {
	    if (typeof (data) !== "string") {
	        data = hexlify(data);
	    }
	    else if (!isHexString(data) || (data.length % 2)) {
	        logger$C.throwArgumentError("invalid hexData", "value", data);
	    }
	    offset = 2 + 2 * offset;
	    if (endOffset != null) {
	        return "0x" + data.substring(offset, 2 + 2 * endOffset);
	    }
	    return "0x" + data.substring(offset);
	}
	var hexDataSlice_1 = lib$r.hexDataSlice = hexDataSlice;
	function hexConcat(items) {
	    var result = "0x";
	    items.forEach(function (item) {
	        result += hexlify(item).substring(2);
	    });
	    return result;
	}
	var hexConcat_1 = lib$r.hexConcat = hexConcat;
	function hexValue(value) {
	    var trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
	    if (trimmed === "0x") {
	        return "0x0";
	    }
	    return trimmed;
	}
	var hexValue_1 = lib$r.hexValue = hexValue;
	function hexStripZeros(value) {
	    if (typeof (value) !== "string") {
	        value = hexlify(value);
	    }
	    if (!isHexString(value)) {
	        logger$C.throwArgumentError("invalid hex string", "value", value);
	    }
	    value = value.substring(2);
	    var offset = 0;
	    while (offset < value.length && value[offset] === "0") {
	        offset++;
	    }
	    return "0x" + value.substring(offset);
	}
	var hexStripZeros_1 = lib$r.hexStripZeros = hexStripZeros;
	function hexZeroPad(value, length) {
	    if (typeof (value) !== "string") {
	        value = hexlify(value);
	    }
	    else if (!isHexString(value)) {
	        logger$C.throwArgumentError("invalid hex string", "value", value);
	    }
	    if (value.length > 2 * length + 2) {
	        logger$C.throwArgumentError("value out of range", "value", arguments[1]);
	    }
	    while (value.length < 2 * length + 2) {
	        value = "0x0" + value.substring(2);
	    }
	    return value;
	}
	var hexZeroPad_1 = lib$r.hexZeroPad = hexZeroPad;
	function splitSignature(signature) {
	    var result = {
	        r: "0x",
	        s: "0x",
	        _vs: "0x",
	        recoveryParam: 0,
	        v: 0,
	        yParityAndS: "0x",
	        compact: "0x"
	    };
	    if (isBytesLike(signature)) {
	        var bytes = arrayify(signature);
	        // Get the r, s and v
	        if (bytes.length === 64) {
	            // EIP-2098; pull the v from the top bit of s and clear it
	            result.v = 27 + (bytes[32] >> 7);
	            bytes[32] &= 0x7f;
	            result.r = hexlify(bytes.slice(0, 32));
	            result.s = hexlify(bytes.slice(32, 64));
	        }
	        else if (bytes.length === 65) {
	            result.r = hexlify(bytes.slice(0, 32));
	            result.s = hexlify(bytes.slice(32, 64));
	            result.v = bytes[64];
	        }
	        else {
	            logger$C.throwArgumentError("invalid signature string", "signature", signature);
	        }
	        // Allow a recid to be used as the v
	        if (result.v < 27) {
	            if (result.v === 0 || result.v === 1) {
	                result.v += 27;
	            }
	            else {
	                logger$C.throwArgumentError("signature invalid v byte", "signature", signature);
	            }
	        }
	        // Compute recoveryParam from v
	        result.recoveryParam = 1 - (result.v % 2);
	        // Compute _vs from recoveryParam and s
	        if (result.recoveryParam) {
	            bytes[32] |= 0x80;
	        }
	        result._vs = hexlify(bytes.slice(32, 64));
	    }
	    else {
	        result.r = signature.r;
	        result.s = signature.s;
	        result.v = signature.v;
	        result.recoveryParam = signature.recoveryParam;
	        result._vs = signature._vs;
	        // If the _vs is available, use it to populate missing s, v and recoveryParam
	        // and verify non-missing s, v and recoveryParam
	        if (result._vs != null) {
	            var vs_1 = zeroPad(arrayify(result._vs), 32);
	            result._vs = hexlify(vs_1);
	            // Set or check the recid
	            var recoveryParam = ((vs_1[0] >= 128) ? 1 : 0);
	            if (result.recoveryParam == null) {
	                result.recoveryParam = recoveryParam;
	            }
	            else if (result.recoveryParam !== recoveryParam) {
	                logger$C.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
	            }
	            // Set or check the s
	            vs_1[0] &= 0x7f;
	            var s = hexlify(vs_1);
	            if (result.s == null) {
	                result.s = s;
	            }
	            else if (result.s !== s) {
	                logger$C.throwArgumentError("signature v mismatch _vs", "signature", signature);
	            }
	        }
	        // Use recid and v to populate each other
	        if (result.recoveryParam == null) {
	            if (result.v == null) {
	                logger$C.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
	            }
	            else if (result.v === 0 || result.v === 1) {
	                result.recoveryParam = result.v;
	            }
	            else {
	                result.recoveryParam = 1 - (result.v % 2);
	            }
	        }
	        else {
	            if (result.v == null) {
	                result.v = 27 + result.recoveryParam;
	            }
	            else {
	                var recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
	                if (result.recoveryParam !== recId) {
	                    logger$C.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
	                }
	            }
	        }
	        if (result.r == null || !isHexString(result.r)) {
	            logger$C.throwArgumentError("signature missing or invalid r", "signature", signature);
	        }
	        else {
	            result.r = hexZeroPad(result.r, 32);
	        }
	        if (result.s == null || !isHexString(result.s)) {
	            logger$C.throwArgumentError("signature missing or invalid s", "signature", signature);
	        }
	        else {
	            result.s = hexZeroPad(result.s, 32);
	        }
	        var vs = arrayify(result.s);
	        if (vs[0] >= 128) {
	            logger$C.throwArgumentError("signature s out of range", "signature", signature);
	        }
	        if (result.recoveryParam) {
	            vs[0] |= 0x80;
	        }
	        var _vs = hexlify(vs);
	        if (result._vs) {
	            if (!isHexString(result._vs)) {
	                logger$C.throwArgumentError("signature invalid _vs", "signature", signature);
	            }
	            result._vs = hexZeroPad(result._vs, 32);
	        }
	        // Set or check the _vs
	        if (result._vs == null) {
	            result._vs = _vs;
	        }
	        else if (result._vs !== _vs) {
	            logger$C.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
	        }
	    }
	    result.yParityAndS = result._vs;
	    result.compact = result.r + result.yParityAndS.substring(2);
	    return result;
	}
	var splitSignature_1 = lib$r.splitSignature = splitSignature;
	function joinSignature(signature) {
	    signature = splitSignature(signature);
	    return hexlify(concat([
	        signature.r,
	        signature.s,
	        (signature.recoveryParam ? "0x1c" : "0x1b")
	    ]));
	}
	joinSignature_1 = lib$r.joinSignature = joinSignature;

	var _version$n = {};

	"use strict";
	Object.defineProperty(_version$n, "__esModule", { value: true });
	var version$o = _version$n.version = void 0;
	version$o = _version$n.version = "bignumber/5.7.0";

	"use strict";
	var __importDefault$d = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(bignumber, "__esModule", { value: true });
	var _base16To36_1 = bignumber._base16To36 = _base36To16_1 = bignumber._base36To16 = BigNumber_1 = bignumber.BigNumber = isBigNumberish_1 = bignumber.isBigNumberish = void 0;
	/**
	 *  BigNumber
	 *
	 *  A wrapper around the BN.js object. We use the BN.js library
	 *  because it is used by elliptic, so it is required regardless.
	 *
	 */
	var bn_js_1 = __importDefault$d(bnExports$1);
	var BN$8 = bn_js_1.default.BN;
	var bytes_1$z = lib$r;
	var logger_1$C = lib$q;
	var _version_1$C = _version$n;
	var logger$B = new logger_1$C.Logger(_version_1$C.version);
	var _constructorGuard$3 = {};
	var MAX_SAFE = 0x1fffffffffffff;
	function isBigNumberish(value) {
	    return (value != null) && (BigNumber.isBigNumber(value) ||
	        (typeof (value) === "number" && (value % 1) === 0) ||
	        (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
	        (0, bytes_1$z.isHexString)(value) ||
	        (typeof (value) === "bigint") ||
	        (0, bytes_1$z.isBytes)(value));
	}
	var isBigNumberish_1 = bignumber.isBigNumberish = isBigNumberish;
	// Only warn about passing 10 into radix once
	var _warnedToStringRadix = false;
	var BigNumber = /** @class */ (function () {
	    function BigNumber(constructorGuard, hex) {
	        if (constructorGuard !== _constructorGuard$3) {
	            logger$B.throwError("cannot call constructor directly; use BigNumber.from", logger_1$C.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new (BigNumber)"
	            });
	        }
	        this._hex = hex;
	        this._isBigNumber = true;
	        Object.freeze(this);
	    }
	    BigNumber.prototype.fromTwos = function (value) {
	        return toBigNumber(toBN(this).fromTwos(value));
	    };
	    BigNumber.prototype.toTwos = function (value) {
	        return toBigNumber(toBN(this).toTwos(value));
	    };
	    BigNumber.prototype.abs = function () {
	        if (this._hex[0] === "-") {
	            return BigNumber.from(this._hex.substring(1));
	        }
	        return this;
	    };
	    BigNumber.prototype.add = function (other) {
	        return toBigNumber(toBN(this).add(toBN(other)));
	    };
	    BigNumber.prototype.sub = function (other) {
	        return toBigNumber(toBN(this).sub(toBN(other)));
	    };
	    BigNumber.prototype.div = function (other) {
	        var o = BigNumber.from(other);
	        if (o.isZero()) {
	            throwFault$1("division-by-zero", "div");
	        }
	        return toBigNumber(toBN(this).div(toBN(other)));
	    };
	    BigNumber.prototype.mul = function (other) {
	        return toBigNumber(toBN(this).mul(toBN(other)));
	    };
	    BigNumber.prototype.mod = function (other) {
	        var value = toBN(other);
	        if (value.isNeg()) {
	            throwFault$1("division-by-zero", "mod");
	        }
	        return toBigNumber(toBN(this).umod(value));
	    };
	    BigNumber.prototype.pow = function (other) {
	        var value = toBN(other);
	        if (value.isNeg()) {
	            throwFault$1("negative-power", "pow");
	        }
	        return toBigNumber(toBN(this).pow(value));
	    };
	    BigNumber.prototype.and = function (other) {
	        var value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault$1("unbound-bitwise-result", "and");
	        }
	        return toBigNumber(toBN(this).and(value));
	    };
	    BigNumber.prototype.or = function (other) {
	        var value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault$1("unbound-bitwise-result", "or");
	        }
	        return toBigNumber(toBN(this).or(value));
	    };
	    BigNumber.prototype.xor = function (other) {
	        var value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault$1("unbound-bitwise-result", "xor");
	        }
	        return toBigNumber(toBN(this).xor(value));
	    };
	    BigNumber.prototype.mask = function (value) {
	        if (this.isNegative() || value < 0) {
	            throwFault$1("negative-width", "mask");
	        }
	        return toBigNumber(toBN(this).maskn(value));
	    };
	    BigNumber.prototype.shl = function (value) {
	        if (this.isNegative() || value < 0) {
	            throwFault$1("negative-width", "shl");
	        }
	        return toBigNumber(toBN(this).shln(value));
	    };
	    BigNumber.prototype.shr = function (value) {
	        if (this.isNegative() || value < 0) {
	            throwFault$1("negative-width", "shr");
	        }
	        return toBigNumber(toBN(this).shrn(value));
	    };
	    BigNumber.prototype.eq = function (other) {
	        return toBN(this).eq(toBN(other));
	    };
	    BigNumber.prototype.lt = function (other) {
	        return toBN(this).lt(toBN(other));
	    };
	    BigNumber.prototype.lte = function (other) {
	        return toBN(this).lte(toBN(other));
	    };
	    BigNumber.prototype.gt = function (other) {
	        return toBN(this).gt(toBN(other));
	    };
	    BigNumber.prototype.gte = function (other) {
	        return toBN(this).gte(toBN(other));
	    };
	    BigNumber.prototype.isNegative = function () {
	        return (this._hex[0] === "-");
	    };
	    BigNumber.prototype.isZero = function () {
	        return toBN(this).isZero();
	    };
	    BigNumber.prototype.toNumber = function () {
	        try {
	            return toBN(this).toNumber();
	        }
	        catch (error) {
	            throwFault$1("overflow", "toNumber", this.toString());
	        }
	        return null;
	    };
	    BigNumber.prototype.toBigInt = function () {
	        try {
	            return BigInt(this.toString());
	        }
	        catch (e) { }
	        return logger$B.throwError("this platform does not support BigInt", logger_1$C.Logger.errors.UNSUPPORTED_OPERATION, {
	            value: this.toString()
	        });
	    };
	    BigNumber.prototype.toString = function () {
	        // Lots of people expect this, which we do not support, so check (See: #889)
	        if (arguments.length > 0) {
	            if (arguments[0] === 10) {
	                if (!_warnedToStringRadix) {
	                    _warnedToStringRadix = true;
	                    logger$B.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
	                }
	            }
	            else if (arguments[0] === 16) {
	                logger$B.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", logger_1$C.Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	            else {
	                logger$B.throwError("BigNumber.toString does not accept parameters", logger_1$C.Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	        }
	        return toBN(this).toString(10);
	    };
	    BigNumber.prototype.toHexString = function () {
	        return this._hex;
	    };
	    BigNumber.prototype.toJSON = function (key) {
	        return { type: "BigNumber", hex: this.toHexString() };
	    };
	    BigNumber.from = function (value) {
	        if (value instanceof BigNumber) {
	            return value;
	        }
	        if (typeof (value) === "string") {
	            if (value.match(/^-?0x[0-9a-f]+$/i)) {
	                return new BigNumber(_constructorGuard$3, toHex$1(value));
	            }
	            if (value.match(/^-?[0-9]+$/)) {
	                return new BigNumber(_constructorGuard$3, toHex$1(new BN$8(value)));
	            }
	            return logger$B.throwArgumentError("invalid BigNumber string", "value", value);
	        }
	        if (typeof (value) === "number") {
	            if (value % 1) {
	                throwFault$1("underflow", "BigNumber.from", value);
	            }
	            if (value >= MAX_SAFE || value <= -MAX_SAFE) {
	                throwFault$1("overflow", "BigNumber.from", value);
	            }
	            return BigNumber.from(String(value));
	        }
	        var anyValue = value;
	        if (typeof (anyValue) === "bigint") {
	            return BigNumber.from(anyValue.toString());
	        }
	        if ((0, bytes_1$z.isBytes)(anyValue)) {
	            return BigNumber.from((0, bytes_1$z.hexlify)(anyValue));
	        }
	        if (anyValue) {
	            // Hexable interface (takes priority)
	            if (anyValue.toHexString) {
	                var hex = anyValue.toHexString();
	                if (typeof (hex) === "string") {
	                    return BigNumber.from(hex);
	                }
	            }
	            else {
	                // For now, handle legacy JSON-ified values (goes away in v6)
	                var hex = anyValue._hex;
	                // New-form JSON
	                if (hex == null && anyValue.type === "BigNumber") {
	                    hex = anyValue.hex;
	                }
	                if (typeof (hex) === "string") {
	                    if ((0, bytes_1$z.isHexString)(hex) || (hex[0] === "-" && (0, bytes_1$z.isHexString)(hex.substring(1)))) {
	                        return BigNumber.from(hex);
	                    }
	                }
	            }
	        }
	        return logger$B.throwArgumentError("invalid BigNumber value", "value", value);
	    };
	    BigNumber.isBigNumber = function (value) {
	        return !!(value && value._isBigNumber);
	    };
	    return BigNumber;
	}());
	var BigNumber_1 = bignumber.BigNumber = BigNumber;
	// Normalize the hex string
	function toHex$1(value) {
	    // For BN, call on the hex string
	    if (typeof (value) !== "string") {
	        return toHex$1(value.toString(16));
	    }
	    // If negative, prepend the negative sign to the normalized positive value
	    if (value[0] === "-") {
	        // Strip off the negative sign
	        value = value.substring(1);
	        // Cannot have multiple negative signs (e.g. "--0x04")
	        if (value[0] === "-") {
	            logger$B.throwArgumentError("invalid hex", "value", value);
	        }
	        // Call toHex on the positive component
	        value = toHex$1(value);
	        // Do not allow "-0x00"
	        if (value === "0x00") {
	            return value;
	        }
	        // Negate the value
	        return "-" + value;
	    }
	    // Add a "0x" prefix if missing
	    if (value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    // Normalize zero
	    if (value === "0x") {
	        return "0x00";
	    }
	    // Make the string even length
	    if (value.length % 2) {
	        value = "0x0" + value.substring(2);
	    }
	    // Trim to smallest even-length string
	    while (value.length > 4 && value.substring(0, 4) === "0x00") {
	        value = "0x" + value.substring(4);
	    }
	    return value;
	}
	function toBigNumber(value) {
	    return BigNumber.from(toHex$1(value));
	}
	function toBN(value) {
	    var hex = BigNumber.from(value).toHexString();
	    if (hex[0] === "-") {
	        return (new BN$8("-" + hex.substring(3), 16));
	    }
	    return new BN$8(hex.substring(2), 16);
	}
	function throwFault$1(fault, operation, value) {
	    var params = { fault: fault, operation: operation };
	    if (value != null) {
	        params.value = value;
	    }
	    return logger$B.throwError(fault, logger_1$C.Logger.errors.NUMERIC_FAULT, params);
	}
	// value should have no prefix
	function _base36To16(value) {
	    return (new BN$8(value, 36)).toString(16);
	}
	var _base36To16_1 = bignumber._base36To16 = _base36To16;
	// value should have no prefix
	function _base16To36(value) {
	    return (new BN$8(value, 16)).toString(36);
	}
	_base16To36_1 = bignumber._base16To36 = _base16To36;

	var fixednumber = {};

	"use strict";
	Object.defineProperty(fixednumber, "__esModule", { value: true });
	var FixedNumber_1 = fixednumber.FixedNumber = FixedFormat_1 = fixednumber.FixedFormat = parseFixed_1 = fixednumber.parseFixed = formatFixed_1 = fixednumber.formatFixed = void 0;
	var bytes_1$y = lib$r;
	var logger_1$B = lib$q;
	var _version_1$B = _version$n;
	var logger$A = new logger_1$B.Logger(_version_1$B.version);
	var bignumber_1$f = bignumber;
	var _constructorGuard$2 = {};
	var Zero$2 = bignumber_1$f.BigNumber.from(0);
	var NegativeOne$2 = bignumber_1$f.BigNumber.from(-1);
	function throwFault(message, fault, operation, value) {
	    var params = { fault: fault, operation: operation };
	    if (value !== undefined) {
	        params.value = value;
	    }
	    return logger$A.throwError(message, logger_1$B.Logger.errors.NUMERIC_FAULT, params);
	}
	// Constant to pull zeros from for multipliers
	var zeros = "0";
	while (zeros.length < 256) {
	    zeros += zeros;
	}
	// Returns a string "1" followed by decimal "0"s
	function getMultiplier(decimals) {
	    if (typeof (decimals) !== "number") {
	        try {
	            decimals = bignumber_1$f.BigNumber.from(decimals).toNumber();
	        }
	        catch (e) { }
	    }
	    if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
	        return ("1" + zeros.substring(0, decimals));
	    }
	    return logger$A.throwArgumentError("invalid decimal size", "decimals", decimals);
	}
	function formatFixed(value, decimals) {
	    if (decimals == null) {
	        decimals = 0;
	    }
	    var multiplier = getMultiplier(decimals);
	    // Make sure wei is a big number (convert as necessary)
	    value = bignumber_1$f.BigNumber.from(value);
	    var negative = value.lt(Zero$2);
	    if (negative) {
	        value = value.mul(NegativeOne$2);
	    }
	    var fraction = value.mod(multiplier).toString();
	    while (fraction.length < multiplier.length - 1) {
	        fraction = "0" + fraction;
	    }
	    // Strip training 0
	    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
	    var whole = value.div(multiplier).toString();
	    if (multiplier.length === 1) {
	        value = whole;
	    }
	    else {
	        value = whole + "." + fraction;
	    }
	    if (negative) {
	        value = "-" + value;
	    }
	    return value;
	}
	var formatFixed_1 = fixednumber.formatFixed = formatFixed;
	function parseFixed(value, decimals) {
	    if (decimals == null) {
	        decimals = 0;
	    }
	    var multiplier = getMultiplier(decimals);
	    if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
	        logger$A.throwArgumentError("invalid decimal value", "value", value);
	    }
	    // Is it negative?
	    var negative = (value.substring(0, 1) === "-");
	    if (negative) {
	        value = value.substring(1);
	    }
	    if (value === ".") {
	        logger$A.throwArgumentError("missing value", "value", value);
	    }
	    // Split it into a whole and fractional part
	    var comps = value.split(".");
	    if (comps.length > 2) {
	        logger$A.throwArgumentError("too many decimal points", "value", value);
	    }
	    var whole = comps[0], fraction = comps[1];
	    if (!whole) {
	        whole = "0";
	    }
	    if (!fraction) {
	        fraction = "0";
	    }
	    // Trim trailing zeros
	    while (fraction[fraction.length - 1] === "0") {
	        fraction = fraction.substring(0, fraction.length - 1);
	    }
	    // Check the fraction doesn't exceed our decimals size
	    if (fraction.length > multiplier.length - 1) {
	        throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
	    }
	    // If decimals is 0, we have an empty string for fraction
	    if (fraction === "") {
	        fraction = "0";
	    }
	    // Fully pad the string with zeros to get to wei
	    while (fraction.length < multiplier.length - 1) {
	        fraction += "0";
	    }
	    var wholeValue = bignumber_1$f.BigNumber.from(whole);
	    var fractionValue = bignumber_1$f.BigNumber.from(fraction);
	    var wei = (wholeValue.mul(multiplier)).add(fractionValue);
	    if (negative) {
	        wei = wei.mul(NegativeOne$2);
	    }
	    return wei;
	}
	var parseFixed_1 = fixednumber.parseFixed = parseFixed;
	var FixedFormat = /** @class */ (function () {
	    function FixedFormat(constructorGuard, signed, width, decimals) {
	        if (constructorGuard !== _constructorGuard$2) {
	            logger$A.throwError("cannot use FixedFormat constructor; use FixedFormat.from", logger_1$B.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new FixedFormat"
	            });
	        }
	        this.signed = signed;
	        this.width = width;
	        this.decimals = decimals;
	        this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
	        this._multiplier = getMultiplier(decimals);
	        Object.freeze(this);
	    }
	    FixedFormat.from = function (value) {
	        if (value instanceof FixedFormat) {
	            return value;
	        }
	        if (typeof (value) === "number") {
	            value = "fixed128x" + value;
	        }
	        var signed = true;
	        var width = 128;
	        var decimals = 18;
	        if (typeof (value) === "string") {
	            if (value === "fixed") {
	                // defaults...
	            }
	            else if (value === "ufixed") {
	                signed = false;
	            }
	            else {
	                var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
	                if (!match) {
	                    logger$A.throwArgumentError("invalid fixed format", "format", value);
	                }
	                signed = (match[1] !== "u");
	                width = parseInt(match[2]);
	                decimals = parseInt(match[3]);
	            }
	        }
	        else if (value) {
	            var check = function (key, type, defaultValue) {
	                if (value[key] == null) {
	                    return defaultValue;
	                }
	                if (typeof (value[key]) !== type) {
	                    logger$A.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
	                }
	                return value[key];
	            };
	            signed = check("signed", "boolean", signed);
	            width = check("width", "number", width);
	            decimals = check("decimals", "number", decimals);
	        }
	        if (width % 8) {
	            logger$A.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
	        }
	        if (decimals > 80) {
	            logger$A.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
	        }
	        return new FixedFormat(_constructorGuard$2, signed, width, decimals);
	    };
	    return FixedFormat;
	}());
	var FixedFormat_1 = fixednumber.FixedFormat = FixedFormat;
	var FixedNumber = /** @class */ (function () {
	    function FixedNumber(constructorGuard, hex, value, format) {
	        if (constructorGuard !== _constructorGuard$2) {
	            logger$A.throwError("cannot use FixedNumber constructor; use FixedNumber.from", logger_1$B.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new FixedFormat"
	            });
	        }
	        this.format = format;
	        this._hex = hex;
	        this._value = value;
	        this._isFixedNumber = true;
	        Object.freeze(this);
	    }
	    FixedNumber.prototype._checkFormat = function (other) {
	        if (this.format.name !== other.format.name) {
	            logger$A.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
	        }
	    };
	    FixedNumber.prototype.addUnsafe = function (other) {
	        this._checkFormat(other);
	        var a = parseFixed(this._value, this.format.decimals);
	        var b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
	    };
	    FixedNumber.prototype.subUnsafe = function (other) {
	        this._checkFormat(other);
	        var a = parseFixed(this._value, this.format.decimals);
	        var b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
	    };
	    FixedNumber.prototype.mulUnsafe = function (other) {
	        this._checkFormat(other);
	        var a = parseFixed(this._value, this.format.decimals);
	        var b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
	    };
	    FixedNumber.prototype.divUnsafe = function (other) {
	        this._checkFormat(other);
	        var a = parseFixed(this._value, this.format.decimals);
	        var b = parseFixed(other._value, other.format.decimals);
	        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
	    };
	    FixedNumber.prototype.floor = function () {
	        var comps = this.toString().split(".");
	        if (comps.length === 1) {
	            comps.push("0");
	        }
	        var result = FixedNumber.from(comps[0], this.format);
	        var hasFraction = !comps[1].match(/^(0*)$/);
	        if (this.isNegative() && hasFraction) {
	            result = result.subUnsafe(ONE.toFormat(result.format));
	        }
	        return result;
	    };
	    FixedNumber.prototype.ceiling = function () {
	        var comps = this.toString().split(".");
	        if (comps.length === 1) {
	            comps.push("0");
	        }
	        var result = FixedNumber.from(comps[0], this.format);
	        var hasFraction = !comps[1].match(/^(0*)$/);
	        if (!this.isNegative() && hasFraction) {
	            result = result.addUnsafe(ONE.toFormat(result.format));
	        }
	        return result;
	    };
	    // @TODO: Support other rounding algorithms
	    FixedNumber.prototype.round = function (decimals) {
	        if (decimals == null) {
	            decimals = 0;
	        }
	        // If we are already in range, we're done
	        var comps = this.toString().split(".");
	        if (comps.length === 1) {
	            comps.push("0");
	        }
	        if (decimals < 0 || decimals > 80 || (decimals % 1)) {
	            logger$A.throwArgumentError("invalid decimal count", "decimals", decimals);
	        }
	        if (comps[1].length <= decimals) {
	            return this;
	        }
	        var factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
	        var bump = BUMP.toFormat(this.format);
	        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
	    };
	    FixedNumber.prototype.isZero = function () {
	        return (this._value === "0.0" || this._value === "0");
	    };
	    FixedNumber.prototype.isNegative = function () {
	        return (this._value[0] === "-");
	    };
	    FixedNumber.prototype.toString = function () { return this._value; };
	    FixedNumber.prototype.toHexString = function (width) {
	        if (width == null) {
	            return this._hex;
	        }
	        if (width % 8) {
	            logger$A.throwArgumentError("invalid byte width", "width", width);
	        }
	        var hex = bignumber_1$f.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
	        return (0, bytes_1$y.hexZeroPad)(hex, width / 8);
	    };
	    FixedNumber.prototype.toUnsafeFloat = function () { return parseFloat(this.toString()); };
	    FixedNumber.prototype.toFormat = function (format) {
	        return FixedNumber.fromString(this._value, format);
	    };
	    FixedNumber.fromValue = function (value, decimals, format) {
	        // If decimals looks more like a format, and there is no format, shift the parameters
	        if (format == null && decimals != null && !(0, bignumber_1$f.isBigNumberish)(decimals)) {
	            format = decimals;
	            decimals = null;
	        }
	        if (decimals == null) {
	            decimals = 0;
	        }
	        if (format == null) {
	            format = "fixed";
	        }
	        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
	    };
	    FixedNumber.fromString = function (value, format) {
	        if (format == null) {
	            format = "fixed";
	        }
	        var fixedFormat = FixedFormat.from(format);
	        var numeric = parseFixed(value, fixedFormat.decimals);
	        if (!fixedFormat.signed && numeric.lt(Zero$2)) {
	            throwFault("unsigned value cannot be negative", "overflow", "value", value);
	        }
	        var hex = null;
	        if (fixedFormat.signed) {
	            hex = numeric.toTwos(fixedFormat.width).toHexString();
	        }
	        else {
	            hex = numeric.toHexString();
	            hex = (0, bytes_1$y.hexZeroPad)(hex, fixedFormat.width / 8);
	        }
	        var decimal = formatFixed(numeric, fixedFormat.decimals);
	        return new FixedNumber(_constructorGuard$2, hex, decimal, fixedFormat);
	    };
	    FixedNumber.fromBytes = function (value, format) {
	        if (format == null) {
	            format = "fixed";
	        }
	        var fixedFormat = FixedFormat.from(format);
	        if ((0, bytes_1$y.arrayify)(value).length > fixedFormat.width / 8) {
	            throw new Error("overflow");
	        }
	        var numeric = bignumber_1$f.BigNumber.from(value);
	        if (fixedFormat.signed) {
	            numeric = numeric.fromTwos(fixedFormat.width);
	        }
	        var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
	        var decimal = formatFixed(numeric, fixedFormat.decimals);
	        return new FixedNumber(_constructorGuard$2, hex, decimal, fixedFormat);
	    };
	    FixedNumber.from = function (value, format) {
	        if (typeof (value) === "string") {
	            return FixedNumber.fromString(value, format);
	        }
	        if ((0, bytes_1$y.isBytes)(value)) {
	            return FixedNumber.fromBytes(value, format);
	        }
	        try {
	            return FixedNumber.fromValue(value, 0, format);
	        }
	        catch (error) {
	            // Allow NUMERIC_FAULT to bubble up
	            if (error.code !== logger_1$B.Logger.errors.INVALID_ARGUMENT) {
	                throw error;
	            }
	        }
	        return logger$A.throwArgumentError("invalid FixedNumber value", "value", value);
	    };
	    FixedNumber.isFixedNumber = function (value) {
	        return !!(value && value._isFixedNumber);
	    };
	    return FixedNumber;
	}());
	FixedNumber_1 = fixednumber.FixedNumber = FixedNumber;
	var ONE = FixedNumber.from(1);
	var BUMP = FixedNumber.from("0.5");

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports._base36To16 = exports._base16To36 = exports.parseFixed = exports.FixedNumber = exports.FixedFormat = exports.formatFixed = exports.BigNumber = void 0;
		var bignumber_1 = bignumber;
		Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return bignumber_1.BigNumber; } });
		var fixednumber_1 = fixednumber;
		Object.defineProperty(exports, "formatFixed", { enumerable: true, get: function () { return fixednumber_1.formatFixed; } });
		Object.defineProperty(exports, "FixedFormat", { enumerable: true, get: function () { return fixednumber_1.FixedFormat; } });
		Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return fixednumber_1.FixedNumber; } });
		Object.defineProperty(exports, "parseFixed", { enumerable: true, get: function () { return fixednumber_1.parseFixed; } });
		// Internal methods used by address
		var bignumber_2 = bignumber;
		Object.defineProperty(exports, "_base16To36", { enumerable: true, get: function () { return bignumber_2._base16To36; } });
		Object.defineProperty(exports, "_base36To16", { enumerable: true, get: function () { return bignumber_2._base36To16; } });
		
	} (lib$s));

	var index$i = /*@__PURE__*/getDefaultExportFromCjs(lib$s);

	var lib$p = {};

	var _version$m = {};

	"use strict";
	Object.defineProperty(_version$m, "__esModule", { value: true });
	var version$n = _version$m.version = void 0;
	version$n = _version$m.version = "properties/5.7.0";

	"use strict";
	var __awaiter$q = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$q = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(lib$p, "__esModule", { value: true });
	var Description_1 = lib$p.Description = deepCopy_1 = lib$p.deepCopy = shallowCopy_1 = lib$p.shallowCopy = checkProperties_1 = lib$p.checkProperties = resolveProperties_1 = lib$p.resolveProperties = getStatic_1 = lib$p.getStatic = defineReadOnly_1 = lib$p.defineReadOnly = void 0;
	var logger_1$A = lib$q;
	var _version_1$A = _version$m;
	var logger$z = new logger_1$A.Logger(_version_1$A.version);
	function defineReadOnly(object, name, value) {
	    Object.defineProperty(object, name, {
	        enumerable: true,
	        value: value,
	        writable: false,
	    });
	}
	var defineReadOnly_1 = lib$p.defineReadOnly = defineReadOnly;
	// Crawl up the constructor chain to find a static method
	function getStatic(ctor, key) {
	    for (var i = 0; i < 32; i++) {
	        if (ctor[key]) {
	            return ctor[key];
	        }
	        if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
	            break;
	        }
	        ctor = Object.getPrototypeOf(ctor.prototype).constructor;
	    }
	    return null;
	}
	var getStatic_1 = lib$p.getStatic = getStatic;
	function resolveProperties(object) {
	    return __awaiter$q(this, void 0, void 0, function () {
	        var promises, results;
	        return __generator$q(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    promises = Object.keys(object).map(function (key) {
	                        var value = object[key];
	                        return Promise.resolve(value).then(function (v) { return ({ key: key, value: v }); });
	                    });
	                    return [4 /*yield*/, Promise.all(promises)];
	                case 1:
	                    results = _a.sent();
	                    return [2 /*return*/, results.reduce(function (accum, result) {
	                            accum[(result.key)] = result.value;
	                            return accum;
	                        }, {})];
	            }
	        });
	    });
	}
	var resolveProperties_1 = lib$p.resolveProperties = resolveProperties;
	function checkProperties(object, properties) {
	    if (!object || typeof (object) !== "object") {
	        logger$z.throwArgumentError("invalid object", "object", object);
	    }
	    Object.keys(object).forEach(function (key) {
	        if (!properties[key]) {
	            logger$z.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
	        }
	    });
	}
	var checkProperties_1 = lib$p.checkProperties = checkProperties;
	function shallowCopy(object) {
	    var result = {};
	    for (var key in object) {
	        result[key] = object[key];
	    }
	    return result;
	}
	var shallowCopy_1 = lib$p.shallowCopy = shallowCopy;
	var opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
	function _isFrozen(object) {
	    // Opaque objects are not mutable, so safe to copy by assignment
	    if (object === undefined || object === null || opaque[typeof (object)]) {
	        return true;
	    }
	    if (Array.isArray(object) || typeof (object) === "object") {
	        if (!Object.isFrozen(object)) {
	            return false;
	        }
	        var keys = Object.keys(object);
	        for (var i = 0; i < keys.length; i++) {
	            var value = null;
	            try {
	                value = object[keys[i]];
	            }
	            catch (error) {
	                // If accessing a value triggers an error, it is a getter
	                // designed to do so (e.g. Result) and is therefore "frozen"
	                continue;
	            }
	            if (!_isFrozen(value)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    return logger$z.throwArgumentError("Cannot deepCopy " + typeof (object), "object", object);
	}
	// Returns a new copy of object, such that no properties may be replaced.
	// New properties may be added only to objects.
	function _deepCopy(object) {
	    if (_isFrozen(object)) {
	        return object;
	    }
	    // Arrays are mutable, so we need to create a copy
	    if (Array.isArray(object)) {
	        return Object.freeze(object.map(function (item) { return deepCopy(item); }));
	    }
	    if (typeof (object) === "object") {
	        var result = {};
	        for (var key in object) {
	            var value = object[key];
	            if (value === undefined) {
	                continue;
	            }
	            defineReadOnly(result, key, deepCopy(value));
	        }
	        return result;
	    }
	    return logger$z.throwArgumentError("Cannot deepCopy " + typeof (object), "object", object);
	}
	function deepCopy(object) {
	    return _deepCopy(object);
	}
	var deepCopy_1 = lib$p.deepCopy = deepCopy;
	var Description = /** @class */ (function () {
	    function Description(info) {
	        for (var key in info) {
	            this[key] = deepCopy(info[key]);
	        }
	    }
	    return Description;
	}());
	Description_1 = lib$p.Description = Description;

	var _version$l = {};

	"use strict";
	Object.defineProperty(_version$l, "__esModule", { value: true });
	var version$m = _version$l.version = void 0;
	version$m = _version$l.version = "abi/5.7.0";

	(function (exports) {
		"use strict";
		var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
		    var extendStatics = function (d, b) {
		        extendStatics = Object.setPrototypeOf ||
		            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
		            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
		        return extendStatics(d, b);
		    };
		    return function (d, b) {
		        if (typeof b !== "function" && b !== null)
		            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
		        extendStatics(d, b);
		        function __() { this.constructor = d; }
		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		    };
		})();
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ErrorFragment = exports.FunctionFragment = exports.ConstructorFragment = exports.EventFragment = exports.Fragment = exports.ParamType = exports.FormatTypes = void 0;
		var bignumber_1 = lib$s;
		var properties_1 = lib$p;
		var logger_1 = lib$q;
		var _version_1 = _version$l;
		var logger = new logger_1.Logger(_version_1.version);
		;
		var _constructorGuard = {};
		var ModifiersBytes = { calldata: true, memory: true, storage: true };
		var ModifiersNest = { calldata: true, memory: true };
		function checkModifier(type, name) {
		    if (type === "bytes" || type === "string") {
		        if (ModifiersBytes[name]) {
		            return true;
		        }
		    }
		    else if (type === "address") {
		        if (name === "payable") {
		            return true;
		        }
		    }
		    else if (type.indexOf("[") >= 0 || type === "tuple") {
		        if (ModifiersNest[name]) {
		            return true;
		        }
		    }
		    if (ModifiersBytes[name] || name === "payable") {
		        logger.throwArgumentError("invalid modifier", "name", name);
		    }
		    return false;
		}
		// @TODO: Make sure that children of an indexed tuple are marked with a null indexed
		function parseParamType(param, allowIndexed) {
		    var originalParam = param;
		    function throwError(i) {
		        logger.throwArgumentError("unexpected character at position " + i, "param", param);
		    }
		    param = param.replace(/\s/g, " ");
		    function newNode(parent) {
		        var node = { type: "", name: "", parent: parent, state: { allowType: true } };
		        if (allowIndexed) {
		            node.indexed = false;
		        }
		        return node;
		    }
		    var parent = { type: "", name: "", state: { allowType: true } };
		    var node = parent;
		    for (var i = 0; i < param.length; i++) {
		        var c = param[i];
		        switch (c) {
		            case "(":
		                if (node.state.allowType && node.type === "") {
		                    node.type = "tuple";
		                }
		                else if (!node.state.allowParams) {
		                    throwError(i);
		                }
		                node.state.allowType = false;
		                node.type = verifyType(node.type);
		                node.components = [newNode(node)];
		                node = node.components[0];
		                break;
		            case ")":
		                delete node.state;
		                if (node.name === "indexed") {
		                    if (!allowIndexed) {
		                        throwError(i);
		                    }
		                    node.indexed = true;
		                    node.name = "";
		                }
		                if (checkModifier(node.type, node.name)) {
		                    node.name = "";
		                }
		                node.type = verifyType(node.type);
		                var child = node;
		                node = node.parent;
		                if (!node) {
		                    throwError(i);
		                }
		                delete child.parent;
		                node.state.allowParams = false;
		                node.state.allowName = true;
		                node.state.allowArray = true;
		                break;
		            case ",":
		                delete node.state;
		                if (node.name === "indexed") {
		                    if (!allowIndexed) {
		                        throwError(i);
		                    }
		                    node.indexed = true;
		                    node.name = "";
		                }
		                if (checkModifier(node.type, node.name)) {
		                    node.name = "";
		                }
		                node.type = verifyType(node.type);
		                var sibling = newNode(node.parent);
		                //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
		                node.parent.components.push(sibling);
		                delete node.parent;
		                node = sibling;
		                break;
		            // Hit a space...
		            case " ":
		                // If reading type, the type is done and may read a param or name
		                if (node.state.allowType) {
		                    if (node.type !== "") {
		                        node.type = verifyType(node.type);
		                        delete node.state.allowType;
		                        node.state.allowName = true;
		                        node.state.allowParams = true;
		                    }
		                }
		                // If reading name, the name is done
		                if (node.state.allowName) {
		                    if (node.name !== "") {
		                        if (node.name === "indexed") {
		                            if (!allowIndexed) {
		                                throwError(i);
		                            }
		                            if (node.indexed) {
		                                throwError(i);
		                            }
		                            node.indexed = true;
		                            node.name = "";
		                        }
		                        else if (checkModifier(node.type, node.name)) {
		                            node.name = "";
		                        }
		                        else {
		                            node.state.allowName = false;
		                        }
		                    }
		                }
		                break;
		            case "[":
		                if (!node.state.allowArray) {
		                    throwError(i);
		                }
		                node.type += c;
		                node.state.allowArray = false;
		                node.state.allowName = false;
		                node.state.readArray = true;
		                break;
		            case "]":
		                if (!node.state.readArray) {
		                    throwError(i);
		                }
		                node.type += c;
		                node.state.readArray = false;
		                node.state.allowArray = true;
		                node.state.allowName = true;
		                break;
		            default:
		                if (node.state.allowType) {
		                    node.type += c;
		                    node.state.allowParams = true;
		                    node.state.allowArray = true;
		                }
		                else if (node.state.allowName) {
		                    node.name += c;
		                    delete node.state.allowArray;
		                }
		                else if (node.state.readArray) {
		                    node.type += c;
		                }
		                else {
		                    throwError(i);
		                }
		        }
		    }
		    if (node.parent) {
		        logger.throwArgumentError("unexpected eof", "param", param);
		    }
		    delete parent.state;
		    if (node.name === "indexed") {
		        if (!allowIndexed) {
		            throwError(originalParam.length - 7);
		        }
		        if (node.indexed) {
		            throwError(originalParam.length - 7);
		        }
		        node.indexed = true;
		        node.name = "";
		    }
		    else if (checkModifier(node.type, node.name)) {
		        node.name = "";
		    }
		    parent.type = verifyType(parent.type);
		    return parent;
		}
		function populate(object, params) {
		    for (var key in params) {
		        (0, properties_1.defineReadOnly)(object, key, params[key]);
		    }
		}
		exports.FormatTypes = Object.freeze({
		    // Bare formatting, as is needed for computing a sighash of an event or function
		    sighash: "sighash",
		    // Human-Readable with Minimal spacing and without names (compact human-readable)
		    minimal: "minimal",
		    // Human-Readable with nice spacing, including all names
		    full: "full",
		    // JSON-format a la Solidity
		    json: "json"
		});
		var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
		var ParamType = /** @class */ (function () {
		    function ParamType(constructorGuard, params) {
		        if (constructorGuard !== _constructorGuard) {
		            logger.throwError("use fromString", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
		                operation: "new ParamType()"
		            });
		        }
		        populate(this, params);
		        var match = this.type.match(paramTypeArray);
		        if (match) {
		            populate(this, {
		                arrayLength: parseInt(match[2] || "-1"),
		                arrayChildren: ParamType.fromObject({
		                    type: match[1],
		                    components: this.components
		                }),
		                baseType: "array"
		            });
		        }
		        else {
		            populate(this, {
		                arrayLength: null,
		                arrayChildren: null,
		                baseType: ((this.components != null) ? "tuple" : this.type)
		            });
		        }
		        this._isParamType = true;
		        Object.freeze(this);
		    }
		    // Format the parameter fragment
		    //   - sighash: "(uint256,address)"
		    //   - minimal: "tuple(uint256,address) indexed"
		    //   - full:    "tuple(uint256 foo, address bar) indexed baz"
		    ParamType.prototype.format = function (format) {
		        if (!format) {
		            format = exports.FormatTypes.sighash;
		        }
		        if (!exports.FormatTypes[format]) {
		            logger.throwArgumentError("invalid format type", "format", format);
		        }
		        if (format === exports.FormatTypes.json) {
		            var result_1 = {
		                type: ((this.baseType === "tuple") ? "tuple" : this.type),
		                name: (this.name || undefined)
		            };
		            if (typeof (this.indexed) === "boolean") {
		                result_1.indexed = this.indexed;
		            }
		            if (this.components) {
		                result_1.components = this.components.map(function (comp) { return JSON.parse(comp.format(format)); });
		            }
		            return JSON.stringify(result_1);
		        }
		        var result = "";
		        // Array
		        if (this.baseType === "array") {
		            result += this.arrayChildren.format(format);
		            result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
		        }
		        else {
		            if (this.baseType === "tuple") {
		                if (format !== exports.FormatTypes.sighash) {
		                    result += this.type;
		                }
		                result += "(" + this.components.map(function (comp) { return comp.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ")";
		            }
		            else {
		                result += this.type;
		            }
		        }
		        if (format !== exports.FormatTypes.sighash) {
		            if (this.indexed === true) {
		                result += " indexed";
		            }
		            if (format === exports.FormatTypes.full && this.name) {
		                result += " " + this.name;
		            }
		        }
		        return result;
		    };
		    ParamType.from = function (value, allowIndexed) {
		        if (typeof (value) === "string") {
		            return ParamType.fromString(value, allowIndexed);
		        }
		        return ParamType.fromObject(value);
		    };
		    ParamType.fromObject = function (value) {
		        if (ParamType.isParamType(value)) {
		            return value;
		        }
		        return new ParamType(_constructorGuard, {
		            name: (value.name || null),
		            type: verifyType(value.type),
		            indexed: ((value.indexed == null) ? null : !!value.indexed),
		            components: (value.components ? value.components.map(ParamType.fromObject) : null)
		        });
		    };
		    ParamType.fromString = function (value, allowIndexed) {
		        function ParamTypify(node) {
		            return ParamType.fromObject({
		                name: node.name,
		                type: node.type,
		                indexed: node.indexed,
		                components: node.components
		            });
		        }
		        return ParamTypify(parseParamType(value, !!allowIndexed));
		    };
		    ParamType.isParamType = function (value) {
		        return !!(value != null && value._isParamType);
		    };
		    return ParamType;
		}());
		exports.ParamType = ParamType;
		;
		function parseParams(value, allowIndex) {
		    return splitNesting(value).map(function (param) { return ParamType.fromString(param, allowIndex); });
		}
		var Fragment = /** @class */ (function () {
		    function Fragment(constructorGuard, params) {
		        if (constructorGuard !== _constructorGuard) {
		            logger.throwError("use a static from method", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
		                operation: "new Fragment()"
		            });
		        }
		        populate(this, params);
		        this._isFragment = true;
		        Object.freeze(this);
		    }
		    Fragment.from = function (value) {
		        if (Fragment.isFragment(value)) {
		            return value;
		        }
		        if (typeof (value) === "string") {
		            return Fragment.fromString(value);
		        }
		        return Fragment.fromObject(value);
		    };
		    Fragment.fromObject = function (value) {
		        if (Fragment.isFragment(value)) {
		            return value;
		        }
		        switch (value.type) {
		            case "function":
		                return FunctionFragment.fromObject(value);
		            case "event":
		                return EventFragment.fromObject(value);
		            case "constructor":
		                return ConstructorFragment.fromObject(value);
		            case "error":
		                return ErrorFragment.fromObject(value);
		            case "fallback":
		            case "receive":
		                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
		                return null;
		        }
		        return logger.throwArgumentError("invalid fragment object", "value", value);
		    };
		    Fragment.fromString = function (value) {
		        // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
		        value = value.replace(/\s/g, " ");
		        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
		        value = value.trim();
		        if (value.split(" ")[0] === "event") {
		            return EventFragment.fromString(value.substring(5).trim());
		        }
		        else if (value.split(" ")[0] === "function") {
		            return FunctionFragment.fromString(value.substring(8).trim());
		        }
		        else if (value.split("(")[0].trim() === "constructor") {
		            return ConstructorFragment.fromString(value.trim());
		        }
		        else if (value.split(" ")[0] === "error") {
		            return ErrorFragment.fromString(value.substring(5).trim());
		        }
		        return logger.throwArgumentError("unsupported fragment", "value", value);
		    };
		    Fragment.isFragment = function (value) {
		        return !!(value && value._isFragment);
		    };
		    return Fragment;
		}());
		exports.Fragment = Fragment;
		var EventFragment = /** @class */ (function (_super) {
		    __extends(EventFragment, _super);
		    function EventFragment() {
		        return _super !== null && _super.apply(this, arguments) || this;
		    }
		    EventFragment.prototype.format = function (format) {
		        if (!format) {
		            format = exports.FormatTypes.sighash;
		        }
		        if (!exports.FormatTypes[format]) {
		            logger.throwArgumentError("invalid format type", "format", format);
		        }
		        if (format === exports.FormatTypes.json) {
		            return JSON.stringify({
		                type: "event",
		                anonymous: this.anonymous,
		                name: this.name,
		                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })
		            });
		        }
		        var result = "";
		        if (format !== exports.FormatTypes.sighash) {
		            result += "event ";
		        }
		        result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
		        if (format !== exports.FormatTypes.sighash) {
		            if (this.anonymous) {
		                result += "anonymous ";
		            }
		        }
		        return result.trim();
		    };
		    EventFragment.from = function (value) {
		        if (typeof (value) === "string") {
		            return EventFragment.fromString(value);
		        }
		        return EventFragment.fromObject(value);
		    };
		    EventFragment.fromObject = function (value) {
		        if (EventFragment.isEventFragment(value)) {
		            return value;
		        }
		        if (value.type !== "event") {
		            logger.throwArgumentError("invalid event object", "value", value);
		        }
		        var params = {
		            name: verifyIdentifier(value.name),
		            anonymous: value.anonymous,
		            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
		            type: "event"
		        };
		        return new EventFragment(_constructorGuard, params);
		    };
		    EventFragment.fromString = function (value) {
		        var match = value.match(regexParen);
		        if (!match) {
		            logger.throwArgumentError("invalid event string", "value", value);
		        }
		        var anonymous = false;
		        match[3].split(" ").forEach(function (modifier) {
		            switch (modifier.trim()) {
		                case "anonymous":
		                    anonymous = true;
		                    break;
		                case "":
		                    break;
		                default:
		                    logger.warn("unknown modifier: " + modifier);
		            }
		        });
		        return EventFragment.fromObject({
		            name: match[1].trim(),
		            anonymous: anonymous,
		            inputs: parseParams(match[2], true),
		            type: "event"
		        });
		    };
		    EventFragment.isEventFragment = function (value) {
		        return (value && value._isFragment && value.type === "event");
		    };
		    return EventFragment;
		}(Fragment));
		exports.EventFragment = EventFragment;
		function parseGas(value, params) {
		    params.gas = null;
		    var comps = value.split("@");
		    if (comps.length !== 1) {
		        if (comps.length > 2) {
		            logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
		        }
		        if (!comps[1].match(/^[0-9]+$/)) {
		            logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
		        }
		        params.gas = bignumber_1.BigNumber.from(comps[1]);
		        return comps[0];
		    }
		    return value;
		}
		function parseModifiers(value, params) {
		    params.constant = false;
		    params.payable = false;
		    params.stateMutability = "nonpayable";
		    value.split(" ").forEach(function (modifier) {
		        switch (modifier.trim()) {
		            case "constant":
		                params.constant = true;
		                break;
		            case "payable":
		                params.payable = true;
		                params.stateMutability = "payable";
		                break;
		            case "nonpayable":
		                params.payable = false;
		                params.stateMutability = "nonpayable";
		                break;
		            case "pure":
		                params.constant = true;
		                params.stateMutability = "pure";
		                break;
		            case "view":
		                params.constant = true;
		                params.stateMutability = "view";
		                break;
		            case "external":
		            case "public":
		            case "":
		                break;
		            default:
		                console.log("unknown modifier: " + modifier);
		        }
		    });
		}
		function verifyState(value) {
		    var result = {
		        constant: false,
		        payable: true,
		        stateMutability: "payable"
		    };
		    if (value.stateMutability != null) {
		        result.stateMutability = value.stateMutability;
		        // Set (and check things are consistent) the constant property
		        result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
		        if (value.constant != null) {
		            if ((!!value.constant) !== result.constant) {
		                logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
		            }
		        }
		        // Set (and check things are consistent) the payable property
		        result.payable = (result.stateMutability === "payable");
		        if (value.payable != null) {
		            if ((!!value.payable) !== result.payable) {
		                logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
		            }
		        }
		    }
		    else if (value.payable != null) {
		        result.payable = !!value.payable;
		        // If payable we can assume non-constant; otherwise we can't assume
		        if (value.constant == null && !result.payable && value.type !== "constructor") {
		            logger.throwArgumentError("unable to determine stateMutability", "value", value);
		        }
		        result.constant = !!value.constant;
		        if (result.constant) {
		            result.stateMutability = "view";
		        }
		        else {
		            result.stateMutability = (result.payable ? "payable" : "nonpayable");
		        }
		        if (result.payable && result.constant) {
		            logger.throwArgumentError("cannot have constant payable function", "value", value);
		        }
		    }
		    else if (value.constant != null) {
		        result.constant = !!value.constant;
		        result.payable = !result.constant;
		        result.stateMutability = (result.constant ? "view" : "payable");
		    }
		    else if (value.type !== "constructor") {
		        logger.throwArgumentError("unable to determine stateMutability", "value", value);
		    }
		    return result;
		}
		var ConstructorFragment = /** @class */ (function (_super) {
		    __extends(ConstructorFragment, _super);
		    function ConstructorFragment() {
		        return _super !== null && _super.apply(this, arguments) || this;
		    }
		    ConstructorFragment.prototype.format = function (format) {
		        if (!format) {
		            format = exports.FormatTypes.sighash;
		        }
		        if (!exports.FormatTypes[format]) {
		            logger.throwArgumentError("invalid format type", "format", format);
		        }
		        if (format === exports.FormatTypes.json) {
		            return JSON.stringify({
		                type: "constructor",
		                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
		                payable: this.payable,
		                gas: (this.gas ? this.gas.toNumber() : undefined),
		                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })
		            });
		        }
		        if (format === exports.FormatTypes.sighash) {
		            logger.throwError("cannot format a constructor for sighash", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
		                operation: "format(sighash)"
		            });
		        }
		        var result = "constructor(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
		        if (this.stateMutability && this.stateMutability !== "nonpayable") {
		            result += this.stateMutability + " ";
		        }
		        return result.trim();
		    };
		    ConstructorFragment.from = function (value) {
		        if (typeof (value) === "string") {
		            return ConstructorFragment.fromString(value);
		        }
		        return ConstructorFragment.fromObject(value);
		    };
		    ConstructorFragment.fromObject = function (value) {
		        if (ConstructorFragment.isConstructorFragment(value)) {
		            return value;
		        }
		        if (value.type !== "constructor") {
		            logger.throwArgumentError("invalid constructor object", "value", value);
		        }
		        var state = verifyState(value);
		        if (state.constant) {
		            logger.throwArgumentError("constructor cannot be constant", "value", value);
		        }
		        var params = {
		            name: null,
		            type: value.type,
		            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
		            payable: state.payable,
		            stateMutability: state.stateMutability,
		            gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)
		        };
		        return new ConstructorFragment(_constructorGuard, params);
		    };
		    ConstructorFragment.fromString = function (value) {
		        var params = { type: "constructor" };
		        value = parseGas(value, params);
		        var parens = value.match(regexParen);
		        if (!parens || parens[1].trim() !== "constructor") {
		            logger.throwArgumentError("invalid constructor string", "value", value);
		        }
		        params.inputs = parseParams(parens[2].trim(), false);
		        parseModifiers(parens[3].trim(), params);
		        return ConstructorFragment.fromObject(params);
		    };
		    ConstructorFragment.isConstructorFragment = function (value) {
		        return (value && value._isFragment && value.type === "constructor");
		    };
		    return ConstructorFragment;
		}(Fragment));
		exports.ConstructorFragment = ConstructorFragment;
		var FunctionFragment = /** @class */ (function (_super) {
		    __extends(FunctionFragment, _super);
		    function FunctionFragment() {
		        return _super !== null && _super.apply(this, arguments) || this;
		    }
		    FunctionFragment.prototype.format = function (format) {
		        if (!format) {
		            format = exports.FormatTypes.sighash;
		        }
		        if (!exports.FormatTypes[format]) {
		            logger.throwArgumentError("invalid format type", "format", format);
		        }
		        if (format === exports.FormatTypes.json) {
		            return JSON.stringify({
		                type: "function",
		                name: this.name,
		                constant: this.constant,
		                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
		                payable: this.payable,
		                gas: (this.gas ? this.gas.toNumber() : undefined),
		                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),
		                outputs: this.outputs.map(function (output) { return JSON.parse(output.format(format)); }),
		            });
		        }
		        var result = "";
		        if (format !== exports.FormatTypes.sighash) {
		            result += "function ";
		        }
		        result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
		        if (format !== exports.FormatTypes.sighash) {
		            if (this.stateMutability) {
		                if (this.stateMutability !== "nonpayable") {
		                    result += (this.stateMutability + " ");
		                }
		            }
		            else if (this.constant) {
		                result += "view ";
		            }
		            if (this.outputs && this.outputs.length) {
		                result += "returns (" + this.outputs.map(function (output) { return output.format(format); }).join(", ") + ") ";
		            }
		            if (this.gas != null) {
		                result += "@" + this.gas.toString() + " ";
		            }
		        }
		        return result.trim();
		    };
		    FunctionFragment.from = function (value) {
		        if (typeof (value) === "string") {
		            return FunctionFragment.fromString(value);
		        }
		        return FunctionFragment.fromObject(value);
		    };
		    FunctionFragment.fromObject = function (value) {
		        if (FunctionFragment.isFunctionFragment(value)) {
		            return value;
		        }
		        if (value.type !== "function") {
		            logger.throwArgumentError("invalid function object", "value", value);
		        }
		        var state = verifyState(value);
		        var params = {
		            type: value.type,
		            name: verifyIdentifier(value.name),
		            constant: state.constant,
		            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
		            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
		            payable: state.payable,
		            stateMutability: state.stateMutability,
		            gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)
		        };
		        return new FunctionFragment(_constructorGuard, params);
		    };
		    FunctionFragment.fromString = function (value) {
		        var params = { type: "function" };
		        value = parseGas(value, params);
		        var comps = value.split(" returns ");
		        if (comps.length > 2) {
		            logger.throwArgumentError("invalid function string", "value", value);
		        }
		        var parens = comps[0].match(regexParen);
		        if (!parens) {
		            logger.throwArgumentError("invalid function signature", "value", value);
		        }
		        params.name = parens[1].trim();
		        if (params.name) {
		            verifyIdentifier(params.name);
		        }
		        params.inputs = parseParams(parens[2], false);
		        parseModifiers(parens[3].trim(), params);
		        // We have outputs
		        if (comps.length > 1) {
		            var returns = comps[1].match(regexParen);
		            if (returns[1].trim() != "" || returns[3].trim() != "") {
		                logger.throwArgumentError("unexpected tokens", "value", value);
		            }
		            params.outputs = parseParams(returns[2], false);
		        }
		        else {
		            params.outputs = [];
		        }
		        return FunctionFragment.fromObject(params);
		    };
		    FunctionFragment.isFunctionFragment = function (value) {
		        return (value && value._isFragment && value.type === "function");
		    };
		    return FunctionFragment;
		}(ConstructorFragment));
		exports.FunctionFragment = FunctionFragment;
		//export class StructFragment extends Fragment {
		//}
		function checkForbidden(fragment) {
		    var sig = fragment.format();
		    if (sig === "Error(string)" || sig === "Panic(uint256)") {
		        logger.throwArgumentError("cannot specify user defined " + sig + " error", "fragment", fragment);
		    }
		    return fragment;
		}
		var ErrorFragment = /** @class */ (function (_super) {
		    __extends(ErrorFragment, _super);
		    function ErrorFragment() {
		        return _super !== null && _super.apply(this, arguments) || this;
		    }
		    ErrorFragment.prototype.format = function (format) {
		        if (!format) {
		            format = exports.FormatTypes.sighash;
		        }
		        if (!exports.FormatTypes[format]) {
		            logger.throwArgumentError("invalid format type", "format", format);
		        }
		        if (format === exports.FormatTypes.json) {
		            return JSON.stringify({
		                type: "error",
		                name: this.name,
		                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),
		            });
		        }
		        var result = "";
		        if (format !== exports.FormatTypes.sighash) {
		            result += "error ";
		        }
		        result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
		        return result.trim();
		    };
		    ErrorFragment.from = function (value) {
		        if (typeof (value) === "string") {
		            return ErrorFragment.fromString(value);
		        }
		        return ErrorFragment.fromObject(value);
		    };
		    ErrorFragment.fromObject = function (value) {
		        if (ErrorFragment.isErrorFragment(value)) {
		            return value;
		        }
		        if (value.type !== "error") {
		            logger.throwArgumentError("invalid error object", "value", value);
		        }
		        var params = {
		            type: value.type,
		            name: verifyIdentifier(value.name),
		            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
		        };
		        return checkForbidden(new ErrorFragment(_constructorGuard, params));
		    };
		    ErrorFragment.fromString = function (value) {
		        var params = { type: "error" };
		        var parens = value.match(regexParen);
		        if (!parens) {
		            logger.throwArgumentError("invalid error signature", "value", value);
		        }
		        params.name = parens[1].trim();
		        if (params.name) {
		            verifyIdentifier(params.name);
		        }
		        params.inputs = parseParams(parens[2], false);
		        return checkForbidden(ErrorFragment.fromObject(params));
		    };
		    ErrorFragment.isErrorFragment = function (value) {
		        return (value && value._isFragment && value.type === "error");
		    };
		    return ErrorFragment;
		}(Fragment));
		exports.ErrorFragment = ErrorFragment;
		function verifyType(type) {
		    // These need to be transformed to their full description
		    if (type.match(/^uint($|[^1-9])/)) {
		        type = "uint256" + type.substring(4);
		    }
		    else if (type.match(/^int($|[^1-9])/)) {
		        type = "int256" + type.substring(3);
		    }
		    // @TODO: more verification
		    return type;
		}
		// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
		var regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
		function verifyIdentifier(value) {
		    if (!value || !value.match(regexIdentifier)) {
		        logger.throwArgumentError("invalid identifier \"" + value + "\"", "value", value);
		    }
		    return value;
		}
		var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
		function splitNesting(value) {
		    value = value.trim();
		    var result = [];
		    var accum = "";
		    var depth = 0;
		    for (var offset = 0; offset < value.length; offset++) {
		        var c = value[offset];
		        if (c === "," && depth === 0) {
		            result.push(accum);
		            accum = "";
		        }
		        else {
		            accum += c;
		            if (c === "(") {
		                depth++;
		            }
		            else if (c === ")") {
		                depth--;
		                if (depth === -1) {
		                    logger.throwArgumentError("unbalanced parenthesis", "value", value);
		                }
		            }
		        }
		    }
		    if (accum) {
		        result.push(accum);
		    }
		    return result;
		}
		
	} (fragments$1));

	var fragments = /*@__PURE__*/getDefaultExportFromCjs(fragments$1);

	var abiCoder = {};

	var abstractCoder = {};

	"use strict";
	Object.defineProperty(abstractCoder, "__esModule", { value: true });
	var Reader_1 = abstractCoder.Reader = Writer_1 = abstractCoder.Writer = Coder_1 = abstractCoder.Coder = checkResultErrors_1 = abstractCoder.checkResultErrors = void 0;
	var bytes_1$x = lib$r;
	var bignumber_1$e = lib$s;
	var properties_1$n = lib$p;
	var logger_1$z = lib$q;
	var _version_1$z = _version$l;
	var logger$y = new logger_1$z.Logger(_version_1$z.version);
	function checkResultErrors(result) {
	    // Find the first error (if any)
	    var errors = [];
	    var checkErrors = function (path, object) {
	        if (!Array.isArray(object)) {
	            return;
	        }
	        for (var key in object) {
	            var childPath = path.slice();
	            childPath.push(key);
	            try {
	                checkErrors(childPath, object[key]);
	            }
	            catch (error) {
	                errors.push({ path: childPath, error: error });
	            }
	        }
	    };
	    checkErrors([], result);
	    return errors;
	}
	var checkResultErrors_1 = abstractCoder.checkResultErrors = checkResultErrors;
	var Coder = /** @class */ (function () {
	    function Coder(name, type, localName, dynamic) {
	        // @TODO: defineReadOnly these
	        this.name = name;
	        this.type = type;
	        this.localName = localName;
	        this.dynamic = dynamic;
	    }
	    Coder.prototype._throwError = function (message, value) {
	        logger$y.throwArgumentError(message, this.localName, value);
	    };
	    return Coder;
	}());
	var Coder_1 = abstractCoder.Coder = Coder;
	var Writer = /** @class */ (function () {
	    function Writer(wordSize) {
	        (0, properties_1$n.defineReadOnly)(this, "wordSize", wordSize || 32);
	        this._data = [];
	        this._dataLength = 0;
	        this._padding = new Uint8Array(wordSize);
	    }
	    Object.defineProperty(Writer.prototype, "data", {
	        get: function () {
	            return (0, bytes_1$x.hexConcat)(this._data);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Writer.prototype, "length", {
	        get: function () { return this._dataLength; },
	        enumerable: false,
	        configurable: true
	    });
	    Writer.prototype._writeData = function (data) {
	        this._data.push(data);
	        this._dataLength += data.length;
	        return data.length;
	    };
	    Writer.prototype.appendWriter = function (writer) {
	        return this._writeData((0, bytes_1$x.concat)(writer._data));
	    };
	    // Arrayish items; padded on the right to wordSize
	    Writer.prototype.writeBytes = function (value) {
	        var bytes = (0, bytes_1$x.arrayify)(value);
	        var paddingOffset = bytes.length % this.wordSize;
	        if (paddingOffset) {
	            bytes = (0, bytes_1$x.concat)([bytes, this._padding.slice(paddingOffset)]);
	        }
	        return this._writeData(bytes);
	    };
	    Writer.prototype._getValue = function (value) {
	        var bytes = (0, bytes_1$x.arrayify)(bignumber_1$e.BigNumber.from(value));
	        if (bytes.length > this.wordSize) {
	            logger$y.throwError("value out-of-bounds", logger_1$z.Logger.errors.BUFFER_OVERRUN, {
	                length: this.wordSize,
	                offset: bytes.length
	            });
	        }
	        if (bytes.length % this.wordSize) {
	            bytes = (0, bytes_1$x.concat)([this._padding.slice(bytes.length % this.wordSize), bytes]);
	        }
	        return bytes;
	    };
	    // BigNumberish items; padded on the left to wordSize
	    Writer.prototype.writeValue = function (value) {
	        return this._writeData(this._getValue(value));
	    };
	    Writer.prototype.writeUpdatableValue = function () {
	        var _this = this;
	        var offset = this._data.length;
	        this._data.push(this._padding);
	        this._dataLength += this.wordSize;
	        return function (value) {
	            _this._data[offset] = _this._getValue(value);
	        };
	    };
	    return Writer;
	}());
	var Writer_1 = abstractCoder.Writer = Writer;
	var Reader = /** @class */ (function () {
	    function Reader(data, wordSize, coerceFunc, allowLoose) {
	        (0, properties_1$n.defineReadOnly)(this, "_data", (0, bytes_1$x.arrayify)(data));
	        (0, properties_1$n.defineReadOnly)(this, "wordSize", wordSize || 32);
	        (0, properties_1$n.defineReadOnly)(this, "_coerceFunc", coerceFunc);
	        (0, properties_1$n.defineReadOnly)(this, "allowLoose", allowLoose);
	        this._offset = 0;
	    }
	    Object.defineProperty(Reader.prototype, "data", {
	        get: function () { return (0, bytes_1$x.hexlify)(this._data); },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Reader.prototype, "consumed", {
	        get: function () { return this._offset; },
	        enumerable: false,
	        configurable: true
	    });
	    // The default Coerce function
	    Reader.coerce = function (name, value) {
	        var match = name.match("^u?int([0-9]+)$");
	        if (match && parseInt(match[1]) <= 48) {
	            value = value.toNumber();
	        }
	        return value;
	    };
	    Reader.prototype.coerce = function (name, value) {
	        if (this._coerceFunc) {
	            return this._coerceFunc(name, value);
	        }
	        return Reader.coerce(name, value);
	    };
	    Reader.prototype._peekBytes = function (offset, length, loose) {
	        var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
	        if (this._offset + alignedLength > this._data.length) {
	            if (this.allowLoose && loose && this._offset + length <= this._data.length) {
	                alignedLength = length;
	            }
	            else {
	                logger$y.throwError("data out-of-bounds", logger_1$z.Logger.errors.BUFFER_OVERRUN, {
	                    length: this._data.length,
	                    offset: this._offset + alignedLength
	                });
	            }
	        }
	        return this._data.slice(this._offset, this._offset + alignedLength);
	    };
	    Reader.prototype.subReader = function (offset) {
	        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
	    };
	    Reader.prototype.readBytes = function (length, loose) {
	        var bytes = this._peekBytes(0, length, !!loose);
	        this._offset += bytes.length;
	        // @TODO: Make sure the length..end bytes are all 0?
	        return bytes.slice(0, length);
	    };
	    Reader.prototype.readValue = function () {
	        return bignumber_1$e.BigNumber.from(this.readBytes(this.wordSize));
	    };
	    return Reader;
	}());
	Reader_1 = abstractCoder.Reader = Reader;

	var address = {};

	var lib$o = {};

	var lib$n = {};

	var sha3Exports = {};
	var sha3$1 = {
	  get exports(){ return sha3Exports; },
	  set exports(v){ sha3Exports = v; },
	};

	(function (module) {
		/*jslint bitwise: true */
		(function () {
		  'use strict';

		  var INPUT_ERROR = 'input is invalid type';
		  var FINALIZE_ERROR = 'finalize already called';
		  var WINDOW = typeof window === 'object';
		  var root = WINDOW ? window : {};
		  if (root.JS_SHA3_NO_WINDOW) {
		    WINDOW = false;
		  }
		  var WEB_WORKER = !WINDOW && typeof self === 'object';
		  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process$1 === 'object' && process$1.versions && process$1.versions.node;
		  if (NODE_JS) {
		    root = commonjsGlobal;
		  } else if (WEB_WORKER) {
		    root = self;
		  }
		  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
		  var AMD = typeof undefined === 'function' && undefined.amd;
		  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
		  var HEX_CHARS = '0123456789abcdef'.split('');
		  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
		  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
		  var KECCAK_PADDING = [1, 256, 65536, 16777216];
		  var PADDING = [6, 1536, 393216, 100663296];
		  var SHIFT = [0, 8, 16, 24];
		  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
		    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
		    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
		    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
		    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
		  var BITS = [224, 256, 384, 512];
		  var SHAKE_BITS = [128, 256];
		  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
		  var CSHAKE_BYTEPAD = {
		    '128': 168,
		    '256': 136
		  };

		  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
		    Array.isArray = function (obj) {
		      return Object.prototype.toString.call(obj) === '[object Array]';
		    };
		  }

		  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
		    ArrayBuffer.isView = function (obj) {
		      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
		    };
		  }

		  var createOutputMethod = function (bits, padding, outputType) {
		    return function (message) {
		      return new Keccak(bits, padding, bits).update(message)[outputType]();
		    };
		  };

		  var createShakeOutputMethod = function (bits, padding, outputType) {
		    return function (message, outputBits) {
		      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
		    };
		  };

		  var createCshakeOutputMethod = function (bits, padding, outputType) {
		    return function (message, outputBits, n, s) {
		      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
		    };
		  };

		  var createKmacOutputMethod = function (bits, padding, outputType) {
		    return function (key, message, outputBits, s) {
		      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
		    };
		  };

		  var createOutputMethods = function (method, createMethod, bits, padding) {
		    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
		      var type = OUTPUT_TYPES[i];
		      method[type] = createMethod(bits, padding, type);
		    }
		    return method;
		  };

		  var createMethod = function (bits, padding) {
		    var method = createOutputMethod(bits, padding, 'hex');
		    method.create = function () {
		      return new Keccak(bits, padding, bits);
		    };
		    method.update = function (message) {
		      return method.create().update(message);
		    };
		    return createOutputMethods(method, createOutputMethod, bits, padding);
		  };

		  var createShakeMethod = function (bits, padding) {
		    var method = createShakeOutputMethod(bits, padding, 'hex');
		    method.create = function (outputBits) {
		      return new Keccak(bits, padding, outputBits);
		    };
		    method.update = function (message, outputBits) {
		      return method.create(outputBits).update(message);
		    };
		    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
		  };

		  var createCshakeMethod = function (bits, padding) {
		    var w = CSHAKE_BYTEPAD[bits];
		    var method = createCshakeOutputMethod(bits, padding, 'hex');
		    method.create = function (outputBits, n, s) {
		      if (!n && !s) {
		        return methods['shake' + bits].create(outputBits);
		      } else {
		        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
		      }
		    };
		    method.update = function (message, outputBits, n, s) {
		      return method.create(outputBits, n, s).update(message);
		    };
		    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
		  };

		  var createKmacMethod = function (bits, padding) {
		    var w = CSHAKE_BYTEPAD[bits];
		    var method = createKmacOutputMethod(bits, padding, 'hex');
		    method.create = function (key, outputBits, s) {
		      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
		    };
		    method.update = function (key, message, outputBits, s) {
		      return method.create(key, outputBits, s).update(message);
		    };
		    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
		  };

		  var algorithms = [
		    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
		    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
		    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
		    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
		    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
		  ];

		  var methods = {}, methodNames = [];

		  for (var i = 0; i < algorithms.length; ++i) {
		    var algorithm = algorithms[i];
		    var bits = algorithm.bits;
		    for (var j = 0; j < bits.length; ++j) {
		      var methodName = algorithm.name + '_' + bits[j];
		      methodNames.push(methodName);
		      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
		      if (algorithm.name !== 'sha3') {
		        var newMethodName = algorithm.name + bits[j];
		        methodNames.push(newMethodName);
		        methods[newMethodName] = methods[methodName];
		      }
		    }
		  }

		  function Keccak(bits, padding, outputBits) {
		    this.blocks = [];
		    this.s = [];
		    this.padding = padding;
		    this.outputBits = outputBits;
		    this.reset = true;
		    this.finalized = false;
		    this.block = 0;
		    this.start = 0;
		    this.blockCount = (1600 - (bits << 1)) >> 5;
		    this.byteCount = this.blockCount << 2;
		    this.outputBlocks = outputBits >> 5;
		    this.extraBytes = (outputBits & 31) >> 3;

		    for (var i = 0; i < 50; ++i) {
		      this.s[i] = 0;
		    }
		  }

		  Keccak.prototype.update = function (message) {
		    if (this.finalized) {
		      throw new Error(FINALIZE_ERROR);
		    }
		    var notString, type = typeof message;
		    if (type !== 'string') {
		      if (type === 'object') {
		        if (message === null) {
		          throw new Error(INPUT_ERROR);
		        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
		          message = new Uint8Array(message);
		        } else if (!Array.isArray(message)) {
		          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
		            throw new Error(INPUT_ERROR);
		          }
		        }
		      } else {
		        throw new Error(INPUT_ERROR);
		      }
		      notString = true;
		    }
		    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
		      blockCount = this.blockCount, index = 0, s = this.s, i, code;

		    while (index < length) {
		      if (this.reset) {
		        this.reset = false;
		        blocks[0] = this.block;
		        for (i = 1; i < blockCount + 1; ++i) {
		          blocks[i] = 0;
		        }
		      }
		      if (notString) {
		        for (i = this.start; index < length && i < byteCount; ++index) {
		          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
		        }
		      } else {
		        for (i = this.start; index < length && i < byteCount; ++index) {
		          code = message.charCodeAt(index);
		          if (code < 0x80) {
		            blocks[i >> 2] |= code << SHIFT[i++ & 3];
		          } else if (code < 0x800) {
		            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
		          } else if (code < 0xd800 || code >= 0xe000) {
		            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
		          } else {
		            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
		            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
		            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
		          }
		        }
		      }
		      this.lastByteIndex = i;
		      if (i >= byteCount) {
		        this.start = i - byteCount;
		        this.block = blocks[blockCount];
		        for (i = 0; i < blockCount; ++i) {
		          s[i] ^= blocks[i];
		        }
		        f(s);
		        this.reset = true;
		      } else {
		        this.start = i;
		      }
		    }
		    return this;
		  };

		  Keccak.prototype.encode = function (x, right) {
		    var o = x & 255, n = 1;
		    var bytes = [o];
		    x = x >> 8;
		    o = x & 255;
		    while (o > 0) {
		      bytes.unshift(o);
		      x = x >> 8;
		      o = x & 255;
		      ++n;
		    }
		    if (right) {
		      bytes.push(n);
		    } else {
		      bytes.unshift(n);
		    }
		    this.update(bytes);
		    return bytes.length;
		  };

		  Keccak.prototype.encodeString = function (str) {
		    var notString, type = typeof str;
		    if (type !== 'string') {
		      if (type === 'object') {
		        if (str === null) {
		          throw new Error(INPUT_ERROR);
		        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
		          str = new Uint8Array(str);
		        } else if (!Array.isArray(str)) {
		          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
		            throw new Error(INPUT_ERROR);
		          }
		        }
		      } else {
		        throw new Error(INPUT_ERROR);
		      }
		      notString = true;
		    }
		    var bytes = 0, length = str.length;
		    if (notString) {
		      bytes = length;
		    } else {
		      for (var i = 0; i < str.length; ++i) {
		        var code = str.charCodeAt(i);
		        if (code < 0x80) {
		          bytes += 1;
		        } else if (code < 0x800) {
		          bytes += 2;
		        } else if (code < 0xd800 || code >= 0xe000) {
		          bytes += 3;
		        } else {
		          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
		          bytes += 4;
		        }
		      }
		    }
		    bytes += this.encode(bytes * 8);
		    this.update(str);
		    return bytes;
		  };

		  Keccak.prototype.bytepad = function (strs, w) {
		    var bytes = this.encode(w);
		    for (var i = 0; i < strs.length; ++i) {
		      bytes += this.encodeString(strs[i]);
		    }
		    var paddingBytes = w - bytes % w;
		    var zeros = [];
		    zeros.length = paddingBytes;
		    this.update(zeros);
		    return this;
		  };

		  Keccak.prototype.finalize = function () {
		    if (this.finalized) {
		      return;
		    }
		    this.finalized = true;
		    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
		    blocks[i >> 2] |= this.padding[i & 3];
		    if (this.lastByteIndex === this.byteCount) {
		      blocks[0] = blocks[blockCount];
		      for (i = 1; i < blockCount + 1; ++i) {
		        blocks[i] = 0;
		      }
		    }
		    blocks[blockCount - 1] |= 0x80000000;
		    for (i = 0; i < blockCount; ++i) {
		      s[i] ^= blocks[i];
		    }
		    f(s);
		  };

		  Keccak.prototype.toString = Keccak.prototype.hex = function () {
		    this.finalize();

		    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
		      extraBytes = this.extraBytes, i = 0, j = 0;
		    var hex = '', block;
		    while (j < outputBlocks) {
		      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
		        block = s[i];
		        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
		          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
		          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
		          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
		      }
		      if (j % blockCount === 0) {
		        f(s);
		        i = 0;
		      }
		    }
		    if (extraBytes) {
		      block = s[i];
		      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
		      if (extraBytes > 1) {
		        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
		      }
		      if (extraBytes > 2) {
		        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
		      }
		    }
		    return hex;
		  };

		  Keccak.prototype.arrayBuffer = function () {
		    this.finalize();

		    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
		      extraBytes = this.extraBytes, i = 0, j = 0;
		    var bytes = this.outputBits >> 3;
		    var buffer;
		    if (extraBytes) {
		      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
		    } else {
		      buffer = new ArrayBuffer(bytes);
		    }
		    var array = new Uint32Array(buffer);
		    while (j < outputBlocks) {
		      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
		        array[j] = s[i];
		      }
		      if (j % blockCount === 0) {
		        f(s);
		      }
		    }
		    if (extraBytes) {
		      array[i] = s[i];
		      buffer = buffer.slice(0, bytes);
		    }
		    return buffer;
		  };

		  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

		  Keccak.prototype.digest = Keccak.prototype.array = function () {
		    this.finalize();

		    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
		      extraBytes = this.extraBytes, i = 0, j = 0;
		    var array = [], offset, block;
		    while (j < outputBlocks) {
		      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
		        offset = j << 2;
		        block = s[i];
		        array[offset] = block & 0xFF;
		        array[offset + 1] = (block >> 8) & 0xFF;
		        array[offset + 2] = (block >> 16) & 0xFF;
		        array[offset + 3] = (block >> 24) & 0xFF;
		      }
		      if (j % blockCount === 0) {
		        f(s);
		      }
		    }
		    if (extraBytes) {
		      offset = j << 2;
		      block = s[i];
		      array[offset] = block & 0xFF;
		      if (extraBytes > 1) {
		        array[offset + 1] = (block >> 8) & 0xFF;
		      }
		      if (extraBytes > 2) {
		        array[offset + 2] = (block >> 16) & 0xFF;
		      }
		    }
		    return array;
		  };

		  function Kmac(bits, padding, outputBits) {
		    Keccak.call(this, bits, padding, outputBits);
		  }

		  Kmac.prototype = new Keccak();

		  Kmac.prototype.finalize = function () {
		    this.encode(this.outputBits, true);
		    return Keccak.prototype.finalize.call(this);
		  };

		  var f = function (s) {
		    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
		      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
		      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
		      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
		    for (n = 0; n < 48; n += 2) {
		      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
		      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
		      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
		      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
		      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
		      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
		      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
		      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
		      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
		      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

		      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
		      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
		      s[0] ^= h;
		      s[1] ^= l;
		      s[10] ^= h;
		      s[11] ^= l;
		      s[20] ^= h;
		      s[21] ^= l;
		      s[30] ^= h;
		      s[31] ^= l;
		      s[40] ^= h;
		      s[41] ^= l;
		      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
		      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
		      s[2] ^= h;
		      s[3] ^= l;
		      s[12] ^= h;
		      s[13] ^= l;
		      s[22] ^= h;
		      s[23] ^= l;
		      s[32] ^= h;
		      s[33] ^= l;
		      s[42] ^= h;
		      s[43] ^= l;
		      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
		      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
		      s[4] ^= h;
		      s[5] ^= l;
		      s[14] ^= h;
		      s[15] ^= l;
		      s[24] ^= h;
		      s[25] ^= l;
		      s[34] ^= h;
		      s[35] ^= l;
		      s[44] ^= h;
		      s[45] ^= l;
		      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
		      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
		      s[6] ^= h;
		      s[7] ^= l;
		      s[16] ^= h;
		      s[17] ^= l;
		      s[26] ^= h;
		      s[27] ^= l;
		      s[36] ^= h;
		      s[37] ^= l;
		      s[46] ^= h;
		      s[47] ^= l;
		      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
		      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
		      s[8] ^= h;
		      s[9] ^= l;
		      s[18] ^= h;
		      s[19] ^= l;
		      s[28] ^= h;
		      s[29] ^= l;
		      s[38] ^= h;
		      s[39] ^= l;
		      s[48] ^= h;
		      s[49] ^= l;

		      b0 = s[0];
		      b1 = s[1];
		      b32 = (s[11] << 4) | (s[10] >>> 28);
		      b33 = (s[10] << 4) | (s[11] >>> 28);
		      b14 = (s[20] << 3) | (s[21] >>> 29);
		      b15 = (s[21] << 3) | (s[20] >>> 29);
		      b46 = (s[31] << 9) | (s[30] >>> 23);
		      b47 = (s[30] << 9) | (s[31] >>> 23);
		      b28 = (s[40] << 18) | (s[41] >>> 14);
		      b29 = (s[41] << 18) | (s[40] >>> 14);
		      b20 = (s[2] << 1) | (s[3] >>> 31);
		      b21 = (s[3] << 1) | (s[2] >>> 31);
		      b2 = (s[13] << 12) | (s[12] >>> 20);
		      b3 = (s[12] << 12) | (s[13] >>> 20);
		      b34 = (s[22] << 10) | (s[23] >>> 22);
		      b35 = (s[23] << 10) | (s[22] >>> 22);
		      b16 = (s[33] << 13) | (s[32] >>> 19);
		      b17 = (s[32] << 13) | (s[33] >>> 19);
		      b48 = (s[42] << 2) | (s[43] >>> 30);
		      b49 = (s[43] << 2) | (s[42] >>> 30);
		      b40 = (s[5] << 30) | (s[4] >>> 2);
		      b41 = (s[4] << 30) | (s[5] >>> 2);
		      b22 = (s[14] << 6) | (s[15] >>> 26);
		      b23 = (s[15] << 6) | (s[14] >>> 26);
		      b4 = (s[25] << 11) | (s[24] >>> 21);
		      b5 = (s[24] << 11) | (s[25] >>> 21);
		      b36 = (s[34] << 15) | (s[35] >>> 17);
		      b37 = (s[35] << 15) | (s[34] >>> 17);
		      b18 = (s[45] << 29) | (s[44] >>> 3);
		      b19 = (s[44] << 29) | (s[45] >>> 3);
		      b10 = (s[6] << 28) | (s[7] >>> 4);
		      b11 = (s[7] << 28) | (s[6] >>> 4);
		      b42 = (s[17] << 23) | (s[16] >>> 9);
		      b43 = (s[16] << 23) | (s[17] >>> 9);
		      b24 = (s[26] << 25) | (s[27] >>> 7);
		      b25 = (s[27] << 25) | (s[26] >>> 7);
		      b6 = (s[36] << 21) | (s[37] >>> 11);
		      b7 = (s[37] << 21) | (s[36] >>> 11);
		      b38 = (s[47] << 24) | (s[46] >>> 8);
		      b39 = (s[46] << 24) | (s[47] >>> 8);
		      b30 = (s[8] << 27) | (s[9] >>> 5);
		      b31 = (s[9] << 27) | (s[8] >>> 5);
		      b12 = (s[18] << 20) | (s[19] >>> 12);
		      b13 = (s[19] << 20) | (s[18] >>> 12);
		      b44 = (s[29] << 7) | (s[28] >>> 25);
		      b45 = (s[28] << 7) | (s[29] >>> 25);
		      b26 = (s[38] << 8) | (s[39] >>> 24);
		      b27 = (s[39] << 8) | (s[38] >>> 24);
		      b8 = (s[48] << 14) | (s[49] >>> 18);
		      b9 = (s[49] << 14) | (s[48] >>> 18);

		      s[0] = b0 ^ (~b2 & b4);
		      s[1] = b1 ^ (~b3 & b5);
		      s[10] = b10 ^ (~b12 & b14);
		      s[11] = b11 ^ (~b13 & b15);
		      s[20] = b20 ^ (~b22 & b24);
		      s[21] = b21 ^ (~b23 & b25);
		      s[30] = b30 ^ (~b32 & b34);
		      s[31] = b31 ^ (~b33 & b35);
		      s[40] = b40 ^ (~b42 & b44);
		      s[41] = b41 ^ (~b43 & b45);
		      s[2] = b2 ^ (~b4 & b6);
		      s[3] = b3 ^ (~b5 & b7);
		      s[12] = b12 ^ (~b14 & b16);
		      s[13] = b13 ^ (~b15 & b17);
		      s[22] = b22 ^ (~b24 & b26);
		      s[23] = b23 ^ (~b25 & b27);
		      s[32] = b32 ^ (~b34 & b36);
		      s[33] = b33 ^ (~b35 & b37);
		      s[42] = b42 ^ (~b44 & b46);
		      s[43] = b43 ^ (~b45 & b47);
		      s[4] = b4 ^ (~b6 & b8);
		      s[5] = b5 ^ (~b7 & b9);
		      s[14] = b14 ^ (~b16 & b18);
		      s[15] = b15 ^ (~b17 & b19);
		      s[24] = b24 ^ (~b26 & b28);
		      s[25] = b25 ^ (~b27 & b29);
		      s[34] = b34 ^ (~b36 & b38);
		      s[35] = b35 ^ (~b37 & b39);
		      s[44] = b44 ^ (~b46 & b48);
		      s[45] = b45 ^ (~b47 & b49);
		      s[6] = b6 ^ (~b8 & b0);
		      s[7] = b7 ^ (~b9 & b1);
		      s[16] = b16 ^ (~b18 & b10);
		      s[17] = b17 ^ (~b19 & b11);
		      s[26] = b26 ^ (~b28 & b20);
		      s[27] = b27 ^ (~b29 & b21);
		      s[36] = b36 ^ (~b38 & b30);
		      s[37] = b37 ^ (~b39 & b31);
		      s[46] = b46 ^ (~b48 & b40);
		      s[47] = b47 ^ (~b49 & b41);
		      s[8] = b8 ^ (~b0 & b2);
		      s[9] = b9 ^ (~b1 & b3);
		      s[18] = b18 ^ (~b10 & b12);
		      s[19] = b19 ^ (~b11 & b13);
		      s[28] = b28 ^ (~b20 & b22);
		      s[29] = b29 ^ (~b21 & b23);
		      s[38] = b38 ^ (~b30 & b32);
		      s[39] = b39 ^ (~b31 & b33);
		      s[48] = b48 ^ (~b40 & b42);
		      s[49] = b49 ^ (~b41 & b43);

		      s[0] ^= RC[n];
		      s[1] ^= RC[n + 1];
		    }
		  };

		  if (COMMON_JS) {
		    module.exports = methods;
		  } else {
		    for (i = 0; i < methodNames.length; ++i) {
		      root[methodNames[i]] = methods[methodNames[i]];
		    }
		    if (AMD) {
		      undefined(function () {
		        return methods;
		      });
		    }
		  }
		})();
	} (sha3$1));

	var sha3 = sha3Exports;

	"use strict";
	var __importDefault$c = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(lib$n, "__esModule", { value: true });
	var keccak256_1$8 = lib$n.keccak256 = void 0;
	var js_sha3_1 = __importDefault$c(sha3Exports);
	var bytes_1$w = lib$r;
	function keccak256$1(data) {
	    return '0x' + js_sha3_1.default.keccak_256((0, bytes_1$w.arrayify)(data));
	}
	keccak256_1$8 = lib$n.keccak256 = keccak256$1;

	var lib$m = {};

	var _version$k = {};

	"use strict";
	Object.defineProperty(_version$k, "__esModule", { value: true });
	var version$l = _version$k.version = void 0;
	version$l = _version$k.version = "rlp/5.7.0";

	"use strict";
	Object.defineProperty(lib$m, "__esModule", { value: true });
	var decode_1$1 = lib$m.decode = encode_1$1 = lib$m.encode = void 0;
	//See: https://github.com/ethereum/wiki/wiki/RLP
	var bytes_1$v = lib$r;
	var logger_1$y = lib$q;
	var _version_1$y = _version$k;
	var logger$x = new logger_1$y.Logger(_version_1$y.version);
	function arrayifyInteger(value) {
	    var result = [];
	    while (value) {
	        result.unshift(value & 0xff);
	        value >>= 8;
	    }
	    return result;
	}
	function unarrayifyInteger(data, offset, length) {
	    var result = 0;
	    for (var i = 0; i < length; i++) {
	        result = (result * 256) + data[offset + i];
	    }
	    return result;
	}
	function _encode(object) {
	    if (Array.isArray(object)) {
	        var payload_1 = [];
	        object.forEach(function (child) {
	            payload_1 = payload_1.concat(_encode(child));
	        });
	        if (payload_1.length <= 55) {
	            payload_1.unshift(0xc0 + payload_1.length);
	            return payload_1;
	        }
	        var length_1 = arrayifyInteger(payload_1.length);
	        length_1.unshift(0xf7 + length_1.length);
	        return length_1.concat(payload_1);
	    }
	    if (!(0, bytes_1$v.isBytesLike)(object)) {
	        logger$x.throwArgumentError("RLP object must be BytesLike", "object", object);
	    }
	    var data = Array.prototype.slice.call((0, bytes_1$v.arrayify)(object));
	    if (data.length === 1 && data[0] <= 0x7f) {
	        return data;
	    }
	    else if (data.length <= 55) {
	        data.unshift(0x80 + data.length);
	        return data;
	    }
	    var length = arrayifyInteger(data.length);
	    length.unshift(0xb7 + length.length);
	    return length.concat(data);
	}
	function encode$2(object) {
	    return (0, bytes_1$v.hexlify)(_encode(object));
	}
	var encode_1$1 = lib$m.encode = encode$2;
	function _decodeChildren(data, offset, childOffset, length) {
	    var result = [];
	    while (childOffset < offset + 1 + length) {
	        var decoded = _decode(data, childOffset);
	        result.push(decoded.result);
	        childOffset += decoded.consumed;
	        if (childOffset > offset + 1 + length) {
	            logger$x.throwError("child data too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
	        }
	    }
	    return { consumed: (1 + length), result: result };
	}
	// returns { consumed: number, result: Object }
	function _decode(data, offset) {
	    if (data.length === 0) {
	        logger$x.throwError("data too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
	    }
	    // Array with extra length prefix
	    if (data[offset] >= 0xf8) {
	        var lengthLength = data[offset] - 0xf7;
	        if (offset + 1 + lengthLength > data.length) {
	            logger$x.throwError("data short segment too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        var length_2 = unarrayifyInteger(data, offset + 1, lengthLength);
	        if (offset + 1 + lengthLength + length_2 > data.length) {
	            logger$x.throwError("data long segment too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length_2);
	    }
	    else if (data[offset] >= 0xc0) {
	        var length_3 = data[offset] - 0xc0;
	        if (offset + 1 + length_3 > data.length) {
	            logger$x.throwError("data array too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        return _decodeChildren(data, offset, offset + 1, length_3);
	    }
	    else if (data[offset] >= 0xb8) {
	        var lengthLength = data[offset] - 0xb7;
	        if (offset + 1 + lengthLength > data.length) {
	            logger$x.throwError("data array too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        var length_4 = unarrayifyInteger(data, offset + 1, lengthLength);
	        if (offset + 1 + lengthLength + length_4 > data.length) {
	            logger$x.throwError("data array too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        var result = (0, bytes_1$v.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length_4));
	        return { consumed: (1 + lengthLength + length_4), result: result };
	    }
	    else if (data[offset] >= 0x80) {
	        var length_5 = data[offset] - 0x80;
	        if (offset + 1 + length_5 > data.length) {
	            logger$x.throwError("data too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
	        }
	        var result = (0, bytes_1$v.hexlify)(data.slice(offset + 1, offset + 1 + length_5));
	        return { consumed: (1 + length_5), result: result };
	    }
	    return { consumed: 1, result: (0, bytes_1$v.hexlify)(data[offset]) };
	}
	function decode$2(data) {
	    var bytes = (0, bytes_1$v.arrayify)(data);
	    var decoded = _decode(bytes, 0);
	    if (decoded.consumed !== bytes.length) {
	        logger$x.throwArgumentError("invalid rlp data", "data", data);
	    }
	    return decoded.result;
	}
	decode_1$1 = lib$m.decode = decode$2;

	var _version$j = {};

	"use strict";
	Object.defineProperty(_version$j, "__esModule", { value: true });
	var version$k = _version$j.version = void 0;
	version$k = _version$j.version = "address/5.7.0";

	"use strict";
	Object.defineProperty(lib$o, "__esModule", { value: true });
	var getCreate2Address_1 = lib$o.getCreate2Address = getContractAddress_1 = lib$o.getContractAddress = getIcapAddress_1 = lib$o.getIcapAddress = isAddress_1 = lib$o.isAddress = getAddress_1 = lib$o.getAddress = void 0;
	var bytes_1$u = lib$r;
	var bignumber_1$d = lib$s;
	var keccak256_1$7 = lib$n;
	var rlp_1 = lib$m;
	var logger_1$x = lib$q;
	var _version_1$x = _version$j;
	var logger$w = new logger_1$x.Logger(_version_1$x.version);
	function getChecksumAddress(address) {
	    if (!(0, bytes_1$u.isHexString)(address, 20)) {
	        logger$w.throwArgumentError("invalid address", "address", address);
	    }
	    address = address.toLowerCase();
	    var chars = address.substring(2).split("");
	    var expanded = new Uint8Array(40);
	    for (var i = 0; i < 40; i++) {
	        expanded[i] = chars[i].charCodeAt(0);
	    }
	    var hashed = (0, bytes_1$u.arrayify)((0, keccak256_1$7.keccak256)(expanded));
	    for (var i = 0; i < 40; i += 2) {
	        if ((hashed[i >> 1] >> 4) >= 8) {
	            chars[i] = chars[i].toUpperCase();
	        }
	        if ((hashed[i >> 1] & 0x0f) >= 8) {
	            chars[i + 1] = chars[i + 1].toUpperCase();
	        }
	    }
	    return "0x" + chars.join("");
	}
	// Shims for environments that are missing some required constants and functions
	var MAX_SAFE_INTEGER = 0x1fffffffffffff;
	function log10(x) {
	    if (Math.log10) {
	        return Math.log10(x);
	    }
	    return Math.log(x) / Math.LN10;
	}
	// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
	// Create lookup table
	var ibanLookup = {};
	for (var i = 0; i < 10; i++) {
	    ibanLookup[String(i)] = String(i);
	}
	for (var i = 0; i < 26; i++) {
	    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
	}
	// How many decimal digits can we process? (for 64-bit float, this is 15)
	var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
	function ibanChecksum(address) {
	    address = address.toUpperCase();
	    address = address.substring(4) + address.substring(0, 2) + "00";
	    var expanded = address.split("").map(function (c) { return ibanLookup[c]; }).join("");
	    // Javascript can handle integers safely up to 15 (decimal) digits
	    while (expanded.length >= safeDigits) {
	        var block = expanded.substring(0, safeDigits);
	        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
	    }
	    var checksum = String(98 - (parseInt(expanded, 10) % 97));
	    while (checksum.length < 2) {
	        checksum = "0" + checksum;
	    }
	    return checksum;
	}
	;
	function getAddress(address) {
	    var result = null;
	    if (typeof (address) !== "string") {
	        logger$w.throwArgumentError("invalid address", "address", address);
	    }
	    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
	        // Missing the 0x prefix
	        if (address.substring(0, 2) !== "0x") {
	            address = "0x" + address;
	        }
	        result = getChecksumAddress(address);
	        // It is a checksummed address with a bad checksum
	        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
	            logger$w.throwArgumentError("bad address checksum", "address", address);
	        }
	        // Maybe ICAP? (we only support direct mode)
	    }
	    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
	        // It is an ICAP address with a bad checksum
	        if (address.substring(2, 4) !== ibanChecksum(address)) {
	            logger$w.throwArgumentError("bad icap checksum", "address", address);
	        }
	        result = (0, bignumber_1$d._base36To16)(address.substring(4));
	        while (result.length < 40) {
	            result = "0" + result;
	        }
	        result = getChecksumAddress("0x" + result);
	    }
	    else {
	        logger$w.throwArgumentError("invalid address", "address", address);
	    }
	    return result;
	}
	var getAddress_1 = lib$o.getAddress = getAddress;
	function isAddress(address) {
	    try {
	        getAddress(address);
	        return true;
	    }
	    catch (error) { }
	    return false;
	}
	var isAddress_1 = lib$o.isAddress = isAddress;
	function getIcapAddress(address) {
	    var base36 = (0, bignumber_1$d._base16To36)(getAddress(address).substring(2)).toUpperCase();
	    while (base36.length < 30) {
	        base36 = "0" + base36;
	    }
	    return "XE" + ibanChecksum("XE00" + base36) + base36;
	}
	var getIcapAddress_1 = lib$o.getIcapAddress = getIcapAddress;
	// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
	function getContractAddress(transaction) {
	    var from = null;
	    try {
	        from = getAddress(transaction.from);
	    }
	    catch (error) {
	        logger$w.throwArgumentError("missing from address", "transaction", transaction);
	    }
	    var nonce = (0, bytes_1$u.stripZeros)((0, bytes_1$u.arrayify)(bignumber_1$d.BigNumber.from(transaction.nonce).toHexString()));
	    return getAddress((0, bytes_1$u.hexDataSlice)((0, keccak256_1$7.keccak256)((0, rlp_1.encode)([from, nonce])), 12));
	}
	var getContractAddress_1 = lib$o.getContractAddress = getContractAddress;
	function getCreate2Address(from, salt, initCodeHash) {
	    if ((0, bytes_1$u.hexDataLength)(salt) !== 32) {
	        logger$w.throwArgumentError("salt must be 32 bytes", "salt", salt);
	    }
	    if ((0, bytes_1$u.hexDataLength)(initCodeHash) !== 32) {
	        logger$w.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
	    }
	    return getAddress((0, bytes_1$u.hexDataSlice)((0, keccak256_1$7.keccak256)((0, bytes_1$u.concat)(["0xff", getAddress(from), salt, initCodeHash])), 12));
	}
	getCreate2Address_1 = lib$o.getCreate2Address = getCreate2Address;

	"use strict";
	var __extends$H = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(address, "__esModule", { value: true });
	var AddressCoder_1 = address.AddressCoder = void 0;
	var address_1$8 = lib$o;
	var bytes_1$t = lib$r;
	var abstract_coder_1$9 = abstractCoder;
	var AddressCoder = /** @class */ (function (_super) {
	    __extends$H(AddressCoder, _super);
	    function AddressCoder(localName) {
	        return _super.call(this, "address", "address", localName, false) || this;
	    }
	    AddressCoder.prototype.defaultValue = function () {
	        return "0x0000000000000000000000000000000000000000";
	    };
	    AddressCoder.prototype.encode = function (writer, value) {
	        try {
	            value = (0, address_1$8.getAddress)(value);
	        }
	        catch (error) {
	            this._throwError(error.message, value);
	        }
	        return writer.writeValue(value);
	    };
	    AddressCoder.prototype.decode = function (reader) {
	        return (0, address_1$8.getAddress)((0, bytes_1$t.hexZeroPad)(reader.readValue().toHexString(), 20));
	    };
	    return AddressCoder;
	}(abstract_coder_1$9.Coder));
	AddressCoder_1 = address.AddressCoder = AddressCoder;

	var array = {};

	var anonymous = {};

	"use strict";
	var __extends$G = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(anonymous, "__esModule", { value: true });
	var AnonymousCoder_1 = anonymous.AnonymousCoder = void 0;
	var abstract_coder_1$8 = abstractCoder;
	// Clones the functionality of an existing Coder, but without a localName
	var AnonymousCoder = /** @class */ (function (_super) {
	    __extends$G(AnonymousCoder, _super);
	    function AnonymousCoder(coder) {
	        var _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic) || this;
	        _this.coder = coder;
	        return _this;
	    }
	    AnonymousCoder.prototype.defaultValue = function () {
	        return this.coder.defaultValue();
	    };
	    AnonymousCoder.prototype.encode = function (writer, value) {
	        return this.coder.encode(writer, value);
	    };
	    AnonymousCoder.prototype.decode = function (reader) {
	        return this.coder.decode(reader);
	    };
	    return AnonymousCoder;
	}(abstract_coder_1$8.Coder));
	AnonymousCoder_1 = anonymous.AnonymousCoder = AnonymousCoder;

	"use strict";
	var __extends$F = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(array, "__esModule", { value: true });
	var ArrayCoder_1 = array.ArrayCoder = unpack_1 = array.unpack = pack_1$1 = array.pack = void 0;
	var logger_1$w = lib$q;
	var _version_1$w = _version$l;
	var logger$v = new logger_1$w.Logger(_version_1$w.version);
	var abstract_coder_1$7 = abstractCoder;
	var anonymous_1 = anonymous;
	function pack$1(writer, coders, values) {
	    var arrayValues = null;
	    if (Array.isArray(values)) {
	        arrayValues = values;
	    }
	    else if (values && typeof (values) === "object") {
	        var unique_1 = {};
	        arrayValues = coders.map(function (coder) {
	            var name = coder.localName;
	            if (!name) {
	                logger$v.throwError("cannot encode object for signature with missing names", logger_1$w.Logger.errors.INVALID_ARGUMENT, {
	                    argument: "values",
	                    coder: coder,
	                    value: values
	                });
	            }
	            if (unique_1[name]) {
	                logger$v.throwError("cannot encode object for signature with duplicate names", logger_1$w.Logger.errors.INVALID_ARGUMENT, {
	                    argument: "values",
	                    coder: coder,
	                    value: values
	                });
	            }
	            unique_1[name] = true;
	            return values[name];
	        });
	    }
	    else {
	        logger$v.throwArgumentError("invalid tuple value", "tuple", values);
	    }
	    if (coders.length !== arrayValues.length) {
	        logger$v.throwArgumentError("types/value length mismatch", "tuple", values);
	    }
	    var staticWriter = new abstract_coder_1$7.Writer(writer.wordSize);
	    var dynamicWriter = new abstract_coder_1$7.Writer(writer.wordSize);
	    var updateFuncs = [];
	    coders.forEach(function (coder, index) {
	        var value = arrayValues[index];
	        if (coder.dynamic) {
	            // Get current dynamic offset (for the future pointer)
	            var dynamicOffset_1 = dynamicWriter.length;
	            // Encode the dynamic value into the dynamicWriter
	            coder.encode(dynamicWriter, value);
	            // Prepare to populate the correct offset once we are done
	            var updateFunc_1 = staticWriter.writeUpdatableValue();
	            updateFuncs.push(function (baseOffset) {
	                updateFunc_1(baseOffset + dynamicOffset_1);
	            });
	        }
	        else {
	            coder.encode(staticWriter, value);
	        }
	    });
	    // Backfill all the dynamic offsets, now that we know the static length
	    updateFuncs.forEach(function (func) { func(staticWriter.length); });
	    var length = writer.appendWriter(staticWriter);
	    length += writer.appendWriter(dynamicWriter);
	    return length;
	}
	var pack_1$1 = array.pack = pack$1;
	function unpack(reader, coders) {
	    var values = [];
	    // A reader anchored to this base
	    var baseReader = reader.subReader(0);
	    coders.forEach(function (coder) {
	        var value = null;
	        if (coder.dynamic) {
	            var offset = reader.readValue();
	            var offsetReader = baseReader.subReader(offset.toNumber());
	            try {
	                value = coder.decode(offsetReader);
	            }
	            catch (error) {
	                // Cannot recover from this
	                if (error.code === logger_1$w.Logger.errors.BUFFER_OVERRUN) {
	                    throw error;
	                }
	                value = error;
	                value.baseType = coder.name;
	                value.name = coder.localName;
	                value.type = coder.type;
	            }
	        }
	        else {
	            try {
	                value = coder.decode(reader);
	            }
	            catch (error) {
	                // Cannot recover from this
	                if (error.code === logger_1$w.Logger.errors.BUFFER_OVERRUN) {
	                    throw error;
	                }
	                value = error;
	                value.baseType = coder.name;
	                value.name = coder.localName;
	                value.type = coder.type;
	            }
	        }
	        if (value != undefined) {
	            values.push(value);
	        }
	    });
	    // We only output named properties for uniquely named coders
	    var uniqueNames = coders.reduce(function (accum, coder) {
	        var name = coder.localName;
	        if (name) {
	            if (!accum[name]) {
	                accum[name] = 0;
	            }
	            accum[name]++;
	        }
	        return accum;
	    }, {});
	    // Add any named parameters (i.e. tuples)
	    coders.forEach(function (coder, index) {
	        var name = coder.localName;
	        if (!name || uniqueNames[name] !== 1) {
	            return;
	        }
	        if (name === "length") {
	            name = "_length";
	        }
	        if (values[name] != null) {
	            return;
	        }
	        var value = values[index];
	        if (value instanceof Error) {
	            Object.defineProperty(values, name, {
	                enumerable: true,
	                get: function () { throw value; }
	            });
	        }
	        else {
	            values[name] = value;
	        }
	    });
	    var _loop_1 = function (i) {
	        var value = values[i];
	        if (value instanceof Error) {
	            Object.defineProperty(values, i, {
	                enumerable: true,
	                get: function () { throw value; }
	            });
	        }
	    };
	    for (var i = 0; i < values.length; i++) {
	        _loop_1(i);
	    }
	    return Object.freeze(values);
	}
	var unpack_1 = array.unpack = unpack;
	var ArrayCoder = /** @class */ (function (_super) {
	    __extends$F(ArrayCoder, _super);
	    function ArrayCoder(coder, length, localName) {
	        var _this = this;
	        var type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
	        var dynamic = (length === -1 || coder.dynamic);
	        _this = _super.call(this, "array", type, localName, dynamic) || this;
	        _this.coder = coder;
	        _this.length = length;
	        return _this;
	    }
	    ArrayCoder.prototype.defaultValue = function () {
	        // Verifies the child coder is valid (even if the array is dynamic or 0-length)
	        var defaultChild = this.coder.defaultValue();
	        var result = [];
	        for (var i = 0; i < this.length; i++) {
	            result.push(defaultChild);
	        }
	        return result;
	    };
	    ArrayCoder.prototype.encode = function (writer, value) {
	        if (!Array.isArray(value)) {
	            this._throwError("expected array value", value);
	        }
	        var count = this.length;
	        if (count === -1) {
	            count = value.length;
	            writer.writeValue(value.length);
	        }
	        logger$v.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
	        var coders = [];
	        for (var i = 0; i < value.length; i++) {
	            coders.push(this.coder);
	        }
	        return pack$1(writer, coders, value);
	    };
	    ArrayCoder.prototype.decode = function (reader) {
	        var count = this.length;
	        if (count === -1) {
	            count = reader.readValue().toNumber();
	            // Check that there is *roughly* enough data to ensure
	            // stray random data is not being read as a length. Each
	            // slot requires at least 32 bytes for their value (or 32
	            // bytes as a link to the data). This could use a much
	            // tighter bound, but we are erroring on the side of safety.
	            if (count * 32 > reader._data.length) {
	                logger$v.throwError("insufficient data length", logger_1$w.Logger.errors.BUFFER_OVERRUN, {
	                    length: reader._data.length,
	                    count: count
	                });
	            }
	        }
	        var coders = [];
	        for (var i = 0; i < count; i++) {
	            coders.push(new anonymous_1.AnonymousCoder(this.coder));
	        }
	        return reader.coerce(this.name, unpack(reader, coders));
	    };
	    return ArrayCoder;
	}(abstract_coder_1$7.Coder));
	ArrayCoder_1 = array.ArrayCoder = ArrayCoder;

	var boolean = {};

	"use strict";
	var __extends$E = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(boolean, "__esModule", { value: true });
	var BooleanCoder_1 = boolean.BooleanCoder = void 0;
	var abstract_coder_1$6 = abstractCoder;
	var BooleanCoder = /** @class */ (function (_super) {
	    __extends$E(BooleanCoder, _super);
	    function BooleanCoder(localName) {
	        return _super.call(this, "bool", "bool", localName, false) || this;
	    }
	    BooleanCoder.prototype.defaultValue = function () {
	        return false;
	    };
	    BooleanCoder.prototype.encode = function (writer, value) {
	        return writer.writeValue(value ? 1 : 0);
	    };
	    BooleanCoder.prototype.decode = function (reader) {
	        return reader.coerce(this.type, !reader.readValue().isZero());
	    };
	    return BooleanCoder;
	}(abstract_coder_1$6.Coder));
	BooleanCoder_1 = boolean.BooleanCoder = BooleanCoder;

	var bytes = {};

	"use strict";
	var __extends$D = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(bytes, "__esModule", { value: true });
	var BytesCoder_1 = bytes.BytesCoder = DynamicBytesCoder_1 = bytes.DynamicBytesCoder = void 0;
	var bytes_1$s = lib$r;
	var abstract_coder_1$5 = abstractCoder;
	var DynamicBytesCoder = /** @class */ (function (_super) {
	    __extends$D(DynamicBytesCoder, _super);
	    function DynamicBytesCoder(type, localName) {
	        return _super.call(this, type, type, localName, true) || this;
	    }
	    DynamicBytesCoder.prototype.defaultValue = function () {
	        return "0x";
	    };
	    DynamicBytesCoder.prototype.encode = function (writer, value) {
	        value = (0, bytes_1$s.arrayify)(value);
	        var length = writer.writeValue(value.length);
	        length += writer.writeBytes(value);
	        return length;
	    };
	    DynamicBytesCoder.prototype.decode = function (reader) {
	        return reader.readBytes(reader.readValue().toNumber(), true);
	    };
	    return DynamicBytesCoder;
	}(abstract_coder_1$5.Coder));
	var DynamicBytesCoder_1 = bytes.DynamicBytesCoder = DynamicBytesCoder;
	var BytesCoder = /** @class */ (function (_super) {
	    __extends$D(BytesCoder, _super);
	    function BytesCoder(localName) {
	        return _super.call(this, "bytes", localName) || this;
	    }
	    BytesCoder.prototype.decode = function (reader) {
	        return reader.coerce(this.name, (0, bytes_1$s.hexlify)(_super.prototype.decode.call(this, reader)));
	    };
	    return BytesCoder;
	}(DynamicBytesCoder));
	BytesCoder_1 = bytes.BytesCoder = BytesCoder;

	var fixedBytes = {};

	"use strict";
	var __extends$C = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(fixedBytes, "__esModule", { value: true });
	var FixedBytesCoder_1 = fixedBytes.FixedBytesCoder = void 0;
	var bytes_1$r = lib$r;
	var abstract_coder_1$4 = abstractCoder;
	// @TODO: Merge this with bytes
	var FixedBytesCoder = /** @class */ (function (_super) {
	    __extends$C(FixedBytesCoder, _super);
	    function FixedBytesCoder(size, localName) {
	        var _this = this;
	        var name = "bytes" + String(size);
	        _this = _super.call(this, name, name, localName, false) || this;
	        _this.size = size;
	        return _this;
	    }
	    FixedBytesCoder.prototype.defaultValue = function () {
	        return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
	    };
	    FixedBytesCoder.prototype.encode = function (writer, value) {
	        var data = (0, bytes_1$r.arrayify)(value);
	        if (data.length !== this.size) {
	            this._throwError("incorrect data length", value);
	        }
	        return writer.writeBytes(data);
	    };
	    FixedBytesCoder.prototype.decode = function (reader) {
	        return reader.coerce(this.name, (0, bytes_1$r.hexlify)(reader.readBytes(this.size)));
	    };
	    return FixedBytesCoder;
	}(abstract_coder_1$4.Coder));
	FixedBytesCoder_1 = fixedBytes.FixedBytesCoder = FixedBytesCoder;

	var _null = {};

	"use strict";
	var __extends$B = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(_null, "__esModule", { value: true });
	var NullCoder_1 = _null.NullCoder = void 0;
	var abstract_coder_1$3 = abstractCoder;
	var NullCoder = /** @class */ (function (_super) {
	    __extends$B(NullCoder, _super);
	    function NullCoder(localName) {
	        return _super.call(this, "null", "", localName, false) || this;
	    }
	    NullCoder.prototype.defaultValue = function () {
	        return null;
	    };
	    NullCoder.prototype.encode = function (writer, value) {
	        if (value != null) {
	            this._throwError("not null", value);
	        }
	        return writer.writeBytes([]);
	    };
	    NullCoder.prototype.decode = function (reader) {
	        reader.readBytes(0);
	        return reader.coerce(this.name, null);
	    };
	    return NullCoder;
	}(abstract_coder_1$3.Coder));
	NullCoder_1 = _null.NullCoder = NullCoder;

	var number = {};

	var lib$l = {};

	var addresses = {};

	"use strict";
	Object.defineProperty(addresses, "__esModule", { value: true });
	var AddressZero = addresses.AddressZero = void 0;
	AddressZero = addresses.AddressZero = "0x0000000000000000000000000000000000000000";

	var bignumbers = {};

	"use strict";
	Object.defineProperty(bignumbers, "__esModule", { value: true });
	var MaxInt256_1 = bignumbers.MaxInt256 = MinInt256_1 = bignumbers.MinInt256 = MaxUint256_1 = bignumbers.MaxUint256 = WeiPerEther_1 = bignumbers.WeiPerEther = Two_1 = bignumbers.Two = One_1 = bignumbers.One = Zero_1 = bignumbers.Zero = NegativeOne_1 = bignumbers.NegativeOne = void 0;
	var bignumber_1$c = lib$s;
	var NegativeOne$1 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from(-1));
	var NegativeOne_1 = bignumbers.NegativeOne = NegativeOne$1;
	var Zero$1 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from(0));
	var Zero_1 = bignumbers.Zero = Zero$1;
	var One$1 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from(1));
	var One_1 = bignumbers.One = One$1;
	var Two = ( /*#__PURE__*/bignumber_1$c.BigNumber.from(2));
	var Two_1 = bignumbers.Two = Two;
	var WeiPerEther = ( /*#__PURE__*/bignumber_1$c.BigNumber.from("1000000000000000000"));
	var WeiPerEther_1 = bignumbers.WeiPerEther = WeiPerEther;
	var MaxUint256$1 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
	var MaxUint256_1 = bignumbers.MaxUint256 = MaxUint256$1;
	var MinInt256 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000"));
	var MinInt256_1 = bignumbers.MinInt256 = MinInt256;
	var MaxInt256 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
	MaxInt256_1 = bignumbers.MaxInt256 = MaxInt256;

	var hashes = {};

	"use strict";
	Object.defineProperty(hashes, "__esModule", { value: true });
	var HashZero = hashes.HashZero = void 0;
	HashZero = hashes.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

	var strings = {};

	"use strict";
	Object.defineProperty(strings, "__esModule", { value: true });
	var EtherSymbol = strings.EtherSymbol = void 0;
	// NFKC (composed)             // (decomposed)
	EtherSymbol = strings.EtherSymbol = "\u039e"; // "\uD835\uDF63";

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.EtherSymbol = exports.HashZero = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = exports.AddressZero = void 0;
		var addresses_1 = addresses;
		Object.defineProperty(exports, "AddressZero", { enumerable: true, get: function () { return addresses_1.AddressZero; } });
		var bignumbers_1 = bignumbers;
		Object.defineProperty(exports, "NegativeOne", { enumerable: true, get: function () { return bignumbers_1.NegativeOne; } });
		Object.defineProperty(exports, "Zero", { enumerable: true, get: function () { return bignumbers_1.Zero; } });
		Object.defineProperty(exports, "One", { enumerable: true, get: function () { return bignumbers_1.One; } });
		Object.defineProperty(exports, "Two", { enumerable: true, get: function () { return bignumbers_1.Two; } });
		Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function () { return bignumbers_1.WeiPerEther; } });
		Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function () { return bignumbers_1.MaxUint256; } });
		Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function () { return bignumbers_1.MinInt256; } });
		Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function () { return bignumbers_1.MaxInt256; } });
		var hashes_1 = hashes;
		Object.defineProperty(exports, "HashZero", { enumerable: true, get: function () { return hashes_1.HashZero; } });
		var strings_1 = strings;
		Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function () { return strings_1.EtherSymbol; } });
		
	} (lib$l));

	var index$h = /*@__PURE__*/getDefaultExportFromCjs(lib$l);

	"use strict";
	var __extends$A = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(number, "__esModule", { value: true });
	var NumberCoder_1 = number.NumberCoder = void 0;
	var bignumber_1$b = lib$s;
	var constants_1$3 = lib$l;
	var abstract_coder_1$2 = abstractCoder;
	var NumberCoder = /** @class */ (function (_super) {
	    __extends$A(NumberCoder, _super);
	    function NumberCoder(size, signed, localName) {
	        var _this = this;
	        var name = ((signed ? "int" : "uint") + (size * 8));
	        _this = _super.call(this, name, name, localName, false) || this;
	        _this.size = size;
	        _this.signed = signed;
	        return _this;
	    }
	    NumberCoder.prototype.defaultValue = function () {
	        return 0;
	    };
	    NumberCoder.prototype.encode = function (writer, value) {
	        var v = bignumber_1$b.BigNumber.from(value);
	        // Check bounds are safe for encoding
	        var maxUintValue = constants_1$3.MaxUint256.mask(writer.wordSize * 8);
	        if (this.signed) {
	            var bounds = maxUintValue.mask(this.size * 8 - 1);
	            if (v.gt(bounds) || v.lt(bounds.add(constants_1$3.One).mul(constants_1$3.NegativeOne))) {
	                this._throwError("value out-of-bounds", value);
	            }
	        }
	        else if (v.lt(constants_1$3.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
	            this._throwError("value out-of-bounds", value);
	        }
	        v = v.toTwos(this.size * 8).mask(this.size * 8);
	        if (this.signed) {
	            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
	        }
	        return writer.writeValue(v);
	    };
	    NumberCoder.prototype.decode = function (reader) {
	        var value = reader.readValue().mask(this.size * 8);
	        if (this.signed) {
	            value = value.fromTwos(this.size * 8);
	        }
	        return reader.coerce(this.name, value);
	    };
	    return NumberCoder;
	}(abstract_coder_1$2.Coder));
	NumberCoder_1 = number.NumberCoder = NumberCoder;

	var string = {};

	var lib$k = {};

	var bytes32$1 = {};

	var utf8$1 = {};

	var _version$i = {};

	"use strict";
	Object.defineProperty(_version$i, "__esModule", { value: true });
	var version$j = _version$i.version = void 0;
	version$j = _version$i.version = "strings/5.7.0";

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.toUtf8CodePoints = exports.toUtf8String = exports._toUtf8String = exports._toEscapedUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = void 0;
		var bytes_1 = lib$r;
		var logger_1 = lib$q;
		var _version_1 = _version$i;
		var logger = new logger_1.Logger(_version_1.version);
		///////////////////////////////
		var UnicodeNormalizationForm;
		(function (UnicodeNormalizationForm) {
		    UnicodeNormalizationForm["current"] = "";
		    UnicodeNormalizationForm["NFC"] = "NFC";
		    UnicodeNormalizationForm["NFD"] = "NFD";
		    UnicodeNormalizationForm["NFKC"] = "NFKC";
		    UnicodeNormalizationForm["NFKD"] = "NFKD";
		})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
		;
		var Utf8ErrorReason;
		(function (Utf8ErrorReason) {
		    // A continuation byte was present where there was nothing to continue
		    // - offset = the index the codepoint began in
		    Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
		    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
		    // - offset = the index the codepoint began in
		    Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
		    // The string is too short to process the expected codepoint
		    // - offset = the index the codepoint began in
		    Utf8ErrorReason["OVERRUN"] = "string overrun";
		    // A missing continuation byte was expected but not found
		    // - offset = the index the continuation byte was expected at
		    Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
		    // The computed code point is outside the range for UTF-8
		    // - offset       = start of this codepoint
		    // - badCodepoint = the computed codepoint; outside the UTF-8 range
		    Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
		    // UTF-8 strings may not contain UTF-16 surrogate pairs
		    // - offset       = start of this codepoint
		    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
		    Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
		    // The string is an overlong representation
		    // - offset       = start of this codepoint
		    // - badCodepoint = the computed codepoint; already bounds checked
		    Utf8ErrorReason["OVERLONG"] = "overlong representation";
		})(Utf8ErrorReason = exports.Utf8ErrorReason || (exports.Utf8ErrorReason = {}));
		;
		function errorFunc(reason, offset, bytes, output, badCodepoint) {
		    return logger.throwArgumentError("invalid codepoint at offset " + offset + "; " + reason, "bytes", bytes);
		}
		function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
		    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
		    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
		        var i = 0;
		        for (var o = offset + 1; o < bytes.length; o++) {
		            if (bytes[o] >> 6 !== 0x02) {
		                break;
		            }
		            i++;
		        }
		        return i;
		    }
		    // This byte runs us past the end of the string, so just jump to the end
		    // (but the first byte was read already read and therefore skipped)
		    if (reason === Utf8ErrorReason.OVERRUN) {
		        return bytes.length - offset - 1;
		    }
		    // Nothing to skip
		    return 0;
		}
		function replaceFunc(reason, offset, bytes, output, badCodepoint) {
		    // Overlong representations are otherwise "valid" code points; just non-deistingtished
		    if (reason === Utf8ErrorReason.OVERLONG) {
		        output.push(badCodepoint);
		        return 0;
		    }
		    // Put the replacement character into the output
		    output.push(0xfffd);
		    // Otherwise, process as if ignoring errors
		    return ignoreFunc(reason, offset, bytes, output, badCodepoint);
		}
		// Common error handing strategies
		exports.Utf8ErrorFuncs = Object.freeze({
		    error: errorFunc,
		    ignore: ignoreFunc,
		    replace: replaceFunc
		});
		// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
		function getUtf8CodePoints(bytes, onError) {
		    if (onError == null) {
		        onError = exports.Utf8ErrorFuncs.error;
		    }
		    bytes = (0, bytes_1.arrayify)(bytes);
		    var result = [];
		    var i = 0;
		    // Invalid bytes are ignored
		    while (i < bytes.length) {
		        var c = bytes[i++];
		        // 0xxx xxxx
		        if (c >> 7 === 0) {
		            result.push(c);
		            continue;
		        }
		        // Multibyte; how many bytes left for this character?
		        var extraLength = null;
		        var overlongMask = null;
		        // 110x xxxx 10xx xxxx
		        if ((c & 0xe0) === 0xc0) {
		            extraLength = 1;
		            overlongMask = 0x7f;
		            // 1110 xxxx 10xx xxxx 10xx xxxx
		        }
		        else if ((c & 0xf0) === 0xe0) {
		            extraLength = 2;
		            overlongMask = 0x7ff;
		            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
		        }
		        else if ((c & 0xf8) === 0xf0) {
		            extraLength = 3;
		            overlongMask = 0xffff;
		        }
		        else {
		            if ((c & 0xc0) === 0x80) {
		                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
		            }
		            else {
		                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
		            }
		            continue;
		        }
		        // Do we have enough bytes in our data?
		        if (i - 1 + extraLength >= bytes.length) {
		            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
		            continue;
		        }
		        // Remove the length prefix from the char
		        var res = c & ((1 << (8 - extraLength - 1)) - 1);
		        for (var j = 0; j < extraLength; j++) {
		            var nextChar = bytes[i];
		            // Invalid continuation byte
		            if ((nextChar & 0xc0) != 0x80) {
		                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
		                res = null;
		                break;
		            }
		            ;
		            res = (res << 6) | (nextChar & 0x3f);
		            i++;
		        }
		        // See above loop for invalid continuation byte
		        if (res === null) {
		            continue;
		        }
		        // Maximum code point
		        if (res > 0x10ffff) {
		            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
		            continue;
		        }
		        // Reserved for UTF-16 surrogate halves
		        if (res >= 0xd800 && res <= 0xdfff) {
		            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
		            continue;
		        }
		        // Check for overlong sequences (more bytes than needed)
		        if (res <= overlongMask) {
		            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
		            continue;
		        }
		        result.push(res);
		    }
		    return result;
		}
		// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
		function toUtf8Bytes(str, form) {
		    if (form === void 0) { form = UnicodeNormalizationForm.current; }
		    if (form != UnicodeNormalizationForm.current) {
		        logger.checkNormalize();
		        str = str.normalize(form);
		    }
		    var result = [];
		    for (var i = 0; i < str.length; i++) {
		        var c = str.charCodeAt(i);
		        if (c < 0x80) {
		            result.push(c);
		        }
		        else if (c < 0x800) {
		            result.push((c >> 6) | 0xc0);
		            result.push((c & 0x3f) | 0x80);
		        }
		        else if ((c & 0xfc00) == 0xd800) {
		            i++;
		            var c2 = str.charCodeAt(i);
		            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
		                throw new Error("invalid utf-8 string");
		            }
		            // Surrogate Pair
		            var pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
		            result.push((pair >> 18) | 0xf0);
		            result.push(((pair >> 12) & 0x3f) | 0x80);
		            result.push(((pair >> 6) & 0x3f) | 0x80);
		            result.push((pair & 0x3f) | 0x80);
		        }
		        else {
		            result.push((c >> 12) | 0xe0);
		            result.push(((c >> 6) & 0x3f) | 0x80);
		            result.push((c & 0x3f) | 0x80);
		        }
		    }
		    return (0, bytes_1.arrayify)(result);
		}
		exports.toUtf8Bytes = toUtf8Bytes;
		;
		function escapeChar(value) {
		    var hex = ("0000" + value.toString(16));
		    return "\\u" + hex.substring(hex.length - 4);
		}
		function _toEscapedUtf8String(bytes, onError) {
		    return '"' + getUtf8CodePoints(bytes, onError).map(function (codePoint) {
		        if (codePoint < 256) {
		            switch (codePoint) {
		                case 8: return "\\b";
		                case 9: return "\\t";
		                case 10: return "\\n";
		                case 13: return "\\r";
		                case 34: return "\\\"";
		                case 92: return "\\\\";
		            }
		            if (codePoint >= 32 && codePoint < 127) {
		                return String.fromCharCode(codePoint);
		            }
		        }
		        if (codePoint <= 0xffff) {
		            return escapeChar(codePoint);
		        }
		        codePoint -= 0x10000;
		        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
		    }).join("") + '"';
		}
		exports._toEscapedUtf8String = _toEscapedUtf8String;
		function _toUtf8String(codePoints) {
		    return codePoints.map(function (codePoint) {
		        if (codePoint <= 0xffff) {
		            return String.fromCharCode(codePoint);
		        }
		        codePoint -= 0x10000;
		        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
		    }).join("");
		}
		exports._toUtf8String = _toUtf8String;
		function toUtf8String(bytes, onError) {
		    return _toUtf8String(getUtf8CodePoints(bytes, onError));
		}
		exports.toUtf8String = toUtf8String;
		function toUtf8CodePoints(str, form) {
		    if (form === void 0) { form = UnicodeNormalizationForm.current; }
		    return getUtf8CodePoints(toUtf8Bytes(str, form));
		}
		exports.toUtf8CodePoints = toUtf8CodePoints;
		
	} (utf8$1));

	var utf8 = /*@__PURE__*/getDefaultExportFromCjs(utf8$1);

	"use strict";
	Object.defineProperty(bytes32$1, "__esModule", { value: true });
	var parseBytes32String_1 = bytes32$1.parseBytes32String = formatBytes32String_1 = bytes32$1.formatBytes32String = void 0;
	var constants_1$2 = lib$l;
	var bytes_1$q = lib$r;
	var utf8_1$1 = utf8$1;
	function formatBytes32String(text) {
	    // Get the bytes
	    var bytes = (0, utf8_1$1.toUtf8Bytes)(text);
	    // Check we have room for null-termination
	    if (bytes.length > 31) {
	        throw new Error("bytes32 string must be less than 32 bytes");
	    }
	    // Zero-pad (implicitly null-terminates)
	    return (0, bytes_1$q.hexlify)((0, bytes_1$q.concat)([bytes, constants_1$2.HashZero]).slice(0, 32));
	}
	var formatBytes32String_1 = bytes32$1.formatBytes32String = formatBytes32String;
	function parseBytes32String(bytes) {
	    var data = (0, bytes_1$q.arrayify)(bytes);
	    // Must be 32 bytes with a null-termination
	    if (data.length !== 32) {
	        throw new Error("invalid bytes32 - not 32 bytes long");
	    }
	    if (data[31] !== 0) {
	        throw new Error("invalid bytes32 string - no null terminator");
	    }
	    // Find the null termination
	    var length = 31;
	    while (data[length - 1] === 0) {
	        length--;
	    }
	    // Determine the string value
	    return (0, utf8_1$1.toUtf8String)(data.slice(0, length));
	}
	parseBytes32String_1 = bytes32$1.parseBytes32String = parseBytes32String;

	var idna = {};

	"use strict";
	Object.defineProperty(idna, "__esModule", { value: true });
	var nameprep_1 = idna.nameprep = _nameprepTableC_1 = idna._nameprepTableC = _nameprepTableB2_1 = idna._nameprepTableB2 = _nameprepTableA1_1 = idna._nameprepTableA1 = void 0;
	var utf8_1 = utf8$1;
	function bytes2(data) {
	    if ((data.length % 4) !== 0) {
	        throw new Error("bad data");
	    }
	    var result = [];
	    for (var i = 0; i < data.length; i += 4) {
	        result.push(parseInt(data.substring(i, i + 4), 16));
	    }
	    return result;
	}
	function createTable(data, func) {
	    if (!func) {
	        func = function (value) { return [parseInt(value, 16)]; };
	    }
	    var lo = 0;
	    var result = {};
	    data.split(",").forEach(function (pair) {
	        var comps = pair.split(":");
	        lo += parseInt(comps[0], 16);
	        result[lo] = func(comps[1]);
	    });
	    return result;
	}
	function createRangeTable(data) {
	    var hi = 0;
	    return data.split(",").map(function (v) {
	        var comps = v.split("-");
	        if (comps.length === 1) {
	            comps[1] = "0";
	        }
	        else if (comps[1] === "") {
	            comps[1] = "1";
	        }
	        var lo = hi + parseInt(comps[0], 16);
	        hi = parseInt(comps[1], 16);
	        return { l: lo, h: hi };
	    });
	}
	function matchMap(value, ranges) {
	    var lo = 0;
	    for (var i = 0; i < ranges.length; i++) {
	        var range = ranges[i];
	        lo += range.l;
	        if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
	            if (range.e && range.e.indexOf(value - lo) !== -1) {
	                continue;
	            }
	            return range;
	        }
	    }
	    return null;
	}
	var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
	// @TODO: Make this relative...
	var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function (v) { return parseInt(v, 16); });
	var Table_B_2_ranges = [
	    { h: 25, s: 32, l: 65 },
	    { h: 30, s: 32, e: [23], l: 127 },
	    { h: 54, s: 1, e: [48], l: 64, d: 2 },
	    { h: 14, s: 1, l: 57, d: 2 },
	    { h: 44, s: 1, l: 17, d: 2 },
	    { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
	    { h: 16, s: 1, l: 68, d: 2 },
	    { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
	    { h: 26, s: 32, e: [17], l: 435 },
	    { h: 22, s: 1, l: 71, d: 2 },
	    { h: 15, s: 80, l: 40 },
	    { h: 31, s: 32, l: 16 },
	    { h: 32, s: 1, l: 80, d: 2 },
	    { h: 52, s: 1, l: 42, d: 2 },
	    { h: 12, s: 1, l: 55, d: 2 },
	    { h: 40, s: 1, e: [38], l: 15, d: 2 },
	    { h: 14, s: 1, l: 48, d: 2 },
	    { h: 37, s: 48, l: 49 },
	    { h: 148, s: 1, l: 6351, d: 2 },
	    { h: 88, s: 1, l: 160, d: 2 },
	    { h: 15, s: 16, l: 704 },
	    { h: 25, s: 26, l: 854 },
	    { h: 25, s: 32, l: 55915 },
	    { h: 37, s: 40, l: 1247 },
	    { h: 25, s: -119711, l: 53248 },
	    { h: 25, s: -119763, l: 52 },
	    { h: 25, s: -119815, l: 52 },
	    { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
	    { h: 25, s: -119919, l: 52 },
	    { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
	    { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
	    { h: 25, s: -120075, l: 52 },
	    { h: 25, s: -120127, l: 52 },
	    { h: 25, s: -120179, l: 52 },
	    { h: 25, s: -120231, l: 52 },
	    { h: 25, s: -120283, l: 52 },
	    { h: 25, s: -120335, l: 52 },
	    { h: 24, s: -119543, e: [17], l: 56 },
	    { h: 24, s: -119601, e: [17], l: 58 },
	    { h: 24, s: -119659, e: [17], l: 58 },
	    { h: 24, s: -119717, e: [17], l: 58 },
	    { h: 24, s: -119775, e: [17], l: 58 }
	];
	var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
	var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
	var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
	var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
	function flatten(values) {
	    return values.reduce(function (accum, value) {
	        value.forEach(function (value) { accum.push(value); });
	        return accum;
	    }, []);
	}
	function _nameprepTableA1(codepoint) {
	    return !!matchMap(codepoint, Table_A_1_ranges);
	}
	var _nameprepTableA1_1 = idna._nameprepTableA1 = _nameprepTableA1;
	function _nameprepTableB2(codepoint) {
	    var range = matchMap(codepoint, Table_B_2_ranges);
	    if (range) {
	        return [codepoint + range.s];
	    }
	    var codes = Table_B_2_lut_abs[codepoint];
	    if (codes) {
	        return codes;
	    }
	    var shift = Table_B_2_lut_rel[codepoint];
	    if (shift) {
	        return [codepoint + shift[0]];
	    }
	    var complex = Table_B_2_complex[codepoint];
	    if (complex) {
	        return complex;
	    }
	    return null;
	}
	var _nameprepTableB2_1 = idna._nameprepTableB2 = _nameprepTableB2;
	function _nameprepTableC(codepoint) {
	    return !!matchMap(codepoint, Table_C_ranges);
	}
	var _nameprepTableC_1 = idna._nameprepTableC = _nameprepTableC;
	function nameprep(value) {
	    // This allows platforms with incomplete normalize to bypass
	    // it for very basic names which the built-in toLowerCase
	    // will certainly handle correctly
	    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
	        return value.toLowerCase();
	    }
	    // Get the code points (keeping the current normalization)
	    var codes = (0, utf8_1.toUtf8CodePoints)(value);
	    codes = flatten(codes.map(function (code) {
	        // Substitute Table B.1 (Maps to Nothing)
	        if (Table_B_1_flags.indexOf(code) >= 0) {
	            return [];
	        }
	        if (code >= 0xfe00 && code <= 0xfe0f) {
	            return [];
	        }
	        // Substitute Table B.2 (Case Folding)
	        var codesTableB2 = _nameprepTableB2(code);
	        if (codesTableB2) {
	            return codesTableB2;
	        }
	        // No Substitution
	        return [code];
	    }));
	    // Normalize using form KC
	    codes = (0, utf8_1.toUtf8CodePoints)((0, utf8_1._toUtf8String)(codes), utf8_1.UnicodeNormalizationForm.NFKC);
	    // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
	    codes.forEach(function (code) {
	        if (_nameprepTableC(code)) {
	            throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
	        }
	    });
	    // Prohibit Unassigned Code Points (Table A.1)
	    codes.forEach(function (code) {
	        if (_nameprepTableA1(code)) {
	            throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
	        }
	    });
	    // IDNA extras
	    var name = (0, utf8_1._toUtf8String)(codes);
	    // IDNA: 4.2.3.1
	    if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
	        throw new Error("invalid hyphen");
	    }
	    return name;
	}
	nameprep_1 = idna.nameprep = nameprep;

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.nameprep = exports.parseBytes32String = exports.formatBytes32String = exports.UnicodeNormalizationForm = exports.Utf8ErrorReason = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = void 0;
		var bytes32_1 = bytes32$1;
		Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return bytes32_1.formatBytes32String; } });
		Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return bytes32_1.parseBytes32String; } });
		var idna_1 = idna;
		Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return idna_1.nameprep; } });
		var utf8_1 = utf8$1;
		Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return utf8_1._toEscapedUtf8String; } });
		Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return utf8_1.toUtf8Bytes; } });
		Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return utf8_1.toUtf8CodePoints; } });
		Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return utf8_1.toUtf8String; } });
		Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return utf8_1.UnicodeNormalizationForm; } });
		Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return utf8_1.Utf8ErrorFuncs; } });
		Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return utf8_1.Utf8ErrorReason; } });
		
	} (lib$k));

	var index$g = /*@__PURE__*/getDefaultExportFromCjs(lib$k);

	"use strict";
	var __extends$z = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(string, "__esModule", { value: true });
	var StringCoder_1 = string.StringCoder = void 0;
	var strings_1$f = lib$k;
	var bytes_1$p = bytes;
	var StringCoder = /** @class */ (function (_super) {
	    __extends$z(StringCoder, _super);
	    function StringCoder(localName) {
	        return _super.call(this, "string", localName) || this;
	    }
	    StringCoder.prototype.defaultValue = function () {
	        return "";
	    };
	    StringCoder.prototype.encode = function (writer, value) {
	        return _super.prototype.encode.call(this, writer, (0, strings_1$f.toUtf8Bytes)(value));
	    };
	    StringCoder.prototype.decode = function (reader) {
	        return (0, strings_1$f.toUtf8String)(_super.prototype.decode.call(this, reader));
	    };
	    return StringCoder;
	}(bytes_1$p.DynamicBytesCoder));
	StringCoder_1 = string.StringCoder = StringCoder;

	var tuple = {};

	"use strict";
	var __extends$y = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(tuple, "__esModule", { value: true });
	var TupleCoder_1 = tuple.TupleCoder = void 0;
	var abstract_coder_1$1 = abstractCoder;
	var array_1$1 = array;
	var TupleCoder = /** @class */ (function (_super) {
	    __extends$y(TupleCoder, _super);
	    function TupleCoder(coders, localName) {
	        var _this = this;
	        var dynamic = false;
	        var types = [];
	        coders.forEach(function (coder) {
	            if (coder.dynamic) {
	                dynamic = true;
	            }
	            types.push(coder.type);
	        });
	        var type = ("tuple(" + types.join(",") + ")");
	        _this = _super.call(this, "tuple", type, localName, dynamic) || this;
	        _this.coders = coders;
	        return _this;
	    }
	    TupleCoder.prototype.defaultValue = function () {
	        var values = [];
	        this.coders.forEach(function (coder) {
	            values.push(coder.defaultValue());
	        });
	        // We only output named properties for uniquely named coders
	        var uniqueNames = this.coders.reduce(function (accum, coder) {
	            var name = coder.localName;
	            if (name) {
	                if (!accum[name]) {
	                    accum[name] = 0;
	                }
	                accum[name]++;
	            }
	            return accum;
	        }, {});
	        // Add named values
	        this.coders.forEach(function (coder, index) {
	            var name = coder.localName;
	            if (!name || uniqueNames[name] !== 1) {
	                return;
	            }
	            if (name === "length") {
	                name = "_length";
	            }
	            if (values[name] != null) {
	                return;
	            }
	            values[name] = values[index];
	        });
	        return Object.freeze(values);
	    };
	    TupleCoder.prototype.encode = function (writer, value) {
	        return (0, array_1$1.pack)(writer, this.coders, value);
	    };
	    TupleCoder.prototype.decode = function (reader) {
	        return reader.coerce(this.name, (0, array_1$1.unpack)(reader, this.coders));
	    };
	    return TupleCoder;
	}(abstract_coder_1$1.Coder));
	TupleCoder_1 = tuple.TupleCoder = TupleCoder;

	"use strict";
	Object.defineProperty(abiCoder, "__esModule", { value: true });
	var defaultAbiCoder = abiCoder.defaultAbiCoder = AbiCoder_1 = abiCoder.AbiCoder = void 0;
	// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
	var bytes_1$o = lib$r;
	var properties_1$m = lib$p;
	var logger_1$v = lib$q;
	var _version_1$v = _version$l;
	var logger$u = new logger_1$v.Logger(_version_1$v.version);
	var abstract_coder_1 = abstractCoder;
	var address_1$7 = address;
	var array_1 = array;
	var boolean_1 = boolean;
	var bytes_2 = bytes;
	var fixed_bytes_1 = fixedBytes;
	var null_1 = _null;
	var number_1 = number;
	var string_1 = string;
	var tuple_1 = tuple;
	var fragments_1 = fragments$1;
	var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
	var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
	var AbiCoder = /** @class */ (function () {
	    function AbiCoder(coerceFunc) {
	        (0, properties_1$m.defineReadOnly)(this, "coerceFunc", coerceFunc || null);
	    }
	    AbiCoder.prototype._getCoder = function (param) {
	        var _this = this;
	        switch (param.baseType) {
	            case "address":
	                return new address_1$7.AddressCoder(param.name);
	            case "bool":
	                return new boolean_1.BooleanCoder(param.name);
	            case "string":
	                return new string_1.StringCoder(param.name);
	            case "bytes":
	                return new bytes_2.BytesCoder(param.name);
	            case "array":
	                return new array_1.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
	            case "tuple":
	                return new tuple_1.TupleCoder((param.components || []).map(function (component) {
	                    return _this._getCoder(component);
	                }), param.name);
	            case "":
	                return new null_1.NullCoder(param.name);
	        }
	        // u?int[0-9]*
	        var match = param.type.match(paramTypeNumber);
	        if (match) {
	            var size = parseInt(match[2] || "256");
	            if (size === 0 || size > 256 || (size % 8) !== 0) {
	                logger$u.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
	            }
	            return new number_1.NumberCoder(size / 8, (match[1] === "int"), param.name);
	        }
	        // bytes[0-9]+
	        match = param.type.match(paramTypeBytes);
	        if (match) {
	            var size = parseInt(match[1]);
	            if (size === 0 || size > 32) {
	                logger$u.throwArgumentError("invalid bytes length", "param", param);
	            }
	            return new fixed_bytes_1.FixedBytesCoder(size, param.name);
	        }
	        return logger$u.throwArgumentError("invalid type", "type", param.type);
	    };
	    AbiCoder.prototype._getWordSize = function () { return 32; };
	    AbiCoder.prototype._getReader = function (data, allowLoose) {
	        return new abstract_coder_1.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
	    };
	    AbiCoder.prototype._getWriter = function () {
	        return new abstract_coder_1.Writer(this._getWordSize());
	    };
	    AbiCoder.prototype.getDefaultValue = function (types) {
	        var _this = this;
	        var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
	        var coder = new tuple_1.TupleCoder(coders, "_");
	        return coder.defaultValue();
	    };
	    AbiCoder.prototype.encode = function (types, values) {
	        var _this = this;
	        if (types.length !== values.length) {
	            logger$u.throwError("types/values length mismatch", logger_1$v.Logger.errors.INVALID_ARGUMENT, {
	                count: { types: types.length, values: values.length },
	                value: { types: types, values: values }
	            });
	        }
	        var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
	        var coder = (new tuple_1.TupleCoder(coders, "_"));
	        var writer = this._getWriter();
	        coder.encode(writer, values);
	        return writer.data;
	    };
	    AbiCoder.prototype.decode = function (types, data, loose) {
	        var _this = this;
	        var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
	        var coder = new tuple_1.TupleCoder(coders, "_");
	        return coder.decode(this._getReader((0, bytes_1$o.arrayify)(data), loose));
	    };
	    return AbiCoder;
	}());
	var AbiCoder_1 = abiCoder.AbiCoder = AbiCoder;
	defaultAbiCoder = abiCoder.defaultAbiCoder = new AbiCoder();

	var _interface$1 = {};

	var lib$j = {};

	var id$1 = {};

	"use strict";
	Object.defineProperty(id$1, "__esModule", { value: true });
	var id_2 = id$1.id = void 0;
	var keccak256_1$6 = lib$n;
	var strings_1$e = lib$k;
	function id(text) {
	    return (0, keccak256_1$6.keccak256)((0, strings_1$e.toUtf8Bytes)(text));
	}
	id_2 = id$1.id = id;

	var namehash$1 = {};

	var _version$h = {};

	"use strict";
	Object.defineProperty(_version$h, "__esModule", { value: true });
	var version$i = _version$h.version = void 0;
	version$i = _version$h.version = "hash/5.7.0";

	var lib$i = {};

	var include = {};

	var lib$h = {};

	var browserBase64 = {};

	"use strict";
	Object.defineProperty(browserBase64, "__esModule", { value: true });
	var encode_1 = browserBase64.encode = decode_1 = browserBase64.decode = void 0;
	var bytes_1$n = lib$r;
	function decode$1(textData) {
	    textData = atob(textData);
	    var data = [];
	    for (var i = 0; i < textData.length; i++) {
	        data.push(textData.charCodeAt(i));
	    }
	    return (0, bytes_1$n.arrayify)(data);
	}
	var decode_1 = browserBase64.decode = decode$1;
	function encode$1(data) {
	    data = (0, bytes_1$n.arrayify)(data);
	    var textData = "";
	    for (var i = 0; i < data.length; i++) {
	        textData += String.fromCharCode(data[i]);
	    }
	    return btoa(textData);
	}
	encode_1 = browserBase64.encode = encode$1;

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.encode = exports.decode = void 0;
		var base64_1 = browserBase64;
		Object.defineProperty(exports, "decode", { enumerable: true, get: function () { return base64_1.decode; } });
		Object.defineProperty(exports, "encode", { enumerable: true, get: function () { return base64_1.encode; } });
		
	} (lib$h));

	var index$f = /*@__PURE__*/getDefaultExportFromCjs(lib$h);

	var decoder = {};

	"use strict";
	/**
	 * MIT License
	 *
	 * Copyright (c) 2021 Andrew Raffensperger
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 *
	 * This is a near carbon-copy of the original source (link below) with the
	 * TypeScript typings added and a few tweaks to make it ES3-compatible.
	 *
	 * See: https://github.com/adraffy/ens-normalize.js
	 */
	Object.defineProperty(decoder, "__esModule", { value: true });
	var read_emoji_trie_1 = decoder.read_emoji_trie = read_zero_terminated_array_1 = decoder.read_zero_terminated_array = read_mapped_map_1 = decoder.read_mapped_map = read_member_array_1 = decoder.read_member_array = signed_1 = decoder.signed = read_compressed_payload_1 = decoder.read_compressed_payload = read_payload_1 = decoder.read_payload = decode_arithmetic_1 = decoder.decode_arithmetic = void 0;
	// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js
	function flat(array, depth) {
	    if (depth == null) {
	        depth = 1;
	    }
	    var result = [];
	    var forEach = result.forEach;
	    var flatDeep = function (arr, depth) {
	        forEach.call(arr, function (val) {
	            if (depth > 0 && Array.isArray(val)) {
	                flatDeep(val, depth - 1);
	            }
	            else {
	                result.push(val);
	            }
	        });
	    };
	    flatDeep(array, depth);
	    return result;
	}
	function fromEntries(array) {
	    var result = {};
	    for (var i = 0; i < array.length; i++) {
	        var value = array[i];
	        result[value[0]] = value[1];
	    }
	    return result;
	}
	function decode_arithmetic(bytes) {
	    var pos = 0;
	    function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }
	    // decode the frequency table
	    var symbol_count = u16();
	    var total = 1;
	    var acc = [0, 1]; // first symbol has frequency 1
	    for (var i = 1; i < symbol_count; i++) {
	        acc.push(total += u16());
	    }
	    // skip the sized-payload that the last 3 symbols index into
	    var skip = u16();
	    var pos_payload = pos;
	    pos += skip;
	    var read_width = 0;
	    var read_buffer = 0;
	    function read_bit() {
	        if (read_width == 0) {
	            // this will read beyond end of buffer
	            // but (undefined|0) => zero pad
	            read_buffer = (read_buffer << 8) | bytes[pos++];
	            read_width = 8;
	        }
	        return (read_buffer >> --read_width) & 1;
	    }
	    var N = 31;
	    var FULL = Math.pow(2, N);
	    var HALF = FULL >>> 1;
	    var QRTR = HALF >> 1;
	    var MASK = FULL - 1;
	    // fill register
	    var register = 0;
	    for (var i = 0; i < N; i++)
	        register = (register << 1) | read_bit();
	    var symbols = [];
	    var low = 0;
	    var range = FULL; // treat like a float
	    while (true) {
	        var value = Math.floor((((register - low + 1) * total) - 1) / range);
	        var start = 0;
	        var end = symbol_count;
	        while (end - start > 1) { // binary search
	            var mid = (start + end) >>> 1;
	            if (value < acc[mid]) {
	                end = mid;
	            }
	            else {
	                start = mid;
	            }
	        }
	        if (start == 0)
	            break; // first symbol is end mark
	        symbols.push(start);
	        var a = low + Math.floor(range * acc[start] / total);
	        var b = low + Math.floor(range * acc[start + 1] / total) - 1;
	        while (((a ^ b) & HALF) == 0) {
	            register = (register << 1) & MASK | read_bit();
	            a = (a << 1) & MASK;
	            b = (b << 1) & MASK | 1;
	        }
	        while (a & ~b & QRTR) {
	            register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();
	            a = (a << 1) ^ HALF;
	            b = ((b ^ HALF) << 1) | HALF | 1;
	        }
	        low = a;
	        range = 1 + b - a;
	    }
	    var offset = symbol_count - 4;
	    return symbols.map(function (x) {
	        switch (x - offset) {
	            case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);
	            case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);
	            case 1: return offset + bytes[pos_payload++];
	            default: return x - 1;
	        }
	    });
	}
	var decode_arithmetic_1 = decoder.decode_arithmetic = decode_arithmetic;
	// returns an iterator which returns the next symbol
	function read_payload(v) {
	    var pos = 0;
	    return function () { return v[pos++]; };
	}
	var read_payload_1 = decoder.read_payload = read_payload;
	function read_compressed_payload(bytes) {
	    return read_payload(decode_arithmetic(bytes));
	}
	var read_compressed_payload_1 = decoder.read_compressed_payload = read_compressed_payload;
	// eg. [0,1,2,3...] => [0,-1,1,-2,...]
	function signed(i) {
	    return (i & 1) ? (~i >> 1) : (i >> 1);
	}
	var signed_1 = decoder.signed = signed;
	function read_counts(n, next) {
	    var v = Array(n);
	    for (var i = 0; i < n; i++)
	        v[i] = 1 + next();
	    return v;
	}
	function read_ascending(n, next) {
	    var v = Array(n);
	    for (var i = 0, x = -1; i < n; i++)
	        v[i] = x += 1 + next();
	    return v;
	}
	function read_deltas(n, next) {
	    var v = Array(n);
	    for (var i = 0, x = 0; i < n; i++)
	        v[i] = x += signed(next());
	    return v;
	}
	function read_member_array(next, lookup) {
	    var v = read_ascending(next(), next);
	    var n = next();
	    var vX = read_ascending(n, next);
	    var vN = read_counts(n, next);
	    for (var i = 0; i < n; i++) {
	        for (var j = 0; j < vN[i]; j++) {
	            v.push(vX[i] + j);
	        }
	    }
	    return lookup ? v.map(function (x) { return lookup[x]; }) : v;
	}
	var read_member_array_1 = decoder.read_member_array = read_member_array;
	// returns array of 
	// [x, ys] => single replacement rule
	// [x, ys, n, dx, dx] => linear map
	function read_mapped_map(next) {
	    var ret = [];
	    while (true) {
	        var w = next();
	        if (w == 0)
	            break;
	        ret.push(read_linear_table(w, next));
	    }
	    while (true) {
	        var w = next() - 1;
	        if (w < 0)
	            break;
	        ret.push(read_replacement_table(w, next));
	    }
	    return fromEntries(flat(ret));
	}
	var read_mapped_map_1 = decoder.read_mapped_map = read_mapped_map;
	function read_zero_terminated_array(next) {
	    var v = [];
	    while (true) {
	        var i = next();
	        if (i == 0)
	            break;
	        v.push(i);
	    }
	    return v;
	}
	var read_zero_terminated_array_1 = decoder.read_zero_terminated_array = read_zero_terminated_array;
	function read_transposed(n, w, next) {
	    var m = Array(n).fill(undefined).map(function () { return []; });
	    for (var i = 0; i < w; i++) {
	        read_deltas(n, next).forEach(function (x, j) { return m[j].push(x); });
	    }
	    return m;
	}
	function read_linear_table(w, next) {
	    var dx = 1 + next();
	    var dy = next();
	    var vN = read_zero_terminated_array(next);
	    var m = read_transposed(vN.length, 1 + w, next);
	    return flat(m.map(function (v, i) {
	        var x = v[0], ys = v.slice(1);
	        //let [x, ...ys] = v;
	        //return Array(vN[i]).fill().map((_, j) => {
	        return Array(vN[i]).fill(undefined).map(function (_, j) {
	            var j_dy = j * dy;
	            return [x + j * dx, ys.map(function (y) { return y + j_dy; })];
	        });
	    }));
	}
	function read_replacement_table(w, next) {
	    var n = 1 + next();
	    var m = read_transposed(n, 1 + w, next);
	    return m.map(function (v) { return [v[0], v.slice(1)]; });
	}
	function read_emoji_trie(next) {
	    var sorted = read_member_array(next).sort(function (a, b) { return a - b; });
	    return read();
	    function read() {
	        var branches = [];
	        while (true) {
	            var keys = read_member_array(next, sorted);
	            if (keys.length == 0)
	                break;
	            branches.push({ set: new Set(keys), node: read() });
	        }
	        branches.sort(function (a, b) { return b.set.size - a.set.size; }); // sort by likelihood
	        var temp = next();
	        var valid = temp % 3;
	        temp = (temp / 3) | 0;
	        var fe0f = !!(temp & 1);
	        temp >>= 1;
	        var save = temp == 1;
	        var check = temp == 2;
	        return { branches: branches, valid: valid, fe0f: fe0f, save: save, check: check };
	    }
	}
	read_emoji_trie_1 = decoder.read_emoji_trie = read_emoji_trie;

	"use strict";
	/**
	 * MIT License
	 *
	 * Copyright (c) 2021 Andrew Raffensperger
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 *
	 * This is a near carbon-copy of the original source (link below) with the
	 * TypeScript typings added and a few tweaks to make it ES3-compatible.
	 *
	 * See: https://github.com/adraffy/ens-normalize.js
	 */
	Object.defineProperty(include, "__esModule", { value: true });
	var getData_1 = include.getData = void 0;
	var base64_1$2 = lib$h;
	var decoder_js_1$1 = decoder;
	function getData() {
	    return (0, decoder_js_1$1.read_compressed_payload)((0, base64_1$2.decode)(''));
	}
	getData_1 = include.getData = getData;

	"use strict";
	/**
	 * MIT License
	 *
	 * Copyright (c) 2021 Andrew Raffensperger
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 *
	 * This is a near carbon-copy of the original source (link below) with the
	 * TypeScript typings added and a few tweaks to make it ES3-compatible.
	 *
	 * See: https://github.com/adraffy/ens-normalize.js
	 */
	Object.defineProperty(lib$i, "__esModule", { value: true });
	var ens_normalize_1 = lib$i.ens_normalize = ens_normalize_post_check_1 = lib$i.ens_normalize_post_check = void 0;
	var strings_1$d = lib$k;
	var include_js_1 = include;
	var r$2 = (0, include_js_1.getData)();
	var decoder_js_1 = decoder;
	// @TODO: This should be lazily loaded
	var VALID = new Set((0, decoder_js_1.read_member_array)(r$2));
	var IGNORED = new Set((0, decoder_js_1.read_member_array)(r$2));
	var MAPPED = (0, decoder_js_1.read_mapped_map)(r$2);
	var EMOJI_ROOT = (0, decoder_js_1.read_emoji_trie)(r$2);
	//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));
	//const STOP = 0x2E;
	var HYPHEN = 0x2D;
	var UNDERSCORE = 0x5F;
	function explode_cp(name) {
	    return (0, strings_1$d.toUtf8CodePoints)(name);
	}
	function filter_fe0f(cps) {
	    return cps.filter(function (cp) { return cp != 0xFE0F; });
	}
	function ens_normalize_post_check(name) {
	    for (var _i = 0, _a = name.split('.'); _i < _a.length; _i++) {
	        var label = _a[_i];
	        var cps = explode_cp(label);
	        try {
	            for (var i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {
	                if (cps[i] !== UNDERSCORE) {
	                    throw new Error("underscore only allowed at start");
	                }
	            }
	            if (cps.length >= 4 && cps.every(function (cp) { return cp < 0x80; }) && cps[2] === HYPHEN && cps[3] === HYPHEN) {
	                throw new Error("invalid label extension");
	            }
	        }
	        catch (err) {
	            throw new Error("Invalid label \"" + label + "\": " + err.message);
	        }
	    }
	    return name;
	}
	var ens_normalize_post_check_1 = lib$i.ens_normalize_post_check = ens_normalize_post_check;
	function ens_normalize(name) {
	    return ens_normalize_post_check(normalize(name, filter_fe0f));
	}
	ens_normalize_1 = lib$i.ens_normalize = ens_normalize;
	function normalize(name, emoji_filter) {
	    var input = explode_cp(name).reverse(); // flip for pop
	    var output = [];
	    while (input.length) {
	        var emoji = consume_emoji_reversed(input);
	        if (emoji) {
	            output.push.apply(output, emoji_filter(emoji));
	            continue;
	        }
	        var cp = input.pop();
	        if (VALID.has(cp)) {
	            output.push(cp);
	            continue;
	        }
	        if (IGNORED.has(cp)) {
	            continue;
	        }
	        var cps = MAPPED[cp];
	        if (cps) {
	            output.push.apply(output, cps);
	            continue;
	        }
	        throw new Error("Disallowed codepoint: 0x" + cp.toString(16).toUpperCase());
	    }
	    return ens_normalize_post_check(nfc(String.fromCodePoint.apply(String, output)));
	}
	function nfc(s) {
	    return s.normalize('NFC');
	}
	function consume_emoji_reversed(cps, eaten) {
	    var _a;
	    var node = EMOJI_ROOT;
	    var emoji;
	    var saved;
	    var stack = [];
	    var pos = cps.length;
	    if (eaten)
	        eaten.length = 0; // clear input buffer (if needed)
	    var _loop_1 = function () {
	        var cp = cps[--pos];
	        node = (_a = node.branches.find(function (x) { return x.set.has(cp); })) === null || _a === void 0 ? void 0 : _a.node;
	        if (!node)
	            return "break";
	        if (node.save) { // remember
	            saved = cp;
	        }
	        else if (node.check) { // check exclusion
	            if (cp === saved)
	                return "break";
	        }
	        stack.push(cp);
	        if (node.fe0f) {
	            stack.push(0xFE0F);
	            if (pos > 0 && cps[pos - 1] == 0xFE0F)
	                pos--; // consume optional FE0F
	        }
	        if (node.valid) { // this is a valid emoji (so far)
	            emoji = stack.slice(); // copy stack
	            if (node.valid == 2)
	                emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)
	            if (eaten)
	                eaten.push.apply(eaten, cps.slice(pos).reverse()); // copy input (if needed)
	            cps.length = pos; // truncate
	        }
	    };
	    while (pos) {
	        var state_1 = _loop_1();
	        if (state_1 === "break")
	            break;
	    }
	    return emoji;
	}

	"use strict";
	Object.defineProperty(namehash$1, "__esModule", { value: true });
	var dnsEncode_1 = namehash$1.dnsEncode = namehash_2 = namehash$1.namehash = isValidName_1 = namehash$1.isValidName = ensNormalize_1 = namehash$1.ensNormalize = void 0;
	var bytes_1$m = lib$r;
	var strings_1$c = lib$k;
	var keccak256_1$5 = lib$n;
	var logger_1$u = lib$q;
	var _version_1$u = _version$h;
	var logger$t = new logger_1$u.Logger(_version_1$u.version);
	var lib_1 = lib$i;
	var Zeros$1 = new Uint8Array(32);
	Zeros$1.fill(0);
	function checkComponent(comp) {
	    if (comp.length === 0) {
	        throw new Error("invalid ENS name; empty component");
	    }
	    return comp;
	}
	function ensNameSplit(name) {
	    var bytes = (0, strings_1$c.toUtf8Bytes)((0, lib_1.ens_normalize)(name));
	    var comps = [];
	    if (name.length === 0) {
	        return comps;
	    }
	    var last = 0;
	    for (var i = 0; i < bytes.length; i++) {
	        var d = bytes[i];
	        // A separator (i.e. "."); copy this component
	        if (d === 0x2e) {
	            comps.push(checkComponent(bytes.slice(last, i)));
	            last = i + 1;
	        }
	    }
	    // There was a stray separator at the end of the name
	    if (last >= bytes.length) {
	        throw new Error("invalid ENS name; empty component");
	    }
	    comps.push(checkComponent(bytes.slice(last)));
	    return comps;
	}
	function ensNormalize(name) {
	    return ensNameSplit(name).map(function (comp) { return (0, strings_1$c.toUtf8String)(comp); }).join(".");
	}
	var ensNormalize_1 = namehash$1.ensNormalize = ensNormalize;
	function isValidName(name) {
	    try {
	        return (ensNameSplit(name).length !== 0);
	    }
	    catch (error) { }
	    return false;
	}
	var isValidName_1 = namehash$1.isValidName = isValidName;
	function namehash(name) {
	    /* istanbul ignore if */
	    if (typeof (name) !== "string") {
	        logger$t.throwArgumentError("invalid ENS name; not a string", "name", name);
	    }
	    var result = Zeros$1;
	    var comps = ensNameSplit(name);
	    while (comps.length) {
	        result = (0, keccak256_1$5.keccak256)((0, bytes_1$m.concat)([result, (0, keccak256_1$5.keccak256)(comps.pop())]));
	    }
	    return (0, bytes_1$m.hexlify)(result);
	}
	var namehash_2 = namehash$1.namehash = namehash;
	function dnsEncode(name) {
	    return (0, bytes_1$m.hexlify)((0, bytes_1$m.concat)(ensNameSplit(name).map(function (comp) {
	        // DNS does not allow components over 63 bytes in length
	        if (comp.length > 63) {
	            throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
	        }
	        var bytes = new Uint8Array(comp.length + 1);
	        bytes.set(comp, 1);
	        bytes[0] = bytes.length - 1;
	        return bytes;
	    }))) + "00";
	}
	dnsEncode_1 = namehash$1.dnsEncode = dnsEncode;

	var message$1 = {};

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.hashMessage = exports.messagePrefix = void 0;
		var bytes_1 = lib$r;
		var keccak256_1 = lib$n;
		var strings_1 = lib$k;
		exports.messagePrefix = "\x19Ethereum Signed Message:\n";
		function hashMessage(message) {
		    if (typeof (message) === "string") {
		        message = (0, strings_1.toUtf8Bytes)(message);
		    }
		    return (0, keccak256_1.keccak256)((0, bytes_1.concat)([
		        (0, strings_1.toUtf8Bytes)(exports.messagePrefix),
		        (0, strings_1.toUtf8Bytes)(String(message.length)),
		        message
		    ]));
		}
		exports.hashMessage = hashMessage;
		
	} (message$1));

	var message = /*@__PURE__*/getDefaultExportFromCjs(message$1);

	var typedData = {};

	"use strict";
	var __awaiter$p = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$p = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(typedData, "__esModule", { value: true });
	var TypedDataEncoder_1 = typedData.TypedDataEncoder = void 0;
	var address_1$6 = lib$o;
	var bignumber_1$a = lib$s;
	var bytes_1$l = lib$r;
	var keccak256_1$4 = lib$n;
	var properties_1$l = lib$p;
	var logger_1$t = lib$q;
	var _version_1$t = _version$h;
	var logger$s = new logger_1$t.Logger(_version_1$t.version);
	var id_1 = id$1;
	var padding = new Uint8Array(32);
	padding.fill(0);
	var NegativeOne = bignumber_1$a.BigNumber.from(-1);
	var Zero = bignumber_1$a.BigNumber.from(0);
	var One = bignumber_1$a.BigNumber.from(1);
	var MaxUint256 = bignumber_1$a.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
	function hexPadRight(value) {
	    var bytes = (0, bytes_1$l.arrayify)(value);
	    var padOffset = bytes.length % 32;
	    if (padOffset) {
	        return (0, bytes_1$l.hexConcat)([bytes, padding.slice(padOffset)]);
	    }
	    return (0, bytes_1$l.hexlify)(bytes);
	}
	var hexTrue = (0, bytes_1$l.hexZeroPad)(One.toHexString(), 32);
	var hexFalse = (0, bytes_1$l.hexZeroPad)(Zero.toHexString(), 32);
	var domainFieldTypes = {
	    name: "string",
	    version: "string",
	    chainId: "uint256",
	    verifyingContract: "address",
	    salt: "bytes32"
	};
	var domainFieldNames = [
	    "name", "version", "chainId", "verifyingContract", "salt"
	];
	function checkString(key) {
	    return function (value) {
	        if (typeof (value) !== "string") {
	            logger$s.throwArgumentError("invalid domain value for " + JSON.stringify(key), "domain." + key, value);
	        }
	        return value;
	    };
	}
	var domainChecks = {
	    name: checkString("name"),
	    version: checkString("version"),
	    chainId: function (value) {
	        try {
	            return bignumber_1$a.BigNumber.from(value).toString();
	        }
	        catch (error) { }
	        return logger$s.throwArgumentError("invalid domain value for \"chainId\"", "domain.chainId", value);
	    },
	    verifyingContract: function (value) {
	        try {
	            return (0, address_1$6.getAddress)(value).toLowerCase();
	        }
	        catch (error) { }
	        return logger$s.throwArgumentError("invalid domain value \"verifyingContract\"", "domain.verifyingContract", value);
	    },
	    salt: function (value) {
	        try {
	            var bytes = (0, bytes_1$l.arrayify)(value);
	            if (bytes.length !== 32) {
	                throw new Error("bad length");
	            }
	            return (0, bytes_1$l.hexlify)(bytes);
	        }
	        catch (error) { }
	        return logger$s.throwArgumentError("invalid domain value \"salt\"", "domain.salt", value);
	    }
	};
	function getBaseEncoder(type) {
	    // intXX and uintXX
	    {
	        var match = type.match(/^(u?)int(\d*)$/);
	        if (match) {
	            var signed = (match[1] === "");
	            var width = parseInt(match[2] || "256");
	            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
	                logger$s.throwArgumentError("invalid numeric width", "type", type);
	            }
	            var boundsUpper_1 = MaxUint256.mask(signed ? (width - 1) : width);
	            var boundsLower_1 = signed ? boundsUpper_1.add(One).mul(NegativeOne) : Zero;
	            return function (value) {
	                var v = bignumber_1$a.BigNumber.from(value);
	                if (v.lt(boundsLower_1) || v.gt(boundsUpper_1)) {
	                    logger$s.throwArgumentError("value out-of-bounds for " + type, "value", value);
	                }
	                return (0, bytes_1$l.hexZeroPad)(v.toTwos(256).toHexString(), 32);
	            };
	        }
	    }
	    // bytesXX
	    {
	        var match = type.match(/^bytes(\d+)$/);
	        if (match) {
	            var width_1 = parseInt(match[1]);
	            if (width_1 === 0 || width_1 > 32 || match[1] !== String(width_1)) {
	                logger$s.throwArgumentError("invalid bytes width", "type", type);
	            }
	            return function (value) {
	                var bytes = (0, bytes_1$l.arrayify)(value);
	                if (bytes.length !== width_1) {
	                    logger$s.throwArgumentError("invalid length for " + type, "value", value);
	                }
	                return hexPadRight(value);
	            };
	        }
	    }
	    switch (type) {
	        case "address": return function (value) {
	            return (0, bytes_1$l.hexZeroPad)((0, address_1$6.getAddress)(value), 32);
	        };
	        case "bool": return function (value) {
	            return ((!value) ? hexFalse : hexTrue);
	        };
	        case "bytes": return function (value) {
	            return (0, keccak256_1$4.keccak256)(value);
	        };
	        case "string": return function (value) {
	            return (0, id_1.id)(value);
	        };
	    }
	    return null;
	}
	function encodeType(name, fields) {
	    return name + "(" + fields.map(function (_a) {
	        var name = _a.name, type = _a.type;
	        return (type + " " + name);
	    }).join(",") + ")";
	}
	var TypedDataEncoder = /** @class */ (function () {
	    function TypedDataEncoder(types) {
	        (0, properties_1$l.defineReadOnly)(this, "types", Object.freeze((0, properties_1$l.deepCopy)(types)));
	        (0, properties_1$l.defineReadOnly)(this, "_encoderCache", {});
	        (0, properties_1$l.defineReadOnly)(this, "_types", {});
	        // Link struct types to their direct child structs
	        var links = {};
	        // Link structs to structs which contain them as a child
	        var parents = {};
	        // Link all subtypes within a given struct
	        var subtypes = {};
	        Object.keys(types).forEach(function (type) {
	            links[type] = {};
	            parents[type] = [];
	            subtypes[type] = {};
	        });
	        var _loop_1 = function (name_1) {
	            var uniqueNames = {};
	            types[name_1].forEach(function (field) {
	                // Check each field has a unique name
	                if (uniqueNames[field.name]) {
	                    logger$s.throwArgumentError("duplicate variable name " + JSON.stringify(field.name) + " in " + JSON.stringify(name_1), "types", types);
	                }
	                uniqueNames[field.name] = true;
	                // Get the base type (drop any array specifiers)
	                var baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
	                if (baseType === name_1) {
	                    logger$s.throwArgumentError("circular type reference to " + JSON.stringify(baseType), "types", types);
	                }
	                // Is this a base encoding type?
	                var encoder = getBaseEncoder(baseType);
	                if (encoder) {
	                    return;
	                }
	                if (!parents[baseType]) {
	                    logger$s.throwArgumentError("unknown type " + JSON.stringify(baseType), "types", types);
	                }
	                // Add linkage
	                parents[baseType].push(name_1);
	                links[name_1][baseType] = true;
	            });
	        };
	        for (var name_1 in types) {
	            _loop_1(name_1);
	        }
	        // Deduce the primary type
	        var primaryTypes = Object.keys(parents).filter(function (n) { return (parents[n].length === 0); });
	        if (primaryTypes.length === 0) {
	            logger$s.throwArgumentError("missing primary type", "types", types);
	        }
	        else if (primaryTypes.length > 1) {
	            logger$s.throwArgumentError("ambiguous primary types or unused types: " + primaryTypes.map(function (t) { return (JSON.stringify(t)); }).join(", "), "types", types);
	        }
	        (0, properties_1$l.defineReadOnly)(this, "primaryType", primaryTypes[0]);
	        // Check for circular type references
	        function checkCircular(type, found) {
	            if (found[type]) {
	                logger$s.throwArgumentError("circular type reference to " + JSON.stringify(type), "types", types);
	            }
	            found[type] = true;
	            Object.keys(links[type]).forEach(function (child) {
	                if (!parents[child]) {
	                    return;
	                }
	                // Recursively check children
	                checkCircular(child, found);
	                // Mark all ancestors as having this decendant
	                Object.keys(found).forEach(function (subtype) {
	                    subtypes[subtype][child] = true;
	                });
	            });
	            delete found[type];
	        }
	        checkCircular(this.primaryType, {});
	        // Compute each fully describe type
	        for (var name_2 in subtypes) {
	            var st = Object.keys(subtypes[name_2]);
	            st.sort();
	            this._types[name_2] = encodeType(name_2, types[name_2]) + st.map(function (t) { return encodeType(t, types[t]); }).join("");
	        }
	    }
	    TypedDataEncoder.prototype.getEncoder = function (type) {
	        var encoder = this._encoderCache[type];
	        if (!encoder) {
	            encoder = this._encoderCache[type] = this._getEncoder(type);
	        }
	        return encoder;
	    };
	    TypedDataEncoder.prototype._getEncoder = function (type) {
	        var _this = this;
	        // Basic encoder type (address, bool, uint256, etc)
	        {
	            var encoder = getBaseEncoder(type);
	            if (encoder) {
	                return encoder;
	            }
	        }
	        // Array
	        var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
	        if (match) {
	            var subtype_1 = match[1];
	            var subEncoder_1 = this.getEncoder(subtype_1);
	            var length_1 = parseInt(match[3]);
	            return function (value) {
	                if (length_1 >= 0 && value.length !== length_1) {
	                    logger$s.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
	                }
	                var result = value.map(subEncoder_1);
	                if (_this._types[subtype_1]) {
	                    result = result.map(keccak256_1$4.keccak256);
	                }
	                return (0, keccak256_1$4.keccak256)((0, bytes_1$l.hexConcat)(result));
	            };
	        }
	        // Struct
	        var fields = this.types[type];
	        if (fields) {
	            var encodedType_1 = (0, id_1.id)(this._types[type]);
	            return function (value) {
	                var values = fields.map(function (_a) {
	                    var name = _a.name, type = _a.type;
	                    var result = _this.getEncoder(type)(value[name]);
	                    if (_this._types[type]) {
	                        return (0, keccak256_1$4.keccak256)(result);
	                    }
	                    return result;
	                });
	                values.unshift(encodedType_1);
	                return (0, bytes_1$l.hexConcat)(values);
	            };
	        }
	        return logger$s.throwArgumentError("unknown type: " + type, "type", type);
	    };
	    TypedDataEncoder.prototype.encodeType = function (name) {
	        var result = this._types[name];
	        if (!result) {
	            logger$s.throwArgumentError("unknown type: " + JSON.stringify(name), "name", name);
	        }
	        return result;
	    };
	    TypedDataEncoder.prototype.encodeData = function (type, value) {
	        return this.getEncoder(type)(value);
	    };
	    TypedDataEncoder.prototype.hashStruct = function (name, value) {
	        return (0, keccak256_1$4.keccak256)(this.encodeData(name, value));
	    };
	    TypedDataEncoder.prototype.encode = function (value) {
	        return this.encodeData(this.primaryType, value);
	    };
	    TypedDataEncoder.prototype.hash = function (value) {
	        return this.hashStruct(this.primaryType, value);
	    };
	    TypedDataEncoder.prototype._visit = function (type, value, callback) {
	        var _this = this;
	        // Basic encoder type (address, bool, uint256, etc)
	        {
	            var encoder = getBaseEncoder(type);
	            if (encoder) {
	                return callback(type, value);
	            }
	        }
	        // Array
	        var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
	        if (match) {
	            var subtype_2 = match[1];
	            var length_2 = parseInt(match[3]);
	            if (length_2 >= 0 && value.length !== length_2) {
	                logger$s.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
	            }
	            return value.map(function (v) { return _this._visit(subtype_2, v, callback); });
	        }
	        // Struct
	        var fields = this.types[type];
	        if (fields) {
	            return fields.reduce(function (accum, _a) {
	                var name = _a.name, type = _a.type;
	                accum[name] = _this._visit(type, value[name], callback);
	                return accum;
	            }, {});
	        }
	        return logger$s.throwArgumentError("unknown type: " + type, "type", type);
	    };
	    TypedDataEncoder.prototype.visit = function (value, callback) {
	        return this._visit(this.primaryType, value, callback);
	    };
	    TypedDataEncoder.from = function (types) {
	        return new TypedDataEncoder(types);
	    };
	    TypedDataEncoder.getPrimaryType = function (types) {
	        return TypedDataEncoder.from(types).primaryType;
	    };
	    TypedDataEncoder.hashStruct = function (name, types, value) {
	        return TypedDataEncoder.from(types).hashStruct(name, value);
	    };
	    TypedDataEncoder.hashDomain = function (domain) {
	        var domainFields = [];
	        for (var name_3 in domain) {
	            var type = domainFieldTypes[name_3];
	            if (!type) {
	                logger$s.throwArgumentError("invalid typed-data domain key: " + JSON.stringify(name_3), "domain", domain);
	            }
	            domainFields.push({ name: name_3, type: type });
	        }
	        domainFields.sort(function (a, b) {
	            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
	        });
	        return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
	    };
	    TypedDataEncoder.encode = function (domain, types, value) {
	        return (0, bytes_1$l.hexConcat)([
	            "0x1901",
	            TypedDataEncoder.hashDomain(domain),
	            TypedDataEncoder.from(types).hash(value)
	        ]);
	    };
	    TypedDataEncoder.hash = function (domain, types, value) {
	        return (0, keccak256_1$4.keccak256)(TypedDataEncoder.encode(domain, types, value));
	    };
	    // Replaces all address types with ENS names with their looked up address
	    TypedDataEncoder.resolveNames = function (domain, types, value, resolveName) {
	        return __awaiter$p(this, void 0, void 0, function () {
	            var ensCache, encoder, _a, _b, _i, name_4, _c, _d;
	            return __generator$p(this, function (_e) {
	                switch (_e.label) {
	                    case 0:
	                        // Make a copy to isolate it from the object passed in
	                        domain = (0, properties_1$l.shallowCopy)(domain);
	                        ensCache = {};
	                        // Do we need to look up the domain's verifyingContract?
	                        if (domain.verifyingContract && !(0, bytes_1$l.isHexString)(domain.verifyingContract, 20)) {
	                            ensCache[domain.verifyingContract] = "0x";
	                        }
	                        encoder = TypedDataEncoder.from(types);
	                        // Get a list of all the addresses
	                        encoder.visit(value, function (type, value) {
	                            if (type === "address" && !(0, bytes_1$l.isHexString)(value, 20)) {
	                                ensCache[value] = "0x";
	                            }
	                            return value;
	                        });
	                        _a = [];
	                        for (_b in ensCache)
	                            _a.push(_b);
	                        _i = 0;
	                        _e.label = 1;
	                    case 1:
	                        if (!(_i < _a.length)) return [3 /*break*/, 4];
	                        name_4 = _a[_i];
	                        _c = ensCache;
	                        _d = name_4;
	                        return [4 /*yield*/, resolveName(name_4)];
	                    case 2:
	                        _c[_d] = _e.sent();
	                        _e.label = 3;
	                    case 3:
	                        _i++;
	                        return [3 /*break*/, 1];
	                    case 4:
	                        // Replace the domain verifyingContract if needed
	                        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
	                            domain.verifyingContract = ensCache[domain.verifyingContract];
	                        }
	                        // Replace all ENS names with their address
	                        value = encoder.visit(value, function (type, value) {
	                            if (type === "address" && ensCache[value]) {
	                                return ensCache[value];
	                            }
	                            return value;
	                        });
	                        return [2 /*return*/, { domain: domain, value: value }];
	                }
	            });
	        });
	    };
	    TypedDataEncoder.getPayload = function (domain, types, value) {
	        // Validate the domain fields
	        TypedDataEncoder.hashDomain(domain);
	        // Derive the EIP712Domain Struct reference type
	        var domainValues = {};
	        var domainTypes = [];
	        domainFieldNames.forEach(function (name) {
	            var value = domain[name];
	            if (value == null) {
	                return;
	            }
	            domainValues[name] = domainChecks[name](value);
	            domainTypes.push({ name: name, type: domainFieldTypes[name] });
	        });
	        var encoder = TypedDataEncoder.from(types);
	        var typesWithDomain = (0, properties_1$l.shallowCopy)(types);
	        if (typesWithDomain.EIP712Domain) {
	            logger$s.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
	        }
	        else {
	            typesWithDomain.EIP712Domain = domainTypes;
	        }
	        // Validate the data structures and types
	        encoder.encode(value);
	        return {
	            types: typesWithDomain,
	            domain: domainValues,
	            primaryType: encoder.primaryType,
	            message: encoder.visit(value, function (type, value) {
	                // bytes
	                if (type.match(/^bytes(\d*)/)) {
	                    return (0, bytes_1$l.hexlify)((0, bytes_1$l.arrayify)(value));
	                }
	                // uint or int
	                if (type.match(/^u?int/)) {
	                    return bignumber_1$a.BigNumber.from(value).toString();
	                }
	                switch (type) {
	                    case "address":
	                        return value.toLowerCase();
	                    case "bool":
	                        return !!value;
	                    case "string":
	                        if (typeof (value) !== "string") {
	                            logger$s.throwArgumentError("invalid string", "value", value);
	                        }
	                        return value;
	                }
	                return logger$s.throwArgumentError("unsupported type", "type", type);
	            })
	        };
	    };
	    return TypedDataEncoder;
	}());
	TypedDataEncoder_1 = typedData.TypedDataEncoder = TypedDataEncoder;

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports._TypedDataEncoder = exports.hashMessage = exports.messagePrefix = exports.ensNormalize = exports.isValidName = exports.namehash = exports.dnsEncode = exports.id = void 0;
		var id_1 = id$1;
		Object.defineProperty(exports, "id", { enumerable: true, get: function () { return id_1.id; } });
		var namehash_1 = namehash$1;
		Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return namehash_1.dnsEncode; } });
		Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return namehash_1.isValidName; } });
		Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return namehash_1.namehash; } });
		var message_1 = message$1;
		Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return message_1.hashMessage; } });
		Object.defineProperty(exports, "messagePrefix", { enumerable: true, get: function () { return message_1.messagePrefix; } });
		var namehash_2 = namehash$1;
		Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function () { return namehash_2.ensNormalize; } });
		var typed_data_1 = typedData;
		Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return typed_data_1.TypedDataEncoder; } });
		
	} (lib$j));

	var index$e = /*@__PURE__*/getDefaultExportFromCjs(lib$j);

	(function (exports) {
		"use strict";
		var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
		    var extendStatics = function (d, b) {
		        extendStatics = Object.setPrototypeOf ||
		            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
		            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
		        return extendStatics(d, b);
		    };
		    return function (d, b) {
		        if (typeof b !== "function" && b !== null)
		            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
		        extendStatics(d, b);
		        function __() { this.constructor = d; }
		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		    };
		})();
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = void 0;
		var address_1 = lib$o;
		var bignumber_1 = lib$s;
		var bytes_1 = lib$r;
		var hash_1 = lib$j;
		var keccak256_1 = lib$n;
		var properties_1 = lib$p;
		var abi_coder_1 = abiCoder;
		var abstract_coder_1 = abstractCoder;
		Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abstract_coder_1.checkResultErrors; } });
		var fragments_1 = fragments$1;
		var logger_1 = lib$q;
		var _version_1 = _version$l;
		var logger = new logger_1.Logger(_version_1.version);
		var LogDescription = /** @class */ (function (_super) {
		    __extends(LogDescription, _super);
		    function LogDescription() {
		        return _super !== null && _super.apply(this, arguments) || this;
		    }
		    return LogDescription;
		}(properties_1.Description));
		exports.LogDescription = LogDescription;
		var TransactionDescription = /** @class */ (function (_super) {
		    __extends(TransactionDescription, _super);
		    function TransactionDescription() {
		        return _super !== null && _super.apply(this, arguments) || this;
		    }
		    return TransactionDescription;
		}(properties_1.Description));
		exports.TransactionDescription = TransactionDescription;
		var ErrorDescription = /** @class */ (function (_super) {
		    __extends(ErrorDescription, _super);
		    function ErrorDescription() {
		        return _super !== null && _super.apply(this, arguments) || this;
		    }
		    return ErrorDescription;
		}(properties_1.Description));
		exports.ErrorDescription = ErrorDescription;
		var Indexed = /** @class */ (function (_super) {
		    __extends(Indexed, _super);
		    function Indexed() {
		        return _super !== null && _super.apply(this, arguments) || this;
		    }
		    Indexed.isIndexed = function (value) {
		        return !!(value && value._isIndexed);
		    };
		    return Indexed;
		}(properties_1.Description));
		exports.Indexed = Indexed;
		var BuiltinErrors = {
		    "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
		    "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
		};
		function wrapAccessError(property, error) {
		    var wrap = new Error("deferred error during ABI decoding triggered accessing " + property);
		    wrap.error = error;
		    return wrap;
		}
		/*
		function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
		    params.reduce((accum, param) => {
		        if (param.name) {
		            if (accum[param.name]) {
		                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
		            }
		            accum[param.name] = true;
		        }
		        return accum;
		    }, <{ [ name: string ]: boolean }>{ });
		}
		*/
		var Interface = /** @class */ (function () {
		    function Interface(fragments) {
		        var _newTarget = this.constructor;
		        var _this = this;
		        var abi = [];
		        if (typeof (fragments) === "string") {
		            abi = JSON.parse(fragments);
		        }
		        else {
		            abi = fragments;
		        }
		        (0, properties_1.defineReadOnly)(this, "fragments", abi.map(function (fragment) {
		            return fragments_1.Fragment.from(fragment);
		        }).filter(function (fragment) { return (fragment != null); }));
		        (0, properties_1.defineReadOnly)(this, "_abiCoder", (0, properties_1.getStatic)(_newTarget, "getAbiCoder")());
		        (0, properties_1.defineReadOnly)(this, "functions", {});
		        (0, properties_1.defineReadOnly)(this, "errors", {});
		        (0, properties_1.defineReadOnly)(this, "events", {});
		        (0, properties_1.defineReadOnly)(this, "structs", {});
		        // Add all fragments by their signature
		        this.fragments.forEach(function (fragment) {
		            var bucket = null;
		            switch (fragment.type) {
		                case "constructor":
		                    if (_this.deploy) {
		                        logger.warn("duplicate definition - constructor");
		                        return;
		                    }
		                    //checkNames(fragment, "input", fragment.inputs);
		                    (0, properties_1.defineReadOnly)(_this, "deploy", fragment);
		                    return;
		                case "function":
		                    //checkNames(fragment, "input", fragment.inputs);
		                    //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
		                    bucket = _this.functions;
		                    break;
		                case "event":
		                    //checkNames(fragment, "input", fragment.inputs);
		                    bucket = _this.events;
		                    break;
		                case "error":
		                    bucket = _this.errors;
		                    break;
		                default:
		                    return;
		            }
		            var signature = fragment.format();
		            if (bucket[signature]) {
		                logger.warn("duplicate definition - " + signature);
		                return;
		            }
		            bucket[signature] = fragment;
		        });
		        // If we do not have a constructor add a default
		        if (!this.deploy) {
		            (0, properties_1.defineReadOnly)(this, "deploy", fragments_1.ConstructorFragment.from({
		                payable: false,
		                type: "constructor"
		            }));
		        }
		        (0, properties_1.defineReadOnly)(this, "_isInterface", true);
		    }
		    Interface.prototype.format = function (format) {
		        if (!format) {
		            format = fragments_1.FormatTypes.full;
		        }
		        if (format === fragments_1.FormatTypes.sighash) {
		            logger.throwArgumentError("interface does not support formatting sighash", "format", format);
		        }
		        var abi = this.fragments.map(function (fragment) { return fragment.format(format); });
		        // We need to re-bundle the JSON fragments a bit
		        if (format === fragments_1.FormatTypes.json) {
		            return JSON.stringify(abi.map(function (j) { return JSON.parse(j); }));
		        }
		        return abi;
		    };
		    // Sub-classes can override these to handle other blockchains
		    Interface.getAbiCoder = function () {
		        return abi_coder_1.defaultAbiCoder;
		    };
		    Interface.getAddress = function (address) {
		        return (0, address_1.getAddress)(address);
		    };
		    Interface.getSighash = function (fragment) {
		        return (0, bytes_1.hexDataSlice)((0, hash_1.id)(fragment.format()), 0, 4);
		    };
		    Interface.getEventTopic = function (eventFragment) {
		        return (0, hash_1.id)(eventFragment.format());
		    };
		    // Find a function definition by any means necessary (unless it is ambiguous)
		    Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {
		        if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {
		            for (var name_1 in this.functions) {
		                if (nameOrSignatureOrSighash === this.getSighash(name_1)) {
		                    return this.functions[name_1];
		                }
		            }
		            logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
		        }
		        // It is a bare name, look up the function (will return null if ambiguous)
		        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
		            var name_2 = nameOrSignatureOrSighash.trim();
		            var matching = Object.keys(this.functions).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_2); });
		            if (matching.length === 0) {
		                logger.throwArgumentError("no matching function", "name", name_2);
		            }
		            else if (matching.length > 1) {
		                logger.throwArgumentError("multiple matching functions", "name", name_2);
		            }
		            return this.functions[matching[0]];
		        }
		        // Normalize the signature and lookup the function
		        var result = this.functions[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
		        if (!result) {
		            logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
		        }
		        return result;
		    };
		    // Find an event definition by any means necessary (unless it is ambiguous)
		    Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {
		        if ((0, bytes_1.isHexString)(nameOrSignatureOrTopic)) {
		            var topichash = nameOrSignatureOrTopic.toLowerCase();
		            for (var name_3 in this.events) {
		                if (topichash === this.getEventTopic(name_3)) {
		                    return this.events[name_3];
		                }
		            }
		            logger.throwArgumentError("no matching event", "topichash", topichash);
		        }
		        // It is a bare name, look up the function (will return null if ambiguous)
		        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
		            var name_4 = nameOrSignatureOrTopic.trim();
		            var matching = Object.keys(this.events).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_4); });
		            if (matching.length === 0) {
		                logger.throwArgumentError("no matching event", "name", name_4);
		            }
		            else if (matching.length > 1) {
		                logger.throwArgumentError("multiple matching events", "name", name_4);
		            }
		            return this.events[matching[0]];
		        }
		        // Normalize the signature and lookup the function
		        var result = this.events[fragments_1.EventFragment.fromString(nameOrSignatureOrTopic).format()];
		        if (!result) {
		            logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
		        }
		        return result;
		    };
		    // Find a function definition by any means necessary (unless it is ambiguous)
		    Interface.prototype.getError = function (nameOrSignatureOrSighash) {
		        if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {
		            var getSighash = (0, properties_1.getStatic)(this.constructor, "getSighash");
		            for (var name_5 in this.errors) {
		                var error = this.errors[name_5];
		                if (nameOrSignatureOrSighash === getSighash(error)) {
		                    return this.errors[name_5];
		                }
		            }
		            logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
		        }
		        // It is a bare name, look up the function (will return null if ambiguous)
		        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
		            var name_6 = nameOrSignatureOrSighash.trim();
		            var matching = Object.keys(this.errors).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_6); });
		            if (matching.length === 0) {
		                logger.throwArgumentError("no matching error", "name", name_6);
		            }
		            else if (matching.length > 1) {
		                logger.throwArgumentError("multiple matching errors", "name", name_6);
		            }
		            return this.errors[matching[0]];
		        }
		        // Normalize the signature and lookup the function
		        var result = this.errors[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
		        if (!result) {
		            logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
		        }
		        return result;
		    };
		    // Get the sighash (the bytes4 selector) used by Solidity to identify a function
		    Interface.prototype.getSighash = function (fragment) {
		        if (typeof (fragment) === "string") {
		            try {
		                fragment = this.getFunction(fragment);
		            }
		            catch (error) {
		                try {
		                    fragment = this.getError(fragment);
		                }
		                catch (_) {
		                    throw error;
		                }
		            }
		        }
		        return (0, properties_1.getStatic)(this.constructor, "getSighash")(fragment);
		    };
		    // Get the topic (the bytes32 hash) used by Solidity to identify an event
		    Interface.prototype.getEventTopic = function (eventFragment) {
		        if (typeof (eventFragment) === "string") {
		            eventFragment = this.getEvent(eventFragment);
		        }
		        return (0, properties_1.getStatic)(this.constructor, "getEventTopic")(eventFragment);
		    };
		    Interface.prototype._decodeParams = function (params, data) {
		        return this._abiCoder.decode(params, data);
		    };
		    Interface.prototype._encodeParams = function (params, values) {
		        return this._abiCoder.encode(params, values);
		    };
		    Interface.prototype.encodeDeploy = function (values) {
		        return this._encodeParams(this.deploy.inputs, values || []);
		    };
		    Interface.prototype.decodeErrorResult = function (fragment, data) {
		        if (typeof (fragment) === "string") {
		            fragment = this.getError(fragment);
		        }
		        var bytes = (0, bytes_1.arrayify)(data);
		        if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
		            logger.throwArgumentError("data signature does not match error " + fragment.name + ".", "data", (0, bytes_1.hexlify)(bytes));
		        }
		        return this._decodeParams(fragment.inputs, bytes.slice(4));
		    };
		    Interface.prototype.encodeErrorResult = function (fragment, values) {
		        if (typeof (fragment) === "string") {
		            fragment = this.getError(fragment);
		        }
		        return (0, bytes_1.hexlify)((0, bytes_1.concat)([
		            this.getSighash(fragment),
		            this._encodeParams(fragment.inputs, values || [])
		        ]));
		    };
		    // Decode the data for a function call (e.g. tx.data)
		    Interface.prototype.decodeFunctionData = function (functionFragment, data) {
		        if (typeof (functionFragment) === "string") {
		            functionFragment = this.getFunction(functionFragment);
		        }
		        var bytes = (0, bytes_1.arrayify)(data);
		        if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
		            logger.throwArgumentError("data signature does not match function " + functionFragment.name + ".", "data", (0, bytes_1.hexlify)(bytes));
		        }
		        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
		    };
		    // Encode the data for a function call (e.g. tx.data)
		    Interface.prototype.encodeFunctionData = function (functionFragment, values) {
		        if (typeof (functionFragment) === "string") {
		            functionFragment = this.getFunction(functionFragment);
		        }
		        return (0, bytes_1.hexlify)((0, bytes_1.concat)([
		            this.getSighash(functionFragment),
		            this._encodeParams(functionFragment.inputs, values || [])
		        ]));
		    };
		    // Decode the result from a function call (e.g. from eth_call)
		    Interface.prototype.decodeFunctionResult = function (functionFragment, data) {
		        if (typeof (functionFragment) === "string") {
		            functionFragment = this.getFunction(functionFragment);
		        }
		        var bytes = (0, bytes_1.arrayify)(data);
		        var reason = null;
		        var message = "";
		        var errorArgs = null;
		        var errorName = null;
		        var errorSignature = null;
		        switch (bytes.length % this._abiCoder._getWordSize()) {
		            case 0:
		                try {
		                    return this._abiCoder.decode(functionFragment.outputs, bytes);
		                }
		                catch (error) { }
		                break;
		            case 4: {
		                var selector = (0, bytes_1.hexlify)(bytes.slice(0, 4));
		                var builtin = BuiltinErrors[selector];
		                if (builtin) {
		                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
		                    errorName = builtin.name;
		                    errorSignature = builtin.signature;
		                    if (builtin.reason) {
		                        reason = errorArgs[0];
		                    }
		                    if (errorName === "Error") {
		                        message = "; VM Exception while processing transaction: reverted with reason string " + JSON.stringify(errorArgs[0]);
		                    }
		                    else if (errorName === "Panic") {
		                        message = "; VM Exception while processing transaction: reverted with panic code " + errorArgs[0];
		                    }
		                }
		                else {
		                    try {
		                        var error = this.getError(selector);
		                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
		                        errorName = error.name;
		                        errorSignature = error.format();
		                    }
		                    catch (error) { }
		                }
		                break;
		            }
		        }
		        return logger.throwError("call revert exception" + message, logger_1.Logger.errors.CALL_EXCEPTION, {
		            method: functionFragment.format(),
		            data: (0, bytes_1.hexlify)(data),
		            errorArgs: errorArgs,
		            errorName: errorName,
		            errorSignature: errorSignature,
		            reason: reason
		        });
		    };
		    // Encode the result for a function call (e.g. for eth_call)
		    Interface.prototype.encodeFunctionResult = function (functionFragment, values) {
		        if (typeof (functionFragment) === "string") {
		            functionFragment = this.getFunction(functionFragment);
		        }
		        return (0, bytes_1.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));
		    };
		    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
		    Interface.prototype.encodeFilterTopics = function (eventFragment, values) {
		        var _this = this;
		        if (typeof (eventFragment) === "string") {
		            eventFragment = this.getEvent(eventFragment);
		        }
		        if (values.length > eventFragment.inputs.length) {
		            logger.throwError("too many arguments for " + eventFragment.format(), logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {
		                argument: "values",
		                value: values
		            });
		        }
		        var topics = [];
		        if (!eventFragment.anonymous) {
		            topics.push(this.getEventTopic(eventFragment));
		        }
		        var encodeTopic = function (param, value) {
		            if (param.type === "string") {
		                return (0, hash_1.id)(value);
		            }
		            else if (param.type === "bytes") {
		                return (0, keccak256_1.keccak256)((0, bytes_1.hexlify)(value));
		            }
		            if (param.type === "bool" && typeof (value) === "boolean") {
		                value = (value ? "0x01" : "0x00");
		            }
		            if (param.type.match(/^u?int/)) {
		                value = bignumber_1.BigNumber.from(value).toHexString();
		            }
		            // Check addresses are valid
		            if (param.type === "address") {
		                _this._abiCoder.encode(["address"], [value]);
		            }
		            return (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(value), 32);
		        };
		        values.forEach(function (value, index) {
		            var param = eventFragment.inputs[index];
		            if (!param.indexed) {
		                if (value != null) {
		                    logger.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
		                }
		                return;
		            }
		            if (value == null) {
		                topics.push(null);
		            }
		            else if (param.baseType === "array" || param.baseType === "tuple") {
		                logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
		            }
		            else if (Array.isArray(value)) {
		                topics.push(value.map(function (value) { return encodeTopic(param, value); }));
		            }
		            else {
		                topics.push(encodeTopic(param, value));
		            }
		        });
		        // Trim off trailing nulls
		        while (topics.length && topics[topics.length - 1] === null) {
		            topics.pop();
		        }
		        return topics;
		    };
		    Interface.prototype.encodeEventLog = function (eventFragment, values) {
		        var _this = this;
		        if (typeof (eventFragment) === "string") {
		            eventFragment = this.getEvent(eventFragment);
		        }
		        var topics = [];
		        var dataTypes = [];
		        var dataValues = [];
		        if (!eventFragment.anonymous) {
		            topics.push(this.getEventTopic(eventFragment));
		        }
		        if (values.length !== eventFragment.inputs.length) {
		            logger.throwArgumentError("event arguments/values mismatch", "values", values);
		        }
		        eventFragment.inputs.forEach(function (param, index) {
		            var value = values[index];
		            if (param.indexed) {
		                if (param.type === "string") {
		                    topics.push((0, hash_1.id)(value));
		                }
		                else if (param.type === "bytes") {
		                    topics.push((0, keccak256_1.keccak256)(value));
		                }
		                else if (param.baseType === "tuple" || param.baseType === "array") {
		                    // @TODO
		                    throw new Error("not implemented");
		                }
		                else {
		                    topics.push(_this._abiCoder.encode([param.type], [value]));
		                }
		            }
		            else {
		                dataTypes.push(param);
		                dataValues.push(value);
		            }
		        });
		        return {
		            data: this._abiCoder.encode(dataTypes, dataValues),
		            topics: topics
		        };
		    };
		    // Decode a filter for the event and the search criteria
		    Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {
		        if (typeof (eventFragment) === "string") {
		            eventFragment = this.getEvent(eventFragment);
		        }
		        if (topics != null && !eventFragment.anonymous) {
		            var topicHash = this.getEventTopic(eventFragment);
		            if (!(0, bytes_1.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
		                logger.throwError("fragment/topic mismatch", logger_1.Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
		            }
		            topics = topics.slice(1);
		        }
		        var indexed = [];
		        var nonIndexed = [];
		        var dynamic = [];
		        eventFragment.inputs.forEach(function (param, index) {
		            if (param.indexed) {
		                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
		                    indexed.push(fragments_1.ParamType.fromObject({ type: "bytes32", name: param.name }));
		                    dynamic.push(true);
		                }
		                else {
		                    indexed.push(param);
		                    dynamic.push(false);
		                }
		            }
		            else {
		                nonIndexed.push(param);
		                dynamic.push(false);
		            }
		        });
		        var resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, (0, bytes_1.concat)(topics)) : null;
		        var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
		        var result = [];
		        var nonIndexedIndex = 0, indexedIndex = 0;
		        eventFragment.inputs.forEach(function (param, index) {
		            if (param.indexed) {
		                if (resultIndexed == null) {
		                    result[index] = new Indexed({ _isIndexed: true, hash: null });
		                }
		                else if (dynamic[index]) {
		                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
		                }
		                else {
		                    try {
		                        result[index] = resultIndexed[indexedIndex++];
		                    }
		                    catch (error) {
		                        result[index] = error;
		                    }
		                }
		            }
		            else {
		                try {
		                    result[index] = resultNonIndexed[nonIndexedIndex++];
		                }
		                catch (error) {
		                    result[index] = error;
		                }
		            }
		            // Add the keyword argument if named and safe
		            if (param.name && result[param.name] == null) {
		                var value_1 = result[index];
		                // Make error named values throw on access
		                if (value_1 instanceof Error) {
		                    Object.defineProperty(result, param.name, {
		                        enumerable: true,
		                        get: function () { throw wrapAccessError("property " + JSON.stringify(param.name), value_1); }
		                    });
		                }
		                else {
		                    result[param.name] = value_1;
		                }
		            }
		        });
		        var _loop_1 = function (i) {
		            var value = result[i];
		            if (value instanceof Error) {
		                Object.defineProperty(result, i, {
		                    enumerable: true,
		                    get: function () { throw wrapAccessError("index " + i, value); }
		                });
		            }
		        };
		        // Make all error indexed values throw on access
		        for (var i = 0; i < result.length; i++) {
		            _loop_1(i);
		        }
		        return Object.freeze(result);
		    };
		    // Given a transaction, find the matching function fragment (if any) and
		    // determine all its properties and call parameters
		    Interface.prototype.parseTransaction = function (tx) {
		        var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
		        if (!fragment) {
		            return null;
		        }
		        return new TransactionDescription({
		            args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
		            functionFragment: fragment,
		            name: fragment.name,
		            signature: fragment.format(),
		            sighash: this.getSighash(fragment),
		            value: bignumber_1.BigNumber.from(tx.value || "0"),
		        });
		    };
		    // @TODO
		    //parseCallResult(data: BytesLike): ??
		    // Given an event log, find the matching event fragment (if any) and
		    // determine all its properties and values
		    Interface.prototype.parseLog = function (log) {
		        var fragment = this.getEvent(log.topics[0]);
		        if (!fragment || fragment.anonymous) {
		            return null;
		        }
		        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
		        //        Probably not, because just because it is the only event in the ABI does
		        //        not mean we have the full ABI; maybe just a fragment?
		        return new LogDescription({
		            eventFragment: fragment,
		            name: fragment.name,
		            signature: fragment.format(),
		            topic: this.getEventTopic(fragment),
		            args: this.decodeEventLog(fragment, log.data, log.topics)
		        });
		    };
		    Interface.prototype.parseError = function (data) {
		        var hexData = (0, bytes_1.hexlify)(data);
		        var fragment = this.getError(hexData.substring(0, 10).toLowerCase());
		        if (!fragment) {
		            return null;
		        }
		        return new ErrorDescription({
		            args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
		            errorFragment: fragment,
		            name: fragment.name,
		            signature: fragment.format(),
		            sighash: this.getSighash(fragment),
		        });
		    };
		    /*
		    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
		        if (Interface.isInterface(value)) {
		            return value;
		        }
		        if (typeof(value) === "string") {
		            return new Interface(JSON.parse(value));
		        }
		        return new Interface(value);
		    }
		    */
		    Interface.isInterface = function (value) {
		        return !!(value && value._isInterface);
		    };
		    return Interface;
		}());
		exports.Interface = Interface;
		
	} (_interface$1));

	var _interface = /*@__PURE__*/getDefaultExportFromCjs(_interface$1);

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = exports.Indexed = exports.Interface = exports.defaultAbiCoder = exports.AbiCoder = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = void 0;
		var fragments_1 = fragments$1;
		Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return fragments_1.ConstructorFragment; } });
		Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return fragments_1.ErrorFragment; } });
		Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return fragments_1.EventFragment; } });
		Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return fragments_1.FormatTypes; } });
		Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return fragments_1.Fragment; } });
		Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return fragments_1.FunctionFragment; } });
		Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return fragments_1.ParamType; } });
		var abi_coder_1 = abiCoder;
		Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi_coder_1.AbiCoder; } });
		Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abi_coder_1.defaultAbiCoder; } });
		var interface_1 = _interface$1;
		Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return interface_1.checkResultErrors; } });
		Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return interface_1.Indexed; } });
		Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return interface_1.Interface; } });
		Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return interface_1.LogDescription; } });
		Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return interface_1.TransactionDescription; } });
		
	} (lib$t));

	var index$d = /*@__PURE__*/getDefaultExportFromCjs(lib$t);

	var lib$g = {};

	var _version$g = {};

	"use strict";
	Object.defineProperty(_version$g, "__esModule", { value: true });
	var version$h = _version$g.version = void 0;
	version$h = _version$g.version = "abstract-provider/5.7.0";

	"use strict";
	var __extends$x = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$o = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$o = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(lib$g, "__esModule", { value: true });
	var Provider_1 = lib$g.Provider = TransactionOrderForkEvent_1 = lib$g.TransactionOrderForkEvent = TransactionForkEvent_1 = lib$g.TransactionForkEvent = BlockForkEvent_1 = lib$g.BlockForkEvent = ForkEvent_1 = lib$g.ForkEvent = void 0;
	var bignumber_1$9 = lib$s;
	var bytes_1$k = lib$r;
	var properties_1$k = lib$p;
	var logger_1$s = lib$q;
	var _version_1$s = _version$g;
	var logger$r = new logger_1$s.Logger(_version_1$s.version);
	;
	;
	//export type CallTransactionable = {
	//    call(transaction: TransactionRequest): Promise<TransactionResponse>;
	//};
	var ForkEvent = /** @class */ (function (_super) {
	    __extends$x(ForkEvent, _super);
	    function ForkEvent() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ForkEvent.isForkEvent = function (value) {
	        return !!(value && value._isForkEvent);
	    };
	    return ForkEvent;
	}(properties_1$k.Description));
	var ForkEvent_1 = lib$g.ForkEvent = ForkEvent;
	var BlockForkEvent = /** @class */ (function (_super) {
	    __extends$x(BlockForkEvent, _super);
	    function BlockForkEvent(blockHash, expiry) {
	        var _this = this;
	        if (!(0, bytes_1$k.isHexString)(blockHash, 32)) {
	            logger$r.throwArgumentError("invalid blockHash", "blockHash", blockHash);
	        }
	        _this = _super.call(this, {
	            _isForkEvent: true,
	            _isBlockForkEvent: true,
	            expiry: (expiry || 0),
	            blockHash: blockHash
	        }) || this;
	        return _this;
	    }
	    return BlockForkEvent;
	}(ForkEvent));
	var BlockForkEvent_1 = lib$g.BlockForkEvent = BlockForkEvent;
	var TransactionForkEvent = /** @class */ (function (_super) {
	    __extends$x(TransactionForkEvent, _super);
	    function TransactionForkEvent(hash, expiry) {
	        var _this = this;
	        if (!(0, bytes_1$k.isHexString)(hash, 32)) {
	            logger$r.throwArgumentError("invalid transaction hash", "hash", hash);
	        }
	        _this = _super.call(this, {
	            _isForkEvent: true,
	            _isTransactionForkEvent: true,
	            expiry: (expiry || 0),
	            hash: hash
	        }) || this;
	        return _this;
	    }
	    return TransactionForkEvent;
	}(ForkEvent));
	var TransactionForkEvent_1 = lib$g.TransactionForkEvent = TransactionForkEvent;
	var TransactionOrderForkEvent = /** @class */ (function (_super) {
	    __extends$x(TransactionOrderForkEvent, _super);
	    function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {
	        var _this = this;
	        if (!(0, bytes_1$k.isHexString)(beforeHash, 32)) {
	            logger$r.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
	        }
	        if (!(0, bytes_1$k.isHexString)(afterHash, 32)) {
	            logger$r.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
	        }
	        _this = _super.call(this, {
	            _isForkEvent: true,
	            _isTransactionOrderForkEvent: true,
	            expiry: (expiry || 0),
	            beforeHash: beforeHash,
	            afterHash: afterHash
	        }) || this;
	        return _this;
	    }
	    return TransactionOrderForkEvent;
	}(ForkEvent));
	var TransactionOrderForkEvent_1 = lib$g.TransactionOrderForkEvent = TransactionOrderForkEvent;
	///////////////////////////////
	// Exported Abstracts
	var Provider = /** @class */ (function () {
	    function Provider() {
	        var _newTarget = this.constructor;
	        logger$r.checkAbstract(_newTarget, Provider);
	        (0, properties_1$k.defineReadOnly)(this, "_isProvider", true);
	    }
	    Provider.prototype.getFeeData = function () {
	        return __awaiter$o(this, void 0, void 0, function () {
	            var _a, block, gasPrice, lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas;
	            return __generator$o(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, (0, properties_1$k.resolveProperties)({
	                            block: this.getBlock("latest"),
	                            gasPrice: this.getGasPrice().catch(function (error) {
	                                // @TODO: Why is this now failing on Calaveras?
	                                //console.log(error);
	                                return null;
	                            })
	                        })];
	                    case 1:
	                        _a = _b.sent(), block = _a.block, gasPrice = _a.gasPrice;
	                        lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
	                        if (block && block.baseFeePerGas) {
	                            // We may want to compute this more accurately in the future,
	                            // using the formula "check if the base fee is correct".
	                            // See: https://eips.ethereum.org/EIPS/eip-1559
	                            lastBaseFeePerGas = block.baseFeePerGas;
	                            maxPriorityFeePerGas = bignumber_1$9.BigNumber.from("1500000000");
	                            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
	                        }
	                        return [2 /*return*/, { lastBaseFeePerGas: lastBaseFeePerGas, maxFeePerGas: maxFeePerGas, maxPriorityFeePerGas: maxPriorityFeePerGas, gasPrice: gasPrice }];
	                }
	            });
	        });
	    };
	    // Alias for "on"
	    Provider.prototype.addListener = function (eventName, listener) {
	        return this.on(eventName, listener);
	    };
	    // Alias for "off"
	    Provider.prototype.removeListener = function (eventName, listener) {
	        return this.off(eventName, listener);
	    };
	    Provider.isProvider = function (value) {
	        return !!(value && value._isProvider);
	    };
	    return Provider;
	}());
	Provider_1 = lib$g.Provider = Provider;

	var lib$f = {};

	var _version$f = {};

	"use strict";
	Object.defineProperty(_version$f, "__esModule", { value: true });
	var version$g = _version$f.version = void 0;
	version$g = _version$f.version = "abstract-signer/5.7.0";

	"use strict";
	var __extends$w = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$n = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$n = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(lib$f, "__esModule", { value: true });
	var VoidSigner_1 = lib$f.VoidSigner = Signer_1 = lib$f.Signer = void 0;
	var properties_1$j = lib$p;
	var logger_1$r = lib$q;
	var _version_1$r = _version$f;
	var logger$q = new logger_1$r.Logger(_version_1$r.version);
	var allowedTransactionKeys$2 = [
	    "accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
	];
	var forwardErrors = [
	    logger_1$r.Logger.errors.INSUFFICIENT_FUNDS,
	    logger_1$r.Logger.errors.NONCE_EXPIRED,
	    logger_1$r.Logger.errors.REPLACEMENT_UNDERPRICED,
	];
	;
	;
	var Signer = /** @class */ (function () {
	    ///////////////////
	    // Sub-classes MUST call super
	    function Signer() {
	        var _newTarget = this.constructor;
	        logger$q.checkAbstract(_newTarget, Signer);
	        (0, properties_1$j.defineReadOnly)(this, "_isSigner", true);
	    }
	    ///////////////////
	    // Sub-classes MAY override these
	    Signer.prototype.getBalance = function (blockTag) {
	        return __awaiter$n(this, void 0, void 0, function () {
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getBalance");
	                        return [4 /*yield*/, this.provider.getBalance(this.getAddress(), blockTag)];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    Signer.prototype.getTransactionCount = function (blockTag) {
	        return __awaiter$n(this, void 0, void 0, function () {
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getTransactionCount");
	                        return [4 /*yield*/, this.provider.getTransactionCount(this.getAddress(), blockTag)];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    // Populates "from" if unspecified, and estimates the gas for the transaction
	    Signer.prototype.estimateGas = function (transaction) {
	        return __awaiter$n(this, void 0, void 0, function () {
	            var tx;
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("estimateGas");
	                        return [4 /*yield*/, (0, properties_1$j.resolveProperties)(this.checkTransaction(transaction))];
	                    case 1:
	                        tx = _a.sent();
	                        return [4 /*yield*/, this.provider.estimateGas(tx)];
	                    case 2: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    // Populates "from" if unspecified, and calls with the transaction
	    Signer.prototype.call = function (transaction, blockTag) {
	        return __awaiter$n(this, void 0, void 0, function () {
	            var tx;
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("call");
	                        return [4 /*yield*/, (0, properties_1$j.resolveProperties)(this.checkTransaction(transaction))];
	                    case 1:
	                        tx = _a.sent();
	                        return [4 /*yield*/, this.provider.call(tx, blockTag)];
	                    case 2: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    // Populates all fields in a transaction, signs it and sends it to the network
	    Signer.prototype.sendTransaction = function (transaction) {
	        return __awaiter$n(this, void 0, void 0, function () {
	            var tx, signedTx;
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("sendTransaction");
	                        return [4 /*yield*/, this.populateTransaction(transaction)];
	                    case 1:
	                        tx = _a.sent();
	                        return [4 /*yield*/, this.signTransaction(tx)];
	                    case 2:
	                        signedTx = _a.sent();
	                        return [4 /*yield*/, this.provider.sendTransaction(signedTx)];
	                    case 3: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    Signer.prototype.getChainId = function () {
	        return __awaiter$n(this, void 0, void 0, function () {
	            var network;
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getChainId");
	                        return [4 /*yield*/, this.provider.getNetwork()];
	                    case 1:
	                        network = _a.sent();
	                        return [2 /*return*/, network.chainId];
	                }
	            });
	        });
	    };
	    Signer.prototype.getGasPrice = function () {
	        return __awaiter$n(this, void 0, void 0, function () {
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getGasPrice");
	                        return [4 /*yield*/, this.provider.getGasPrice()];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    Signer.prototype.getFeeData = function () {
	        return __awaiter$n(this, void 0, void 0, function () {
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("getFeeData");
	                        return [4 /*yield*/, this.provider.getFeeData()];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    Signer.prototype.resolveName = function (name) {
	        return __awaiter$n(this, void 0, void 0, function () {
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._checkProvider("resolveName");
	                        return [4 /*yield*/, this.provider.resolveName(name)];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    // Checks a transaction does not contain invalid keys and if
	    // no "from" is provided, populates it.
	    // - does NOT require a provider
	    // - adds "from" is not present
	    // - returns a COPY (safe to mutate the result)
	    // By default called from: (overriding these prevents it)
	    //   - call
	    //   - estimateGas
	    //   - populateTransaction (and therefor sendTransaction)
	    Signer.prototype.checkTransaction = function (transaction) {
	        for (var key in transaction) {
	            if (allowedTransactionKeys$2.indexOf(key) === -1) {
	                logger$q.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
	            }
	        }
	        var tx = (0, properties_1$j.shallowCopy)(transaction);
	        if (tx.from == null) {
	            tx.from = this.getAddress();
	        }
	        else {
	            // Make sure any provided address matches this signer
	            tx.from = Promise.all([
	                Promise.resolve(tx.from),
	                this.getAddress()
	            ]).then(function (result) {
	                if (result[0].toLowerCase() !== result[1].toLowerCase()) {
	                    logger$q.throwArgumentError("from address mismatch", "transaction", transaction);
	                }
	                return result[0];
	            });
	        }
	        return tx;
	    };
	    // Populates ALL keys for a transaction and checks that "from" matches
	    // this Signer. Should be used by sendTransaction but NOT by signTransaction.
	    // By default called from: (overriding these prevents it)
	    //   - sendTransaction
	    //
	    // Notes:
	    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
	    Signer.prototype.populateTransaction = function (transaction) {
	        return __awaiter$n(this, void 0, void 0, function () {
	            var tx, hasEip1559, feeData, gasPrice;
	            var _this = this;
	            return __generator$n(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, (0, properties_1$j.resolveProperties)(this.checkTransaction(transaction))];
	                    case 1:
	                        tx = _a.sent();
	                        if (tx.to != null) {
	                            tx.to = Promise.resolve(tx.to).then(function (to) { return __awaiter$n(_this, void 0, void 0, function () {
	                                var address;
	                                return __generator$n(this, function (_a) {
	                                    switch (_a.label) {
	                                        case 0:
	                                            if (to == null) {
	                                                return [2 /*return*/, null];
	                                            }
	                                            return [4 /*yield*/, this.resolveName(to)];
	                                        case 1:
	                                            address = _a.sent();
	                                            if (address == null) {
	                                                logger$q.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
	                                            }
	                                            return [2 /*return*/, address];
	                                    }
	                                });
	                            }); });
	                            // Prevent this error from causing an UnhandledPromiseException
	                            tx.to.catch(function (error) { });
	                        }
	                        hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
	                        if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
	                            logger$q.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
	                        }
	                        else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
	                            logger$q.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
	                        }
	                        if (!((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null))) return [3 /*break*/, 2];
	                        // Fully-formed EIP-1559 transaction (skip getFeeData)
	                        tx.type = 2;
	                        return [3 /*break*/, 5];
	                    case 2:
	                        if (!(tx.type === 0 || tx.type === 1)) return [3 /*break*/, 3];
	                        // Explicit Legacy or EIP-2930 transaction
	                        // Populate missing gasPrice
	                        if (tx.gasPrice == null) {
	                            tx.gasPrice = this.getGasPrice();
	                        }
	                        return [3 /*break*/, 5];
	                    case 3: return [4 /*yield*/, this.getFeeData()];
	                    case 4:
	                        feeData = _a.sent();
	                        if (tx.type == null) {
	                            // We need to auto-detect the intended type of this transaction...
	                            if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
	                                // The network supports EIP-1559!
	                                // Upgrade transaction from null to eip-1559
	                                tx.type = 2;
	                                if (tx.gasPrice != null) {
	                                    gasPrice = tx.gasPrice;
	                                    delete tx.gasPrice;
	                                    tx.maxFeePerGas = gasPrice;
	                                    tx.maxPriorityFeePerGas = gasPrice;
	                                }
	                                else {
	                                    // Populate missing fee data
	                                    if (tx.maxFeePerGas == null) {
	                                        tx.maxFeePerGas = feeData.maxFeePerGas;
	                                    }
	                                    if (tx.maxPriorityFeePerGas == null) {
	                                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
	                                    }
	                                }
	                            }
	                            else if (feeData.gasPrice != null) {
	                                // Network doesn't support EIP-1559...
	                                // ...but they are trying to use EIP-1559 properties
	                                if (hasEip1559) {
	                                    logger$q.throwError("network does not support EIP-1559", logger_1$r.Logger.errors.UNSUPPORTED_OPERATION, {
	                                        operation: "populateTransaction"
	                                    });
	                                }
	                                // Populate missing fee data
	                                if (tx.gasPrice == null) {
	                                    tx.gasPrice = feeData.gasPrice;
	                                }
	                                // Explicitly set untyped transaction to legacy
	                                tx.type = 0;
	                            }
	                            else {
	                                // getFeeData has failed us.
	                                logger$q.throwError("failed to get consistent fee data", logger_1$r.Logger.errors.UNSUPPORTED_OPERATION, {
	                                    operation: "signer.getFeeData"
	                                });
	                            }
	                        }
	                        else if (tx.type === 2) {
	                            // Explicitly using EIP-1559
	                            // Populate missing fee data
	                            if (tx.maxFeePerGas == null) {
	                                tx.maxFeePerGas = feeData.maxFeePerGas;
	                            }
	                            if (tx.maxPriorityFeePerGas == null) {
	                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
	                            }
	                        }
	                        _a.label = 5;
	                    case 5:
	                        if (tx.nonce == null) {
	                            tx.nonce = this.getTransactionCount("pending");
	                        }
	                        if (tx.gasLimit == null) {
	                            tx.gasLimit = this.estimateGas(tx).catch(function (error) {
	                                if (forwardErrors.indexOf(error.code) >= 0) {
	                                    throw error;
	                                }
	                                return logger$q.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1$r.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
	                                    error: error,
	                                    tx: tx
	                                });
	                            });
	                        }
	                        if (tx.chainId == null) {
	                            tx.chainId = this.getChainId();
	                        }
	                        else {
	                            tx.chainId = Promise.all([
	                                Promise.resolve(tx.chainId),
	                                this.getChainId()
	                            ]).then(function (results) {
	                                if (results[1] !== 0 && results[0] !== results[1]) {
	                                    logger$q.throwArgumentError("chainId address mismatch", "transaction", transaction);
	                                }
	                                return results[0];
	                            });
	                        }
	                        return [4 /*yield*/, (0, properties_1$j.resolveProperties)(tx)];
	                    case 6: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    ///////////////////
	    // Sub-classes SHOULD leave these alone
	    Signer.prototype._checkProvider = function (operation) {
	        if (!this.provider) {
	            logger$q.throwError("missing provider", logger_1$r.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: (operation || "_checkProvider")
	            });
	        }
	    };
	    Signer.isSigner = function (value) {
	        return !!(value && value._isSigner);
	    };
	    return Signer;
	}());
	var Signer_1 = lib$f.Signer = Signer;
	var VoidSigner = /** @class */ (function (_super) {
	    __extends$w(VoidSigner, _super);
	    function VoidSigner(address, provider) {
	        var _this = _super.call(this) || this;
	        (0, properties_1$j.defineReadOnly)(_this, "address", address);
	        (0, properties_1$j.defineReadOnly)(_this, "provider", provider || null);
	        return _this;
	    }
	    VoidSigner.prototype.getAddress = function () {
	        return Promise.resolve(this.address);
	    };
	    VoidSigner.prototype._fail = function (message, operation) {
	        return Promise.resolve().then(function () {
	            logger$q.throwError(message, logger_1$r.Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });
	        });
	    };
	    VoidSigner.prototype.signMessage = function (message) {
	        return this._fail("VoidSigner cannot sign messages", "signMessage");
	    };
	    VoidSigner.prototype.signTransaction = function (transaction) {
	        return this._fail("VoidSigner cannot sign transactions", "signTransaction");
	    };
	    VoidSigner.prototype._signTypedData = function (domain, types, value) {
	        return this._fail("VoidSigner cannot sign typed data", "signTypedData");
	    };
	    VoidSigner.prototype.connect = function (provider) {
	        return new VoidSigner(this.address, provider);
	    };
	    return VoidSigner;
	}(Signer));
	VoidSigner_1 = lib$f.VoidSigner = VoidSigner;

	var lib$e = {};

	var lib$d = {};

	var elliptic$1 = {};

	var elliptic = {};

	var name = "elliptic";
	var version$f = "6.5.4";
	var description = "EC cryptography";
	var main = "lib/elliptic.js";
	var files = [
		"lib"
	];
	var scripts = {
		lint: "eslint lib test",
		"lint:fix": "npm run lint -- --fix",
		unit: "istanbul test _mocha --reporter=spec test/index.js",
		test: "npm run lint && npm run unit",
		version: "grunt dist && git add dist/"
	};
	var repository = {
		type: "git",
		url: "git@github.com:indutny/elliptic"
	};
	var keywords = [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	];
	var author = "Fedor Indutny <fedor@indutny.com>";
	var license = "MIT";
	var bugs = {
		url: "https://github.com/indutny/elliptic/issues"
	};
	var homepage = "https://github.com/indutny/elliptic";
	var devDependencies = {
		brfs: "^2.0.2",
		coveralls: "^3.1.0",
		eslint: "^7.6.0",
		grunt: "^1.2.1",
		"grunt-browserify": "^5.3.0",
		"grunt-cli": "^1.3.2",
		"grunt-contrib-connect": "^3.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^5.0.0",
		"grunt-mocha-istanbul": "^5.0.2",
		"grunt-saucelabs": "^9.0.1",
		istanbul: "^0.4.5",
		mocha: "^8.0.1"
	};
	var dependencies = {
		"bn.js": "^4.11.9",
		brorand: "^1.1.0",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.1",
		inherits: "^2.0.4",
		"minimalistic-assert": "^1.0.1",
		"minimalistic-crypto-utils": "^1.0.1"
	};
	var require$$0 = {
		name: name,
		version: version$f,
		description: description,
		main: main,
		files: files,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		dependencies: dependencies
	};

	var utils$p = {};

	var bnExports = {};
	var bn$1 = {
	  get exports(){ return bnExports; },
	  set exports(v){ bnExports = v; },
	};

	(function (module) {
		(function (module, exports) {
		  'use strict';

		  // Utils
		  function assert (val, msg) {
		    if (!val) throw new Error(msg || 'Assertion failed');
		  }

		  // Could use `inherits` module, but don't want to move from single file
		  // architecture yet.
		  function inherits (ctor, superCtor) {
		    ctor.super_ = superCtor;
		    var TempCtor = function () {};
		    TempCtor.prototype = superCtor.prototype;
		    ctor.prototype = new TempCtor();
		    ctor.prototype.constructor = ctor;
		  }

		  // BN

		  function BN (number, base, endian) {
		    if (BN.isBN(number)) {
		      return number;
		    }

		    this.negative = 0;
		    this.words = null;
		    this.length = 0;

		    // Reduction context
		    this.red = null;

		    if (number !== null) {
		      if (base === 'le' || base === 'be') {
		        endian = base;
		        base = 10;
		      }

		      this._init(number || 0, base || 10, endian || 'be');
		    }
		  }
		  if (typeof module === 'object') {
		    module.exports = BN;
		  } else {
		    exports.BN = BN;
		  }

		  BN.BN = BN;
		  BN.wordSize = 26;

		  var Buffer;
		  try {
		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		      Buffer = window.Buffer;
		    } else {
		      Buffer = require$$0$2.Buffer;
		    }
		  } catch (e) {
		  }

		  BN.isBN = function isBN (num) {
		    if (num instanceof BN) {
		      return true;
		    }

		    return num !== null && typeof num === 'object' &&
		      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
		  };

		  BN.max = function max (left, right) {
		    if (left.cmp(right) > 0) return left;
		    return right;
		  };

		  BN.min = function min (left, right) {
		    if (left.cmp(right) < 0) return left;
		    return right;
		  };

		  BN.prototype._init = function init (number, base, endian) {
		    if (typeof number === 'number') {
		      return this._initNumber(number, base, endian);
		    }

		    if (typeof number === 'object') {
		      return this._initArray(number, base, endian);
		    }

		    if (base === 'hex') {
		      base = 16;
		    }
		    assert(base === (base | 0) && base >= 2 && base <= 36);

		    number = number.toString().replace(/\s+/g, '');
		    var start = 0;
		    if (number[0] === '-') {
		      start++;
		      this.negative = 1;
		    }

		    if (start < number.length) {
		      if (base === 16) {
		        this._parseHex(number, start, endian);
		      } else {
		        this._parseBase(number, base, start);
		        if (endian === 'le') {
		          this._initArray(this.toArray(), base, endian);
		        }
		      }
		    }
		  };

		  BN.prototype._initNumber = function _initNumber (number, base, endian) {
		    if (number < 0) {
		      this.negative = 1;
		      number = -number;
		    }
		    if (number < 0x4000000) {
		      this.words = [ number & 0x3ffffff ];
		      this.length = 1;
		    } else if (number < 0x10000000000000) {
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff
		      ];
		      this.length = 2;
		    } else {
		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff,
		        1
		      ];
		      this.length = 3;
		    }

		    if (endian !== 'le') return;

		    // Reverse the bytes
		    this._initArray(this.toArray(), base, endian);
		  };

		  BN.prototype._initArray = function _initArray (number, base, endian) {
		    // Perhaps a Uint8Array
		    assert(typeof number.length === 'number');
		    if (number.length <= 0) {
		      this.words = [ 0 ];
		      this.length = 1;
		      return this;
		    }

		    this.length = Math.ceil(number.length / 3);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    var j, w;
		    var off = 0;
		    if (endian === 'be') {
		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
		        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    } else if (endian === 'le') {
		      for (i = 0, j = 0; i < number.length; i += 3) {
		        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    }
		    return this.strip();
		  };

		  function parseHex4Bits (string, index) {
		    var c = string.charCodeAt(index);
		    // 'A' - 'F'
		    if (c >= 65 && c <= 70) {
		      return c - 55;
		    // 'a' - 'f'
		    } else if (c >= 97 && c <= 102) {
		      return c - 87;
		    // '0' - '9'
		    } else {
		      return (c - 48) & 0xf;
		    }
		  }

		  function parseHexByte (string, lowerBound, index) {
		    var r = parseHex4Bits(string, index);
		    if (index - 1 >= lowerBound) {
		      r |= parseHex4Bits(string, index - 1) << 4;
		    }
		    return r;
		  }

		  BN.prototype._parseHex = function _parseHex (number, start, endian) {
		    // Create possibly bigger array to ensure that it fits the number
		    this.length = Math.ceil((number.length - start) / 6);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    // 24-bits chunks
		    var off = 0;
		    var j = 0;

		    var w;
		    if (endian === 'be') {
		      for (i = number.length - 1; i >= start; i -= 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    } else {
		      var parseLength = number.length - start;
		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    }

		    this.strip();
		  };

		  function parseBase (str, start, end, mul) {
		    var r = 0;
		    var len = Math.min(str.length, end);
		    for (var i = start; i < len; i++) {
		      var c = str.charCodeAt(i) - 48;

		      r *= mul;

		      // 'a'
		      if (c >= 49) {
		        r += c - 49 + 0xa;

		      // 'A'
		      } else if (c >= 17) {
		        r += c - 17 + 0xa;

		      // '0' - '9'
		      } else {
		        r += c;
		      }
		    }
		    return r;
		  }

		  BN.prototype._parseBase = function _parseBase (number, base, start) {
		    // Initialize as zero
		    this.words = [ 0 ];
		    this.length = 1;

		    // Find length of limb in base
		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		      limbLen++;
		    }
		    limbLen--;
		    limbPow = (limbPow / base) | 0;

		    var total = number.length - start;
		    var mod = total % limbLen;
		    var end = Math.min(total, total - mod) + start;

		    var word = 0;
		    for (var i = start; i < end; i += limbLen) {
		      word = parseBase(number, i, i + limbLen, base);

		      this.imuln(limbPow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    if (mod !== 0) {
		      var pow = 1;
		      word = parseBase(number, i, number.length, base);

		      for (i = 0; i < mod; i++) {
		        pow *= base;
		      }

		      this.imuln(pow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    this.strip();
		  };

		  BN.prototype.copy = function copy (dest) {
		    dest.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      dest.words[i] = this.words[i];
		    }
		    dest.length = this.length;
		    dest.negative = this.negative;
		    dest.red = this.red;
		  };

		  BN.prototype.clone = function clone () {
		    var r = new BN(null);
		    this.copy(r);
		    return r;
		  };

		  BN.prototype._expand = function _expand (size) {
		    while (this.length < size) {
		      this.words[this.length++] = 0;
		    }
		    return this;
		  };

		  // Remove leading `0` from `this`
		  BN.prototype.strip = function strip () {
		    while (this.length > 1 && this.words[this.length - 1] === 0) {
		      this.length--;
		    }
		    return this._normSign();
		  };

		  BN.prototype._normSign = function _normSign () {
		    // -0 = 0
		    if (this.length === 1 && this.words[0] === 0) {
		      this.negative = 0;
		    }
		    return this;
		  };

		  BN.prototype.inspect = function inspect () {
		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
		  };

		  /*

		  var zeros = [];
		  var groupSizes = [];
		  var groupBases = [];

		  var s = '';
		  var i = -1;
		  while (++i < BN.wordSize) {
		    zeros[i] = s;
		    s += '0';
		  }
		  groupSizes[0] = 0;
		  groupSizes[1] = 0;
		  groupBases[0] = 0;
		  groupBases[1] = 0;
		  var base = 2 - 1;
		  while (++base < 36 + 1) {
		    var groupSize = 0;
		    var groupBase = 1;
		    while (groupBase < (1 << BN.wordSize) / base) {
		      groupBase *= base;
		      groupSize += 1;
		    }
		    groupSizes[base] = groupSize;
		    groupBases[base] = groupBase;
		  }

		  */

		  var zeros = [
		    '',
		    '0',
		    '00',
		    '000',
		    '0000',
		    '00000',
		    '000000',
		    '0000000',
		    '00000000',
		    '000000000',
		    '0000000000',
		    '00000000000',
		    '000000000000',
		    '0000000000000',
		    '00000000000000',
		    '000000000000000',
		    '0000000000000000',
		    '00000000000000000',
		    '000000000000000000',
		    '0000000000000000000',
		    '00000000000000000000',
		    '000000000000000000000',
		    '0000000000000000000000',
		    '00000000000000000000000',
		    '000000000000000000000000',
		    '0000000000000000000000000'
		  ];

		  var groupSizes = [
		    0, 0,
		    25, 16, 12, 11, 10, 9, 8,
		    8, 7, 7, 7, 7, 6, 6,
		    6, 6, 6, 6, 6, 5, 5,
		    5, 5, 5, 5, 5, 5, 5,
		    5, 5, 5, 5, 5, 5, 5
		  ];

		  var groupBases = [
		    0, 0,
		    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
		    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
		    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
		    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
		    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
		  ];

		  BN.prototype.toString = function toString (base, padding) {
		    base = base || 10;
		    padding = padding | 0 || 1;

		    var out;
		    if (base === 16 || base === 'hex') {
		      out = '';
		      var off = 0;
		      var carry = 0;
		      for (var i = 0; i < this.length; i++) {
		        var w = this.words[i];
		        var word = (((w << off) | carry) & 0xffffff).toString(16);
		        carry = (w >>> (24 - off)) & 0xffffff;
		        if (carry !== 0 || i !== this.length - 1) {
		          out = zeros[6 - word.length] + word + out;
		        } else {
		          out = word + out;
		        }
		        off += 2;
		        if (off >= 26) {
		          off -= 26;
		          i--;
		        }
		      }
		      if (carry !== 0) {
		        out = carry.toString(16) + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    if (base === (base | 0) && base >= 2 && base <= 36) {
		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		      var groupSize = groupSizes[base];
		      // var groupBase = Math.pow(base, groupSize);
		      var groupBase = groupBases[base];
		      out = '';
		      var c = this.clone();
		      c.negative = 0;
		      while (!c.isZero()) {
		        var r = c.modn(groupBase).toString(base);
		        c = c.idivn(groupBase);

		        if (!c.isZero()) {
		          out = zeros[groupSize - r.length] + r + out;
		        } else {
		          out = r + out;
		        }
		      }
		      if (this.isZero()) {
		        out = '0' + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    assert(false, 'Base should be between 2 and 36');
		  };

		  BN.prototype.toNumber = function toNumber () {
		    var ret = this.words[0];
		    if (this.length === 2) {
		      ret += this.words[1] * 0x4000000;
		    } else if (this.length === 3 && this.words[2] === 0x01) {
		      // NOTE: at this stage it is known that the top bit is set
		      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
		    } else if (this.length > 2) {
		      assert(false, 'Number can only safely store up to 53 bits');
		    }
		    return (this.negative !== 0) ? -ret : ret;
		  };

		  BN.prototype.toJSON = function toJSON () {
		    return this.toString(16);
		  };

		  BN.prototype.toBuffer = function toBuffer (endian, length) {
		    assert(typeof Buffer !== 'undefined');
		    return this.toArrayLike(Buffer, endian, length);
		  };

		  BN.prototype.toArray = function toArray (endian, length) {
		    return this.toArrayLike(Array, endian, length);
		  };

		  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
		    var byteLength = this.byteLength();
		    var reqLength = length || Math.max(1, byteLength);
		    assert(byteLength <= reqLength, 'byte array longer than desired length');
		    assert(reqLength > 0, 'Requested array length <= 0');

		    this.strip();
		    var littleEndian = endian === 'le';
		    var res = new ArrayType(reqLength);

		    var b, i;
		    var q = this.clone();
		    if (!littleEndian) {
		      // Assume big-endian
		      for (i = 0; i < reqLength - byteLength; i++) {
		        res[i] = 0;
		      }

		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);

		        res[reqLength - i - 1] = b;
		      }
		    } else {
		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);

		        res[i] = b;
		      }

		      for (; i < reqLength; i++) {
		        res[i] = 0;
		      }
		    }

		    return res;
		  };

		  if (Math.clz32) {
		    BN.prototype._countBits = function _countBits (w) {
		      return 32 - Math.clz32(w);
		    };
		  } else {
		    BN.prototype._countBits = function _countBits (w) {
		      var t = w;
		      var r = 0;
		      if (t >= 0x1000) {
		        r += 13;
		        t >>>= 13;
		      }
		      if (t >= 0x40) {
		        r += 7;
		        t >>>= 7;
		      }
		      if (t >= 0x8) {
		        r += 4;
		        t >>>= 4;
		      }
		      if (t >= 0x02) {
		        r += 2;
		        t >>>= 2;
		      }
		      return r + t;
		    };
		  }

		  BN.prototype._zeroBits = function _zeroBits (w) {
		    // Short-cut
		    if (w === 0) return 26;

		    var t = w;
		    var r = 0;
		    if ((t & 0x1fff) === 0) {
		      r += 13;
		      t >>>= 13;
		    }
		    if ((t & 0x7f) === 0) {
		      r += 7;
		      t >>>= 7;
		    }
		    if ((t & 0xf) === 0) {
		      r += 4;
		      t >>>= 4;
		    }
		    if ((t & 0x3) === 0) {
		      r += 2;
		      t >>>= 2;
		    }
		    if ((t & 0x1) === 0) {
		      r++;
		    }
		    return r;
		  };

		  // Return number of used bits in a BN
		  BN.prototype.bitLength = function bitLength () {
		    var w = this.words[this.length - 1];
		    var hi = this._countBits(w);
		    return (this.length - 1) * 26 + hi;
		  };

		  function toBitArray (num) {
		    var w = new Array(num.bitLength());

		    for (var bit = 0; bit < w.length; bit++) {
		      var off = (bit / 26) | 0;
		      var wbit = bit % 26;

		      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
		    }

		    return w;
		  }

		  // Number of trailing zero bits
		  BN.prototype.zeroBits = function zeroBits () {
		    if (this.isZero()) return 0;

		    var r = 0;
		    for (var i = 0; i < this.length; i++) {
		      var b = this._zeroBits(this.words[i]);
		      r += b;
		      if (b !== 26) break;
		    }
		    return r;
		  };

		  BN.prototype.byteLength = function byteLength () {
		    return Math.ceil(this.bitLength() / 8);
		  };

		  BN.prototype.toTwos = function toTwos (width) {
		    if (this.negative !== 0) {
		      return this.abs().inotn(width).iaddn(1);
		    }
		    return this.clone();
		  };

		  BN.prototype.fromTwos = function fromTwos (width) {
		    if (this.testn(width - 1)) {
		      return this.notn(width).iaddn(1).ineg();
		    }
		    return this.clone();
		  };

		  BN.prototype.isNeg = function isNeg () {
		    return this.negative !== 0;
		  };

		  // Return negative clone of `this`
		  BN.prototype.neg = function neg () {
		    return this.clone().ineg();
		  };

		  BN.prototype.ineg = function ineg () {
		    if (!this.isZero()) {
		      this.negative ^= 1;
		    }

		    return this;
		  };

		  // Or `num` with `this` in-place
		  BN.prototype.iuor = function iuor (num) {
		    while (this.length < num.length) {
		      this.words[this.length++] = 0;
		    }

		    for (var i = 0; i < num.length; i++) {
		      this.words[i] = this.words[i] | num.words[i];
		    }

		    return this.strip();
		  };

		  BN.prototype.ior = function ior (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuor(num);
		  };

		  // Or `num` with `this`
		  BN.prototype.or = function or (num) {
		    if (this.length > num.length) return this.clone().ior(num);
		    return num.clone().ior(this);
		  };

		  BN.prototype.uor = function uor (num) {
		    if (this.length > num.length) return this.clone().iuor(num);
		    return num.clone().iuor(this);
		  };

		  // And `num` with `this` in-place
		  BN.prototype.iuand = function iuand (num) {
		    // b = min-length(num, this)
		    var b;
		    if (this.length > num.length) {
		      b = num;
		    } else {
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = this.words[i] & num.words[i];
		    }

		    this.length = b.length;

		    return this.strip();
		  };

		  BN.prototype.iand = function iand (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuand(num);
		  };

		  // And `num` with `this`
		  BN.prototype.and = function and (num) {
		    if (this.length > num.length) return this.clone().iand(num);
		    return num.clone().iand(this);
		  };

		  BN.prototype.uand = function uand (num) {
		    if (this.length > num.length) return this.clone().iuand(num);
		    return num.clone().iuand(this);
		  };

		  // Xor `num` with `this` in-place
		  BN.prototype.iuxor = function iuxor (num) {
		    // a.length > b.length
		    var a;
		    var b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = a.words[i] ^ b.words[i];
		    }

		    if (this !== a) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = a.length;

		    return this.strip();
		  };

		  BN.prototype.ixor = function ixor (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuxor(num);
		  };

		  // Xor `num` with `this`
		  BN.prototype.xor = function xor (num) {
		    if (this.length > num.length) return this.clone().ixor(num);
		    return num.clone().ixor(this);
		  };

		  BN.prototype.uxor = function uxor (num) {
		    if (this.length > num.length) return this.clone().iuxor(num);
		    return num.clone().iuxor(this);
		  };

		  // Not ``this`` with ``width`` bitwidth
		  BN.prototype.inotn = function inotn (width) {
		    assert(typeof width === 'number' && width >= 0);

		    var bytesNeeded = Math.ceil(width / 26) | 0;
		    var bitsLeft = width % 26;

		    // Extend the buffer with leading zeroes
		    this._expand(bytesNeeded);

		    if (bitsLeft > 0) {
		      bytesNeeded--;
		    }

		    // Handle complete words
		    for (var i = 0; i < bytesNeeded; i++) {
		      this.words[i] = ~this.words[i] & 0x3ffffff;
		    }

		    // Handle the residue
		    if (bitsLeft > 0) {
		      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
		    }

		    // And remove leading zeroes
		    return this.strip();
		  };

		  BN.prototype.notn = function notn (width) {
		    return this.clone().inotn(width);
		  };

		  // Set `bit` of `this`
		  BN.prototype.setn = function setn (bit, val) {
		    assert(typeof bit === 'number' && bit >= 0);

		    var off = (bit / 26) | 0;
		    var wbit = bit % 26;

		    this._expand(off + 1);

		    if (val) {
		      this.words[off] = this.words[off] | (1 << wbit);
		    } else {
		      this.words[off] = this.words[off] & ~(1 << wbit);
		    }

		    return this.strip();
		  };

		  // Add `num` to `this` in-place
		  BN.prototype.iadd = function iadd (num) {
		    var r;

		    // negative + positive
		    if (this.negative !== 0 && num.negative === 0) {
		      this.negative = 0;
		      r = this.isub(num);
		      this.negative ^= 1;
		      return this._normSign();

		    // positive + negative
		    } else if (this.negative === 0 && num.negative !== 0) {
		      num.negative = 0;
		      r = this.isub(num);
		      num.negative = 1;
		      return r._normSign();
		    }

		    // a.length > b.length
		    var a, b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }

		    this.length = a.length;
		    if (carry !== 0) {
		      this.words[this.length] = carry;
		      this.length++;
		    // Copy the rest of the words
		    } else if (a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    return this;
		  };

		  // Add `num` to `this`
		  BN.prototype.add = function add (num) {
		    var res;
		    if (num.negative !== 0 && this.negative === 0) {
		      num.negative = 0;
		      res = this.sub(num);
		      num.negative ^= 1;
		      return res;
		    } else if (num.negative === 0 && this.negative !== 0) {
		      this.negative = 0;
		      res = num.sub(this);
		      this.negative = 1;
		      return res;
		    }

		    if (this.length > num.length) return this.clone().iadd(num);

		    return num.clone().iadd(this);
		  };

		  // Subtract `num` from `this` in-place
		  BN.prototype.isub = function isub (num) {
		    // this - (-num) = this + num
		    if (num.negative !== 0) {
		      num.negative = 0;
		      var r = this.iadd(num);
		      num.negative = 1;
		      return r._normSign();

		    // -this - num = -(this + num)
		    } else if (this.negative !== 0) {
		      this.negative = 0;
		      this.iadd(num);
		      this.negative = 1;
		      return this._normSign();
		    }

		    // At this point both numbers are positive
		    var cmp = this.cmp(num);

		    // Optimization - zeroify
		    if (cmp === 0) {
		      this.negative = 0;
		      this.length = 1;
		      this.words[0] = 0;
		      return this;
		    }

		    // a > b
		    var a, b;
		    if (cmp > 0) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }

		    // Copy rest of the words
		    if (carry === 0 && i < a.length && a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = Math.max(this.length, i);

		    if (a !== this) {
		      this.negative = 1;
		    }

		    return this.strip();
		  };

		  // Subtract `num` from `this`
		  BN.prototype.sub = function sub (num) {
		    return this.clone().isub(num);
		  };

		  function smallMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    var len = (self.length + num.length) | 0;
		    out.length = len;
		    len = (len - 1) | 0;

		    // Peel one iteration (compiler can't do it, because of code complexity)
		    var a = self.words[0] | 0;
		    var b = num.words[0] | 0;
		    var r = a * b;

		    var lo = r & 0x3ffffff;
		    var carry = (r / 0x4000000) | 0;
		    out.words[0] = lo;

		    for (var k = 1; k < len; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = carry >>> 26;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = (k - j) | 0;
		        a = self.words[i] | 0;
		        b = num.words[j] | 0;
		        r = a * b + rword;
		        ncarry += (r / 0x4000000) | 0;
		        rword = r & 0x3ffffff;
		      }
		      out.words[k] = rword | 0;
		      carry = ncarry | 0;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry | 0;
		    } else {
		      out.length--;
		    }

		    return out.strip();
		  }

		  // TODO(indutny): it may be reasonable to omit it for users who don't need
		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
		  // multiplication (like elliptic secp256k1).
		  var comb10MulTo = function comb10MulTo (self, num, out) {
		    var a = self.words;
		    var b = num.words;
		    var o = out.words;
		    var c = 0;
		    var lo;
		    var mid;
		    var hi;
		    var a0 = a[0] | 0;
		    var al0 = a0 & 0x1fff;
		    var ah0 = a0 >>> 13;
		    var a1 = a[1] | 0;
		    var al1 = a1 & 0x1fff;
		    var ah1 = a1 >>> 13;
		    var a2 = a[2] | 0;
		    var al2 = a2 & 0x1fff;
		    var ah2 = a2 >>> 13;
		    var a3 = a[3] | 0;
		    var al3 = a3 & 0x1fff;
		    var ah3 = a3 >>> 13;
		    var a4 = a[4] | 0;
		    var al4 = a4 & 0x1fff;
		    var ah4 = a4 >>> 13;
		    var a5 = a[5] | 0;
		    var al5 = a5 & 0x1fff;
		    var ah5 = a5 >>> 13;
		    var a6 = a[6] | 0;
		    var al6 = a6 & 0x1fff;
		    var ah6 = a6 >>> 13;
		    var a7 = a[7] | 0;
		    var al7 = a7 & 0x1fff;
		    var ah7 = a7 >>> 13;
		    var a8 = a[8] | 0;
		    var al8 = a8 & 0x1fff;
		    var ah8 = a8 >>> 13;
		    var a9 = a[9] | 0;
		    var al9 = a9 & 0x1fff;
		    var ah9 = a9 >>> 13;
		    var b0 = b[0] | 0;
		    var bl0 = b0 & 0x1fff;
		    var bh0 = b0 >>> 13;
		    var b1 = b[1] | 0;
		    var bl1 = b1 & 0x1fff;
		    var bh1 = b1 >>> 13;
		    var b2 = b[2] | 0;
		    var bl2 = b2 & 0x1fff;
		    var bh2 = b2 >>> 13;
		    var b3 = b[3] | 0;
		    var bl3 = b3 & 0x1fff;
		    var bh3 = b3 >>> 13;
		    var b4 = b[4] | 0;
		    var bl4 = b4 & 0x1fff;
		    var bh4 = b4 >>> 13;
		    var b5 = b[5] | 0;
		    var bl5 = b5 & 0x1fff;
		    var bh5 = b5 >>> 13;
		    var b6 = b[6] | 0;
		    var bl6 = b6 & 0x1fff;
		    var bh6 = b6 >>> 13;
		    var b7 = b[7] | 0;
		    var bl7 = b7 & 0x1fff;
		    var bh7 = b7 >>> 13;
		    var b8 = b[8] | 0;
		    var bl8 = b8 & 0x1fff;
		    var bh8 = b8 >>> 13;
		    var b9 = b[9] | 0;
		    var bl9 = b9 & 0x1fff;
		    var bh9 = b9 >>> 13;

		    out.negative = self.negative ^ num.negative;
		    out.length = 19;
		    /* k = 0 */
		    lo = Math.imul(al0, bl0);
		    mid = Math.imul(al0, bh0);
		    mid = (mid + Math.imul(ah0, bl0)) | 0;
		    hi = Math.imul(ah0, bh0);
		    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
		    w0 &= 0x3ffffff;
		    /* k = 1 */
		    lo = Math.imul(al1, bl0);
		    mid = Math.imul(al1, bh0);
		    mid = (mid + Math.imul(ah1, bl0)) | 0;
		    hi = Math.imul(ah1, bh0);
		    lo = (lo + Math.imul(al0, bl1)) | 0;
		    mid = (mid + Math.imul(al0, bh1)) | 0;
		    mid = (mid + Math.imul(ah0, bl1)) | 0;
		    hi = (hi + Math.imul(ah0, bh1)) | 0;
		    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
		    w1 &= 0x3ffffff;
		    /* k = 2 */
		    lo = Math.imul(al2, bl0);
		    mid = Math.imul(al2, bh0);
		    mid = (mid + Math.imul(ah2, bl0)) | 0;
		    hi = Math.imul(ah2, bh0);
		    lo = (lo + Math.imul(al1, bl1)) | 0;
		    mid = (mid + Math.imul(al1, bh1)) | 0;
		    mid = (mid + Math.imul(ah1, bl1)) | 0;
		    hi = (hi + Math.imul(ah1, bh1)) | 0;
		    lo = (lo + Math.imul(al0, bl2)) | 0;
		    mid = (mid + Math.imul(al0, bh2)) | 0;
		    mid = (mid + Math.imul(ah0, bl2)) | 0;
		    hi = (hi + Math.imul(ah0, bh2)) | 0;
		    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
		    w2 &= 0x3ffffff;
		    /* k = 3 */
		    lo = Math.imul(al3, bl0);
		    mid = Math.imul(al3, bh0);
		    mid = (mid + Math.imul(ah3, bl0)) | 0;
		    hi = Math.imul(ah3, bh0);
		    lo = (lo + Math.imul(al2, bl1)) | 0;
		    mid = (mid + Math.imul(al2, bh1)) | 0;
		    mid = (mid + Math.imul(ah2, bl1)) | 0;
		    hi = (hi + Math.imul(ah2, bh1)) | 0;
		    lo = (lo + Math.imul(al1, bl2)) | 0;
		    mid = (mid + Math.imul(al1, bh2)) | 0;
		    mid = (mid + Math.imul(ah1, bl2)) | 0;
		    hi = (hi + Math.imul(ah1, bh2)) | 0;
		    lo = (lo + Math.imul(al0, bl3)) | 0;
		    mid = (mid + Math.imul(al0, bh3)) | 0;
		    mid = (mid + Math.imul(ah0, bl3)) | 0;
		    hi = (hi + Math.imul(ah0, bh3)) | 0;
		    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
		    w3 &= 0x3ffffff;
		    /* k = 4 */
		    lo = Math.imul(al4, bl0);
		    mid = Math.imul(al4, bh0);
		    mid = (mid + Math.imul(ah4, bl0)) | 0;
		    hi = Math.imul(ah4, bh0);
		    lo = (lo + Math.imul(al3, bl1)) | 0;
		    mid = (mid + Math.imul(al3, bh1)) | 0;
		    mid = (mid + Math.imul(ah3, bl1)) | 0;
		    hi = (hi + Math.imul(ah3, bh1)) | 0;
		    lo = (lo + Math.imul(al2, bl2)) | 0;
		    mid = (mid + Math.imul(al2, bh2)) | 0;
		    mid = (mid + Math.imul(ah2, bl2)) | 0;
		    hi = (hi + Math.imul(ah2, bh2)) | 0;
		    lo = (lo + Math.imul(al1, bl3)) | 0;
		    mid = (mid + Math.imul(al1, bh3)) | 0;
		    mid = (mid + Math.imul(ah1, bl3)) | 0;
		    hi = (hi + Math.imul(ah1, bh3)) | 0;
		    lo = (lo + Math.imul(al0, bl4)) | 0;
		    mid = (mid + Math.imul(al0, bh4)) | 0;
		    mid = (mid + Math.imul(ah0, bl4)) | 0;
		    hi = (hi + Math.imul(ah0, bh4)) | 0;
		    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
		    w4 &= 0x3ffffff;
		    /* k = 5 */
		    lo = Math.imul(al5, bl0);
		    mid = Math.imul(al5, bh0);
		    mid = (mid + Math.imul(ah5, bl0)) | 0;
		    hi = Math.imul(ah5, bh0);
		    lo = (lo + Math.imul(al4, bl1)) | 0;
		    mid = (mid + Math.imul(al4, bh1)) | 0;
		    mid = (mid + Math.imul(ah4, bl1)) | 0;
		    hi = (hi + Math.imul(ah4, bh1)) | 0;
		    lo = (lo + Math.imul(al3, bl2)) | 0;
		    mid = (mid + Math.imul(al3, bh2)) | 0;
		    mid = (mid + Math.imul(ah3, bl2)) | 0;
		    hi = (hi + Math.imul(ah3, bh2)) | 0;
		    lo = (lo + Math.imul(al2, bl3)) | 0;
		    mid = (mid + Math.imul(al2, bh3)) | 0;
		    mid = (mid + Math.imul(ah2, bl3)) | 0;
		    hi = (hi + Math.imul(ah2, bh3)) | 0;
		    lo = (lo + Math.imul(al1, bl4)) | 0;
		    mid = (mid + Math.imul(al1, bh4)) | 0;
		    mid = (mid + Math.imul(ah1, bl4)) | 0;
		    hi = (hi + Math.imul(ah1, bh4)) | 0;
		    lo = (lo + Math.imul(al0, bl5)) | 0;
		    mid = (mid + Math.imul(al0, bh5)) | 0;
		    mid = (mid + Math.imul(ah0, bl5)) | 0;
		    hi = (hi + Math.imul(ah0, bh5)) | 0;
		    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
		    w5 &= 0x3ffffff;
		    /* k = 6 */
		    lo = Math.imul(al6, bl0);
		    mid = Math.imul(al6, bh0);
		    mid = (mid + Math.imul(ah6, bl0)) | 0;
		    hi = Math.imul(ah6, bh0);
		    lo = (lo + Math.imul(al5, bl1)) | 0;
		    mid = (mid + Math.imul(al5, bh1)) | 0;
		    mid = (mid + Math.imul(ah5, bl1)) | 0;
		    hi = (hi + Math.imul(ah5, bh1)) | 0;
		    lo = (lo + Math.imul(al4, bl2)) | 0;
		    mid = (mid + Math.imul(al4, bh2)) | 0;
		    mid = (mid + Math.imul(ah4, bl2)) | 0;
		    hi = (hi + Math.imul(ah4, bh2)) | 0;
		    lo = (lo + Math.imul(al3, bl3)) | 0;
		    mid = (mid + Math.imul(al3, bh3)) | 0;
		    mid = (mid + Math.imul(ah3, bl3)) | 0;
		    hi = (hi + Math.imul(ah3, bh3)) | 0;
		    lo = (lo + Math.imul(al2, bl4)) | 0;
		    mid = (mid + Math.imul(al2, bh4)) | 0;
		    mid = (mid + Math.imul(ah2, bl4)) | 0;
		    hi = (hi + Math.imul(ah2, bh4)) | 0;
		    lo = (lo + Math.imul(al1, bl5)) | 0;
		    mid = (mid + Math.imul(al1, bh5)) | 0;
		    mid = (mid + Math.imul(ah1, bl5)) | 0;
		    hi = (hi + Math.imul(ah1, bh5)) | 0;
		    lo = (lo + Math.imul(al0, bl6)) | 0;
		    mid = (mid + Math.imul(al0, bh6)) | 0;
		    mid = (mid + Math.imul(ah0, bl6)) | 0;
		    hi = (hi + Math.imul(ah0, bh6)) | 0;
		    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
		    w6 &= 0x3ffffff;
		    /* k = 7 */
		    lo = Math.imul(al7, bl0);
		    mid = Math.imul(al7, bh0);
		    mid = (mid + Math.imul(ah7, bl0)) | 0;
		    hi = Math.imul(ah7, bh0);
		    lo = (lo + Math.imul(al6, bl1)) | 0;
		    mid = (mid + Math.imul(al6, bh1)) | 0;
		    mid = (mid + Math.imul(ah6, bl1)) | 0;
		    hi = (hi + Math.imul(ah6, bh1)) | 0;
		    lo = (lo + Math.imul(al5, bl2)) | 0;
		    mid = (mid + Math.imul(al5, bh2)) | 0;
		    mid = (mid + Math.imul(ah5, bl2)) | 0;
		    hi = (hi + Math.imul(ah5, bh2)) | 0;
		    lo = (lo + Math.imul(al4, bl3)) | 0;
		    mid = (mid + Math.imul(al4, bh3)) | 0;
		    mid = (mid + Math.imul(ah4, bl3)) | 0;
		    hi = (hi + Math.imul(ah4, bh3)) | 0;
		    lo = (lo + Math.imul(al3, bl4)) | 0;
		    mid = (mid + Math.imul(al3, bh4)) | 0;
		    mid = (mid + Math.imul(ah3, bl4)) | 0;
		    hi = (hi + Math.imul(ah3, bh4)) | 0;
		    lo = (lo + Math.imul(al2, bl5)) | 0;
		    mid = (mid + Math.imul(al2, bh5)) | 0;
		    mid = (mid + Math.imul(ah2, bl5)) | 0;
		    hi = (hi + Math.imul(ah2, bh5)) | 0;
		    lo = (lo + Math.imul(al1, bl6)) | 0;
		    mid = (mid + Math.imul(al1, bh6)) | 0;
		    mid = (mid + Math.imul(ah1, bl6)) | 0;
		    hi = (hi + Math.imul(ah1, bh6)) | 0;
		    lo = (lo + Math.imul(al0, bl7)) | 0;
		    mid = (mid + Math.imul(al0, bh7)) | 0;
		    mid = (mid + Math.imul(ah0, bl7)) | 0;
		    hi = (hi + Math.imul(ah0, bh7)) | 0;
		    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
		    w7 &= 0x3ffffff;
		    /* k = 8 */
		    lo = Math.imul(al8, bl0);
		    mid = Math.imul(al8, bh0);
		    mid = (mid + Math.imul(ah8, bl0)) | 0;
		    hi = Math.imul(ah8, bh0);
		    lo = (lo + Math.imul(al7, bl1)) | 0;
		    mid = (mid + Math.imul(al7, bh1)) | 0;
		    mid = (mid + Math.imul(ah7, bl1)) | 0;
		    hi = (hi + Math.imul(ah7, bh1)) | 0;
		    lo = (lo + Math.imul(al6, bl2)) | 0;
		    mid = (mid + Math.imul(al6, bh2)) | 0;
		    mid = (mid + Math.imul(ah6, bl2)) | 0;
		    hi = (hi + Math.imul(ah6, bh2)) | 0;
		    lo = (lo + Math.imul(al5, bl3)) | 0;
		    mid = (mid + Math.imul(al5, bh3)) | 0;
		    mid = (mid + Math.imul(ah5, bl3)) | 0;
		    hi = (hi + Math.imul(ah5, bh3)) | 0;
		    lo = (lo + Math.imul(al4, bl4)) | 0;
		    mid = (mid + Math.imul(al4, bh4)) | 0;
		    mid = (mid + Math.imul(ah4, bl4)) | 0;
		    hi = (hi + Math.imul(ah4, bh4)) | 0;
		    lo = (lo + Math.imul(al3, bl5)) | 0;
		    mid = (mid + Math.imul(al3, bh5)) | 0;
		    mid = (mid + Math.imul(ah3, bl5)) | 0;
		    hi = (hi + Math.imul(ah3, bh5)) | 0;
		    lo = (lo + Math.imul(al2, bl6)) | 0;
		    mid = (mid + Math.imul(al2, bh6)) | 0;
		    mid = (mid + Math.imul(ah2, bl6)) | 0;
		    hi = (hi + Math.imul(ah2, bh6)) | 0;
		    lo = (lo + Math.imul(al1, bl7)) | 0;
		    mid = (mid + Math.imul(al1, bh7)) | 0;
		    mid = (mid + Math.imul(ah1, bl7)) | 0;
		    hi = (hi + Math.imul(ah1, bh7)) | 0;
		    lo = (lo + Math.imul(al0, bl8)) | 0;
		    mid = (mid + Math.imul(al0, bh8)) | 0;
		    mid = (mid + Math.imul(ah0, bl8)) | 0;
		    hi = (hi + Math.imul(ah0, bh8)) | 0;
		    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
		    w8 &= 0x3ffffff;
		    /* k = 9 */
		    lo = Math.imul(al9, bl0);
		    mid = Math.imul(al9, bh0);
		    mid = (mid + Math.imul(ah9, bl0)) | 0;
		    hi = Math.imul(ah9, bh0);
		    lo = (lo + Math.imul(al8, bl1)) | 0;
		    mid = (mid + Math.imul(al8, bh1)) | 0;
		    mid = (mid + Math.imul(ah8, bl1)) | 0;
		    hi = (hi + Math.imul(ah8, bh1)) | 0;
		    lo = (lo + Math.imul(al7, bl2)) | 0;
		    mid = (mid + Math.imul(al7, bh2)) | 0;
		    mid = (mid + Math.imul(ah7, bl2)) | 0;
		    hi = (hi + Math.imul(ah7, bh2)) | 0;
		    lo = (lo + Math.imul(al6, bl3)) | 0;
		    mid = (mid + Math.imul(al6, bh3)) | 0;
		    mid = (mid + Math.imul(ah6, bl3)) | 0;
		    hi = (hi + Math.imul(ah6, bh3)) | 0;
		    lo = (lo + Math.imul(al5, bl4)) | 0;
		    mid = (mid + Math.imul(al5, bh4)) | 0;
		    mid = (mid + Math.imul(ah5, bl4)) | 0;
		    hi = (hi + Math.imul(ah5, bh4)) | 0;
		    lo = (lo + Math.imul(al4, bl5)) | 0;
		    mid = (mid + Math.imul(al4, bh5)) | 0;
		    mid = (mid + Math.imul(ah4, bl5)) | 0;
		    hi = (hi + Math.imul(ah4, bh5)) | 0;
		    lo = (lo + Math.imul(al3, bl6)) | 0;
		    mid = (mid + Math.imul(al3, bh6)) | 0;
		    mid = (mid + Math.imul(ah3, bl6)) | 0;
		    hi = (hi + Math.imul(ah3, bh6)) | 0;
		    lo = (lo + Math.imul(al2, bl7)) | 0;
		    mid = (mid + Math.imul(al2, bh7)) | 0;
		    mid = (mid + Math.imul(ah2, bl7)) | 0;
		    hi = (hi + Math.imul(ah2, bh7)) | 0;
		    lo = (lo + Math.imul(al1, bl8)) | 0;
		    mid = (mid + Math.imul(al1, bh8)) | 0;
		    mid = (mid + Math.imul(ah1, bl8)) | 0;
		    hi = (hi + Math.imul(ah1, bh8)) | 0;
		    lo = (lo + Math.imul(al0, bl9)) | 0;
		    mid = (mid + Math.imul(al0, bh9)) | 0;
		    mid = (mid + Math.imul(ah0, bl9)) | 0;
		    hi = (hi + Math.imul(ah0, bh9)) | 0;
		    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
		    w9 &= 0x3ffffff;
		    /* k = 10 */
		    lo = Math.imul(al9, bl1);
		    mid = Math.imul(al9, bh1);
		    mid = (mid + Math.imul(ah9, bl1)) | 0;
		    hi = Math.imul(ah9, bh1);
		    lo = (lo + Math.imul(al8, bl2)) | 0;
		    mid = (mid + Math.imul(al8, bh2)) | 0;
		    mid = (mid + Math.imul(ah8, bl2)) | 0;
		    hi = (hi + Math.imul(ah8, bh2)) | 0;
		    lo = (lo + Math.imul(al7, bl3)) | 0;
		    mid = (mid + Math.imul(al7, bh3)) | 0;
		    mid = (mid + Math.imul(ah7, bl3)) | 0;
		    hi = (hi + Math.imul(ah7, bh3)) | 0;
		    lo = (lo + Math.imul(al6, bl4)) | 0;
		    mid = (mid + Math.imul(al6, bh4)) | 0;
		    mid = (mid + Math.imul(ah6, bl4)) | 0;
		    hi = (hi + Math.imul(ah6, bh4)) | 0;
		    lo = (lo + Math.imul(al5, bl5)) | 0;
		    mid = (mid + Math.imul(al5, bh5)) | 0;
		    mid = (mid + Math.imul(ah5, bl5)) | 0;
		    hi = (hi + Math.imul(ah5, bh5)) | 0;
		    lo = (lo + Math.imul(al4, bl6)) | 0;
		    mid = (mid + Math.imul(al4, bh6)) | 0;
		    mid = (mid + Math.imul(ah4, bl6)) | 0;
		    hi = (hi + Math.imul(ah4, bh6)) | 0;
		    lo = (lo + Math.imul(al3, bl7)) | 0;
		    mid = (mid + Math.imul(al3, bh7)) | 0;
		    mid = (mid + Math.imul(ah3, bl7)) | 0;
		    hi = (hi + Math.imul(ah3, bh7)) | 0;
		    lo = (lo + Math.imul(al2, bl8)) | 0;
		    mid = (mid + Math.imul(al2, bh8)) | 0;
		    mid = (mid + Math.imul(ah2, bl8)) | 0;
		    hi = (hi + Math.imul(ah2, bh8)) | 0;
		    lo = (lo + Math.imul(al1, bl9)) | 0;
		    mid = (mid + Math.imul(al1, bh9)) | 0;
		    mid = (mid + Math.imul(ah1, bl9)) | 0;
		    hi = (hi + Math.imul(ah1, bh9)) | 0;
		    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
		    w10 &= 0x3ffffff;
		    /* k = 11 */
		    lo = Math.imul(al9, bl2);
		    mid = Math.imul(al9, bh2);
		    mid = (mid + Math.imul(ah9, bl2)) | 0;
		    hi = Math.imul(ah9, bh2);
		    lo = (lo + Math.imul(al8, bl3)) | 0;
		    mid = (mid + Math.imul(al8, bh3)) | 0;
		    mid = (mid + Math.imul(ah8, bl3)) | 0;
		    hi = (hi + Math.imul(ah8, bh3)) | 0;
		    lo = (lo + Math.imul(al7, bl4)) | 0;
		    mid = (mid + Math.imul(al7, bh4)) | 0;
		    mid = (mid + Math.imul(ah7, bl4)) | 0;
		    hi = (hi + Math.imul(ah7, bh4)) | 0;
		    lo = (lo + Math.imul(al6, bl5)) | 0;
		    mid = (mid + Math.imul(al6, bh5)) | 0;
		    mid = (mid + Math.imul(ah6, bl5)) | 0;
		    hi = (hi + Math.imul(ah6, bh5)) | 0;
		    lo = (lo + Math.imul(al5, bl6)) | 0;
		    mid = (mid + Math.imul(al5, bh6)) | 0;
		    mid = (mid + Math.imul(ah5, bl6)) | 0;
		    hi = (hi + Math.imul(ah5, bh6)) | 0;
		    lo = (lo + Math.imul(al4, bl7)) | 0;
		    mid = (mid + Math.imul(al4, bh7)) | 0;
		    mid = (mid + Math.imul(ah4, bl7)) | 0;
		    hi = (hi + Math.imul(ah4, bh7)) | 0;
		    lo = (lo + Math.imul(al3, bl8)) | 0;
		    mid = (mid + Math.imul(al3, bh8)) | 0;
		    mid = (mid + Math.imul(ah3, bl8)) | 0;
		    hi = (hi + Math.imul(ah3, bh8)) | 0;
		    lo = (lo + Math.imul(al2, bl9)) | 0;
		    mid = (mid + Math.imul(al2, bh9)) | 0;
		    mid = (mid + Math.imul(ah2, bl9)) | 0;
		    hi = (hi + Math.imul(ah2, bh9)) | 0;
		    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
		    w11 &= 0x3ffffff;
		    /* k = 12 */
		    lo = Math.imul(al9, bl3);
		    mid = Math.imul(al9, bh3);
		    mid = (mid + Math.imul(ah9, bl3)) | 0;
		    hi = Math.imul(ah9, bh3);
		    lo = (lo + Math.imul(al8, bl4)) | 0;
		    mid = (mid + Math.imul(al8, bh4)) | 0;
		    mid = (mid + Math.imul(ah8, bl4)) | 0;
		    hi = (hi + Math.imul(ah8, bh4)) | 0;
		    lo = (lo + Math.imul(al7, bl5)) | 0;
		    mid = (mid + Math.imul(al7, bh5)) | 0;
		    mid = (mid + Math.imul(ah7, bl5)) | 0;
		    hi = (hi + Math.imul(ah7, bh5)) | 0;
		    lo = (lo + Math.imul(al6, bl6)) | 0;
		    mid = (mid + Math.imul(al6, bh6)) | 0;
		    mid = (mid + Math.imul(ah6, bl6)) | 0;
		    hi = (hi + Math.imul(ah6, bh6)) | 0;
		    lo = (lo + Math.imul(al5, bl7)) | 0;
		    mid = (mid + Math.imul(al5, bh7)) | 0;
		    mid = (mid + Math.imul(ah5, bl7)) | 0;
		    hi = (hi + Math.imul(ah5, bh7)) | 0;
		    lo = (lo + Math.imul(al4, bl8)) | 0;
		    mid = (mid + Math.imul(al4, bh8)) | 0;
		    mid = (mid + Math.imul(ah4, bl8)) | 0;
		    hi = (hi + Math.imul(ah4, bh8)) | 0;
		    lo = (lo + Math.imul(al3, bl9)) | 0;
		    mid = (mid + Math.imul(al3, bh9)) | 0;
		    mid = (mid + Math.imul(ah3, bl9)) | 0;
		    hi = (hi + Math.imul(ah3, bh9)) | 0;
		    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
		    w12 &= 0x3ffffff;
		    /* k = 13 */
		    lo = Math.imul(al9, bl4);
		    mid = Math.imul(al9, bh4);
		    mid = (mid + Math.imul(ah9, bl4)) | 0;
		    hi = Math.imul(ah9, bh4);
		    lo = (lo + Math.imul(al8, bl5)) | 0;
		    mid = (mid + Math.imul(al8, bh5)) | 0;
		    mid = (mid + Math.imul(ah8, bl5)) | 0;
		    hi = (hi + Math.imul(ah8, bh5)) | 0;
		    lo = (lo + Math.imul(al7, bl6)) | 0;
		    mid = (mid + Math.imul(al7, bh6)) | 0;
		    mid = (mid + Math.imul(ah7, bl6)) | 0;
		    hi = (hi + Math.imul(ah7, bh6)) | 0;
		    lo = (lo + Math.imul(al6, bl7)) | 0;
		    mid = (mid + Math.imul(al6, bh7)) | 0;
		    mid = (mid + Math.imul(ah6, bl7)) | 0;
		    hi = (hi + Math.imul(ah6, bh7)) | 0;
		    lo = (lo + Math.imul(al5, bl8)) | 0;
		    mid = (mid + Math.imul(al5, bh8)) | 0;
		    mid = (mid + Math.imul(ah5, bl8)) | 0;
		    hi = (hi + Math.imul(ah5, bh8)) | 0;
		    lo = (lo + Math.imul(al4, bl9)) | 0;
		    mid = (mid + Math.imul(al4, bh9)) | 0;
		    mid = (mid + Math.imul(ah4, bl9)) | 0;
		    hi = (hi + Math.imul(ah4, bh9)) | 0;
		    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
		    w13 &= 0x3ffffff;
		    /* k = 14 */
		    lo = Math.imul(al9, bl5);
		    mid = Math.imul(al9, bh5);
		    mid = (mid + Math.imul(ah9, bl5)) | 0;
		    hi = Math.imul(ah9, bh5);
		    lo = (lo + Math.imul(al8, bl6)) | 0;
		    mid = (mid + Math.imul(al8, bh6)) | 0;
		    mid = (mid + Math.imul(ah8, bl6)) | 0;
		    hi = (hi + Math.imul(ah8, bh6)) | 0;
		    lo = (lo + Math.imul(al7, bl7)) | 0;
		    mid = (mid + Math.imul(al7, bh7)) | 0;
		    mid = (mid + Math.imul(ah7, bl7)) | 0;
		    hi = (hi + Math.imul(ah7, bh7)) | 0;
		    lo = (lo + Math.imul(al6, bl8)) | 0;
		    mid = (mid + Math.imul(al6, bh8)) | 0;
		    mid = (mid + Math.imul(ah6, bl8)) | 0;
		    hi = (hi + Math.imul(ah6, bh8)) | 0;
		    lo = (lo + Math.imul(al5, bl9)) | 0;
		    mid = (mid + Math.imul(al5, bh9)) | 0;
		    mid = (mid + Math.imul(ah5, bl9)) | 0;
		    hi = (hi + Math.imul(ah5, bh9)) | 0;
		    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
		    w14 &= 0x3ffffff;
		    /* k = 15 */
		    lo = Math.imul(al9, bl6);
		    mid = Math.imul(al9, bh6);
		    mid = (mid + Math.imul(ah9, bl6)) | 0;
		    hi = Math.imul(ah9, bh6);
		    lo = (lo + Math.imul(al8, bl7)) | 0;
		    mid = (mid + Math.imul(al8, bh7)) | 0;
		    mid = (mid + Math.imul(ah8, bl7)) | 0;
		    hi = (hi + Math.imul(ah8, bh7)) | 0;
		    lo = (lo + Math.imul(al7, bl8)) | 0;
		    mid = (mid + Math.imul(al7, bh8)) | 0;
		    mid = (mid + Math.imul(ah7, bl8)) | 0;
		    hi = (hi + Math.imul(ah7, bh8)) | 0;
		    lo = (lo + Math.imul(al6, bl9)) | 0;
		    mid = (mid + Math.imul(al6, bh9)) | 0;
		    mid = (mid + Math.imul(ah6, bl9)) | 0;
		    hi = (hi + Math.imul(ah6, bh9)) | 0;
		    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
		    w15 &= 0x3ffffff;
		    /* k = 16 */
		    lo = Math.imul(al9, bl7);
		    mid = Math.imul(al9, bh7);
		    mid = (mid + Math.imul(ah9, bl7)) | 0;
		    hi = Math.imul(ah9, bh7);
		    lo = (lo + Math.imul(al8, bl8)) | 0;
		    mid = (mid + Math.imul(al8, bh8)) | 0;
		    mid = (mid + Math.imul(ah8, bl8)) | 0;
		    hi = (hi + Math.imul(ah8, bh8)) | 0;
		    lo = (lo + Math.imul(al7, bl9)) | 0;
		    mid = (mid + Math.imul(al7, bh9)) | 0;
		    mid = (mid + Math.imul(ah7, bl9)) | 0;
		    hi = (hi + Math.imul(ah7, bh9)) | 0;
		    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
		    w16 &= 0x3ffffff;
		    /* k = 17 */
		    lo = Math.imul(al9, bl8);
		    mid = Math.imul(al9, bh8);
		    mid = (mid + Math.imul(ah9, bl8)) | 0;
		    hi = Math.imul(ah9, bh8);
		    lo = (lo + Math.imul(al8, bl9)) | 0;
		    mid = (mid + Math.imul(al8, bh9)) | 0;
		    mid = (mid + Math.imul(ah8, bl9)) | 0;
		    hi = (hi + Math.imul(ah8, bh9)) | 0;
		    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
		    w17 &= 0x3ffffff;
		    /* k = 18 */
		    lo = Math.imul(al9, bl9);
		    mid = Math.imul(al9, bh9);
		    mid = (mid + Math.imul(ah9, bl9)) | 0;
		    hi = Math.imul(ah9, bh9);
		    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
		    w18 &= 0x3ffffff;
		    o[0] = w0;
		    o[1] = w1;
		    o[2] = w2;
		    o[3] = w3;
		    o[4] = w4;
		    o[5] = w5;
		    o[6] = w6;
		    o[7] = w7;
		    o[8] = w8;
		    o[9] = w9;
		    o[10] = w10;
		    o[11] = w11;
		    o[12] = w12;
		    o[13] = w13;
		    o[14] = w14;
		    o[15] = w15;
		    o[16] = w16;
		    o[17] = w17;
		    o[18] = w18;
		    if (c !== 0) {
		      o[19] = c;
		      out.length++;
		    }
		    return out;
		  };

		  // Polyfill comb
		  if (!Math.imul) {
		    comb10MulTo = smallMulTo;
		  }

		  function bigMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    out.length = self.length + num.length;

		    var carry = 0;
		    var hncarry = 0;
		    for (var k = 0; k < out.length - 1; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = hncarry;
		      hncarry = 0;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j;
		        var a = self.words[i] | 0;
		        var b = num.words[j] | 0;
		        var r = a * b;

		        var lo = r & 0x3ffffff;
		        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
		        lo = (lo + rword) | 0;
		        rword = lo & 0x3ffffff;
		        ncarry = (ncarry + (lo >>> 26)) | 0;

		        hncarry += ncarry >>> 26;
		        ncarry &= 0x3ffffff;
		      }
		      out.words[k] = rword;
		      carry = ncarry;
		      ncarry = hncarry;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry;
		    } else {
		      out.length--;
		    }

		    return out.strip();
		  }

		  function jumboMulTo (self, num, out) {
		    var fftm = new FFTM();
		    return fftm.mulp(self, num, out);
		  }

		  BN.prototype.mulTo = function mulTo (num, out) {
		    var res;
		    var len = this.length + num.length;
		    if (this.length === 10 && num.length === 10) {
		      res = comb10MulTo(this, num, out);
		    } else if (len < 63) {
		      res = smallMulTo(this, num, out);
		    } else if (len < 1024) {
		      res = bigMulTo(this, num, out);
		    } else {
		      res = jumboMulTo(this, num, out);
		    }

		    return res;
		  };

		  // Cooley-Tukey algorithm for FFT
		  // slightly revisited to rely on looping instead of recursion

		  function FFTM (x, y) {
		    this.x = x;
		    this.y = y;
		  }

		  FFTM.prototype.makeRBT = function makeRBT (N) {
		    var t = new Array(N);
		    var l = BN.prototype._countBits(N) - 1;
		    for (var i = 0; i < N; i++) {
		      t[i] = this.revBin(i, l, N);
		    }

		    return t;
		  };

		  // Returns binary-reversed representation of `x`
		  FFTM.prototype.revBin = function revBin (x, l, N) {
		    if (x === 0 || x === N - 1) return x;

		    var rb = 0;
		    for (var i = 0; i < l; i++) {
		      rb |= (x & 1) << (l - i - 1);
		      x >>= 1;
		    }

		    return rb;
		  };

		  // Performs "tweedling" phase, therefore 'emulating'
		  // behaviour of the recursive algorithm
		  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
		    for (var i = 0; i < N; i++) {
		      rtws[i] = rws[rbt[i]];
		      itws[i] = iws[rbt[i]];
		    }
		  };

		  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
		    this.permute(rbt, rws, iws, rtws, itws, N);

		    for (var s = 1; s < N; s <<= 1) {
		      var l = s << 1;

		      var rtwdf = Math.cos(2 * Math.PI / l);
		      var itwdf = Math.sin(2 * Math.PI / l);

		      for (var p = 0; p < N; p += l) {
		        var rtwdf_ = rtwdf;
		        var itwdf_ = itwdf;

		        for (var j = 0; j < s; j++) {
		          var re = rtws[p + j];
		          var ie = itws[p + j];

		          var ro = rtws[p + j + s];
		          var io = itws[p + j + s];

		          var rx = rtwdf_ * ro - itwdf_ * io;

		          io = rtwdf_ * io + itwdf_ * ro;
		          ro = rx;

		          rtws[p + j] = re + ro;
		          itws[p + j] = ie + io;

		          rtws[p + j + s] = re - ro;
		          itws[p + j + s] = ie - io;

		          /* jshint maxdepth : false */
		          if (j !== l) {
		            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

		            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
		            rtwdf_ = rx;
		          }
		        }
		      }
		    }
		  };

		  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
		    var N = Math.max(m, n) | 1;
		    var odd = N & 1;
		    var i = 0;
		    for (N = N / 2 | 0; N; N = N >>> 1) {
		      i++;
		    }

		    return 1 << i + 1 + odd;
		  };

		  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
		    if (N <= 1) return;

		    for (var i = 0; i < N / 2; i++) {
		      var t = rws[i];

		      rws[i] = rws[N - i - 1];
		      rws[N - i - 1] = t;

		      t = iws[i];

		      iws[i] = -iws[N - i - 1];
		      iws[N - i - 1] = -t;
		    }
		  };

		  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
		    var carry = 0;
		    for (var i = 0; i < N / 2; i++) {
		      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
		        Math.round(ws[2 * i] / N) +
		        carry;

		      ws[i] = w & 0x3ffffff;

		      if (w < 0x4000000) {
		        carry = 0;
		      } else {
		        carry = w / 0x4000000 | 0;
		      }
		    }

		    return ws;
		  };

		  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
		    var carry = 0;
		    for (var i = 0; i < len; i++) {
		      carry = carry + (ws[i] | 0);

		      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
		      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
		    }

		    // Pad with zeroes
		    for (i = 2 * len; i < N; ++i) {
		      rws[i] = 0;
		    }

		    assert(carry === 0);
		    assert((carry & ~0x1fff) === 0);
		  };

		  FFTM.prototype.stub = function stub (N) {
		    var ph = new Array(N);
		    for (var i = 0; i < N; i++) {
		      ph[i] = 0;
		    }

		    return ph;
		  };

		  FFTM.prototype.mulp = function mulp (x, y, out) {
		    var N = 2 * this.guessLen13b(x.length, y.length);

		    var rbt = this.makeRBT(N);

		    var _ = this.stub(N);

		    var rws = new Array(N);
		    var rwst = new Array(N);
		    var iwst = new Array(N);

		    var nrws = new Array(N);
		    var nrwst = new Array(N);
		    var niwst = new Array(N);

		    var rmws = out.words;
		    rmws.length = N;

		    this.convert13b(x.words, x.length, rws, N);
		    this.convert13b(y.words, y.length, nrws, N);

		    this.transform(rws, _, rwst, iwst, N, rbt);
		    this.transform(nrws, _, nrwst, niwst, N, rbt);

		    for (var i = 0; i < N; i++) {
		      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		      rwst[i] = rx;
		    }

		    this.conjugate(rwst, iwst, N);
		    this.transform(rwst, iwst, rmws, _, N, rbt);
		    this.conjugate(rmws, _, N);
		    this.normalize13b(rmws, N);

		    out.negative = x.negative ^ y.negative;
		    out.length = x.length + y.length;
		    return out.strip();
		  };

		  // Multiply `this` by `num`
		  BN.prototype.mul = function mul (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return this.mulTo(num, out);
		  };

		  // Multiply employing FFT
		  BN.prototype.mulf = function mulf (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return jumboMulTo(this, num, out);
		  };

		  // In-place Multiplication
		  BN.prototype.imul = function imul (num) {
		    return this.clone().mulTo(num, this);
		  };

		  BN.prototype.imuln = function imuln (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);

		    // Carry
		    var carry = 0;
		    for (var i = 0; i < this.length; i++) {
		      var w = (this.words[i] | 0) * num;
		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		      carry >>= 26;
		      carry += (w / 0x4000000) | 0;
		      // NOTE: lo is 27bit maximum
		      carry += lo >>> 26;
		      this.words[i] = lo & 0x3ffffff;
		    }

		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }

		    return this;
		  };

		  BN.prototype.muln = function muln (num) {
		    return this.clone().imuln(num);
		  };

		  // `this` * `this`
		  BN.prototype.sqr = function sqr () {
		    return this.mul(this);
		  };

		  // `this` * `this` in-place
		  BN.prototype.isqr = function isqr () {
		    return this.imul(this.clone());
		  };

		  // Math.pow(`this`, `num`)
		  BN.prototype.pow = function pow (num) {
		    var w = toBitArray(num);
		    if (w.length === 0) return new BN(1);

		    // Skip leading zeroes
		    var res = this;
		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
		      if (w[i] !== 0) break;
		    }

		    if (++i < w.length) {
		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
		        if (w[i] === 0) continue;

		        res = res.mul(q);
		      }
		    }

		    return res;
		  };

		  // Shift-left in-place
		  BN.prototype.iushln = function iushln (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
		    var i;

		    if (r !== 0) {
		      var carry = 0;

		      for (i = 0; i < this.length; i++) {
		        var newCarry = this.words[i] & carryMask;
		        var c = ((this.words[i] | 0) - newCarry) << r;
		        this.words[i] = c | carry;
		        carry = newCarry >>> (26 - r);
		      }

		      if (carry) {
		        this.words[i] = carry;
		        this.length++;
		      }
		    }

		    if (s !== 0) {
		      for (i = this.length - 1; i >= 0; i--) {
		        this.words[i + s] = this.words[i];
		      }

		      for (i = 0; i < s; i++) {
		        this.words[i] = 0;
		      }

		      this.length += s;
		    }

		    return this.strip();
		  };

		  BN.prototype.ishln = function ishln (bits) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushln(bits);
		  };

		  // Shift-right in-place
		  // NOTE: `hint` is a lowest bit before trailing zeroes
		  // NOTE: if `extended` is present - it will be filled with destroyed bits
		  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var h;
		    if (hint) {
		      h = (hint - (hint % 26)) / 26;
		    } else {
		      h = 0;
		    }

		    var r = bits % 26;
		    var s = Math.min((bits - r) / 26, this.length);
		    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		    var maskedWords = extended;

		    h -= s;
		    h = Math.max(0, h);

		    // Extended mode, copy masked part
		    if (maskedWords) {
		      for (var i = 0; i < s; i++) {
		        maskedWords.words[i] = this.words[i];
		      }
		      maskedWords.length = s;
		    }

		    if (s === 0) {
		      // No-op, we should not move anything at all
		    } else if (this.length > s) {
		      this.length -= s;
		      for (i = 0; i < this.length; i++) {
		        this.words[i] = this.words[i + s];
		      }
		    } else {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    var carry = 0;
		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		      var word = this.words[i] | 0;
		      this.words[i] = (carry << (26 - r)) | (word >>> r);
		      carry = word & mask;
		    }

		    // Push carried bits as a mask
		    if (maskedWords && carry !== 0) {
		      maskedWords.words[maskedWords.length++] = carry;
		    }

		    if (this.length === 0) {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    return this.strip();
		  };

		  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushrn(bits, hint, extended);
		  };

		  // Shift-left
		  BN.prototype.shln = function shln (bits) {
		    return this.clone().ishln(bits);
		  };

		  BN.prototype.ushln = function ushln (bits) {
		    return this.clone().iushln(bits);
		  };

		  // Shift-right
		  BN.prototype.shrn = function shrn (bits) {
		    return this.clone().ishrn(bits);
		  };

		  BN.prototype.ushrn = function ushrn (bits) {
		    return this.clone().iushrn(bits);
		  };

		  // Test if n bit is set
		  BN.prototype.testn = function testn (bit) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) return false;

		    // Check bit and return
		    var w = this.words[s];

		    return !!(w & q);
		  };

		  // Return only lowers bits of number (in-place)
		  BN.prototype.imaskn = function imaskn (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;

		    assert(this.negative === 0, 'imaskn works only with positive numbers');

		    if (this.length <= s) {
		      return this;
		    }

		    if (r !== 0) {
		      s++;
		    }
		    this.length = Math.min(s, this.length);

		    if (r !== 0) {
		      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		      this.words[this.length - 1] &= mask;
		    }

		    return this.strip();
		  };

		  // Return only lowers bits of number
		  BN.prototype.maskn = function maskn (bits) {
		    return this.clone().imaskn(bits);
		  };

		  // Add plain number `num` to `this`
		  BN.prototype.iaddn = function iaddn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.isubn(-num);

		    // Possible sign change
		    if (this.negative !== 0) {
		      if (this.length === 1 && (this.words[0] | 0) < num) {
		        this.words[0] = num - (this.words[0] | 0);
		        this.negative = 0;
		        return this;
		      }

		      this.negative = 0;
		      this.isubn(num);
		      this.negative = 1;
		      return this;
		    }

		    // Add without checks
		    return this._iaddn(num);
		  };

		  BN.prototype._iaddn = function _iaddn (num) {
		    this.words[0] += num;

		    // Carry
		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		      this.words[i] -= 0x4000000;
		      if (i === this.length - 1) {
		        this.words[i + 1] = 1;
		      } else {
		        this.words[i + 1]++;
		      }
		    }
		    this.length = Math.max(this.length, i + 1);

		    return this;
		  };

		  // Subtract plain number `num` from `this`
		  BN.prototype.isubn = function isubn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.iaddn(-num);

		    if (this.negative !== 0) {
		      this.negative = 0;
		      this.iaddn(num);
		      this.negative = 1;
		      return this;
		    }

		    this.words[0] -= num;

		    if (this.length === 1 && this.words[0] < 0) {
		      this.words[0] = -this.words[0];
		      this.negative = 1;
		    } else {
		      // Carry
		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
		        this.words[i] += 0x4000000;
		        this.words[i + 1] -= 1;
		      }
		    }

		    return this.strip();
		  };

		  BN.prototype.addn = function addn (num) {
		    return this.clone().iaddn(num);
		  };

		  BN.prototype.subn = function subn (num) {
		    return this.clone().isubn(num);
		  };

		  BN.prototype.iabs = function iabs () {
		    this.negative = 0;

		    return this;
		  };

		  BN.prototype.abs = function abs () {
		    return this.clone().iabs();
		  };

		  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
		    var len = num.length + shift;
		    var i;

		    this._expand(len);

		    var w;
		    var carry = 0;
		    for (i = 0; i < num.length; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      var right = (num.words[i] | 0) * mul;
		      w -= right & 0x3ffffff;
		      carry = (w >> 26) - ((right / 0x4000000) | 0);
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    for (; i < this.length - shift; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      carry = w >> 26;
		      this.words[i + shift] = w & 0x3ffffff;
		    }

		    if (carry === 0) return this.strip();

		    // Subtraction overflow
		    assert(carry === -1);
		    carry = 0;
		    for (i = 0; i < this.length; i++) {
		      w = -(this.words[i] | 0) + carry;
		      carry = w >> 26;
		      this.words[i] = w & 0x3ffffff;
		    }
		    this.negative = 1;

		    return this.strip();
		  };

		  BN.prototype._wordDiv = function _wordDiv (num, mode) {
		    var shift = this.length - num.length;

		    var a = this.clone();
		    var b = num;

		    // Normalize
		    var bhi = b.words[b.length - 1] | 0;
		    var bhiBits = this._countBits(bhi);
		    shift = 26 - bhiBits;
		    if (shift !== 0) {
		      b = b.ushln(shift);
		      a.iushln(shift);
		      bhi = b.words[b.length - 1] | 0;
		    }

		    // Initialize quotient
		    var m = a.length - b.length;
		    var q;

		    if (mode !== 'mod') {
		      q = new BN(null);
		      q.length = m + 1;
		      q.words = new Array(q.length);
		      for (var i = 0; i < q.length; i++) {
		        q.words[i] = 0;
		      }
		    }

		    var diff = a.clone()._ishlnsubmul(b, 1, m);
		    if (diff.negative === 0) {
		      a = diff;
		      if (q) {
		        q.words[m] = 1;
		      }
		    }

		    for (var j = m - 1; j >= 0; j--) {
		      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
		        (a.words[b.length + j - 1] | 0);

		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		      // (0x7ffffff)
		      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

		      a._ishlnsubmul(b, qj, j);
		      while (a.negative !== 0) {
		        qj--;
		        a.negative = 0;
		        a._ishlnsubmul(b, 1, j);
		        if (!a.isZero()) {
		          a.negative ^= 1;
		        }
		      }
		      if (q) {
		        q.words[j] = qj;
		      }
		    }
		    if (q) {
		      q.strip();
		    }
		    a.strip();

		    // Denormalize
		    if (mode !== 'div' && shift !== 0) {
		      a.iushrn(shift);
		    }

		    return {
		      div: q || null,
		      mod: a
		    };
		  };

		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
		  //       to `div` to request div only, or be absent to
		  //       request both div & mod
		  //       2) `positive` is true if unsigned mod is requested
		  BN.prototype.divmod = function divmod (num, mode, positive) {
		    assert(!num.isZero());

		    if (this.isZero()) {
		      return {
		        div: new BN(0),
		        mod: new BN(0)
		      };
		    }

		    var div, mod, res;
		    if (this.negative !== 0 && num.negative === 0) {
		      res = this.neg().divmod(num, mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.iadd(num);
		        }
		      }

		      return {
		        div: div,
		        mod: mod
		      };
		    }

		    if (this.negative === 0 && num.negative !== 0) {
		      res = this.divmod(num.neg(), mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      return {
		        div: div,
		        mod: res.mod
		      };
		    }

		    if ((this.negative & num.negative) !== 0) {
		      res = this.neg().divmod(num.neg(), mode);

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.isub(num);
		        }
		      }

		      return {
		        div: res.div,
		        mod: mod
		      };
		    }

		    // Both numbers are positive at this point

		    // Strip both numbers to approximate shift value
		    if (num.length > this.length || this.cmp(num) < 0) {
		      return {
		        div: new BN(0),
		        mod: this
		      };
		    }

		    // Very short reduction
		    if (num.length === 1) {
		      if (mode === 'div') {
		        return {
		          div: this.divn(num.words[0]),
		          mod: null
		        };
		      }

		      if (mode === 'mod') {
		        return {
		          div: null,
		          mod: new BN(this.modn(num.words[0]))
		        };
		      }

		      return {
		        div: this.divn(num.words[0]),
		        mod: new BN(this.modn(num.words[0]))
		      };
		    }

		    return this._wordDiv(num, mode);
		  };

		  // Find `this` / `num`
		  BN.prototype.div = function div (num) {
		    return this.divmod(num, 'div', false).div;
		  };

		  // Find `this` % `num`
		  BN.prototype.mod = function mod (num) {
		    return this.divmod(num, 'mod', false).mod;
		  };

		  BN.prototype.umod = function umod (num) {
		    return this.divmod(num, 'mod', true).mod;
		  };

		  // Find Round(`this` / `num`)
		  BN.prototype.divRound = function divRound (num) {
		    var dm = this.divmod(num);

		    // Fast case - exact division
		    if (dm.mod.isZero()) return dm.div;

		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

		    var half = num.ushrn(1);
		    var r2 = num.andln(1);
		    var cmp = mod.cmp(half);

		    // Round down
		    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

		    // Round up
		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
		  };

		  BN.prototype.modn = function modn (num) {
		    assert(num <= 0x3ffffff);
		    var p = (1 << 26) % num;

		    var acc = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      acc = (p * acc + (this.words[i] | 0)) % num;
		    }

		    return acc;
		  };

		  // In-place division by number
		  BN.prototype.idivn = function idivn (num) {
		    assert(num <= 0x3ffffff);

		    var carry = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var w = (this.words[i] | 0) + carry * 0x4000000;
		      this.words[i] = (w / num) | 0;
		      carry = w % num;
		    }

		    return this.strip();
		  };

		  BN.prototype.divn = function divn (num) {
		    return this.clone().idivn(num);
		  };

		  BN.prototype.egcd = function egcd (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var x = this;
		    var y = p.clone();

		    if (x.negative !== 0) {
		      x = x.umod(p);
		    } else {
		      x = x.clone();
		    }

		    // A * x + B * y = x
		    var A = new BN(1);
		    var B = new BN(0);

		    // C * x + D * y = y
		    var C = new BN(0);
		    var D = new BN(1);

		    var g = 0;

		    while (x.isEven() && y.isEven()) {
		      x.iushrn(1);
		      y.iushrn(1);
		      ++g;
		    }

		    var yp = y.clone();
		    var xp = x.clone();

		    while (!x.isZero()) {
		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        x.iushrn(i);
		        while (i-- > 0) {
		          if (A.isOdd() || B.isOdd()) {
		            A.iadd(yp);
		            B.isub(xp);
		          }

		          A.iushrn(1);
		          B.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        y.iushrn(j);
		        while (j-- > 0) {
		          if (C.isOdd() || D.isOdd()) {
		            C.iadd(yp);
		            D.isub(xp);
		          }

		          C.iushrn(1);
		          D.iushrn(1);
		        }
		      }

		      if (x.cmp(y) >= 0) {
		        x.isub(y);
		        A.isub(C);
		        B.isub(D);
		      } else {
		        y.isub(x);
		        C.isub(A);
		        D.isub(B);
		      }
		    }

		    return {
		      a: C,
		      b: D,
		      gcd: y.iushln(g)
		    };
		  };

		  // This is reduced incarnation of the binary EEA
		  // above, designated to invert members of the
		  // _prime_ fields F(p) at a maximal speed
		  BN.prototype._invmp = function _invmp (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var a = this;
		    var b = p.clone();

		    if (a.negative !== 0) {
		      a = a.umod(p);
		    } else {
		      a = a.clone();
		    }

		    var x1 = new BN(1);
		    var x2 = new BN(0);

		    var delta = b.clone();

		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        a.iushrn(i);
		        while (i-- > 0) {
		          if (x1.isOdd()) {
		            x1.iadd(delta);
		          }

		          x1.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        b.iushrn(j);
		        while (j-- > 0) {
		          if (x2.isOdd()) {
		            x2.iadd(delta);
		          }

		          x2.iushrn(1);
		        }
		      }

		      if (a.cmp(b) >= 0) {
		        a.isub(b);
		        x1.isub(x2);
		      } else {
		        b.isub(a);
		        x2.isub(x1);
		      }
		    }

		    var res;
		    if (a.cmpn(1) === 0) {
		      res = x1;
		    } else {
		      res = x2;
		    }

		    if (res.cmpn(0) < 0) {
		      res.iadd(p);
		    }

		    return res;
		  };

		  BN.prototype.gcd = function gcd (num) {
		    if (this.isZero()) return num.abs();
		    if (num.isZero()) return this.abs();

		    var a = this.clone();
		    var b = num.clone();
		    a.negative = 0;
		    b.negative = 0;

		    // Remove common factor of two
		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		      a.iushrn(1);
		      b.iushrn(1);
		    }

		    do {
		      while (a.isEven()) {
		        a.iushrn(1);
		      }
		      while (b.isEven()) {
		        b.iushrn(1);
		      }

		      var r = a.cmp(b);
		      if (r < 0) {
		        // Swap `a` and `b` to make `a` always bigger than `b`
		        var t = a;
		        a = b;
		        b = t;
		      } else if (r === 0 || b.cmpn(1) === 0) {
		        break;
		      }

		      a.isub(b);
		    } while (true);

		    return b.iushln(shift);
		  };

		  // Invert number in the field F(num)
		  BN.prototype.invm = function invm (num) {
		    return this.egcd(num).a.umod(num);
		  };

		  BN.prototype.isEven = function isEven () {
		    return (this.words[0] & 1) === 0;
		  };

		  BN.prototype.isOdd = function isOdd () {
		    return (this.words[0] & 1) === 1;
		  };

		  // And first word and num
		  BN.prototype.andln = function andln (num) {
		    return this.words[0] & num;
		  };

		  // Increment at the bit position in-line
		  BN.prototype.bincn = function bincn (bit) {
		    assert(typeof bit === 'number');
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) {
		      this._expand(s + 1);
		      this.words[s] |= q;
		      return this;
		    }

		    // Add bit and propagate, if needed
		    var carry = q;
		    for (var i = s; carry !== 0 && i < this.length; i++) {
		      var w = this.words[i] | 0;
		      w += carry;
		      carry = w >>> 26;
		      w &= 0x3ffffff;
		      this.words[i] = w;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };

		  BN.prototype.isZero = function isZero () {
		    return this.length === 1 && this.words[0] === 0;
		  };

		  BN.prototype.cmpn = function cmpn (num) {
		    var negative = num < 0;

		    if (this.negative !== 0 && !negative) return -1;
		    if (this.negative === 0 && negative) return 1;

		    this.strip();

		    var res;
		    if (this.length > 1) {
		      res = 1;
		    } else {
		      if (negative) {
		        num = -num;
		      }

		      assert(num <= 0x3ffffff, 'Number is too big');

		      var w = this.words[0] | 0;
		      res = w === num ? 0 : w < num ? -1 : 1;
		    }
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Compare two numbers and return:
		  // 1 - if `this` > `num`
		  // 0 - if `this` == `num`
		  // -1 - if `this` < `num`
		  BN.prototype.cmp = function cmp (num) {
		    if (this.negative !== 0 && num.negative === 0) return -1;
		    if (this.negative === 0 && num.negative !== 0) return 1;

		    var res = this.ucmp(num);
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Unsigned comparison
		  BN.prototype.ucmp = function ucmp (num) {
		    // At this point both numbers have the same sign
		    if (this.length > num.length) return 1;
		    if (this.length < num.length) return -1;

		    var res = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var a = this.words[i] | 0;
		      var b = num.words[i] | 0;

		      if (a === b) continue;
		      if (a < b) {
		        res = -1;
		      } else if (a > b) {
		        res = 1;
		      }
		      break;
		    }
		    return res;
		  };

		  BN.prototype.gtn = function gtn (num) {
		    return this.cmpn(num) === 1;
		  };

		  BN.prototype.gt = function gt (num) {
		    return this.cmp(num) === 1;
		  };

		  BN.prototype.gten = function gten (num) {
		    return this.cmpn(num) >= 0;
		  };

		  BN.prototype.gte = function gte (num) {
		    return this.cmp(num) >= 0;
		  };

		  BN.prototype.ltn = function ltn (num) {
		    return this.cmpn(num) === -1;
		  };

		  BN.prototype.lt = function lt (num) {
		    return this.cmp(num) === -1;
		  };

		  BN.prototype.lten = function lten (num) {
		    return this.cmpn(num) <= 0;
		  };

		  BN.prototype.lte = function lte (num) {
		    return this.cmp(num) <= 0;
		  };

		  BN.prototype.eqn = function eqn (num) {
		    return this.cmpn(num) === 0;
		  };

		  BN.prototype.eq = function eq (num) {
		    return this.cmp(num) === 0;
		  };

		  //
		  // A reduce context, could be using montgomery or something better, depending
		  // on the `m` itself.
		  //
		  BN.red = function red (num) {
		    return new Red(num);
		  };

		  BN.prototype.toRed = function toRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    assert(this.negative === 0, 'red works only with positives');
		    return ctx.convertTo(this)._forceRed(ctx);
		  };

		  BN.prototype.fromRed = function fromRed () {
		    assert(this.red, 'fromRed works only with numbers in reduction context');
		    return this.red.convertFrom(this);
		  };

		  BN.prototype._forceRed = function _forceRed (ctx) {
		    this.red = ctx;
		    return this;
		  };

		  BN.prototype.forceRed = function forceRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    return this._forceRed(ctx);
		  };

		  BN.prototype.redAdd = function redAdd (num) {
		    assert(this.red, 'redAdd works only with red numbers');
		    return this.red.add(this, num);
		  };

		  BN.prototype.redIAdd = function redIAdd (num) {
		    assert(this.red, 'redIAdd works only with red numbers');
		    return this.red.iadd(this, num);
		  };

		  BN.prototype.redSub = function redSub (num) {
		    assert(this.red, 'redSub works only with red numbers');
		    return this.red.sub(this, num);
		  };

		  BN.prototype.redISub = function redISub (num) {
		    assert(this.red, 'redISub works only with red numbers');
		    return this.red.isub(this, num);
		  };

		  BN.prototype.redShl = function redShl (num) {
		    assert(this.red, 'redShl works only with red numbers');
		    return this.red.shl(this, num);
		  };

		  BN.prototype.redMul = function redMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.mul(this, num);
		  };

		  BN.prototype.redIMul = function redIMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.imul(this, num);
		  };

		  BN.prototype.redSqr = function redSqr () {
		    assert(this.red, 'redSqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqr(this);
		  };

		  BN.prototype.redISqr = function redISqr () {
		    assert(this.red, 'redISqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.isqr(this);
		  };

		  // Square root over p
		  BN.prototype.redSqrt = function redSqrt () {
		    assert(this.red, 'redSqrt works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqrt(this);
		  };

		  BN.prototype.redInvm = function redInvm () {
		    assert(this.red, 'redInvm works only with red numbers');
		    this.red._verify1(this);
		    return this.red.invm(this);
		  };

		  // Return negative clone of `this` % `red modulo`
		  BN.prototype.redNeg = function redNeg () {
		    assert(this.red, 'redNeg works only with red numbers');
		    this.red._verify1(this);
		    return this.red.neg(this);
		  };

		  BN.prototype.redPow = function redPow (num) {
		    assert(this.red && !num.red, 'redPow(normalNum)');
		    this.red._verify1(this);
		    return this.red.pow(this, num);
		  };

		  // Prime numbers with efficient reduction
		  var primes = {
		    k256: null,
		    p224: null,
		    p192: null,
		    p25519: null
		  };

		  // Pseudo-Mersenne prime
		  function MPrime (name, p) {
		    // P = 2 ^ N - K
		    this.name = name;
		    this.p = new BN(p, 16);
		    this.n = this.p.bitLength();
		    this.k = new BN(1).iushln(this.n).isub(this.p);

		    this.tmp = this._tmp();
		  }

		  MPrime.prototype._tmp = function _tmp () {
		    var tmp = new BN(null);
		    tmp.words = new Array(Math.ceil(this.n / 13));
		    return tmp;
		  };

		  MPrime.prototype.ireduce = function ireduce (num) {
		    // Assumes that `num` is less than `P^2`
		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		    var r = num;
		    var rlen;

		    do {
		      this.split(r, this.tmp);
		      r = this.imulK(r);
		      r = r.iadd(this.tmp);
		      rlen = r.bitLength();
		    } while (rlen > this.n);

		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		    if (cmp === 0) {
		      r.words[0] = 0;
		      r.length = 1;
		    } else if (cmp > 0) {
		      r.isub(this.p);
		    } else {
		      if (r.strip !== undefined) {
		        // r is BN v4 instance
		        r.strip();
		      } else {
		        // r is BN v5 instance
		        r._strip();
		      }
		    }

		    return r;
		  };

		  MPrime.prototype.split = function split (input, out) {
		    input.iushrn(this.n, 0, out);
		  };

		  MPrime.prototype.imulK = function imulK (num) {
		    return num.imul(this.k);
		  };

		  function K256 () {
		    MPrime.call(
		      this,
		      'k256',
		      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
		  }
		  inherits(K256, MPrime);

		  K256.prototype.split = function split (input, output) {
		    // 256 = 9 * 26 + 22
		    var mask = 0x3fffff;

		    var outLen = Math.min(input.length, 9);
		    for (var i = 0; i < outLen; i++) {
		      output.words[i] = input.words[i];
		    }
		    output.length = outLen;

		    if (input.length <= 9) {
		      input.words[0] = 0;
		      input.length = 1;
		      return;
		    }

		    // Shift by 9 limbs
		    var prev = input.words[9];
		    output.words[output.length++] = prev & mask;

		    for (i = 10; i < input.length; i++) {
		      var next = input.words[i] | 0;
		      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
		      prev = next;
		    }
		    prev >>>= 22;
		    input.words[i - 10] = prev;
		    if (prev === 0 && input.length > 10) {
		      input.length -= 10;
		    } else {
		      input.length -= 9;
		    }
		  };

		  K256.prototype.imulK = function imulK (num) {
		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		    num.words[num.length] = 0;
		    num.words[num.length + 1] = 0;
		    num.length += 2;

		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		    var lo = 0;
		    for (var i = 0; i < num.length; i++) {
		      var w = num.words[i] | 0;
		      lo += w * 0x3d1;
		      num.words[i] = lo & 0x3ffffff;
		      lo = w * 0x40 + ((lo / 0x4000000) | 0);
		    }

		    // Fast length reduction
		    if (num.words[num.length - 1] === 0) {
		      num.length--;
		      if (num.words[num.length - 1] === 0) {
		        num.length--;
		      }
		    }
		    return num;
		  };

		  function P224 () {
		    MPrime.call(
		      this,
		      'p224',
		      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
		  }
		  inherits(P224, MPrime);

		  function P192 () {
		    MPrime.call(
		      this,
		      'p192',
		      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
		  }
		  inherits(P192, MPrime);

		  function P25519 () {
		    // 2 ^ 255 - 19
		    MPrime.call(
		      this,
		      '25519',
		      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
		  }
		  inherits(P25519, MPrime);

		  P25519.prototype.imulK = function imulK (num) {
		    // K = 0x13
		    var carry = 0;
		    for (var i = 0; i < num.length; i++) {
		      var hi = (num.words[i] | 0) * 0x13 + carry;
		      var lo = hi & 0x3ffffff;
		      hi >>>= 26;

		      num.words[i] = lo;
		      carry = hi;
		    }
		    if (carry !== 0) {
		      num.words[num.length++] = carry;
		    }
		    return num;
		  };

		  // Exported mostly for testing purposes, use plain name instead
		  BN._prime = function prime (name) {
		    // Cached version of prime
		    if (primes[name]) return primes[name];

		    var prime;
		    if (name === 'k256') {
		      prime = new K256();
		    } else if (name === 'p224') {
		      prime = new P224();
		    } else if (name === 'p192') {
		      prime = new P192();
		    } else if (name === 'p25519') {
		      prime = new P25519();
		    } else {
		      throw new Error('Unknown prime ' + name);
		    }
		    primes[name] = prime;

		    return prime;
		  };

		  //
		  // Base reduction engine
		  //
		  function Red (m) {
		    if (typeof m === 'string') {
		      var prime = BN._prime(m);
		      this.m = prime.p;
		      this.prime = prime;
		    } else {
		      assert(m.gtn(1), 'modulus must be greater than 1');
		      this.m = m;
		      this.prime = null;
		    }
		  }

		  Red.prototype._verify1 = function _verify1 (a) {
		    assert(a.negative === 0, 'red works only with positives');
		    assert(a.red, 'red works only with red numbers');
		  };

		  Red.prototype._verify2 = function _verify2 (a, b) {
		    assert((a.negative | b.negative) === 0, 'red works only with positives');
		    assert(a.red && a.red === b.red,
		      'red works only with red numbers');
		  };

		  Red.prototype.imod = function imod (a) {
		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
		    return a.umod(this.m)._forceRed(this);
		  };

		  Red.prototype.neg = function neg (a) {
		    if (a.isZero()) {
		      return a.clone();
		    }

		    return this.m.sub(a)._forceRed(this);
		  };

		  Red.prototype.add = function add (a, b) {
		    this._verify2(a, b);

		    var res = a.add(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.iadd = function iadd (a, b) {
		    this._verify2(a, b);

		    var res = a.iadd(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res;
		  };

		  Red.prototype.sub = function sub (a, b) {
		    this._verify2(a, b);

		    var res = a.sub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.isub = function isub (a, b) {
		    this._verify2(a, b);

		    var res = a.isub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res;
		  };

		  Red.prototype.shl = function shl (a, num) {
		    this._verify1(a);
		    return this.imod(a.ushln(num));
		  };

		  Red.prototype.imul = function imul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.imul(b));
		  };

		  Red.prototype.mul = function mul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.mul(b));
		  };

		  Red.prototype.isqr = function isqr (a) {
		    return this.imul(a, a.clone());
		  };

		  Red.prototype.sqr = function sqr (a) {
		    return this.mul(a, a);
		  };

		  Red.prototype.sqrt = function sqrt (a) {
		    if (a.isZero()) return a.clone();

		    var mod3 = this.m.andln(3);
		    assert(mod3 % 2 === 1);

		    // Fast case
		    if (mod3 === 3) {
		      var pow = this.m.add(new BN(1)).iushrn(2);
		      return this.pow(a, pow);
		    }

		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
		    //
		    // Find Q and S, that Q * 2 ^ S = (P - 1)
		    var q = this.m.subn(1);
		    var s = 0;
		    while (!q.isZero() && q.andln(1) === 0) {
		      s++;
		      q.iushrn(1);
		    }
		    assert(!q.isZero());

		    var one = new BN(1).toRed(this);
		    var nOne = one.redNeg();

		    // Find quadratic non-residue
		    // NOTE: Max is such because of generalized Riemann hypothesis.
		    var lpow = this.m.subn(1).iushrn(1);
		    var z = this.m.bitLength();
		    z = new BN(2 * z * z).toRed(this);

		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
		      z.redIAdd(nOne);
		    }

		    var c = this.pow(z, q);
		    var r = this.pow(a, q.addn(1).iushrn(1));
		    var t = this.pow(a, q);
		    var m = s;
		    while (t.cmp(one) !== 0) {
		      var tmp = t;
		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
		        tmp = tmp.redSqr();
		      }
		      assert(i < m);
		      var b = this.pow(c, new BN(1).iushln(m - i - 1));

		      r = r.redMul(b);
		      c = b.redSqr();
		      t = t.redMul(c);
		      m = i;
		    }

		    return r;
		  };

		  Red.prototype.invm = function invm (a) {
		    var inv = a._invmp(this.m);
		    if (inv.negative !== 0) {
		      inv.negative = 0;
		      return this.imod(inv).redNeg();
		    } else {
		      return this.imod(inv);
		    }
		  };

		  Red.prototype.pow = function pow (a, num) {
		    if (num.isZero()) return new BN(1).toRed(this);
		    if (num.cmpn(1) === 0) return a.clone();

		    var windowSize = 4;
		    var wnd = new Array(1 << windowSize);
		    wnd[0] = new BN(1).toRed(this);
		    wnd[1] = a;
		    for (var i = 2; i < wnd.length; i++) {
		      wnd[i] = this.mul(wnd[i - 1], a);
		    }

		    var res = wnd[0];
		    var current = 0;
		    var currentLen = 0;
		    var start = num.bitLength() % 26;
		    if (start === 0) {
		      start = 26;
		    }

		    for (i = num.length - 1; i >= 0; i--) {
		      var word = num.words[i];
		      for (var j = start - 1; j >= 0; j--) {
		        var bit = (word >> j) & 1;
		        if (res !== wnd[0]) {
		          res = this.sqr(res);
		        }

		        if (bit === 0 && current === 0) {
		          currentLen = 0;
		          continue;
		        }

		        current <<= 1;
		        current |= bit;
		        currentLen++;
		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

		        res = this.mul(res, wnd[current]);
		        currentLen = 0;
		        current = 0;
		      }
		      start = 26;
		    }

		    return res;
		  };

		  Red.prototype.convertTo = function convertTo (num) {
		    var r = num.umod(this.m);

		    return r === num ? r.clone() : r;
		  };

		  Red.prototype.convertFrom = function convertFrom (num) {
		    var res = num.clone();
		    res.red = null;
		    return res;
		  };

		  //
		  // Montgomery method engine
		  //

		  BN.mont = function mont (num) {
		    return new Mont(num);
		  };

		  function Mont (m) {
		    Red.call(this, m);

		    this.shift = this.m.bitLength();
		    if (this.shift % 26 !== 0) {
		      this.shift += 26 - (this.shift % 26);
		    }

		    this.r = new BN(1).iushln(this.shift);
		    this.r2 = this.imod(this.r.sqr());
		    this.rinv = this.r._invmp(this.m);

		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		    this.minv = this.minv.umod(this.r);
		    this.minv = this.r.sub(this.minv);
		  }
		  inherits(Mont, Red);

		  Mont.prototype.convertTo = function convertTo (num) {
		    return this.imod(num.ushln(this.shift));
		  };

		  Mont.prototype.convertFrom = function convertFrom (num) {
		    var r = this.imod(num.mul(this.rinv));
		    r.red = null;
		    return r;
		  };

		  Mont.prototype.imul = function imul (a, b) {
		    if (a.isZero() || b.isZero()) {
		      a.words[0] = 0;
		      a.length = 1;
		      return a;
		    }

		    var t = a.imul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;

		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.mul = function mul (a, b) {
		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

		    var t = a.mul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.invm = function invm (a) {
		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		    var res = this.imod(a._invmp(this.m).mul(this.r2));
		    return res._forceRed(this);
		  };
		})('object' === 'undefined' || module, commonjsGlobal);
	} (bn$1));

	var bn = bnExports;

	var minimalisticAssert = assert$f;

	function assert$f(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert$f.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var utils$o = {};

	(function (exports) {
		'use strict';

		var utils = exports;

		function toArray(msg, enc) {
		  if (Array.isArray(msg))
		    return msg.slice();
		  if (!msg)
		    return [];
		  var res = [];
		  if (typeof msg !== 'string') {
		    for (var i = 0; i < msg.length; i++)
		      res[i] = msg[i] | 0;
		    return res;
		  }
		  if (enc === 'hex') {
		    msg = msg.replace(/[^a-z0-9]+/ig, '');
		    if (msg.length % 2 !== 0)
		      msg = '0' + msg;
		    for (var i = 0; i < msg.length; i += 2)
		      res.push(parseInt(msg[i] + msg[i + 1], 16));
		  } else {
		    for (var i = 0; i < msg.length; i++) {
		      var c = msg.charCodeAt(i);
		      var hi = c >> 8;
		      var lo = c & 0xff;
		      if (hi)
		        res.push(hi, lo);
		      else
		        res.push(lo);
		    }
		  }
		  return res;
		}
		utils.toArray = toArray;

		function zero2(word) {
		  if (word.length === 1)
		    return '0' + word;
		  else
		    return word;
		}
		utils.zero2 = zero2;

		function toHex(msg) {
		  var res = '';
		  for (var i = 0; i < msg.length; i++)
		    res += zero2(msg[i].toString(16));
		  return res;
		}
		utils.toHex = toHex;

		utils.encode = function encode(arr, enc) {
		  if (enc === 'hex')
		    return toHex(arr);
		  else
		    return arr;
		};
	} (utils$o));

	(function (exports) {
		'use strict';

		var utils = exports;
		var BN = bnExports;
		var minAssert = minimalisticAssert;
		var minUtils = utils$o;

		utils.assert = minAssert;
		utils.toArray = minUtils.toArray;
		utils.zero2 = minUtils.zero2;
		utils.toHex = minUtils.toHex;
		utils.encode = minUtils.encode;

		// Represent num in a w-NAF form
		function getNAF(num, w, bits) {
		  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
		  naf.fill(0);

		  var ws = 1 << (w + 1);
		  var k = num.clone();

		  for (var i = 0; i < naf.length; i++) {
		    var z;
		    var mod = k.andln(ws - 1);
		    if (k.isOdd()) {
		      if (mod > (ws >> 1) - 1)
		        z = (ws >> 1) - mod;
		      else
		        z = mod;
		      k.isubn(z);
		    } else {
		      z = 0;
		    }

		    naf[i] = z;
		    k.iushrn(1);
		  }

		  return naf;
		}
		utils.getNAF = getNAF;

		// Represent k1, k2 in a Joint Sparse Form
		function getJSF(k1, k2) {
		  var jsf = [
		    [],
		    [],
		  ];

		  k1 = k1.clone();
		  k2 = k2.clone();
		  var d1 = 0;
		  var d2 = 0;
		  var m8;
		  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
		    // First phase
		    var m14 = (k1.andln(3) + d1) & 3;
		    var m24 = (k2.andln(3) + d2) & 3;
		    if (m14 === 3)
		      m14 = -1;
		    if (m24 === 3)
		      m24 = -1;
		    var u1;
		    if ((m14 & 1) === 0) {
		      u1 = 0;
		    } else {
		      m8 = (k1.andln(7) + d1) & 7;
		      if ((m8 === 3 || m8 === 5) && m24 === 2)
		        u1 = -m14;
		      else
		        u1 = m14;
		    }
		    jsf[0].push(u1);

		    var u2;
		    if ((m24 & 1) === 0) {
		      u2 = 0;
		    } else {
		      m8 = (k2.andln(7) + d2) & 7;
		      if ((m8 === 3 || m8 === 5) && m14 === 2)
		        u2 = -m24;
		      else
		        u2 = m24;
		    }
		    jsf[1].push(u2);

		    // Second phase
		    if (2 * d1 === u1 + 1)
		      d1 = 1 - d1;
		    if (2 * d2 === u2 + 1)
		      d2 = 1 - d2;
		    k1.iushrn(1);
		    k2.iushrn(1);
		  }

		  return jsf;
		}
		utils.getJSF = getJSF;

		function cachedProperty(obj, name, computer) {
		  var key = '_' + name;
		  obj.prototype[name] = function cachedProperty() {
		    return this[key] !== undefined ? this[key] :
		      this[key] = computer.call(this);
		  };
		}
		utils.cachedProperty = cachedProperty;

		function parseBytes(bytes) {
		  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
		    bytes;
		}
		utils.parseBytes = parseBytes;

		function intFromLE(bytes) {
		  return new BN(bytes, 'hex', 'le');
		}
		utils.intFromLE = intFromLE;
	} (utils$p));

	var brorandExports = {};
	var brorand = {
	  get exports(){ return brorandExports; },
	  set exports(v){ brorandExports = v; },
	};

	var r$1;

	brorand.exports = function rand(len) {
	  if (!r$1)
	    r$1 = new Rand(null);

	  return r$1.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	var Rand_1 = brorandExports.Rand = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
	    return this.rand.getBytes(n);

	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
	    res[i] = this.rand.getByte();
	  return res;
	};

	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto$2 = require$$0$3;
	    if (typeof crypto$2.randomBytes !== 'function')
	      throw new Error('Not supported');

	    Rand.prototype._rand = function _rand(n) {
	      return crypto$2.randomBytes(n);
	    };
	  } catch (e) {
	  }
	}

	var curve = {};

	'use strict';

	var BN$7 = bnExports;
	var utils$n = utils$p;
	var getNAF = utils$n.getNAF;
	var getJSF = utils$n.getJSF;
	var assert$e = utils$n.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new BN$7(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? BN$7.red(conf.prime) : BN$7.mont(this.p);

	  // Useful for many curves
	  this.zero = new BN$7(0).toRed(this.red);
	  this.one = new BN$7(1).toRed(this.red);
	  this.two = new BN$7(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new BN$7(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$e(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
	    nafW = 0;
	    for (var l = j + doubles.step - 1; l >= j; l--)
	      nafW = (nafW << 1) + naf[l];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (j = 0; j < repr.length; j++) {
	      nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var l = 0; i >= 0 && naf[i] === 0; i--)
	      l++;
	    if (i >= 0)
	      l++;
	    acc = acc.dblp(l);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$e(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	  points,
	  coeffs,
	  len,
	  jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
	    p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b], /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3,  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (j = 0; j < len; j++) {
	      var z = tmp[j];
	      p;
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils$n.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$e(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$e(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	      bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils$n.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null,
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles,
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res,
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var inherits$4;
	if (typeof Object.create === 'function'){
	  inherits$4 = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits$4 = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$5 = inherits$4;

	var _polyfillNode_inherits = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: inherits$5
	});

	var require$$1$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_inherits);

	'use strict';

	var utils$m = utils$p;
	var BN$6 = bnExports;
	var inherits$3 = require$$1$2;
	var Base$2 = base;

	var assert$d = utils$m.assert;

	function ShortCurve(conf) {
	  Base$2.call(this, 'short', conf);

	  this.a = new BN$6(conf.a, 16).toRed(this.red);
	  this.b = new BN$6(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits$3(ShortCurve, Base$2);
	var short = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new BN$6(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new BN$6(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$d(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new BN$6(vec.a, 16),
	        b: new BN$6(vec.b, 16),
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis,
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : BN$6.mont(num);
	  var tinv = new BN$6(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new BN$6(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new BN$6(1);
	  var y1 = new BN$6(0);
	  var x2 = new BN$6(0);
	  var y2 = new BN$6(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 },
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$6(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	      var npoints = this._endoWnafT1;
	      var ncoeffs = this._endoWnafT2;
	      for (var i = 0; i < points.length; i++) {
	        var split = this._endoSplit(coeffs[i]);
	        var p = points[i];
	        var beta = p._getBeta();

	        if (split.k1.negative) {
	          split.k1.ineg();
	          p = p.neg(true);
	        }
	        if (split.k2.negative) {
	          split.k2.ineg();
	          beta = beta.neg(true);
	        }

	        npoints[i * 2] = p;
	        npoints[i * 2 + 1] = beta;
	        ncoeffs[i * 2] = split.k1;
	        ncoeffs[i * 2 + 1] = split.k2;
	      }
	      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	      // Clean-up references to points and coefficients
	      for (var j = 0; j < i * 2; j++) {
	        npoints[j] = null;
	        ncoeffs[j] = null;
	      }
	      return res;
	    };

	function Point$2(curve, x, y, isRed) {
	  Base$2.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new BN$6(x, 16);
	    this.y = new BN$6(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits$3(Point$2, Base$2.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point$2(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point$2.fromJSON(this, obj, red);
	};

	Point$2.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul),
	      },
	    };
	  }
	  return beta;
	};

	Point$2.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1),
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1),
	    },
	  } ];
	};

	Point$2.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point)),
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point)),
	    },
	  };
	  return res;
	};

	Point$2.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point$2.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point$2.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point$2.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point$2.prototype.mul = function mul(k) {
	  k = new BN$6(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point$2.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point$2.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate),
	      },
	    };
	  }
	  return res;
	};

	Point$2.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  Base$2.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new BN$6(0);
	  } else {
	    this.x = new BN$6(x, 16);
	    this.y = new BN$6(y, 16);
	    this.z = new BN$6(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits$3(JPoint, Base$2.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new BN$6(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	'use strict';

	var BN$5 = bnExports;
	var inherits$2 = require$$1$2;
	var Base$1 = base;

	var utils$l = utils$p;

	function MontCurve(conf) {
	  Base$1.call(this, 'mont', conf);

	  this.a = new BN$5(conf.a, 16).toRed(this.red);
	  this.b = new BN$5(conf.b, 16).toRed(this.red);
	  this.i4 = new BN$5(4).toRed(this.red).redInvm();
	  this.two = new BN$5(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits$2(MontCurve, Base$1);
	var mont = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point$1(curve, x, z) {
	  Base$1.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new BN$5(x, 16);
	    this.z = new BN$5(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits$2(Point$1, Base$1.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils$l.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point$1(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$1.fromJSON(this, obj);
	};

	Point$1.prototype.precompute = function precompute() {
	  // No-op
	};

	Point$1.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point$1.fromJSON = function fromJSON(curve, obj) {
	  return new Point$1(curve, obj[0], obj[1] || curve.one);
	};

	Point$1.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$1.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point$1.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point$1.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point$1.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point$1.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};

	'use strict';

	var utils$k = utils$p;
	var BN$4 = bnExports;
	var inherits$1 = require$$1$2;
	var Base = base;

	var assert$c = utils$k.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  Base.call(this, 'edwards', conf);

	  this.a = new BN$4(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new BN$4(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new BN$4(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert$c(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits$1(EdwardsCurve, Base);
	var edwards = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$4(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new BN$4(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.fromRed().isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point(curve, x, y, z, t) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new BN$4(x, 16);
	    this.y = new BN$4(y, 16);
	    this.z = z ? new BN$4(z, 16) : this.curve.one;
	    this.t = t && new BN$4(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits$1(Point, Base.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	    (this.y.cmp(this.z) === 0 ||
	    (this.zOne && this.y.cmp(this.curve.c) === 0));
	};

	Point.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  var e;
	  var h;
	  var j;
	  if (this.curve.twisted) {
	    // E = a * C
	    e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      h = this.z.redSqr();
	      // J = F - 2 * H
	      j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    e = c.redAdd(d);
	    // H = (c * Z1)^2
	    h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};

	Point.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	    this.y,
	    this.z,
	    this.t && this.t.redNeg());
	};

	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	Point.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;

	(function (exports) {
		'use strict';

		var curve = exports;

		curve.base = base;
		curve.short = short;
		curve.mont = mont;
		curve.edwards = edwards;
	} (curve));

	var curves$2 = {};

	var hash$2 = {};

	var utils$j = {};

	'use strict';

	var assert$b = minimalisticAssert;
	var inherits = require$$1$2;

	var inherits_1 = utils$j.inherits = inherits;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	var toArray_1 = utils$j.toArray = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	var toHex_1 = utils$j.toHex = toHex;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	var htonl_1 = utils$j.htonl = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	var toHex32_1 = utils$j.toHex32 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	var zero2_1 = utils$j.zero2 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	var zero8_1 = utils$j.zero8 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert$b(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	var join32_1 = utils$j.join32 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	var split32_1 = utils$j.split32 = split32;

	function rotr32$1(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	var rotr32_1 = utils$j.rotr32 = rotr32$1;

	function rotl32$2(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	var rotl32_1 = utils$j.rotl32 = rotl32$2;

	function sum32$3(a, b) {
	  return (a + b) >>> 0;
	}
	var sum32_1 = utils$j.sum32 = sum32$3;

	function sum32_3$1(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	var sum32_3_1 = utils$j.sum32_3 = sum32_3$1;

	function sum32_4$2(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	var sum32_4_1 = utils$j.sum32_4 = sum32_4$2;

	function sum32_5$2(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	var sum32_5_1 = utils$j.sum32_5 = sum32_5$2;

	function sum64$1(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	var sum64_1 = utils$j.sum64 = sum64$1;

	function sum64_hi$1(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	var sum64_hi_1 = utils$j.sum64_hi = sum64_hi$1;

	function sum64_lo$1(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	var sum64_lo_1 = utils$j.sum64_lo = sum64_lo$1;

	function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	var sum64_4_hi_1 = utils$j.sum64_4_hi = sum64_4_hi$1;

	function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	var sum64_4_lo_1 = utils$j.sum64_4_lo = sum64_4_lo$1;

	function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	var sum64_5_hi_1 = utils$j.sum64_5_hi = sum64_5_hi$1;

	function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	var sum64_5_lo_1 = utils$j.sum64_5_lo = sum64_5_lo$1;

	function rotr64_hi$1(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	var rotr64_hi_1 = utils$j.rotr64_hi = rotr64_hi$1;

	function rotr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var rotr64_lo_1 = utils$j.rotr64_lo = rotr64_lo$1;

	function shr64_hi$1(ah, al, num) {
	  return ah >>> num;
	}
	var shr64_hi_1 = utils$j.shr64_hi = shr64_hi$1;

	function shr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var shr64_lo_1 = utils$j.shr64_lo = shr64_lo$1;

	var common$5 = {};

	'use strict';

	var utils$i = utils$j;
	var assert$a = minimalisticAssert;

	function BlockHash$4() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	var BlockHash_1 = common$5.BlockHash = BlockHash$4;

	BlockHash$4.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils$i.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils$i.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash$4.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert$a(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash$4.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var sha = {};

	var common$4 = {};

	'use strict';

	var utils$h = utils$j;
	var rotr32 = utils$h.rotr32;

	function ft_1$1(s, x, y, z) {
	  if (s === 0)
	    return ch32$1(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32$1(x, y, z);
	}
	var ft_1_1 = common$4.ft_1 = ft_1$1;

	function ch32$1(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	var ch32_1 = common$4.ch32 = ch32$1;

	function maj32$1(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	var maj32_1 = common$4.maj32 = maj32$1;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	var p32_1 = common$4.p32 = p32;

	function s0_256$1(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}
	var s0_256_1 = common$4.s0_256 = s0_256$1;

	function s1_256$1(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}
	var s1_256_1 = common$4.s1_256 = s1_256$1;

	function g0_256$1(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}
	var g0_256_1 = common$4.g0_256 = g0_256$1;

	function g1_256$1(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}
	var g1_256_1 = common$4.g1_256 = g1_256$1;

	'use strict';

	var utils$g = utils$j;
	var common$3 = common$5;
	var shaCommon$1 = common$4;

	var rotl32$1 = utils$g.rotl32;
	var sum32$2 = utils$g.sum32;
	var sum32_5$1 = utils$g.sum32_5;
	var ft_1 = shaCommon$1.ft_1;
	var BlockHash$3 = common$3.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash$3.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils$g.inherits(SHA1, BlockHash$3);
	var _1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32$1(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$2(this.h[0], a);
	  this.h[1] = sum32$2(this.h[1], b);
	  this.h[2] = sum32$2(this.h[2], c);
	  this.h[3] = sum32$2(this.h[3], d);
	  this.h[4] = sum32$2(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$g.toHex32(this.h, 'big');
	  else
	    return utils$g.split32(this.h, 'big');
	};

	'use strict';

	var utils$f = utils$j;
	var common$2 = common$5;
	var shaCommon = common$4;
	var assert$9 = minimalisticAssert;

	var sum32$1 = utils$f.sum32;
	var sum32_4$1 = utils$f.sum32_4;
	var sum32_5 = utils$f.sum32_5;
	var ch32 = shaCommon.ch32;
	var maj32 = shaCommon.maj32;
	var s0_256 = shaCommon.s0_256;
	var s1_256 = shaCommon.s1_256;
	var g0_256 = shaCommon.g0_256;
	var g1_256 = shaCommon.g1_256;

	var BlockHash$2 = common$2.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256$1() {
	  if (!(this instanceof SHA256$1))
	    return new SHA256$1();

	  BlockHash$2.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils$f.inherits(SHA256$1, BlockHash$2);
	var _256 = SHA256$1;

	SHA256$1.blockSize = 512;
	SHA256$1.outSize = 256;
	SHA256$1.hmacStrength = 192;
	SHA256$1.padLength = 64;

	SHA256$1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  assert$9(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$1(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$1(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$1(T1, T2);
	  }

	  this.h[0] = sum32$1(this.h[0], a);
	  this.h[1] = sum32$1(this.h[1], b);
	  this.h[2] = sum32$1(this.h[2], c);
	  this.h[3] = sum32$1(this.h[3], d);
	  this.h[4] = sum32$1(this.h[4], e);
	  this.h[5] = sum32$1(this.h[5], f);
	  this.h[6] = sum32$1(this.h[6], g);
	  this.h[7] = sum32$1(this.h[7], h);
	};

	SHA256$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$f.toHex32(this.h, 'big');
	  else
	    return utils$f.split32(this.h, 'big');
	};

	'use strict';

	var utils$e = utils$j;
	var SHA256 = _256;

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  SHA256.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils$e.inherits(SHA224, SHA256);
	var _224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils$e.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils$e.split32(this.h.slice(0, 7), 'big');
	};

	'use strict';

	var utils$d = utils$j;
	var common$1 = common$5;
	var assert$8 = minimalisticAssert;

	var rotr64_hi = utils$d.rotr64_hi;
	var rotr64_lo = utils$d.rotr64_lo;
	var shr64_hi = utils$d.shr64_hi;
	var shr64_lo = utils$d.shr64_lo;
	var sum64 = utils$d.sum64;
	var sum64_hi = utils$d.sum64_hi;
	var sum64_lo = utils$d.sum64_lo;
	var sum64_4_hi = utils$d.sum64_4_hi;
	var sum64_4_lo = utils$d.sum64_4_lo;
	var sum64_5_hi = utils$d.sum64_5_hi;
	var sum64_5_lo = utils$d.sum64_5_lo;

	var BlockHash$1 = common$1.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512$1() {
	  if (!(this instanceof SHA512$1))
	    return new SHA512$1();

	  BlockHash$1.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils$d.inherits(SHA512$1, BlockHash$1);
	var _512 = SHA512$1;

	SHA512$1.blockSize = 1024;
	SHA512$1.outSize = 512;
	SHA512$1.hmacStrength = 192;
	SHA512$1.padLength = 128;

	SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512$1.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  assert$8(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};

	SHA512$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$d.toHex32(this.h, 'big');
	  else
	    return utils$d.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	'use strict';

	var utils$c = utils$j;

	var SHA512 = _512;

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  SHA512.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils$c.inherits(SHA384, SHA512);
	var _384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$c.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils$c.split32(this.h.slice(0, 12), 'big');
	};

	'use strict';

	var sha1 = sha.sha1 = _1;
	var sha224 = sha.sha224 = _224;
	var sha256$2 = sha.sha256 = _256;
	var sha384 = sha.sha384 = _384;
	var sha512$1 = sha.sha512 = _512;

	var ripemd = {};

	'use strict';

	var utils$b = utils$j;
	var common = common$5;

	var rotl32 = utils$b.rotl32;
	var sum32 = utils$b.sum32;
	var sum32_3 = utils$b.sum32_3;
	var sum32_4 = utils$b.sum32_4;
	var BlockHash = common.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils$b.inherits(RIPEMD160, BlockHash);
	var ripemd160$1 = ripemd.ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$b.toHex32(this.h, 'little');
	  else
	    return utils$b.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	'use strict';

	var utils$a = utils$j;
	var assert$7 = minimalisticAssert;

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils$a.toArray(key, enc));
	}
	var hmac = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  assert$7(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	(function (exports) {
		var hash = exports;

		hash.utils = utils$j;
		hash.common = common$5;
		hash.sha = sha;
		hash.ripemd = ripemd;
		hash.hmac = hmac;

		// Proxy hash functions to the main object
		hash.sha1 = hash.sha.sha1;
		hash.sha256 = hash.sha.sha256;
		hash.sha224 = hash.sha.sha224;
		hash.sha384 = hash.sha.sha384;
		hash.sha512 = hash.sha.sha512;
		hash.ripemd160 = hash.ripemd.ripemd160;
	} (hash$2));

	var secp256k1;
	var hasRequiredSecp256k1;

	function requireSecp256k1 () {
		if (hasRequiredSecp256k1) return secp256k1;
		hasRequiredSecp256k1 = 1;
		secp256k1 = {
		  doubles: {
		    step: 4,
		    points: [
		      [
		        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
		        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
		      ],
		      [
		        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
		        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
		      ],
		      [
		        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
		        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
		      ],
		      [
		        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
		        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
		      ],
		      [
		        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
		        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
		      ],
		      [
		        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
		        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
		      ],
		      [
		        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
		        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
		      ],
		      [
		        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
		        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
		      ],
		      [
		        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
		        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
		      ],
		      [
		        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
		        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
		      ],
		      [
		        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
		        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
		      ],
		      [
		        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
		        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
		      ],
		      [
		        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
		        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
		      ],
		      [
		        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
		        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
		      ],
		      [
		        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
		        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
		      ],
		      [
		        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
		        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
		      ],
		      [
		        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
		        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
		      ],
		      [
		        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
		        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
		      ],
		      [
		        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
		        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
		      ],
		      [
		        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
		        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
		      ],
		      [
		        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
		        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
		      ],
		      [
		        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
		        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
		      ],
		      [
		        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
		        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
		      ],
		      [
		        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
		        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
		      ],
		      [
		        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
		        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
		      ],
		      [
		        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
		        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
		      ],
		      [
		        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
		        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
		      ],
		      [
		        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
		        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
		      ],
		      [
		        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
		        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
		      ],
		      [
		        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
		        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
		      ],
		      [
		        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
		        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
		      ],
		      [
		        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
		        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
		      ],
		      [
		        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
		        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
		      ],
		      [
		        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
		        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
		      ],
		      [
		        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
		        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
		      ],
		      [
		        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
		        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
		      ],
		      [
		        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
		        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
		      ],
		      [
		        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
		        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
		      ],
		      [
		        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
		        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
		      ],
		      [
		        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
		        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
		      ],
		      [
		        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
		        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
		      ],
		      [
		        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
		        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
		      ],
		      [
		        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
		        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
		      ],
		      [
		        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
		        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
		      ],
		      [
		        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
		        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
		      ],
		      [
		        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
		        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
		      ],
		      [
		        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
		        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
		      ],
		      [
		        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
		        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
		      ],
		      [
		        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
		        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
		      ],
		      [
		        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
		        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
		      ],
		      [
		        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
		        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
		      ],
		      [
		        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
		        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
		      ],
		      [
		        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
		        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
		      ],
		      [
		        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
		        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
		      ],
		      [
		        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
		        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
		      ],
		      [
		        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
		        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
		      ],
		      [
		        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
		        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
		      ],
		      [
		        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
		        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
		      ],
		      [
		        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
		        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
		      ],
		      [
		        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
		        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
		      ],
		      [
		        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
		        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
		      ],
		      [
		        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
		        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
		      ],
		      [
		        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
		        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
		      ],
		      [
		        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
		        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
		      ],
		      [
		        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
		        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
		      ],
		    ],
		  },
		  naf: {
		    wnd: 7,
		    points: [
		      [
		        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
		        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
		      ],
		      [
		        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
		        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
		      ],
		      [
		        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
		        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
		      ],
		      [
		        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
		        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
		      ],
		      [
		        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
		        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
		      ],
		      [
		        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
		        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
		      ],
		      [
		        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
		        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
		      ],
		      [
		        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
		        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
		      ],
		      [
		        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
		        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
		      ],
		      [
		        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
		        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
		      ],
		      [
		        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
		        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
		      ],
		      [
		        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
		        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
		      ],
		      [
		        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
		        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
		      ],
		      [
		        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
		        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
		      ],
		      [
		        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
		        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
		      ],
		      [
		        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
		        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
		      ],
		      [
		        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
		        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
		      ],
		      [
		        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
		        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
		      ],
		      [
		        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
		        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
		      ],
		      [
		        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
		        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
		      ],
		      [
		        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
		        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
		      ],
		      [
		        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
		        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
		      ],
		      [
		        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
		        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
		      ],
		      [
		        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
		        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
		      ],
		      [
		        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
		        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
		      ],
		      [
		        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
		        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
		      ],
		      [
		        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
		        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
		      ],
		      [
		        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
		        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
		      ],
		      [
		        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
		        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
		      ],
		      [
		        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
		        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
		      ],
		      [
		        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
		        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
		      ],
		      [
		        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
		        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
		      ],
		      [
		        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
		        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
		      ],
		      [
		        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
		        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
		      ],
		      [
		        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
		        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
		      ],
		      [
		        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
		        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
		      ],
		      [
		        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
		        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
		      ],
		      [
		        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
		        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
		      ],
		      [
		        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
		        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
		      ],
		      [
		        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
		        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
		      ],
		      [
		        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
		        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
		      ],
		      [
		        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
		        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
		      ],
		      [
		        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
		        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
		      ],
		      [
		        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
		        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
		      ],
		      [
		        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
		        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
		      ],
		      [
		        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
		        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
		      ],
		      [
		        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
		        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
		      ],
		      [
		        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
		        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
		      ],
		      [
		        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
		        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
		      ],
		      [
		        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
		        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
		      ],
		      [
		        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
		        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
		      ],
		      [
		        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
		        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
		      ],
		      [
		        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
		        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
		      ],
		      [
		        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
		        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
		      ],
		      [
		        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
		        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
		      ],
		      [
		        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
		        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
		      ],
		      [
		        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
		        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
		      ],
		      [
		        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
		        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
		      ],
		      [
		        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
		        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
		      ],
		      [
		        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
		        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
		      ],
		      [
		        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
		        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
		      ],
		      [
		        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
		        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
		      ],
		      [
		        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
		        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
		      ],
		      [
		        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
		        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
		      ],
		      [
		        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
		        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
		      ],
		      [
		        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
		        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
		      ],
		      [
		        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
		        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
		      ],
		      [
		        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
		        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
		      ],
		      [
		        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
		        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
		      ],
		      [
		        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
		        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
		      ],
		      [
		        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
		        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
		      ],
		      [
		        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
		        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
		      ],
		      [
		        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
		        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
		      ],
		      [
		        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
		        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
		      ],
		      [
		        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
		        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
		      ],
		      [
		        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
		        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
		      ],
		      [
		        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
		        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
		      ],
		      [
		        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
		        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
		      ],
		      [
		        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
		        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
		      ],
		      [
		        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
		        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
		      ],
		      [
		        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
		        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
		      ],
		      [
		        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
		        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
		      ],
		      [
		        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
		        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
		      ],
		      [
		        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
		        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
		      ],
		      [
		        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
		        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
		      ],
		      [
		        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
		        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
		      ],
		      [
		        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
		        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
		      ],
		      [
		        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
		        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
		      ],
		      [
		        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
		        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
		      ],
		      [
		        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
		        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
		      ],
		      [
		        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
		        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
		      ],
		      [
		        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
		        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
		      ],
		      [
		        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
		        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
		      ],
		      [
		        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
		        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
		      ],
		      [
		        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
		        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
		      ],
		      [
		        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
		        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
		      ],
		      [
		        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
		        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
		      ],
		      [
		        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
		        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
		      ],
		      [
		        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
		        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
		      ],
		      [
		        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
		        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
		      ],
		      [
		        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
		        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
		      ],
		      [
		        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
		        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
		      ],
		      [
		        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
		        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
		      ],
		      [
		        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
		        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
		      ],
		      [
		        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
		        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
		      ],
		      [
		        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
		        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
		      ],
		      [
		        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
		        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
		      ],
		      [
		        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
		        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
		      ],
		      [
		        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
		        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
		      ],
		      [
		        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
		        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
		      ],
		      [
		        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
		        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
		      ],
		      [
		        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
		        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
		      ],
		      [
		        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
		        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
		      ],
		      [
		        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
		        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
		      ],
		      [
		        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
		        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
		      ],
		      [
		        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
		        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
		      ],
		      [
		        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
		        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
		      ],
		      [
		        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
		        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
		      ],
		      [
		        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
		        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
		      ],
		      [
		        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
		        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
		      ],
		      [
		        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
		        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
		      ],
		      [
		        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
		        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
		      ],
		      [
		        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
		        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
		      ],
		      [
		        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
		        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
		      ],
		      [
		        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
		        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
		      ],
		      [
		        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
		        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
		      ],
		      [
		        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
		        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
		      ],
		    ],
		  },
		};
		return secp256k1;
	}

	(function (exports) {
		'use strict';

		var curves = exports;

		var hash = hash$2;
		var curve$1 = curve;
		var utils = utils$p;

		var assert = utils.assert;

		function PresetCurve(options) {
		  if (options.type === 'short')
		    this.curve = new curve$1.short(options);
		  else if (options.type === 'edwards')
		    this.curve = new curve$1.edwards(options);
		  else
		    this.curve = new curve$1.mont(options);
		  this.g = this.curve.g;
		  this.n = this.curve.n;
		  this.hash = options.hash;

		  assert(this.g.validate(), 'Invalid curve');
		  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
		}
		curves.PresetCurve = PresetCurve;

		function defineCurve(name, options) {
		  Object.defineProperty(curves, name, {
		    configurable: true,
		    enumerable: true,
		    get: function() {
		      var curve = new PresetCurve(options);
		      Object.defineProperty(curves, name, {
		        configurable: true,
		        enumerable: true,
		        value: curve,
		      });
		      return curve;
		    },
		  });
		}

		defineCurve('p192', {
		  type: 'short',
		  prime: 'p192',
		  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
		  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
		  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
		    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
		  ],
		});

		defineCurve('p224', {
		  type: 'short',
		  prime: 'p224',
		  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
		  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
		  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
		    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
		  ],
		});

		defineCurve('p256', {
		  type: 'short',
		  prime: null,
		  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
		  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
		  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
		  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
		    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
		  ],
		});

		defineCurve('p384', {
		  type: 'short',
		  prime: null,
		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'fffffffe ffffffff 00000000 00000000 ffffffff',
		  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'fffffffe ffffffff 00000000 00000000 fffffffc',
		  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
		     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
		  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
		     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
		  hash: hash.sha384,
		  gRed: false,
		  g: [
		    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
		    '5502f25d bf55296c 3a545e38 72760ab7',
		    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
		    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
		  ],
		});

		defineCurve('p521', {
		  type: 'short',
		  prime: null,
		  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff ffffffff',
		  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff fffffffc',
		  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
		     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
		     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
		  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
		     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
		  hash: hash.sha512,
		  gRed: false,
		  g: [
		    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
		    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
		    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
		    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
		    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
		    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
		  ],
		});

		defineCurve('curve25519', {
		  type: 'mont',
		  prime: 'p25519',
		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
		  a: '76d06',
		  b: '1',
		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '9',
		  ],
		});

		defineCurve('ed25519', {
		  type: 'edwards',
		  prime: 'p25519',
		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
		  a: '-1',
		  c: '1',
		  // -121665 * (121666^(-1)) (mod P)
		  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

		    // 4/5
		    '6666666666666666666666666666666666666666666666666666666666666658',
		  ],
		});

		var pre;
		try {
		  pre = requireSecp256k1();
		} catch (e) {
		  pre = undefined;
		}

		defineCurve('secp256k1', {
		  type: 'short',
		  prime: 'k256',
		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
		  a: '0',
		  b: '7',
		  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
		  h: '1',
		  hash: hash.sha256,

		  // Precomputed endomorphism
		  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
		  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
		  basis: [
		    {
		      a: '3086d221a7d46bcde86c90e49284eb15',
		      b: '-e4437ed6010e88286f547fa90abfe4c3',
		    },
		    {
		      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
		      b: '3086d221a7d46bcde86c90e49284eb15',
		    },
		  ],

		  gRed: false,
		  g: [
		    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
		    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
		    pre,
		  ],
		});
	} (curves$2));

	'use strict';

	var hash$1 = hash$2;
	var utils$9 = utils$o;
	var assert$6 = minimalisticAssert;

	function HmacDRBG$1(options) {
	  if (!(this instanceof HmacDRBG$1))
	    return new HmacDRBG$1(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils$9.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils$9.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils$9.toArray(options.pers, options.persEnc || 'hex');
	  assert$6(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg = HmacDRBG$1;

	HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG$1.prototype._hmac = function hmac() {
	  return new hash$1.hmac(this.hash, this.K);
	};

	HmacDRBG$1.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils$9.toArray(entropy, entropyEnc);
	  add = utils$9.toArray(add, addEnc);

	  assert$6(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils$9.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils$9.encode(res, enc);
	};

	'use strict';

	var BN$3 = bnExports;
	var utils$8 = utils$p;
	var assert$5 = utils$8.assert;

	function KeyPair$3(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key$1 = KeyPair$3;

	KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair$3)
	    return pub;

	  return new KeyPair$3(ec, {
	    pub: pub,
	    pubEnc: enc,
	  });
	};

	KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair$3)
	    return priv;

	  return new KeyPair$3(ec, {
	    priv: priv,
	    privEnc: enc,
	  });
	};

	KeyPair$3.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new BN$3(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$5(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$5(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair$3.prototype.derive = function derive(pub) {
	  if(!pub.validate()) {
	    assert$5(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair$3.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair$3.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair$3.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};

	'use strict';

	var BN$2 = bnExports;

	var utils$7 = utils$p;
	var assert$4 = utils$7.assert;

	function Signature$3(options, enc) {
	  if (options instanceof Signature$3)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$4(options.r && options.s, 'Signature without r or s');
	  this.r = new BN$2(options.r, 16);
	  this.s = new BN$2(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature$1 = Signature$3;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature$3.prototype._importDER = function _importDER(data, enc) {
	  data = utils$7.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new BN$2(r);
	  this.s = new BN$2(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature$3.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils$7.encode(res, enc);
	};

	'use strict';

	var BN$1 = bnExports;
	var HmacDRBG = hmacDrbg;
	var utils$6 = utils$p;
	var curves$1 = curves$2;
	var rand = brorandExports;
	var assert$3 = utils$6.assert;

	var KeyPair$2 = key$1;
	var Signature$2 = signature$1;

	function EC$1(options) {
	  if (!(this instanceof EC$1))
	    return new EC$1(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$3(Object.prototype.hasOwnProperty.call(curves$1, options),
	      'Unknown curve ' + options);

	    options = curves$1[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves$1.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec = EC$1;

	EC$1.prototype.keyPair = function keyPair(options) {
	  return new KeyPair$2(this, options);
	};

	EC$1.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return KeyPair$2.fromPrivate(this, priv, enc);
	};

	EC$1.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return KeyPair$2.fromPublic(this, pub, enc);
	};

	EC$1.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || rand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray(),
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new BN$1(2));
	  for (;;) {
	    var priv = new BN$1(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  }
	};

	EC$1.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC$1.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new BN$1(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new BN$1(1));

	  for (var iter = 0; ; iter++) {
	    var k = options.k ?
	      options.k(iter) :
	      new BN$1(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new Signature$2({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC$1.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new BN$1(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new Signature$2(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;

	  if (!this.curve._maxwellTrick) {
	    p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC$1.prototype.recoverPubKey = function(msg, signature, j, enc) {
	  assert$3((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new Signature$2(signature, enc);

	  var n = this.n;
	  var e = new BN$1(msg);
	  var r = signature.r;
	  var s = signature.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC$1.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
	  signature = new Signature$2(signature, enc);
	  if (signature.recoveryParam !== null)
	    return signature.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	'use strict';

	var utils$5 = utils$p;
	var assert$2 = utils$5.assert;
	var parseBytes$2 = utils$5.parseBytes;
	var cachedProperty$1 = utils$5.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair$1(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes$2(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes$2(params.pub);
	}

	KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair$1)
	    return pub;
	  return new KeyPair$1(eddsa, { pub: pub });
	};

	KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair$1)
	    return secret;
	  return new KeyPair$1(eddsa, { secret: secret });
	};

	KeyPair$1.prototype.secret = function secret() {
	  return this._secret;
	};

	cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	cachedProperty$1(KeyPair$1, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	cachedProperty$1(KeyPair$1, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	cachedProperty$1(KeyPair$1, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair$1.prototype.sign = function sign(message) {
	  assert$2(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair$1.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair$1.prototype.getSecret = function getSecret(enc) {
	  assert$2(this._secret, 'KeyPair is public only');
	  return utils$5.encode(this.secret(), enc);
	};

	KeyPair$1.prototype.getPublic = function getPublic(enc) {
	  return utils$5.encode(this.pubBytes(), enc);
	};

	var key = KeyPair$1;

	'use strict';

	var BN = bnExports;
	var utils$4 = utils$p;
	var assert$1 = utils$4.assert;
	var cachedProperty = utils$4.cachedProperty;
	var parseBytes$1 = utils$4.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature$1(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes$1(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength),
	    };
	  }

	  assert$1(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof BN)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	cachedProperty(Signature$1, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	cachedProperty(Signature$1, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	cachedProperty(Signature$1, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});

	cachedProperty(Signature$1, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature$1.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature$1.prototype.toHex = function toHex() {
	  return utils$4.encode(this.toBytes(), 'hex').toUpperCase();
	};

	var signature = Signature$1;

	'use strict';

	var hash = hash$2;
	var curves = curves$2;
	var utils$3 = utils$p;
	var assert = utils$3.assert;
	var parseBytes = utils$3.parseBytes;
	var KeyPair = key;
	var Signature = signature;

	function EDDSA(curve) {
	  assert(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  curve = curves[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash.sha512;
	}

	var eddsa = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	    .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils$3.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return KeyPair.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return KeyPair.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof Signature)
	    return sig;
	  return new Signature(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils$3.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils$3.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils$3.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};

	(function (exports) {
		'use strict';

		var elliptic = exports;

		elliptic.version = require$$0.version;
		elliptic.utils = utils$p;
		elliptic.rand = brorandExports;
		elliptic.curve = curve;
		elliptic.curves = curves$2;

		// Protocols
		elliptic.ec = ec;
		elliptic.eddsa = eddsa;
	} (elliptic));

	"use strict";
	var __importDefault$b = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(elliptic$1, "__esModule", { value: true });
	var EC_1 = elliptic$1.EC = void 0;
	var elliptic_1$1 = __importDefault$b(elliptic);
	var EC = elliptic_1$1.default.ec;
	EC_1 = elliptic$1.EC = EC;

	var _version$e = {};

	"use strict";
	Object.defineProperty(_version$e, "__esModule", { value: true });
	var version$e = _version$e.version = void 0;
	version$e = _version$e.version = "signing-key/5.7.0";

	"use strict";
	Object.defineProperty(lib$d, "__esModule", { value: true });
	var computePublicKey_1 = lib$d.computePublicKey = recoverPublicKey_1 = lib$d.recoverPublicKey = SigningKey_1 = lib$d.SigningKey = void 0;
	var elliptic_1 = elliptic$1;
	var bytes_1$j = lib$r;
	var properties_1$i = lib$p;
	var logger_1$q = lib$q;
	var _version_1$q = _version$e;
	var logger$p = new logger_1$q.Logger(_version_1$q.version);
	var _curve = null;
	function getCurve() {
	    if (!_curve) {
	        _curve = new elliptic_1.EC("secp256k1");
	    }
	    return _curve;
	}
	var SigningKey = /** @class */ (function () {
	    function SigningKey(privateKey) {
	        (0, properties_1$i.defineReadOnly)(this, "curve", "secp256k1");
	        (0, properties_1$i.defineReadOnly)(this, "privateKey", (0, bytes_1$j.hexlify)(privateKey));
	        if ((0, bytes_1$j.hexDataLength)(this.privateKey) !== 32) {
	            logger$p.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
	        }
	        var keyPair = getCurve().keyFromPrivate((0, bytes_1$j.arrayify)(this.privateKey));
	        (0, properties_1$i.defineReadOnly)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
	        (0, properties_1$i.defineReadOnly)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
	        (0, properties_1$i.defineReadOnly)(this, "_isSigningKey", true);
	    }
	    SigningKey.prototype._addPoint = function (other) {
	        var p0 = getCurve().keyFromPublic((0, bytes_1$j.arrayify)(this.publicKey));
	        var p1 = getCurve().keyFromPublic((0, bytes_1$j.arrayify)(other));
	        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
	    };
	    SigningKey.prototype.signDigest = function (digest) {
	        var keyPair = getCurve().keyFromPrivate((0, bytes_1$j.arrayify)(this.privateKey));
	        var digestBytes = (0, bytes_1$j.arrayify)(digest);
	        if (digestBytes.length !== 32) {
	            logger$p.throwArgumentError("bad digest length", "digest", digest);
	        }
	        var signature = keyPair.sign(digestBytes, { canonical: true });
	        return (0, bytes_1$j.splitSignature)({
	            recoveryParam: signature.recoveryParam,
	            r: (0, bytes_1$j.hexZeroPad)("0x" + signature.r.toString(16), 32),
	            s: (0, bytes_1$j.hexZeroPad)("0x" + signature.s.toString(16), 32),
	        });
	    };
	    SigningKey.prototype.computeSharedSecret = function (otherKey) {
	        var keyPair = getCurve().keyFromPrivate((0, bytes_1$j.arrayify)(this.privateKey));
	        var otherKeyPair = getCurve().keyFromPublic((0, bytes_1$j.arrayify)(computePublicKey(otherKey)));
	        return (0, bytes_1$j.hexZeroPad)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
	    };
	    SigningKey.isSigningKey = function (value) {
	        return !!(value && value._isSigningKey);
	    };
	    return SigningKey;
	}());
	var SigningKey_1 = lib$d.SigningKey = SigningKey;
	function recoverPublicKey(digest, signature) {
	    var sig = (0, bytes_1$j.splitSignature)(signature);
	    var rs = { r: (0, bytes_1$j.arrayify)(sig.r), s: (0, bytes_1$j.arrayify)(sig.s) };
	    return "0x" + getCurve().recoverPubKey((0, bytes_1$j.arrayify)(digest), rs, sig.recoveryParam).encode("hex", false);
	}
	var recoverPublicKey_1 = lib$d.recoverPublicKey = recoverPublicKey;
	function computePublicKey(key, compressed) {
	    var bytes = (0, bytes_1$j.arrayify)(key);
	    if (bytes.length === 32) {
	        var signingKey = new SigningKey(bytes);
	        if (compressed) {
	            return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
	        }
	        return signingKey.publicKey;
	    }
	    else if (bytes.length === 33) {
	        if (compressed) {
	            return (0, bytes_1$j.hexlify)(bytes);
	        }
	        return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
	    }
	    else if (bytes.length === 65) {
	        if (!compressed) {
	            return (0, bytes_1$j.hexlify)(bytes);
	        }
	        return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
	    }
	    return logger$p.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
	}
	computePublicKey_1 = lib$d.computePublicKey = computePublicKey;

	var _version$d = {};

	"use strict";
	Object.defineProperty(_version$d, "__esModule", { value: true });
	var version$d = _version$d.version = void 0;
	version$d = _version$d.version = "transactions/5.7.0";

	(function (exports) {
		"use strict";
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
		    Object.defineProperty(o, "default", { enumerable: true, value: v });
		}) : function(o, v) {
		    o["default"] = v;
		});
		var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
		    if (mod && mod.__esModule) return mod;
		    var result = {};
		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		    __setModuleDefault(result, mod);
		    return result;
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.parse = exports.serialize = exports.accessListify = exports.recoverAddress = exports.computeAddress = exports.TransactionTypes = void 0;
		var address_1 = lib$o;
		var bignumber_1 = lib$s;
		var bytes_1 = lib$r;
		var constants_1 = lib$l;
		var keccak256_1 = lib$n;
		var properties_1 = lib$p;
		var RLP = __importStar(lib$m);
		var signing_key_1 = lib$d;
		var logger_1 = lib$q;
		var _version_1 = _version$d;
		var logger = new logger_1.Logger(_version_1.version);
		var TransactionTypes;
		(function (TransactionTypes) {
		    TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
		    TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
		    TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
		})(TransactionTypes = exports.TransactionTypes || (exports.TransactionTypes = {}));
		;
		///////////////////////////////
		function handleAddress(value) {
		    if (value === "0x") {
		        return null;
		    }
		    return (0, address_1.getAddress)(value);
		}
		function handleNumber(value) {
		    if (value === "0x") {
		        return constants_1.Zero;
		    }
		    return bignumber_1.BigNumber.from(value);
		}
		// Legacy Transaction Fields
		var transactionFields = [
		    { name: "nonce", maxLength: 32, numeric: true },
		    { name: "gasPrice", maxLength: 32, numeric: true },
		    { name: "gasLimit", maxLength: 32, numeric: true },
		    { name: "to", length: 20 },
		    { name: "value", maxLength: 32, numeric: true },
		    { name: "data" },
		];
		var allowedTransactionKeys = {
		    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
		};
		function computeAddress(key) {
		    var publicKey = (0, signing_key_1.computePublicKey)(key);
		    return (0, address_1.getAddress)((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.hexDataSlice)(publicKey, 1)), 12));
		}
		exports.computeAddress = computeAddress;
		function recoverAddress(digest, signature) {
		    return computeAddress((0, signing_key_1.recoverPublicKey)((0, bytes_1.arrayify)(digest), signature));
		}
		exports.recoverAddress = recoverAddress;
		function formatNumber(value, name) {
		    var result = (0, bytes_1.stripZeros)(bignumber_1.BigNumber.from(value).toHexString());
		    if (result.length > 32) {
		        logger.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
		    }
		    return result;
		}
		function accessSetify(addr, storageKeys) {
		    return {
		        address: (0, address_1.getAddress)(addr),
		        storageKeys: (storageKeys || []).map(function (storageKey, index) {
		            if ((0, bytes_1.hexDataLength)(storageKey) !== 32) {
		                logger.throwArgumentError("invalid access list storageKey", "accessList[" + addr + ":" + index + "]", storageKey);
		            }
		            return storageKey.toLowerCase();
		        })
		    };
		}
		function accessListify(value) {
		    if (Array.isArray(value)) {
		        return value.map(function (set, index) {
		            if (Array.isArray(set)) {
		                if (set.length > 2) {
		                    logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", "value[" + index + "]", set);
		                }
		                return accessSetify(set[0], set[1]);
		            }
		            return accessSetify(set.address, set.storageKeys);
		        });
		    }
		    var result = Object.keys(value).map(function (addr) {
		        var storageKeys = value[addr].reduce(function (accum, storageKey) {
		            accum[storageKey] = true;
		            return accum;
		        }, {});
		        return accessSetify(addr, Object.keys(storageKeys).sort());
		    });
		    result.sort(function (a, b) { return (a.address.localeCompare(b.address)); });
		    return result;
		}
		exports.accessListify = accessListify;
		function formatAccessList(value) {
		    return accessListify(value).map(function (set) { return [set.address, set.storageKeys]; });
		}
		function _serializeEip1559(transaction, signature) {
		    // If there is an explicit gasPrice, make sure it matches the
		    // EIP-1559 fees; otherwise they may not understand what they
		    // think they are setting in terms of fee.
		    if (transaction.gasPrice != null) {
		        var gasPrice = bignumber_1.BigNumber.from(transaction.gasPrice);
		        var maxFeePerGas = bignumber_1.BigNumber.from(transaction.maxFeePerGas || 0);
		        if (!gasPrice.eq(maxFeePerGas)) {
		            logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
		                gasPrice: gasPrice,
		                maxFeePerGas: maxFeePerGas
		            });
		        }
		    }
		    var fields = [
		        formatNumber(transaction.chainId || 0, "chainId"),
		        formatNumber(transaction.nonce || 0, "nonce"),
		        formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
		        formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
		        formatNumber(transaction.gasLimit || 0, "gasLimit"),
		        ((transaction.to != null) ? (0, address_1.getAddress)(transaction.to) : "0x"),
		        formatNumber(transaction.value || 0, "value"),
		        (transaction.data || "0x"),
		        (formatAccessList(transaction.accessList || []))
		    ];
		    if (signature) {
		        var sig = (0, bytes_1.splitSignature)(signature);
		        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
		        fields.push((0, bytes_1.stripZeros)(sig.r));
		        fields.push((0, bytes_1.stripZeros)(sig.s));
		    }
		    return (0, bytes_1.hexConcat)(["0x02", RLP.encode(fields)]);
		}
		function _serializeEip2930(transaction, signature) {
		    var fields = [
		        formatNumber(transaction.chainId || 0, "chainId"),
		        formatNumber(transaction.nonce || 0, "nonce"),
		        formatNumber(transaction.gasPrice || 0, "gasPrice"),
		        formatNumber(transaction.gasLimit || 0, "gasLimit"),
		        ((transaction.to != null) ? (0, address_1.getAddress)(transaction.to) : "0x"),
		        formatNumber(transaction.value || 0, "value"),
		        (transaction.data || "0x"),
		        (formatAccessList(transaction.accessList || []))
		    ];
		    if (signature) {
		        var sig = (0, bytes_1.splitSignature)(signature);
		        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
		        fields.push((0, bytes_1.stripZeros)(sig.r));
		        fields.push((0, bytes_1.stripZeros)(sig.s));
		    }
		    return (0, bytes_1.hexConcat)(["0x01", RLP.encode(fields)]);
		}
		// Legacy Transactions and EIP-155
		function _serialize(transaction, signature) {
		    (0, properties_1.checkProperties)(transaction, allowedTransactionKeys);
		    var raw = [];
		    transactionFields.forEach(function (fieldInfo) {
		        var value = transaction[fieldInfo.name] || ([]);
		        var options = {};
		        if (fieldInfo.numeric) {
		            options.hexPad = "left";
		        }
		        value = (0, bytes_1.arrayify)((0, bytes_1.hexlify)(value, options));
		        // Fixed-width field
		        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
		            logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
		        }
		        // Variable-width (with a maximum)
		        if (fieldInfo.maxLength) {
		            value = (0, bytes_1.stripZeros)(value);
		            if (value.length > fieldInfo.maxLength) {
		                logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
		            }
		        }
		        raw.push((0, bytes_1.hexlify)(value));
		    });
		    var chainId = 0;
		    if (transaction.chainId != null) {
		        // A chainId was provided; if non-zero we'll use EIP-155
		        chainId = transaction.chainId;
		        if (typeof (chainId) !== "number") {
		            logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
		        }
		    }
		    else if (signature && !(0, bytes_1.isBytesLike)(signature) && signature.v > 28) {
		        // No chainId provided, but the signature is signing with EIP-155; derive chainId
		        chainId = Math.floor((signature.v - 35) / 2);
		    }
		    // We have an EIP-155 transaction (chainId was specified and non-zero)
		    if (chainId !== 0) {
		        raw.push((0, bytes_1.hexlify)(chainId)); // @TODO: hexValue?
		        raw.push("0x");
		        raw.push("0x");
		    }
		    // Requesting an unsigned transaction
		    if (!signature) {
		        return RLP.encode(raw);
		    }
		    // The splitSignature will ensure the transaction has a recoveryParam in the
		    // case that the signTransaction function only adds a v.
		    var sig = (0, bytes_1.splitSignature)(signature);
		    // We pushed a chainId and null r, s on for hashing only; remove those
		    var v = 27 + sig.recoveryParam;
		    if (chainId !== 0) {
		        raw.pop();
		        raw.pop();
		        raw.pop();
		        v += chainId * 2 + 8;
		        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
		        if (sig.v > 28 && sig.v !== v) {
		            logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
		        }
		    }
		    else if (sig.v !== v) {
		        logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
		    }
		    raw.push((0, bytes_1.hexlify)(v));
		    raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.r)));
		    raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.s)));
		    return RLP.encode(raw);
		}
		function serialize(transaction, signature) {
		    // Legacy and EIP-155 Transactions
		    if (transaction.type == null || transaction.type === 0) {
		        if (transaction.accessList != null) {
		            logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
		        }
		        return _serialize(transaction, signature);
		    }
		    // Typed Transactions (EIP-2718)
		    switch (transaction.type) {
		        case 1:
		            return _serializeEip2930(transaction, signature);
		        case 2:
		            return _serializeEip1559(transaction, signature);
		        default:
		            break;
		    }
		    return logger.throwError("unsupported transaction type: " + transaction.type, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
		        operation: "serializeTransaction",
		        transactionType: transaction.type
		    });
		}
		exports.serialize = serialize;
		function _parseEipSignature(tx, fields, serialize) {
		    try {
		        var recid = handleNumber(fields[0]).toNumber();
		        if (recid !== 0 && recid !== 1) {
		            throw new Error("bad recid");
		        }
		        tx.v = recid;
		    }
		    catch (error) {
		        logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
		    }
		    tx.r = (0, bytes_1.hexZeroPad)(fields[1], 32);
		    tx.s = (0, bytes_1.hexZeroPad)(fields[2], 32);
		    try {
		        var digest = (0, keccak256_1.keccak256)(serialize(tx));
		        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
		    }
		    catch (error) { }
		}
		function _parseEip1559(payload) {
		    var transaction = RLP.decode(payload.slice(1));
		    if (transaction.length !== 9 && transaction.length !== 12) {
		        logger.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, bytes_1.hexlify)(payload));
		    }
		    var maxPriorityFeePerGas = handleNumber(transaction[2]);
		    var maxFeePerGas = handleNumber(transaction[3]);
		    var tx = {
		        type: 2,
		        chainId: handleNumber(transaction[0]).toNumber(),
		        nonce: handleNumber(transaction[1]).toNumber(),
		        maxPriorityFeePerGas: maxPriorityFeePerGas,
		        maxFeePerGas: maxFeePerGas,
		        gasPrice: null,
		        gasLimit: handleNumber(transaction[4]),
		        to: handleAddress(transaction[5]),
		        value: handleNumber(transaction[6]),
		        data: transaction[7],
		        accessList: accessListify(transaction[8]),
		    };
		    // Unsigned EIP-1559 Transaction
		    if (transaction.length === 9) {
		        return tx;
		    }
		    tx.hash = (0, keccak256_1.keccak256)(payload);
		    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
		    return tx;
		}
		function _parseEip2930(payload) {
		    var transaction = RLP.decode(payload.slice(1));
		    if (transaction.length !== 8 && transaction.length !== 11) {
		        logger.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, bytes_1.hexlify)(payload));
		    }
		    var tx = {
		        type: 1,
		        chainId: handleNumber(transaction[0]).toNumber(),
		        nonce: handleNumber(transaction[1]).toNumber(),
		        gasPrice: handleNumber(transaction[2]),
		        gasLimit: handleNumber(transaction[3]),
		        to: handleAddress(transaction[4]),
		        value: handleNumber(transaction[5]),
		        data: transaction[6],
		        accessList: accessListify(transaction[7])
		    };
		    // Unsigned EIP-2930 Transaction
		    if (transaction.length === 8) {
		        return tx;
		    }
		    tx.hash = (0, keccak256_1.keccak256)(payload);
		    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
		    return tx;
		}
		// Legacy Transactions and EIP-155
		function _parse(rawTransaction) {
		    var transaction = RLP.decode(rawTransaction);
		    if (transaction.length !== 9 && transaction.length !== 6) {
		        logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
		    }
		    var tx = {
		        nonce: handleNumber(transaction[0]).toNumber(),
		        gasPrice: handleNumber(transaction[1]),
		        gasLimit: handleNumber(transaction[2]),
		        to: handleAddress(transaction[3]),
		        value: handleNumber(transaction[4]),
		        data: transaction[5],
		        chainId: 0
		    };
		    // Legacy unsigned transaction
		    if (transaction.length === 6) {
		        return tx;
		    }
		    try {
		        tx.v = bignumber_1.BigNumber.from(transaction[6]).toNumber();
		    }
		    catch (error) {
		        // @TODO: What makes snese to do? The v is too big
		        return tx;
		    }
		    tx.r = (0, bytes_1.hexZeroPad)(transaction[7], 32);
		    tx.s = (0, bytes_1.hexZeroPad)(transaction[8], 32);
		    if (bignumber_1.BigNumber.from(tx.r).isZero() && bignumber_1.BigNumber.from(tx.s).isZero()) {
		        // EIP-155 unsigned transaction
		        tx.chainId = tx.v;
		        tx.v = 0;
		    }
		    else {
		        // Signed Transaction
		        tx.chainId = Math.floor((tx.v - 35) / 2);
		        if (tx.chainId < 0) {
		            tx.chainId = 0;
		        }
		        var recoveryParam = tx.v - 27;
		        var raw = transaction.slice(0, 6);
		        if (tx.chainId !== 0) {
		            raw.push((0, bytes_1.hexlify)(tx.chainId));
		            raw.push("0x");
		            raw.push("0x");
		            recoveryParam -= tx.chainId * 2 + 8;
		        }
		        var digest = (0, keccak256_1.keccak256)(RLP.encode(raw));
		        try {
		            tx.from = recoverAddress(digest, { r: (0, bytes_1.hexlify)(tx.r), s: (0, bytes_1.hexlify)(tx.s), recoveryParam: recoveryParam });
		        }
		        catch (error) { }
		        tx.hash = (0, keccak256_1.keccak256)(rawTransaction);
		    }
		    tx.type = null;
		    return tx;
		}
		function parse(rawTransaction) {
		    var payload = (0, bytes_1.arrayify)(rawTransaction);
		    // Legacy and EIP-155 Transactions
		    if (payload[0] > 0x7f) {
		        return _parse(payload);
		    }
		    // Typed Transaction (EIP-2718)
		    switch (payload[0]) {
		        case 1:
		            return _parseEip2930(payload);
		        case 2:
		            return _parseEip1559(payload);
		        default:
		            break;
		    }
		    return logger.throwError("unsupported transaction type: " + payload[0], logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
		        operation: "parseTransaction",
		        transactionType: payload[0]
		    });
		}
		exports.parse = parse;
		
	} (lib$e));

	var index$c = /*@__PURE__*/getDefaultExportFromCjs(lib$e);

	var _version$c = {};

	"use strict";
	Object.defineProperty(_version$c, "__esModule", { value: true });
	var version$c = _version$c.version = void 0;
	version$c = _version$c.version = "contracts/5.7.0";

	"use strict";
	var __extends$v = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$m = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$m = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	Object.defineProperty(lib$u, "__esModule", { value: true });
	var ContractFactory_1 = lib$u.ContractFactory = Contract_1 = lib$u.Contract = BaseContract_1 = lib$u.BaseContract = void 0;
	var abi_1 = lib$t;
	var abstract_provider_1$3 = lib$g;
	var abstract_signer_1$2 = lib$f;
	var address_1$5 = lib$o;
	var bignumber_1$8 = lib$s;
	var bytes_1$i = lib$r;
	var properties_1$h = lib$p;
	var transactions_1$6 = lib$e;
	var logger_1$p = lib$q;
	var _version_1$p = _version$c;
	var logger$o = new logger_1$p.Logger(_version_1$p.version);
	;
	;
	///////////////////////////////
	var allowedTransactionKeys$1 = {
	    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
	    type: true, accessList: true,
	    maxFeePerGas: true, maxPriorityFeePerGas: true,
	    customData: true,
	    ccipReadEnabled: true
	};
	function resolveName(resolver, nameOrPromise) {
	    return __awaiter$m(this, void 0, void 0, function () {
	        var name, address;
	        return __generator$m(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, nameOrPromise];
	                case 1:
	                    name = _a.sent();
	                    if (typeof (name) !== "string") {
	                        logger$o.throwArgumentError("invalid address or ENS name", "name", name);
	                    }
	                    // If it is already an address, just use it (after adding checksum)
	                    try {
	                        return [2 /*return*/, (0, address_1$5.getAddress)(name)];
	                    }
	                    catch (error) { }
	                    if (!resolver) {
	                        logger$o.throwError("a provider or signer is needed to resolve ENS names", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
	                            operation: "resolveName"
	                        });
	                    }
	                    return [4 /*yield*/, resolver.resolveName(name)];
	                case 2:
	                    address = _a.sent();
	                    if (address == null) {
	                        logger$o.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
	                    }
	                    return [2 /*return*/, address];
	            }
	        });
	    });
	}
	// Recursively replaces ENS names with promises to resolve the name and resolves all properties
	function resolveAddresses(resolver, value, paramType) {
	    return __awaiter$m(this, void 0, void 0, function () {
	        return __generator$m(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    if (!Array.isArray(paramType)) return [3 /*break*/, 2];
	                    return [4 /*yield*/, Promise.all(paramType.map(function (paramType, index) {
	                            return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
	                        }))];
	                case 1: return [2 /*return*/, _a.sent()];
	                case 2:
	                    if (!(paramType.type === "address")) return [3 /*break*/, 4];
	                    return [4 /*yield*/, resolveName(resolver, value)];
	                case 3: return [2 /*return*/, _a.sent()];
	                case 4:
	                    if (!(paramType.type === "tuple")) return [3 /*break*/, 6];
	                    return [4 /*yield*/, resolveAddresses(resolver, value, paramType.components)];
	                case 5: return [2 /*return*/, _a.sent()];
	                case 6:
	                    if (!(paramType.baseType === "array")) return [3 /*break*/, 8];
	                    if (!Array.isArray(value)) {
	                        return [2 /*return*/, Promise.reject(logger$o.makeError("invalid value for array", logger_1$p.Logger.errors.INVALID_ARGUMENT, {
	                                argument: "value",
	                                value: value
	                            }))];
	                    }
	                    return [4 /*yield*/, Promise.all(value.map(function (v) { return resolveAddresses(resolver, v, paramType.arrayChildren); }))];
	                case 7: return [2 /*return*/, _a.sent()];
	                case 8: return [2 /*return*/, value];
	            }
	        });
	    });
	}
	function populateTransaction(contract, fragment, args) {
	    return __awaiter$m(this, void 0, void 0, function () {
	        var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;
	        var _this = this;
	        return __generator$m(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    overrides = {};
	                    if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
	                        overrides = (0, properties_1$h.shallowCopy)(args.pop());
	                    }
	                    // Make sure the parameter count matches
	                    logger$o.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
	                    // Populate "from" override (allow promises)
	                    if (contract.signer) {
	                        if (overrides.from) {
	                            // Contracts with a Signer are from the Signer's frame-of-reference;
	                            // but we allow overriding "from" if it matches the signer
	                            overrides.from = (0, properties_1$h.resolveProperties)({
	                                override: resolveName(contract.signer, overrides.from),
	                                signer: contract.signer.getAddress()
	                            }).then(function (check) { return __awaiter$m(_this, void 0, void 0, function () {
	                                return __generator$m(this, function (_a) {
	                                    if ((0, address_1$5.getAddress)(check.signer) !== check.override) {
	                                        logger$o.throwError("Contract with a Signer cannot override from", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
	                                            operation: "overrides.from"
	                                        });
	                                    }
	                                    return [2 /*return*/, check.override];
	                                });
	                            }); });
	                        }
	                        else {
	                            overrides.from = contract.signer.getAddress();
	                        }
	                    }
	                    else if (overrides.from) {
	                        overrides.from = resolveName(contract.provider, overrides.from);
	                        //} else {
	                        // Contracts without a signer can override "from", and if
	                        // unspecified the zero address is used
	                        //overrides.from = AddressZero;
	                    }
	                    return [4 /*yield*/, (0, properties_1$h.resolveProperties)({
	                            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
	                            address: contract.resolvedAddress,
	                            overrides: ((0, properties_1$h.resolveProperties)(overrides) || {})
	                        })];
	                case 1:
	                    resolved = _a.sent();
	                    data = contract.interface.encodeFunctionData(fragment, resolved.args);
	                    tx = {
	                        data: data,
	                        to: resolved.address
	                    };
	                    ro = resolved.overrides;
	                    // Populate simple overrides
	                    if (ro.nonce != null) {
	                        tx.nonce = bignumber_1$8.BigNumber.from(ro.nonce).toNumber();
	                    }
	                    if (ro.gasLimit != null) {
	                        tx.gasLimit = bignumber_1$8.BigNumber.from(ro.gasLimit);
	                    }
	                    if (ro.gasPrice != null) {
	                        tx.gasPrice = bignumber_1$8.BigNumber.from(ro.gasPrice);
	                    }
	                    if (ro.maxFeePerGas != null) {
	                        tx.maxFeePerGas = bignumber_1$8.BigNumber.from(ro.maxFeePerGas);
	                    }
	                    if (ro.maxPriorityFeePerGas != null) {
	                        tx.maxPriorityFeePerGas = bignumber_1$8.BigNumber.from(ro.maxPriorityFeePerGas);
	                    }
	                    if (ro.from != null) {
	                        tx.from = ro.from;
	                    }
	                    if (ro.type != null) {
	                        tx.type = ro.type;
	                    }
	                    if (ro.accessList != null) {
	                        tx.accessList = (0, transactions_1$6.accessListify)(ro.accessList);
	                    }
	                    // If there was no "gasLimit" override, but the ABI specifies a default, use it
	                    if (tx.gasLimit == null && fragment.gas != null) {
	                        intrinsic = 21000;
	                        bytes = (0, bytes_1$i.arrayify)(data);
	                        for (i = 0; i < bytes.length; i++) {
	                            intrinsic += 4;
	                            if (bytes[i]) {
	                                intrinsic += 64;
	                            }
	                        }
	                        tx.gasLimit = bignumber_1$8.BigNumber.from(fragment.gas).add(intrinsic);
	                    }
	                    // Populate "value" override
	                    if (ro.value) {
	                        roValue = bignumber_1$8.BigNumber.from(ro.value);
	                        if (!roValue.isZero() && !fragment.payable) {
	                            logger$o.throwError("non-payable method cannot override value", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "overrides.value",
	                                value: overrides.value
	                            });
	                        }
	                        tx.value = roValue;
	                    }
	                    if (ro.customData) {
	                        tx.customData = (0, properties_1$h.shallowCopy)(ro.customData);
	                    }
	                    if (ro.ccipReadEnabled) {
	                        tx.ccipReadEnabled = !!ro.ccipReadEnabled;
	                    }
	                    // Remove the overrides
	                    delete overrides.nonce;
	                    delete overrides.gasLimit;
	                    delete overrides.gasPrice;
	                    delete overrides.from;
	                    delete overrides.value;
	                    delete overrides.type;
	                    delete overrides.accessList;
	                    delete overrides.maxFeePerGas;
	                    delete overrides.maxPriorityFeePerGas;
	                    delete overrides.customData;
	                    delete overrides.ccipReadEnabled;
	                    leftovers = Object.keys(overrides).filter(function (key) { return (overrides[key] != null); });
	                    if (leftovers.length) {
	                        logger$o.throwError("cannot override " + leftovers.map(function (l) { return JSON.stringify(l); }).join(","), logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
	                            operation: "overrides",
	                            overrides: leftovers
	                        });
	                    }
	                    return [2 /*return*/, tx];
	            }
	        });
	    });
	}
	function buildPopulate(contract, fragment) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return populateTransaction(contract, fragment, args);
	    };
	}
	function buildEstimate(contract, fragment) {
	    var signerOrProvider = (contract.signer || contract.provider);
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return __awaiter$m(this, void 0, void 0, function () {
	            var tx;
	            return __generator$m(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!signerOrProvider) {
	                            logger$o.throwError("estimate require a provider or signer", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "estimateGas"
	                            });
	                        }
	                        return [4 /*yield*/, populateTransaction(contract, fragment, args)];
	                    case 1:
	                        tx = _a.sent();
	                        return [4 /*yield*/, signerOrProvider.estimateGas(tx)];
	                    case 2: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	}
	function addContractWait(contract, tx) {
	    var wait = tx.wait.bind(tx);
	    tx.wait = function (confirmations) {
	        return wait(confirmations).then(function (receipt) {
	            receipt.events = receipt.logs.map(function (log) {
	                var event = (0, properties_1$h.deepCopy)(log);
	                var parsed = null;
	                try {
	                    parsed = contract.interface.parseLog(log);
	                }
	                catch (e) { }
	                // Successfully parsed the event log; include it
	                if (parsed) {
	                    event.args = parsed.args;
	                    event.decode = function (data, topics) {
	                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
	                    };
	                    event.event = parsed.name;
	                    event.eventSignature = parsed.signature;
	                }
	                // Useful operations
	                event.removeListener = function () { return contract.provider; };
	                event.getBlock = function () {
	                    return contract.provider.getBlock(receipt.blockHash);
	                };
	                event.getTransaction = function () {
	                    return contract.provider.getTransaction(receipt.transactionHash);
	                };
	                event.getTransactionReceipt = function () {
	                    return Promise.resolve(receipt);
	                };
	                return event;
	            });
	            return receipt;
	        });
	    };
	}
	function buildCall(contract, fragment, collapseSimple) {
	    var signerOrProvider = (contract.signer || contract.provider);
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return __awaiter$m(this, void 0, void 0, function () {
	            var blockTag, overrides, tx, result, value;
	            return __generator$m(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        blockTag = undefined;
	                        if (!(args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object")) return [3 /*break*/, 3];
	                        overrides = (0, properties_1$h.shallowCopy)(args.pop());
	                        if (!(overrides.blockTag != null)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, overrides.blockTag];
	                    case 1:
	                        blockTag = _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        delete overrides.blockTag;
	                        args.push(overrides);
	                        _a.label = 3;
	                    case 3:
	                        if (!(contract.deployTransaction != null)) return [3 /*break*/, 5];
	                        return [4 /*yield*/, contract._deployed(blockTag)];
	                    case 4:
	                        _a.sent();
	                        _a.label = 5;
	                    case 5: return [4 /*yield*/, populateTransaction(contract, fragment, args)];
	                    case 6:
	                        tx = _a.sent();
	                        return [4 /*yield*/, signerOrProvider.call(tx, blockTag)];
	                    case 7:
	                        result = _a.sent();
	                        try {
	                            value = contract.interface.decodeFunctionResult(fragment, result);
	                            if (collapseSimple && fragment.outputs.length === 1) {
	                                value = value[0];
	                            }
	                            return [2 /*return*/, value];
	                        }
	                        catch (error) {
	                            if (error.code === logger_1$p.Logger.errors.CALL_EXCEPTION) {
	                                error.address = contract.address;
	                                error.args = args;
	                                error.transaction = tx;
	                            }
	                            throw error;
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	}
	function buildSend(contract, fragment) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return __awaiter$m(this, void 0, void 0, function () {
	            var txRequest, tx;
	            return __generator$m(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!contract.signer) {
	                            logger$o.throwError("sending a transaction requires a signer", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "sendTransaction"
	                            });
	                        }
	                        if (!(contract.deployTransaction != null)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, contract._deployed()];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [4 /*yield*/, populateTransaction(contract, fragment, args)];
	                    case 3:
	                        txRequest = _a.sent();
	                        return [4 /*yield*/, contract.signer.sendTransaction(txRequest)];
	                    case 4:
	                        tx = _a.sent();
	                        // Tweak the tx.wait so the receipt has extra properties
	                        addContractWait(contract, tx);
	                        return [2 /*return*/, tx];
	                }
	            });
	        });
	    };
	}
	function buildDefault(contract, fragment, collapseSimple) {
	    if (fragment.constant) {
	        return buildCall(contract, fragment, collapseSimple);
	    }
	    return buildSend(contract, fragment);
	}
	function getEventTag$1(filter) {
	    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
	        return "*";
	    }
	    return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map(function (topic) {
	        if (Array.isArray(topic)) {
	            return topic.join("|");
	        }
	        return topic;
	    }).join(":") : "");
	}
	var RunningEvent = /** @class */ (function () {
	    function RunningEvent(tag, filter) {
	        (0, properties_1$h.defineReadOnly)(this, "tag", tag);
	        (0, properties_1$h.defineReadOnly)(this, "filter", filter);
	        this._listeners = [];
	    }
	    RunningEvent.prototype.addListener = function (listener, once) {
	        this._listeners.push({ listener: listener, once: once });
	    };
	    RunningEvent.prototype.removeListener = function (listener) {
	        var done = false;
	        this._listeners = this._listeners.filter(function (item) {
	            if (done || item.listener !== listener) {
	                return true;
	            }
	            done = true;
	            return false;
	        });
	    };
	    RunningEvent.prototype.removeAllListeners = function () {
	        this._listeners = [];
	    };
	    RunningEvent.prototype.listeners = function () {
	        return this._listeners.map(function (i) { return i.listener; });
	    };
	    RunningEvent.prototype.listenerCount = function () {
	        return this._listeners.length;
	    };
	    RunningEvent.prototype.run = function (args) {
	        var _this = this;
	        var listenerCount = this.listenerCount();
	        this._listeners = this._listeners.filter(function (item) {
	            var argsCopy = args.slice();
	            // Call the callback in the next event loop
	            setTimeout(function () {
	                item.listener.apply(_this, argsCopy);
	            }, 0);
	            // Reschedule it if it not "once"
	            return !(item.once);
	        });
	        return listenerCount;
	    };
	    RunningEvent.prototype.prepareEvent = function (event) {
	    };
	    // Returns the array that will be applied to an emit
	    RunningEvent.prototype.getEmit = function (event) {
	        return [event];
	    };
	    return RunningEvent;
	}());
	var ErrorRunningEvent = /** @class */ (function (_super) {
	    __extends$v(ErrorRunningEvent, _super);
	    function ErrorRunningEvent() {
	        return _super.call(this, "error", null) || this;
	    }
	    return ErrorRunningEvent;
	}(RunningEvent));
	// @TODO Fragment should inherit Wildcard? and just override getEmit?
	//       or have a common abstract super class, with enough constructor
	//       options to configure both.
	// A Fragment Event will populate all the properties that Wildcard
	// will, and additionally dereference the arguments when emitting
	var FragmentRunningEvent = /** @class */ (function (_super) {
	    __extends$v(FragmentRunningEvent, _super);
	    function FragmentRunningEvent(address, contractInterface, fragment, topics) {
	        var _this = this;
	        var filter = {
	            address: address
	        };
	        var topic = contractInterface.getEventTopic(fragment);
	        if (topics) {
	            if (topic !== topics[0]) {
	                logger$o.throwArgumentError("topic mismatch", "topics", topics);
	            }
	            filter.topics = topics.slice();
	        }
	        else {
	            filter.topics = [topic];
	        }
	        _this = _super.call(this, getEventTag$1(filter), filter) || this;
	        (0, properties_1$h.defineReadOnly)(_this, "address", address);
	        (0, properties_1$h.defineReadOnly)(_this, "interface", contractInterface);
	        (0, properties_1$h.defineReadOnly)(_this, "fragment", fragment);
	        return _this;
	    }
	    FragmentRunningEvent.prototype.prepareEvent = function (event) {
	        var _this = this;
	        _super.prototype.prepareEvent.call(this, event);
	        event.event = this.fragment.name;
	        event.eventSignature = this.fragment.format();
	        event.decode = function (data, topics) {
	            return _this.interface.decodeEventLog(_this.fragment, data, topics);
	        };
	        try {
	            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
	        }
	        catch (error) {
	            event.args = null;
	            event.decodeError = error;
	        }
	    };
	    FragmentRunningEvent.prototype.getEmit = function (event) {
	        var errors = (0, abi_1.checkResultErrors)(event.args);
	        if (errors.length) {
	            throw errors[0].error;
	        }
	        var args = (event.args || []).slice();
	        args.push(event);
	        return args;
	    };
	    return FragmentRunningEvent;
	}(RunningEvent));
	// A Wildcard Event will attempt to populate:
	//  - event            The name of the event name
	//  - eventSignature   The full signature of the event
	//  - decode           A function to decode data and topics
	//  - args             The decoded data and topics
	var WildcardRunningEvent = /** @class */ (function (_super) {
	    __extends$v(WildcardRunningEvent, _super);
	    function WildcardRunningEvent(address, contractInterface) {
	        var _this = _super.call(this, "*", { address: address }) || this;
	        (0, properties_1$h.defineReadOnly)(_this, "address", address);
	        (0, properties_1$h.defineReadOnly)(_this, "interface", contractInterface);
	        return _this;
	    }
	    WildcardRunningEvent.prototype.prepareEvent = function (event) {
	        var _this = this;
	        _super.prototype.prepareEvent.call(this, event);
	        try {
	            var parsed_1 = this.interface.parseLog(event);
	            event.event = parsed_1.name;
	            event.eventSignature = parsed_1.signature;
	            event.decode = function (data, topics) {
	                return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);
	            };
	            event.args = parsed_1.args;
	        }
	        catch (error) {
	            // No matching event
	        }
	    };
	    return WildcardRunningEvent;
	}(RunningEvent));
	var BaseContract = /** @class */ (function () {
	    function BaseContract(addressOrName, contractInterface, signerOrProvider) {
	        var _newTarget = this.constructor;
	        var _this = this;
	        // @TODO: Maybe still check the addressOrName looks like a valid address or name?
	        //address = getAddress(address);
	        (0, properties_1$h.defineReadOnly)(this, "interface", (0, properties_1$h.getStatic)(_newTarget, "getInterface")(contractInterface));
	        if (signerOrProvider == null) {
	            (0, properties_1$h.defineReadOnly)(this, "provider", null);
	            (0, properties_1$h.defineReadOnly)(this, "signer", null);
	        }
	        else if (abstract_signer_1$2.Signer.isSigner(signerOrProvider)) {
	            (0, properties_1$h.defineReadOnly)(this, "provider", signerOrProvider.provider || null);
	            (0, properties_1$h.defineReadOnly)(this, "signer", signerOrProvider);
	        }
	        else if (abstract_provider_1$3.Provider.isProvider(signerOrProvider)) {
	            (0, properties_1$h.defineReadOnly)(this, "provider", signerOrProvider);
	            (0, properties_1$h.defineReadOnly)(this, "signer", null);
	        }
	        else {
	            logger$o.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
	        }
	        (0, properties_1$h.defineReadOnly)(this, "callStatic", {});
	        (0, properties_1$h.defineReadOnly)(this, "estimateGas", {});
	        (0, properties_1$h.defineReadOnly)(this, "functions", {});
	        (0, properties_1$h.defineReadOnly)(this, "populateTransaction", {});
	        (0, properties_1$h.defineReadOnly)(this, "filters", {});
	        {
	            var uniqueFilters_1 = {};
	            Object.keys(this.interface.events).forEach(function (eventSignature) {
	                var event = _this.interface.events[eventSignature];
	                (0, properties_1$h.defineReadOnly)(_this.filters, eventSignature, function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i] = arguments[_i];
	                    }
	                    return {
	                        address: _this.address,
	                        topics: _this.interface.encodeFilterTopics(event, args)
	                    };
	                });
	                if (!uniqueFilters_1[event.name]) {
	                    uniqueFilters_1[event.name] = [];
	                }
	                uniqueFilters_1[event.name].push(eventSignature);
	            });
	            Object.keys(uniqueFilters_1).forEach(function (name) {
	                var filters = uniqueFilters_1[name];
	                if (filters.length === 1) {
	                    (0, properties_1$h.defineReadOnly)(_this.filters, name, _this.filters[filters[0]]);
	                }
	                else {
	                    logger$o.warn("Duplicate definition of " + name + " (" + filters.join(", ") + ")");
	                }
	            });
	        }
	        (0, properties_1$h.defineReadOnly)(this, "_runningEvents", {});
	        (0, properties_1$h.defineReadOnly)(this, "_wrappedEmits", {});
	        if (addressOrName == null) {
	            logger$o.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
	        }
	        (0, properties_1$h.defineReadOnly)(this, "address", addressOrName);
	        if (this.provider) {
	            (0, properties_1$h.defineReadOnly)(this, "resolvedAddress", resolveName(this.provider, addressOrName));
	        }
	        else {
	            try {
	                (0, properties_1$h.defineReadOnly)(this, "resolvedAddress", Promise.resolve((0, address_1$5.getAddress)(addressOrName)));
	            }
	            catch (error) {
	                // Without a provider, we cannot use ENS names
	                logger$o.throwError("provider is required to use ENS name as contract address", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
	                    operation: "new Contract"
	                });
	            }
	        }
	        // Swallow bad ENS names to prevent Unhandled Exceptions
	        this.resolvedAddress.catch(function (e) { });
	        var uniqueNames = {};
	        var uniqueSignatures = {};
	        Object.keys(this.interface.functions).forEach(function (signature) {
	            var fragment = _this.interface.functions[signature];
	            // Check that the signature is unique; if not the ABI generation has
	            // not been cleaned or may be incorrectly generated
	            if (uniqueSignatures[signature]) {
	                logger$o.warn("Duplicate ABI entry for " + JSON.stringify(signature));
	                return;
	            }
	            uniqueSignatures[signature] = true;
	            // Track unique names; we only expose bare named functions if they
	            // are ambiguous
	            {
	                var name_1 = fragment.name;
	                if (!uniqueNames["%" + name_1]) {
	                    uniqueNames["%" + name_1] = [];
	                }
	                uniqueNames["%" + name_1].push(signature);
	            }
	            if (_this[signature] == null) {
	                (0, properties_1$h.defineReadOnly)(_this, signature, buildDefault(_this, fragment, true));
	            }
	            // We do not collapse simple calls on this bucket, which allows
	            // frameworks to safely use this without introspection as well as
	            // allows decoding error recovery.
	            if (_this.functions[signature] == null) {
	                (0, properties_1$h.defineReadOnly)(_this.functions, signature, buildDefault(_this, fragment, false));
	            }
	            if (_this.callStatic[signature] == null) {
	                (0, properties_1$h.defineReadOnly)(_this.callStatic, signature, buildCall(_this, fragment, true));
	            }
	            if (_this.populateTransaction[signature] == null) {
	                (0, properties_1$h.defineReadOnly)(_this.populateTransaction, signature, buildPopulate(_this, fragment));
	            }
	            if (_this.estimateGas[signature] == null) {
	                (0, properties_1$h.defineReadOnly)(_this.estimateGas, signature, buildEstimate(_this, fragment));
	            }
	        });
	        Object.keys(uniqueNames).forEach(function (name) {
	            // Ambiguous names to not get attached as bare names
	            var signatures = uniqueNames[name];
	            if (signatures.length > 1) {
	                return;
	            }
	            // Strip off the leading "%" used for prototype protection
	            name = name.substring(1);
	            var signature = signatures[0];
	            // If overwriting a member property that is null, swallow the error
	            try {
	                if (_this[name] == null) {
	                    (0, properties_1$h.defineReadOnly)(_this, name, _this[signature]);
	                }
	            }
	            catch (e) { }
	            if (_this.functions[name] == null) {
	                (0, properties_1$h.defineReadOnly)(_this.functions, name, _this.functions[signature]);
	            }
	            if (_this.callStatic[name] == null) {
	                (0, properties_1$h.defineReadOnly)(_this.callStatic, name, _this.callStatic[signature]);
	            }
	            if (_this.populateTransaction[name] == null) {
	                (0, properties_1$h.defineReadOnly)(_this.populateTransaction, name, _this.populateTransaction[signature]);
	            }
	            if (_this.estimateGas[name] == null) {
	                (0, properties_1$h.defineReadOnly)(_this.estimateGas, name, _this.estimateGas[signature]);
	            }
	        });
	    }
	    BaseContract.getContractAddress = function (transaction) {
	        return (0, address_1$5.getContractAddress)(transaction);
	    };
	    BaseContract.getInterface = function (contractInterface) {
	        if (abi_1.Interface.isInterface(contractInterface)) {
	            return contractInterface;
	        }
	        return new abi_1.Interface(contractInterface);
	    };
	    // @TODO: Allow timeout?
	    BaseContract.prototype.deployed = function () {
	        return this._deployed();
	    };
	    BaseContract.prototype._deployed = function (blockTag) {
	        var _this = this;
	        if (!this._deployedPromise) {
	            // If we were just deployed, we know the transaction we should occur in
	            if (this.deployTransaction) {
	                this._deployedPromise = this.deployTransaction.wait().then(function () {
	                    return _this;
	                });
	            }
	            else {
	                // @TODO: Once we allow a timeout to be passed in, we will wait
	                // up to that many blocks for getCode
	                // Otherwise, poll for our code to be deployed
	                this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {
	                    if (code === "0x") {
	                        logger$o.throwError("contract not deployed", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
	                            contractAddress: _this.address,
	                            operation: "getDeployed"
	                        });
	                    }
	                    return _this;
	                });
	            }
	        }
	        return this._deployedPromise;
	    };
	    // @TODO:
	    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
	    // @TODO:
	    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
	    BaseContract.prototype.fallback = function (overrides) {
	        var _this = this;
	        if (!this.signer) {
	            logger$o.throwError("sending a transactions require a signer", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
	        }
	        var tx = (0, properties_1$h.shallowCopy)(overrides || {});
	        ["from", "to"].forEach(function (key) {
	            if (tx[key] == null) {
	                return;
	            }
	            logger$o.throwError("cannot override " + key, logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
	        });
	        tx.to = this.resolvedAddress;
	        return this.deployed().then(function () {
	            return _this.signer.sendTransaction(tx);
	        });
	    };
	    // Reconnect to a different signer or provider
	    BaseContract.prototype.connect = function (signerOrProvider) {
	        if (typeof (signerOrProvider) === "string") {
	            signerOrProvider = new abstract_signer_1$2.VoidSigner(signerOrProvider, this.provider);
	        }
	        var contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
	        if (this.deployTransaction) {
	            (0, properties_1$h.defineReadOnly)(contract, "deployTransaction", this.deployTransaction);
	        }
	        return contract;
	    };
	    // Re-attach to a different on-chain instance of this contract
	    BaseContract.prototype.attach = function (addressOrName) {
	        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
	    };
	    BaseContract.isIndexed = function (value) {
	        return abi_1.Indexed.isIndexed(value);
	    };
	    BaseContract.prototype._normalizeRunningEvent = function (runningEvent) {
	        // Already have an instance of this event running; we can re-use it
	        if (this._runningEvents[runningEvent.tag]) {
	            return this._runningEvents[runningEvent.tag];
	        }
	        return runningEvent;
	    };
	    BaseContract.prototype._getRunningEvent = function (eventName) {
	        if (typeof (eventName) === "string") {
	            // Listen for "error" events (if your contract has an error event, include
	            // the full signature to bypass this special event keyword)
	            if (eventName === "error") {
	                return this._normalizeRunningEvent(new ErrorRunningEvent());
	            }
	            // Listen for any event that is registered
	            if (eventName === "event") {
	                return this._normalizeRunningEvent(new RunningEvent("event", null));
	            }
	            // Listen for any event
	            if (eventName === "*") {
	                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
	            }
	            // Get the event Fragment (throws if ambiguous/unknown event)
	            var fragment = this.interface.getEvent(eventName);
	            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
	        }
	        // We have topics to filter by...
	        if (eventName.topics && eventName.topics.length > 0) {
	            // Is it a known topichash? (throws if no matching topichash)
	            try {
	                var topic = eventName.topics[0];
	                if (typeof (topic) !== "string") {
	                    throw new Error("invalid topic"); // @TODO: May happen for anonymous events
	                }
	                var fragment = this.interface.getEvent(topic);
	                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
	            }
	            catch (error) { }
	            // Filter by the unknown topichash
	            var filter = {
	                address: this.address,
	                topics: eventName.topics
	            };
	            return this._normalizeRunningEvent(new RunningEvent(getEventTag$1(filter), filter));
	        }
	        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
	    };
	    BaseContract.prototype._checkRunningEvents = function (runningEvent) {
	        if (runningEvent.listenerCount() === 0) {
	            delete this._runningEvents[runningEvent.tag];
	            // If we have a poller for this, remove it
	            var emit = this._wrappedEmits[runningEvent.tag];
	            if (emit && runningEvent.filter) {
	                this.provider.off(runningEvent.filter, emit);
	                delete this._wrappedEmits[runningEvent.tag];
	            }
	        }
	    };
	    // Subclasses can override this to gracefully recover
	    // from parse errors if they wish
	    BaseContract.prototype._wrapEvent = function (runningEvent, log, listener) {
	        var _this = this;
	        var event = (0, properties_1$h.deepCopy)(log);
	        event.removeListener = function () {
	            if (!listener) {
	                return;
	            }
	            runningEvent.removeListener(listener);
	            _this._checkRunningEvents(runningEvent);
	        };
	        event.getBlock = function () { return _this.provider.getBlock(log.blockHash); };
	        event.getTransaction = function () { return _this.provider.getTransaction(log.transactionHash); };
	        event.getTransactionReceipt = function () { return _this.provider.getTransactionReceipt(log.transactionHash); };
	        // This may throw if the topics and data mismatch the signature
	        runningEvent.prepareEvent(event);
	        return event;
	    };
	    BaseContract.prototype._addEventListener = function (runningEvent, listener, once) {
	        var _this = this;
	        if (!this.provider) {
	            logger$o.throwError("events require a provider or a signer with a provider", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
	        }
	        runningEvent.addListener(listener, once);
	        // Track this running event and its listeners (may already be there; but no hard in updating)
	        this._runningEvents[runningEvent.tag] = runningEvent;
	        // If we are not polling the provider, start polling
	        if (!this._wrappedEmits[runningEvent.tag]) {
	            var wrappedEmit = function (log) {
	                var event = _this._wrapEvent(runningEvent, log, listener);
	                // Try to emit the result for the parameterized event...
	                if (event.decodeError == null) {
	                    try {
	                        var args = runningEvent.getEmit(event);
	                        _this.emit.apply(_this, __spreadArray([runningEvent.filter], args, false));
	                    }
	                    catch (error) {
	                        event.decodeError = error.error;
	                    }
	                }
	                // Always emit "event" for fragment-base events
	                if (runningEvent.filter != null) {
	                    _this.emit("event", event);
	                }
	                // Emit "error" if there was an error
	                if (event.decodeError != null) {
	                    _this.emit("error", event.decodeError, event);
	                }
	            };
	            this._wrappedEmits[runningEvent.tag] = wrappedEmit;
	            // Special events, like "error" do not have a filter
	            if (runningEvent.filter != null) {
	                this.provider.on(runningEvent.filter, wrappedEmit);
	            }
	        }
	    };
	    BaseContract.prototype.queryFilter = function (event, fromBlockOrBlockhash, toBlock) {
	        var _this = this;
	        var runningEvent = this._getRunningEvent(event);
	        var filter = (0, properties_1$h.shallowCopy)(runningEvent.filter);
	        if (typeof (fromBlockOrBlockhash) === "string" && (0, bytes_1$i.isHexString)(fromBlockOrBlockhash, 32)) {
	            if (toBlock != null) {
	                logger$o.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
	            }
	            filter.blockHash = fromBlockOrBlockhash;
	        }
	        else {
	            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
	            filter.toBlock = ((toBlock != null) ? toBlock : "latest");
	        }
	        return this.provider.getLogs(filter).then(function (logs) {
	            return logs.map(function (log) { return _this._wrapEvent(runningEvent, log, null); });
	        });
	    };
	    BaseContract.prototype.on = function (event, listener) {
	        this._addEventListener(this._getRunningEvent(event), listener, false);
	        return this;
	    };
	    BaseContract.prototype.once = function (event, listener) {
	        this._addEventListener(this._getRunningEvent(event), listener, true);
	        return this;
	    };
	    BaseContract.prototype.emit = function (eventName) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        if (!this.provider) {
	            return false;
	        }
	        var runningEvent = this._getRunningEvent(eventName);
	        var result = (runningEvent.run(args) > 0);
	        // May have drained all the "once" events; check for living events
	        this._checkRunningEvents(runningEvent);
	        return result;
	    };
	    BaseContract.prototype.listenerCount = function (eventName) {
	        var _this = this;
	        if (!this.provider) {
	            return 0;
	        }
	        if (eventName == null) {
	            return Object.keys(this._runningEvents).reduce(function (accum, key) {
	                return accum + _this._runningEvents[key].listenerCount();
	            }, 0);
	        }
	        return this._getRunningEvent(eventName).listenerCount();
	    };
	    BaseContract.prototype.listeners = function (eventName) {
	        if (!this.provider) {
	            return [];
	        }
	        if (eventName == null) {
	            var result_1 = [];
	            for (var tag in this._runningEvents) {
	                this._runningEvents[tag].listeners().forEach(function (listener) {
	                    result_1.push(listener);
	                });
	            }
	            return result_1;
	        }
	        return this._getRunningEvent(eventName).listeners();
	    };
	    BaseContract.prototype.removeAllListeners = function (eventName) {
	        if (!this.provider) {
	            return this;
	        }
	        if (eventName == null) {
	            for (var tag in this._runningEvents) {
	                var runningEvent_1 = this._runningEvents[tag];
	                runningEvent_1.removeAllListeners();
	                this._checkRunningEvents(runningEvent_1);
	            }
	            return this;
	        }
	        // Delete any listeners
	        var runningEvent = this._getRunningEvent(eventName);
	        runningEvent.removeAllListeners();
	        this._checkRunningEvents(runningEvent);
	        return this;
	    };
	    BaseContract.prototype.off = function (eventName, listener) {
	        if (!this.provider) {
	            return this;
	        }
	        var runningEvent = this._getRunningEvent(eventName);
	        runningEvent.removeListener(listener);
	        this._checkRunningEvents(runningEvent);
	        return this;
	    };
	    BaseContract.prototype.removeListener = function (eventName, listener) {
	        return this.off(eventName, listener);
	    };
	    return BaseContract;
	}());
	var BaseContract_1 = lib$u.BaseContract = BaseContract;
	var Contract = /** @class */ (function (_super) {
	    __extends$v(Contract, _super);
	    function Contract() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return Contract;
	}(BaseContract));
	var Contract_1 = lib$u.Contract = Contract;
	var ContractFactory = /** @class */ (function () {
	    function ContractFactory(contractInterface, bytecode, signer) {
	        var _newTarget = this.constructor;
	        var bytecodeHex = null;
	        if (typeof (bytecode) === "string") {
	            bytecodeHex = bytecode;
	        }
	        else if ((0, bytes_1$i.isBytes)(bytecode)) {
	            bytecodeHex = (0, bytes_1$i.hexlify)(bytecode);
	        }
	        else if (bytecode && typeof (bytecode.object) === "string") {
	            // Allow the bytecode object from the Solidity compiler
	            bytecodeHex = bytecode.object;
	        }
	        else {
	            // Crash in the next verification step
	            bytecodeHex = "!";
	        }
	        // Make sure it is 0x prefixed
	        if (bytecodeHex.substring(0, 2) !== "0x") {
	            bytecodeHex = "0x" + bytecodeHex;
	        }
	        // Make sure the final result is valid bytecode
	        if (!(0, bytes_1$i.isHexString)(bytecodeHex) || (bytecodeHex.length % 2)) {
	            logger$o.throwArgumentError("invalid bytecode", "bytecode", bytecode);
	        }
	        // If we have a signer, make sure it is valid
	        if (signer && !abstract_signer_1$2.Signer.isSigner(signer)) {
	            logger$o.throwArgumentError("invalid signer", "signer", signer);
	        }
	        (0, properties_1$h.defineReadOnly)(this, "bytecode", bytecodeHex);
	        (0, properties_1$h.defineReadOnly)(this, "interface", (0, properties_1$h.getStatic)(_newTarget, "getInterface")(contractInterface));
	        (0, properties_1$h.defineReadOnly)(this, "signer", signer || null);
	    }
	    // @TODO: Future; rename to populateTransaction?
	    ContractFactory.prototype.getDeployTransaction = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var tx = {};
	        // If we have 1 additional argument, we allow transaction overrides
	        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
	            tx = (0, properties_1$h.shallowCopy)(args.pop());
	            for (var key in tx) {
	                if (!allowedTransactionKeys$1[key]) {
	                    throw new Error("unknown transaction override " + key);
	                }
	            }
	        }
	        // Do not allow these to be overridden in a deployment transaction
	        ["data", "from", "to"].forEach(function (key) {
	            if (tx[key] == null) {
	                return;
	            }
	            logger$o.throwError("cannot override " + key, logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
	        });
	        if (tx.value) {
	            var value = bignumber_1$8.BigNumber.from(tx.value);
	            if (!value.isZero() && !this.interface.deploy.payable) {
	                logger$o.throwError("non-payable constructor cannot override value", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
	                    operation: "overrides.value",
	                    value: tx.value
	                });
	            }
	        }
	        // Make sure the call matches the constructor signature
	        logger$o.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
	        // Set the data to the bytecode + the encoded constructor arguments
	        tx.data = (0, bytes_1$i.hexlify)((0, bytes_1$i.concat)([
	            this.bytecode,
	            this.interface.encodeDeploy(args)
	        ]));
	        return tx;
	    };
	    ContractFactory.prototype.deploy = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return __awaiter$m(this, void 0, void 0, function () {
	            var overrides, params, unsignedTx, tx, address, contract;
	            return __generator$m(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        overrides = {};
	                        // If 1 extra parameter was passed in, it contains overrides
	                        if (args.length === this.interface.deploy.inputs.length + 1) {
	                            overrides = args.pop();
	                        }
	                        // Make sure the call matches the constructor signature
	                        logger$o.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
	                        return [4 /*yield*/, resolveAddresses(this.signer, args, this.interface.deploy.inputs)];
	                    case 1:
	                        params = _a.sent();
	                        params.push(overrides);
	                        unsignedTx = this.getDeployTransaction.apply(this, params);
	                        return [4 /*yield*/, this.signer.sendTransaction(unsignedTx)];
	                    case 2:
	                        tx = _a.sent();
	                        address = (0, properties_1$h.getStatic)(this.constructor, "getContractAddress")(tx);
	                        contract = (0, properties_1$h.getStatic)(this.constructor, "getContract")(address, this.interface, this.signer);
	                        // Add the modified wait that wraps events
	                        addContractWait(contract, tx);
	                        (0, properties_1$h.defineReadOnly)(contract, "deployTransaction", tx);
	                        return [2 /*return*/, contract];
	                }
	            });
	        });
	    };
	    ContractFactory.prototype.attach = function (address) {
	        return (this.constructor).getContract(address, this.interface, this.signer);
	    };
	    ContractFactory.prototype.connect = function (signer) {
	        return new (this.constructor)(this.interface, this.bytecode, signer);
	    };
	    ContractFactory.fromSolidity = function (compilerOutput, signer) {
	        if (compilerOutput == null) {
	            logger$o.throwError("missing compiler output", logger_1$p.Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
	        }
	        if (typeof (compilerOutput) === "string") {
	            compilerOutput = JSON.parse(compilerOutput);
	        }
	        var abi = compilerOutput.abi;
	        var bytecode = null;
	        if (compilerOutput.bytecode) {
	            bytecode = compilerOutput.bytecode;
	        }
	        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
	            bytecode = compilerOutput.evm.bytecode;
	        }
	        return new this(abi, bytecode, signer);
	    };
	    ContractFactory.getInterface = function (contractInterface) {
	        return Contract.getInterface(contractInterface);
	    };
	    ContractFactory.getContractAddress = function (tx) {
	        return (0, address_1$5.getContractAddress)(tx);
	    };
	    ContractFactory.getContract = function (address, contractInterface, signer) {
	        return new Contract(address, contractInterface, signer);
	    };
	    return ContractFactory;
	}());
	ContractFactory_1 = lib$u.ContractFactory = ContractFactory;

	var lib$c = {};

	var lib$b = {};

	var lib$a = {};

	"use strict";
	/**
	 * var basex = require("base-x");
	 *
	 * This implementation is heavily based on base-x. The main reason to
	 * deviate was to prevent the dependency of Buffer.
	 *
	 * Contributors:
	 *
	 * base-x encoding
	 * Forked from https://github.com/cryptocoinjs/bs58
	 * Originally written by Mike Hearn for BitcoinJ
	 * Copyright (c) 2011 Google Inc
	 * Ported to JavaScript by Stefan Thomas
	 * Merged Buffer refactorings from base58-native by Stephen Pair
	 * Copyright (c) 2013 BitPay Inc
	 *
	 * The MIT License (MIT)
	 *
	 * Copyright base-x contributors (c) 2016
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a
	 * copy of this software and associated documentation files (the "Software"),
	 * to deal in the Software without restriction, including without limitation
	 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
	 * and/or sell copies of the Software, and to permit persons to whom the
	 * Software is furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.

	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	 * IN THE SOFTWARE.
	 *
	 */
	Object.defineProperty(lib$a, "__esModule", { value: true });
	var Base58_1 = lib$a.Base58 = Base32_1 = lib$a.Base32 = BaseX_1 = lib$a.BaseX = void 0;
	var bytes_1$h = lib$r;
	var properties_1$g = lib$p;
	var BaseX = /** @class */ (function () {
	    function BaseX(alphabet) {
	        (0, properties_1$g.defineReadOnly)(this, "alphabet", alphabet);
	        (0, properties_1$g.defineReadOnly)(this, "base", alphabet.length);
	        (0, properties_1$g.defineReadOnly)(this, "_alphabetMap", {});
	        (0, properties_1$g.defineReadOnly)(this, "_leader", alphabet.charAt(0));
	        // pre-compute lookup table
	        for (var i = 0; i < alphabet.length; i++) {
	            this._alphabetMap[alphabet.charAt(i)] = i;
	        }
	    }
	    BaseX.prototype.encode = function (value) {
	        var source = (0, bytes_1$h.arrayify)(value);
	        if (source.length === 0) {
	            return "";
	        }
	        var digits = [0];
	        for (var i = 0; i < source.length; ++i) {
	            var carry = source[i];
	            for (var j = 0; j < digits.length; ++j) {
	                carry += digits[j] << 8;
	                digits[j] = carry % this.base;
	                carry = (carry / this.base) | 0;
	            }
	            while (carry > 0) {
	                digits.push(carry % this.base);
	                carry = (carry / this.base) | 0;
	            }
	        }
	        var string = "";
	        // deal with leading zeros
	        for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
	            string += this._leader;
	        }
	        // convert digits to a string
	        for (var q = digits.length - 1; q >= 0; --q) {
	            string += this.alphabet[digits[q]];
	        }
	        return string;
	    };
	    BaseX.prototype.decode = function (value) {
	        if (typeof (value) !== "string") {
	            throw new TypeError("Expected String");
	        }
	        var bytes = [];
	        if (value.length === 0) {
	            return new Uint8Array(bytes);
	        }
	        bytes.push(0);
	        for (var i = 0; i < value.length; i++) {
	            var byte = this._alphabetMap[value[i]];
	            if (byte === undefined) {
	                throw new Error("Non-base" + this.base + " character");
	            }
	            var carry = byte;
	            for (var j = 0; j < bytes.length; ++j) {
	                carry += bytes[j] * this.base;
	                bytes[j] = carry & 0xff;
	                carry >>= 8;
	            }
	            while (carry > 0) {
	                bytes.push(carry & 0xff);
	                carry >>= 8;
	            }
	        }
	        // deal with leading zeros
	        for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
	            bytes.push(0);
	        }
	        return (0, bytes_1$h.arrayify)(new Uint8Array(bytes.reverse()));
	    };
	    return BaseX;
	}());
	var BaseX_1 = lib$a.BaseX = BaseX;
	var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
	var Base32_1 = lib$a.Base32 = Base32;
	var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
	Base58_1 = lib$a.Base58 = Base58;

	var lib$9 = {};

	var browserPbkdf2 = {};

	var lib$8 = {};

	var browserSha2 = {};

	var types$2 = {};

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.SupportedAlgorithm = void 0;
		var SupportedAlgorithm;
		(function (SupportedAlgorithm) {
		    SupportedAlgorithm["sha256"] = "sha256";
		    SupportedAlgorithm["sha512"] = "sha512";
		})(SupportedAlgorithm = exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));
		;
		
	} (types$2));

	var types$1 = /*@__PURE__*/getDefaultExportFromCjs(types$2);

	var _version$b = {};

	"use strict";
	Object.defineProperty(_version$b, "__esModule", { value: true });
	var version$b = _version$b.version = void 0;
	version$b = _version$b.version = "sha2/5.7.0";

	"use strict";
	var __importDefault$a = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(browserSha2, "__esModule", { value: true });
	var computeHmac_1 = browserSha2.computeHmac = sha512_1 = browserSha2.sha512 = sha256_1$1 = browserSha2.sha256 = ripemd160_1 = browserSha2.ripemd160 = void 0;
	var hash_js_1 = __importDefault$a(hash$2);
	//const _ripemd160 = _hash.ripemd160;
	var bytes_1$g = lib$r;
	var types_1$6 = types$2;
	var logger_1$o = lib$q;
	var _version_1$o = _version$b;
	var logger$n = new logger_1$o.Logger(_version_1$o.version);
	function ripemd160(data) {
	    return "0x" + (hash_js_1.default.ripemd160().update((0, bytes_1$g.arrayify)(data)).digest("hex"));
	}
	var ripemd160_1 = browserSha2.ripemd160 = ripemd160;
	function sha256$1(data) {
	    return "0x" + (hash_js_1.default.sha256().update((0, bytes_1$g.arrayify)(data)).digest("hex"));
	}
	var sha256_1$1 = browserSha2.sha256 = sha256$1;
	function sha512(data) {
	    return "0x" + (hash_js_1.default.sha512().update((0, bytes_1$g.arrayify)(data)).digest("hex"));
	}
	var sha512_1 = browserSha2.sha512 = sha512;
	function computeHmac(algorithm, key, data) {
	    if (!types_1$6.SupportedAlgorithm[algorithm]) {
	        logger$n.throwError("unsupported algorithm " + algorithm, logger_1$o.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "hmac",
	            algorithm: algorithm
	        });
	    }
	    return "0x" + hash_js_1.default.hmac(hash_js_1.default[algorithm], (0, bytes_1$g.arrayify)(key)).update((0, bytes_1$g.arrayify)(data)).digest("hex");
	}
	computeHmac_1 = browserSha2.computeHmac = computeHmac;

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.SupportedAlgorithm = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.computeHmac = void 0;
		var sha2_1 = browserSha2;
		Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return sha2_1.computeHmac; } });
		Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return sha2_1.ripemd160; } });
		Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_1.sha256; } });
		Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_1.sha512; } });
		var types_1 = types$2;
		Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return types_1.SupportedAlgorithm; } });
		
	} (lib$8));

	var index$b = /*@__PURE__*/getDefaultExportFromCjs(lib$8);

	"use strict";
	Object.defineProperty(browserPbkdf2, "__esModule", { value: true });
	var pbkdf2_1$3 = browserPbkdf2.pbkdf2 = void 0;
	var bytes_1$f = lib$r;
	var sha2_1$3 = lib$8;
	function pbkdf2$1(password, salt, iterations, keylen, hashAlgorithm) {
	    password = (0, bytes_1$f.arrayify)(password);
	    salt = (0, bytes_1$f.arrayify)(salt);
	    var hLen;
	    var l = 1;
	    var DK = new Uint8Array(keylen);
	    var block1 = new Uint8Array(salt.length + 4);
	    block1.set(salt);
	    //salt.copy(block1, 0, 0, salt.length)
	    var r;
	    var T;
	    for (var i = 1; i <= l; i++) {
	        //block1.writeUInt32BE(i, salt.length)
	        block1[salt.length] = (i >> 24) & 0xff;
	        block1[salt.length + 1] = (i >> 16) & 0xff;
	        block1[salt.length + 2] = (i >> 8) & 0xff;
	        block1[salt.length + 3] = i & 0xff;
	        //let U = createHmac(password).update(block1).digest();
	        var U = (0, bytes_1$f.arrayify)((0, sha2_1$3.computeHmac)(hashAlgorithm, password, block1));
	        if (!hLen) {
	            hLen = U.length;
	            T = new Uint8Array(hLen);
	            l = Math.ceil(keylen / hLen);
	            r = keylen - (l - 1) * hLen;
	        }
	        //U.copy(T, 0, 0, hLen)
	        T.set(U);
	        for (var j = 1; j < iterations; j++) {
	            //U = createHmac(password).update(U).digest();
	            U = (0, bytes_1$f.arrayify)((0, sha2_1$3.computeHmac)(hashAlgorithm, password, U));
	            for (var k = 0; k < hLen; k++)
	                T[k] ^= U[k];
	        }
	        var destPos = (i - 1) * hLen;
	        var len = (i === l ? r : hLen);
	        //T.copy(DK, destPos, 0, len)
	        DK.set((0, bytes_1$f.arrayify)(T).slice(0, len), destPos);
	    }
	    return (0, bytes_1$f.hexlify)(DK);
	}
	pbkdf2_1$3 = browserPbkdf2.pbkdf2 = pbkdf2$1;

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.pbkdf2 = void 0;
		var pbkdf2_1 = browserPbkdf2;
		Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function () { return pbkdf2_1.pbkdf2; } });
		
	} (lib$9));

	var index$a = /*@__PURE__*/getDefaultExportFromCjs(lib$9);

	var lib$7 = {};

	var wordlist$9 = {};

	var _version$a = {};

	"use strict";
	Object.defineProperty(_version$a, "__esModule", { value: true });
	var version$a = _version$a.version = void 0;
	version$a = _version$a.version = "wordlists/5.7.0";

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Wordlist = exports.logger = void 0;
		// This gets overridden by rollup
		var exportWordlist = false;
		var hash_1 = lib$j;
		var properties_1 = lib$p;
		var logger_1 = lib$q;
		var _version_1 = _version$a;
		exports.logger = new logger_1.Logger(_version_1.version);
		var Wordlist = /** @class */ (function () {
		    function Wordlist(locale) {
		        var _newTarget = this.constructor;
		        exports.logger.checkAbstract(_newTarget, Wordlist);
		        (0, properties_1.defineReadOnly)(this, "locale", locale);
		    }
		    // Subclasses may override this
		    Wordlist.prototype.split = function (mnemonic) {
		        return mnemonic.toLowerCase().split(/ +/g);
		    };
		    // Subclasses may override this
		    Wordlist.prototype.join = function (words) {
		        return words.join(" ");
		    };
		    Wordlist.check = function (wordlist) {
		        var words = [];
		        for (var i = 0; i < 2048; i++) {
		            var word = wordlist.getWord(i);
		            /* istanbul ignore if */
		            if (i !== wordlist.getWordIndex(word)) {
		                return "0x";
		            }
		            words.push(word);
		        }
		        return (0, hash_1.id)(words.join("\n") + "\n");
		    };
		    Wordlist.register = function (lang, name) {
		        if (!name) {
		            name = lang.locale;
		        }
		        /* istanbul ignore if */
		        if (exportWordlist) {
		            try {
		                var anyGlobal = window;
		                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {
		                    if (!anyGlobal._ethers.wordlists[name]) {
		                        (0, properties_1.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);
		                    }
		                }
		            }
		            catch (error) { }
		        }
		    };
		    return Wordlist;
		}());
		exports.Wordlist = Wordlist;
		
	} (wordlist$9));

	var wordlist$8 = /*@__PURE__*/getDefaultExportFromCjs(wordlist$9);

	var wordlists = {};

	var langCz$1 = {};

	"use strict";
	var __extends$u = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(langCz$1, "__esModule", { value: true });
	var langCz_2 = langCz$1.langCz = void 0;
	var wordlist_1$7 = wordlist$9;
	var words$4 = "AbdikaceAbecedaAdresaAgreseAkceAktovkaAlejAlkoholAmputaceAnanasAndulkaAnekdotaAnketaAntikaAnulovatArchaAroganceAsfaltAsistentAspiraceAstmaAstronomAtlasAtletikaAtolAutobusAzylBabkaBachorBacilBaculkaBadatelBagetaBagrBahnoBakterieBaladaBaletkaBalkonBalonekBalvanBalzaBambusBankomatBarbarBaretBarmanBarokoBarvaBaterkaBatohBavlnaBazalkaBazilikaBazukaBednaBeranBesedaBestieBetonBezinkaBezmocBeztakBicyklBidloBiftekBikinyBilanceBiografBiologBitvaBizonBlahobytBlatouchBlechaBleduleBleskBlikatBliznaBlokovatBlouditBludBobekBobrBodlinaBodnoutBohatostBojkotBojovatBokorysBolestBorecBoroviceBotaBoubelBouchatBoudaBouleBouratBoxerBradavkaBramboraBrankaBratrBreptaBriketaBrkoBrlohBronzBroskevBrunetkaBrusinkaBrzdaBrzyBublinaBubnovatBuchtaBuditelBudkaBudovaBufetBujarostBukviceBuldokBulvaBundaBunkrBurzaButikBuvolBuzolaBydletBylinaBytovkaBzukotCapartCarevnaCedrCeduleCejchCejnCelaCelerCelkemCelniceCeninaCennostCenovkaCentrumCenzorCestopisCetkaChalupaChapadloCharitaChataChechtatChemieChichotChirurgChladChlebaChlubitChmelChmuraChobotChocholChodbaCholeraChomoutChopitChorobaChovChrapotChrlitChrtChrupChtivostChudinaChutnatChvatChvilkaChvostChybaChystatChytitCibuleCigaretaCihelnaCihlaCinkotCirkusCisternaCitaceCitrusCizinecCizostClonaCokolivCouvatCtitelCtnostCudnostCuketaCukrCupotCvaknoutCvalCvikCvrkotCyklistaDalekoDarebaDatelDatumDceraDebataDechovkaDecibelDeficitDeflaceDeklDekretDemokratDepreseDerbyDeskaDetektivDikobrazDiktovatDiodaDiplomDiskDisplejDivadloDivochDlahaDlouhoDluhopisDnesDobroDobytekDocentDochutitDodnesDohledDohodaDohraDojemDojniceDokladDokolaDoktorDokumentDolarDolevaDolinaDomaDominantDomluvitDomovDonutitDopadDopisDoplnitDoposudDoprovodDopustitDorazitDorostDortDosahDoslovDostatekDosudDosytaDotazDotekDotknoutDoufatDoutnatDovozceDozaduDoznatDozorceDrahotaDrakDramatikDravecDrazeDrdolDrobnostDrogerieDrozdDrsnostDrtitDrzostDubenDuchovnoDudekDuhaDuhovkaDusitDusnoDutostDvojiceDvorecDynamitEkologEkonomieElektronElipsaEmailEmiseEmoceEmpatieEpizodaEpochaEpopejEposEsejEsenceEskortaEskymoEtiketaEuforieEvoluceExekuceExkurzeExpediceExplozeExportExtraktFackaFajfkaFakultaFanatikFantazieFarmacieFavoritFazoleFederaceFejetonFenkaFialkaFigurantFilozofFiltrFinanceFintaFixaceFjordFlanelFlirtFlotilaFondFosforFotbalFotkaFotonFrakceFreskaFrontaFukarFunkceFyzikaGalejeGarantGenetikaGeologGilotinaGlazuraGlejtGolemGolfistaGotikaGrafGramofonGranuleGrepGrilGrogGroteskaGumaHadiceHadrHalaHalenkaHanbaHanopisHarfaHarpunaHavranHebkostHejkalHejnoHejtmanHektarHelmaHematomHerecHernaHesloHezkyHistorikHladovkaHlasivkyHlavaHledatHlenHlodavecHlohHloupostHltatHlubinaHluchotaHmatHmotaHmyzHnisHnojivoHnoutHoblinaHobojHochHodinyHodlatHodnotaHodovatHojnostHokejHolinkaHolkaHolubHomoleHonitbaHonoraceHoralHordaHorizontHorkoHorlivecHormonHorninaHoroskopHorstvoHospodaHostinaHotovostHoubaHoufHoupatHouskaHovorHradbaHraniceHravostHrazdaHrbolekHrdinaHrdloHrdostHrnekHrobkaHromadaHrotHroudaHrozenHrstkaHrubostHryzatHubenostHubnoutHudbaHukotHumrHusitaHustotaHvozdHybnostHydrantHygienaHymnaHysterikIdylkaIhnedIkonaIluzeImunitaInfekceInflaceInkasoInovaceInspekceInternetInvalidaInvestorInzerceIronieJablkoJachtaJahodaJakmileJakostJalovecJantarJarmarkJaroJasanJasnoJatkaJavorJazykJedinecJedleJednatelJehlanJekotJelenJelitoJemnostJenomJepiceJeseterJevitJezdecJezeroJinakJindyJinochJiskraJistotaJitrniceJizvaJmenovatJogurtJurtaKabaretKabelKabinetKachnaKadetKadidloKahanKajakKajutaKakaoKaktusKalamitaKalhotyKalibrKalnostKameraKamkolivKamnaKanibalKanoeKantorKapalinaKapelaKapitolaKapkaKapleKapotaKaprKapustaKapybaraKaramelKarotkaKartonKasaKatalogKatedraKauceKauzaKavalecKazajkaKazetaKazivostKdekolivKdesiKedlubenKempKeramikaKinoKlacekKladivoKlamKlapotKlasikaKlaunKlecKlenbaKlepatKlesnoutKlidKlimaKlisnaKloboukKlokanKlopaKloubKlubovnaKlusatKluzkostKmenKmitatKmotrKnihaKnotKoaliceKoberecKobkaKoblihaKobylaKocourKohoutKojenecKokosKoktejlKolapsKoledaKolizeKoloKomandoKometaKomikKomnataKomoraKompasKomunitaKonatKonceptKondiceKonecKonfeseKongresKoninaKonkursKontaktKonzervaKopanecKopieKopnoutKoprovkaKorbelKorektorKormidloKoroptevKorpusKorunaKorytoKorzetKosatecKostkaKotelKotletaKotoulKoukatKoupelnaKousekKouzloKovbojKozaKozorohKrabiceKrachKrajinaKralovatKrasopisKravataKreditKrejcarKresbaKrevetaKriketKritikKrizeKrkavecKrmelecKrmivoKrocanKrokKronikaKropitKroupaKrovkaKrtekKruhadloKrupiceKrutostKrvinkaKrychleKryptaKrystalKrytKudlankaKufrKujnostKuklaKulajdaKulichKulkaKulometKulturaKunaKupodivuKurtKurzorKutilKvalitaKvasinkaKvestorKynologKyselinaKytaraKyticeKytkaKytovecKyvadloLabradorLachtanLadnostLaikLakomecLamelaLampaLanovkaLasiceLasoLasturaLatinkaLavinaLebkaLeckdyLedenLedniceLedovkaLedvinaLegendaLegieLegraceLehceLehkostLehnoutLektvarLenochodLentilkaLepenkaLepidloLetadloLetecLetmoLetokruhLevhartLevitaceLevobokLibraLichotkaLidojedLidskostLihovinaLijavecLilekLimetkaLinieLinkaLinoleumListopadLitinaLitovatLobistaLodivodLogikaLogopedLokalitaLoketLomcovatLopataLopuchLordLososLotrLoudalLouhLoukaLouskatLovecLstivostLucernaLuciferLumpLuskLustraceLviceLyraLyrikaLysinaMadamMadloMagistrMahagonMajetekMajitelMajoritaMakakMakoviceMakrelaMalbaMalinaMalovatMalviceMaminkaMandleMankoMarnostMasakrMaskotMasopustMaticeMatrikaMaturitaMazanecMazivoMazlitMazurkaMdlobaMechanikMeditaceMedovinaMelasaMelounMentolkaMetlaMetodaMetrMezeraMigraceMihnoutMihuleMikinaMikrofonMilenecMilimetrMilostMimikaMincovnaMinibarMinometMinulostMiskaMistrMixovatMladostMlhaMlhovinaMlokMlsatMluvitMnichMnohemMobilMocnostModelkaModlitbaMohylaMokroMolekulaMomentkaMonarchaMonoklMonstrumMontovatMonzunMosazMoskytMostMotivaceMotorkaMotykaMouchaMoudrostMozaikaMozekMozolMramorMravenecMrkevMrtvolaMrzetMrzutostMstitelMudrcMuflonMulatMumieMuniceMusetMutaceMuzeumMuzikantMyslivecMzdaNabouratNachytatNadaceNadbytekNadhozNadobroNadpisNahlasNahnatNahodileNahraditNaivitaNajednouNajistoNajmoutNaklonitNakonecNakrmitNalevoNamazatNamluvitNanometrNaokoNaopakNaostroNapadatNapevnoNaplnitNapnoutNaposledNaprostoNaroditNarubyNarychloNasaditNasekatNaslepoNastatNatolikNavenekNavrchNavzdoryNazvatNebeNechatNeckyNedalekoNedbatNeduhNegaceNehetNehodaNejenNejprveNeklidNelibostNemilostNemocNeochotaNeonkaNepokojNerostNervNesmyslNesouladNetvorNeuronNevinaNezvykleNicotaNijakNikamNikdyNiklNikterakNitroNoclehNohaviceNominaceNoraNorekNositelNosnostNouzeNovinyNovotaNozdraNudaNudleNugetNutitNutnostNutrieNymfaObalObarvitObavaObdivObecObehnatObejmoutObezitaObhajobaObilniceObjasnitObjektObklopitOblastOblekOblibaOblohaObludaObnosObohatitObojekOboutObrazecObrnaObrubaObrysObsahObsluhaObstaratObuvObvazObvinitObvodObvykleObyvatelObzorOcasOcelOcenitOchladitOchotaOchranaOcitnoutOdbojOdbytOdchodOdcizitOdebratOdeslatOdevzdatOdezvaOdhadceOdhoditOdjetOdjinudOdkazOdkoupitOdlivOdlukaOdmlkaOdolnostOdpadOdpisOdploutOdporOdpustitOdpykatOdrazkaOdsouditOdstupOdsunOdtokOdtudOdvahaOdvetaOdvolatOdvracetOdznakOfinaOfsajdOhlasOhniskoOhradaOhrozitOhryzekOkapOkeniceOklikaOknoOkouzlitOkovyOkrasaOkresOkrsekOkruhOkupantOkurkaOkusitOlejninaOlizovatOmakOmeletaOmezitOmladinaOmlouvatOmluvaOmylOnehdyOpakovatOpasekOperaceOpiceOpilostOpisovatOporaOpoziceOpravduOprotiOrbitalOrchestrOrgieOrliceOrlojOrtelOsadaOschnoutOsikaOsivoOslavaOslepitOslnitOslovitOsnovaOsobaOsolitOspalecOstenOstrahaOstudaOstychOsvojitOteplitOtiskOtopOtrhatOtrlostOtrokOtrubyOtvorOvanoutOvarOvesOvlivnitOvoceOxidOzdobaPachatelPacientPadouchPahorekPaktPalandaPalecPalivoPalubaPamfletPamlsekPanenkaPanikaPannaPanovatPanstvoPantoflePaprikaParketaParodiePartaParukaParybaPasekaPasivitaPastelkaPatentPatronaPavoukPaznehtPazourekPeckaPedagogPejsekPekloPelotonPenaltaPendrekPenzePeriskopPeroPestrostPetardaPeticePetrolejPevninaPexesoPianistaPihaPijavicePiklePiknikPilinaPilnostPilulkaPinzetaPipetaPisatelPistolePitevnaPivnicePivovarPlacentaPlakatPlamenPlanetaPlastikaPlatitPlavidloPlazPlechPlemenoPlentaPlesPletivoPlevelPlivatPlnitPlnoPlochaPlodinaPlombaPloutPlukPlynPobavitPobytPochodPocitPoctivecPodatPodcenitPodepsatPodhledPodivitPodkladPodmanitPodnikPodobaPodporaPodrazPodstataPodvodPodzimPoeziePohankaPohnutkaPohovorPohromaPohybPointaPojistkaPojmoutPokazitPoklesPokojPokrokPokutaPokynPolednePolibekPolknoutPolohaPolynomPomaluPominoutPomlkaPomocPomstaPomysletPonechatPonorkaPonurostPopadatPopelPopisekPoplachPoprositPopsatPopudPoradcePorcePorodPoruchaPoryvPosaditPosedPosilaPoskokPoslanecPosouditPospoluPostavaPosudekPosypPotahPotkanPotleskPotomekPotravaPotupaPotvoraPoukazPoutoPouzdroPovahaPovidlaPovlakPovozPovrchPovstatPovykPovzdechPozdravPozemekPoznatekPozorPozvatPracovatPrahoryPraktikaPralesPraotecPraporekPrasePravdaPrincipPrknoProbuditProcentoProdejProfeseProhraProjektProlomitPromilePronikatPropadProrokProsbaProtonProutekProvazPrskavkaPrstenPrudkostPrutPrvekPrvohoryPsanecPsovodPstruhPtactvoPubertaPuchPudlPukavecPuklinaPukrlePultPumpaPuncPupenPusaPusinkaPustinaPutovatPutykaPyramidaPyskPytelRacekRachotRadiaceRadniceRadonRaftRagbyRaketaRakovinaRamenoRampouchRandeRarachRaritaRasovnaRastrRatolestRazanceRazidloReagovatReakceReceptRedaktorReferentReflexRejnokReklamaRekordRekrutRektorReputaceRevizeRevmaRevolverRezervaRiskovatRizikoRobotikaRodokmenRohovkaRokleRokokoRomanetoRopovodRopuchaRorejsRosolRostlinaRotmistrRotopedRotundaRoubenkaRouchoRoupRouraRovinaRovniceRozborRozchodRozdatRozeznatRozhodceRozinkaRozjezdRozkazRozlohaRozmarRozpadRozruchRozsahRoztokRozumRozvodRubrikaRuchadloRukaviceRukopisRybaRybolovRychlostRydloRypadloRytinaRyzostSadistaSahatSakoSamecSamizdatSamotaSanitkaSardinkaSasankaSatelitSazbaSazeniceSborSchovatSebrankaSeceseSedadloSedimentSedloSehnatSejmoutSekeraSektaSekundaSekvojeSemenoSenoServisSesaditSeshoraSeskokSeslatSestraSesuvSesypatSetbaSetinaSetkatSetnoutSetrvatSeverSeznamShodaShrnoutSifonSilniceSirkaSirotekSirupSituaceSkafandrSkaliskoSkanzenSkautSkeptikSkicaSkladbaSkleniceSkloSkluzSkobaSkokanSkoroSkriptaSkrzSkupinaSkvostSkvrnaSlabikaSladidloSlaninaSlastSlavnostSledovatSlepecSlevaSlezinaSlibSlinaSlizniceSlonSloupekSlovoSluchSluhaSlunceSlupkaSlzaSmaragdSmetanaSmilstvoSmlouvaSmogSmradSmrkSmrtkaSmutekSmyslSnadSnahaSnobSobotaSochaSodovkaSokolSopkaSotvaSoubojSoucitSoudceSouhlasSouladSoumrakSoupravaSousedSoutokSouvisetSpalovnaSpasitelSpisSplavSpodekSpojenecSpoluSponzorSpornostSpoustaSprchaSpustitSrandaSrazSrdceSrnaSrnecSrovnatSrpenSrstSrubStaniceStarostaStatikaStavbaStehnoStezkaStodolaStolekStopaStornoStoupatStrachStresStrhnoutStromStrunaStudnaStupniceStvolStykSubjektSubtropySucharSudostSuknoSundatSunoutSurikataSurovinaSvahSvalstvoSvetrSvatbaSvazekSvisleSvitekSvobodaSvodidloSvorkaSvrabSykavkaSykotSynekSynovecSypatSypkostSyrovostSyselSytostTabletkaTabuleTahounTajemnoTajfunTajgaTajitTajnostTaktikaTamhleTamponTancovatTanecTankerTapetaTaveninaTazatelTechnikaTehdyTekutinaTelefonTemnotaTendenceTenistaTenorTeplotaTepnaTeprveTerapieTermoskaTextilTichoTiskopisTitulekTkadlecTkaninaTlapkaTleskatTlukotTlupaTmelToaletaTopinkaTopolTorzoTouhaToulecTradiceTraktorTrampTrasaTraverzaTrefitTrestTrezorTrhavinaTrhlinaTrochuTrojiceTroskaTroubaTrpceTrpitelTrpkostTrubecTruchlitTruhliceTrusTrvatTudyTuhnoutTuhostTundraTuristaTurnajTuzemskoTvarohTvorbaTvrdostTvrzTygrTykevUbohostUbozeUbratUbrousekUbrusUbytovnaUchoUctivostUdivitUhraditUjednatUjistitUjmoutUkazatelUklidnitUklonitUkotvitUkrojitUliceUlitaUlovitUmyvadloUnavitUniformaUniknoutUpadnoutUplatnitUplynoutUpoutatUpravitUranUrazitUsednoutUsilovatUsmrtitUsnadnitUsnoutUsouditUstlatUstrnoutUtahovatUtkatUtlumitUtonoutUtopenecUtrousitUvalitUvolnitUvozovkaUzdravitUzelUzeninaUzlinaUznatVagonValchaValounVanaVandalVanilkaVaranVarhanyVarovatVcelkuVchodVdovaVedroVegetaceVejceVelbloudVeletrhVelitelVelmocVelrybaVenkovVerandaVerzeVeselkaVeskrzeVesniceVespoduVestaVeterinaVeverkaVibraceVichrVideohraVidinaVidleVilaViniceVisetVitalitaVizeVizitkaVjezdVkladVkusVlajkaVlakVlasecVlevoVlhkostVlivVlnovkaVloupatVnucovatVnukVodaVodivostVodoznakVodstvoVojenskyVojnaVojskoVolantVolbaVolitVolnoVoskovkaVozidloVozovnaVpravoVrabecVracetVrahVrataVrbaVrcholekVrhatVrstvaVrtuleVsaditVstoupitVstupVtipVybavitVybratVychovatVydatVydraVyfotitVyhledatVyhnoutVyhoditVyhraditVyhubitVyjasnitVyjetVyjmoutVyklopitVykonatVylekatVymazatVymezitVymizetVymysletVynechatVynikatVynutitVypadatVyplatitVypravitVypustitVyrazitVyrovnatVyrvatVyslovitVysokoVystavitVysunoutVysypatVytasitVytesatVytratitVyvinoutVyvolatVyvrhelVyzdobitVyznatVzaduVzbuditVzchopitVzdorVzduchVzdychatVzestupVzhledemVzkazVzlykatVznikVzorekVzpouraVztahVztekXylofonZabratZabydletZachovatZadarmoZadusitZafoukatZahltitZahoditZahradaZahynoutZajatecZajetZajistitZaklepatZakoupitZalepitZamezitZamotatZamysletZanechatZanikatZaplatitZapojitZapsatZarazitZastavitZasunoutZatajitZatemnitZatknoutZaujmoutZavalitZaveletZavinitZavolatZavrtatZazvonitZbavitZbrusuZbudovatZbytekZdalekaZdarmaZdatnostZdivoZdobitZdrojZdvihZdymadloZeleninaZemanZeminaZeptatZezaduZezdolaZhatitZhltnoutZhlubokaZhotovitZhrubaZimaZimniceZjemnitZklamatZkoumatZkratkaZkumavkaZlatoZlehkaZlobaZlomZlostZlozvykZmapovatZmarZmatekZmijeZmizetZmocnitZmodratZmrzlinaZmutovatZnakZnalostZnamenatZnovuZobrazitZotavitZoubekZoufaleZploditZpomalitZpravaZprostitZprudkaZprvuZradaZranitZrcadloZrnitostZrnoZrovnaZrychlitZrzavostZtichaZtratitZubovinaZubrZvednoutZvenkuZveselaZvonZvratZvukovodZvyk";
	var wordlist$7 = null;
	function loadWords$7(lang) {
	    if (wordlist$7 != null) {
	        return;
	    }
	    wordlist$7 = words$4.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (wordlist_1$7.Wordlist.check(lang) !== "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a") {
	        wordlist$7 = null;
	        throw new Error("BIP39 Wordlist for en (English) FAILED");
	    }
	}
	var LangCz = /** @class */ (function (_super) {
	    __extends$u(LangCz, _super);
	    function LangCz() {
	        return _super.call(this, "cz") || this;
	    }
	    LangCz.prototype.getWord = function (index) {
	        loadWords$7(this);
	        return wordlist$7[index];
	    };
	    LangCz.prototype.getWordIndex = function (word) {
	        loadWords$7(this);
	        return wordlist$7.indexOf(word);
	    };
	    return LangCz;
	}(wordlist_1$7.Wordlist));
	var langCz = new LangCz();
	langCz_2 = langCz$1.langCz = langCz;
	wordlist_1$7.Wordlist.register(langCz);

	var langEn$1 = {};

	"use strict";
	var __extends$t = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(langEn$1, "__esModule", { value: true });
	var langEn_2 = langEn$1.langEn = void 0;
	var wordlist_1$6 = wordlist$9;
	var words$3 = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
	var wordlist$6 = null;
	function loadWords$6(lang) {
	    if (wordlist$6 != null) {
	        return;
	    }
	    wordlist$6 = words$3.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (wordlist_1$6.Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
	        wordlist$6 = null;
	        throw new Error("BIP39 Wordlist for en (English) FAILED");
	    }
	}
	var LangEn = /** @class */ (function (_super) {
	    __extends$t(LangEn, _super);
	    function LangEn() {
	        return _super.call(this, "en") || this;
	    }
	    LangEn.prototype.getWord = function (index) {
	        loadWords$6(this);
	        return wordlist$6[index];
	    };
	    LangEn.prototype.getWordIndex = function (word) {
	        loadWords$6(this);
	        return wordlist$6.indexOf(word);
	    };
	    return LangEn;
	}(wordlist_1$6.Wordlist));
	var langEn = new LangEn();
	langEn_2 = langEn$1.langEn = langEn;
	wordlist_1$6.Wordlist.register(langEn);

	var langEs$1 = {};

	"use strict";
	var __extends$s = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(langEs$1, "__esModule", { value: true });
	var langEs_2 = langEs$1.langEs = void 0;
	var strings_1$b = lib$k;
	var wordlist_1$5 = wordlist$9;
	var words$2 = "A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTeclaTe/cnicaTejadoTejerTejidoTelaTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo";
	var lookup$1 = {};
	var wordlist$5 = null;
	function dropDiacritic$1(word) {
	    wordlist_1$5.logger.checkNormalize();
	    return (0, strings_1$b.toUtf8String)(Array.prototype.filter.call((0, strings_1$b.toUtf8Bytes)(word.normalize("NFD").toLowerCase()), function (c) {
	        return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
	    }));
	}
	function expand$1(word) {
	    var output = [];
	    Array.prototype.forEach.call((0, strings_1$b.toUtf8Bytes)(word), function (c) {
	        // Acute accent
	        if (c === 47) {
	            output.push(204);
	            output.push(129);
	            // n-tilde
	        }
	        else if (c === 126) {
	            output.push(110);
	            output.push(204);
	            output.push(131);
	        }
	        else {
	            output.push(c);
	        }
	    });
	    return (0, strings_1$b.toUtf8String)(output);
	}
	function loadWords$5(lang) {
	    if (wordlist$5 != null) {
	        return;
	    }
	    wordlist$5 = words$2.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function (w) { return expand$1(w); });
	    wordlist$5.forEach(function (word, index) {
	        lookup$1[dropDiacritic$1(word)] = index;
	    });
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (wordlist_1$5.Wordlist.check(lang) !== "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300") {
	        wordlist$5 = null;
	        throw new Error("BIP39 Wordlist for es (Spanish) FAILED");
	    }
	}
	var LangEs = /** @class */ (function (_super) {
	    __extends$s(LangEs, _super);
	    function LangEs() {
	        return _super.call(this, "es") || this;
	    }
	    LangEs.prototype.getWord = function (index) {
	        loadWords$5(this);
	        return wordlist$5[index];
	    };
	    LangEs.prototype.getWordIndex = function (word) {
	        loadWords$5(this);
	        return lookup$1[dropDiacritic$1(word)];
	    };
	    return LangEs;
	}(wordlist_1$5.Wordlist));
	var langEs = new LangEs();
	langEs_2 = langEs$1.langEs = langEs;
	wordlist_1$5.Wordlist.register(langEs);

	var langFr$1 = {};

	"use strict";
	var __extends$r = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(langFr$1, "__esModule", { value: true });
	var langFr_2 = langFr$1.langFr = void 0;
	var strings_1$a = lib$k;
	var wordlist_1$4 = wordlist$9;
	var words$1 = "";
	var wordlist$4 = null;
	var lookup = {};
	function dropDiacritic(word) {
	    wordlist_1$4.logger.checkNormalize();
	    return (0, strings_1$a.toUtf8String)(Array.prototype.filter.call((0, strings_1$a.toUtf8Bytes)(word.normalize("NFD").toLowerCase()), function (c) {
	        return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
	    }));
	}
	function expand(word) {
	    var output = [];
	    Array.prototype.forEach.call((0, strings_1$a.toUtf8Bytes)(word), function (c) {
	        // Acute accent
	        if (c === 47) {
	            output.push(204);
	            output.push(129);
	            // Grave accent
	        }
	        else if (c === 45) {
	            output.push(204);
	            output.push(128);
	        }
	        else {
	            output.push(c);
	        }
	    });
	    return (0, strings_1$a.toUtf8String)(output);
	}
	function loadWords$4(lang) {
	    if (wordlist$4 != null) {
	        return;
	    }
	    wordlist$4 = words$1.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function (w) { return expand(w); });
	    wordlist$4.forEach(function (word, index) {
	        lookup[dropDiacritic(word)] = index;
	    });
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (wordlist_1$4.Wordlist.check(lang) !== "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045") {
	        wordlist$4 = null;
	        throw new Error("BIP39 Wordlist for fr (French) FAILED");
	    }
	}
	var LangFr = /** @class */ (function (_super) {
	    __extends$r(LangFr, _super);
	    function LangFr() {
	        return _super.call(this, "fr") || this;
	    }
	    LangFr.prototype.getWord = function (index) {
	        loadWords$4(this);
	        return wordlist$4[index];
	    };
	    LangFr.prototype.getWordIndex = function (word) {
	        loadWords$4(this);
	        return lookup[dropDiacritic(word)];
	    };
	    return LangFr;
	}(wordlist_1$4.Wordlist));
	var langFr = new LangFr();
	langFr_2 = langFr$1.langFr = langFr;
	wordlist_1$4.Wordlist.register(langFr);

	var langJa$1 = {};

	"use strict";
	var __extends$q = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(langJa$1, "__esModule", { value: true });
	var langJa_2 = langJa$1.langJa = void 0;
	var bytes_1$e = lib$r;
	var strings_1$9 = lib$k;
	var wordlist_1$3 = wordlist$9;
	var data$2 = [
	    // 4-kana words
	    "AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR",
	    // 5-kana words
	    "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR",
	    // 6-kana words
	    "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm",
	    // 7-kana words
	    "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC",
	    // 8-kana words
	    "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD",
	    // 9-kana words
	    "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD",
	    // 10-kana words
	    "IJBEJqXZJ"
	];
	// Maps each character into its kana value (the index)
	var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
	var wordlist$3 = null;
	function hex(word) {
	    return (0, bytes_1$e.hexlify)((0, strings_1$9.toUtf8Bytes)(word));
	}
	var KiYoKu = "0xe3818de38284e3818f";
	var KyoKu = "0xe3818de38283e3818f";
	function loadWords$3(lang) {
	    if (wordlist$3 !== null) {
	        return;
	    }
	    wordlist$3 = [];
	    // Transforms for normalizing (sort is a not quite UTF-8)
	    var transform = {};
	    // Delete the diacritic marks
	    transform[(0, strings_1$9.toUtf8String)([227, 130, 154])] = false;
	    transform[(0, strings_1$9.toUtf8String)([227, 130, 153])] = false;
	    // Some simple transforms that sort out most of the order
	    transform[(0, strings_1$9.toUtf8String)([227, 130, 133])] = (0, strings_1$9.toUtf8String)([227, 130, 134]);
	    transform[(0, strings_1$9.toUtf8String)([227, 129, 163])] = (0, strings_1$9.toUtf8String)([227, 129, 164]);
	    transform[(0, strings_1$9.toUtf8String)([227, 130, 131])] = (0, strings_1$9.toUtf8String)([227, 130, 132]);
	    transform[(0, strings_1$9.toUtf8String)([227, 130, 135])] = (0, strings_1$9.toUtf8String)([227, 130, 136]);
	    // Normalize words using the transform
	    function normalize(word) {
	        var result = "";
	        for (var i = 0; i < word.length; i++) {
	            var kana = word[i];
	            var target = transform[kana];
	            if (target === false) {
	                continue;
	            }
	            if (target) {
	                kana = target;
	            }
	            result += kana;
	        }
	        return result;
	    }
	    // Sort how the Japanese list is sorted
	    function sortJapanese(a, b) {
	        a = normalize(a);
	        b = normalize(b);
	        if (a < b) {
	            return -1;
	        }
	        if (a > b) {
	            return 1;
	        }
	        return 0;
	    }
	    // Load all the words
	    for (var length_1 = 3; length_1 <= 9; length_1++) {
	        var d = data$2[length_1 - 3];
	        for (var offset = 0; offset < d.length; offset += length_1) {
	            var word = [];
	            for (var i = 0; i < length_1; i++) {
	                var k = mapping.indexOf(d[offset + i]);
	                word.push(227);
	                word.push((k & 0x40) ? 130 : 129);
	                word.push((k & 0x3f) + 128);
	            }
	            wordlist$3.push((0, strings_1$9.toUtf8String)(word));
	        }
	    }
	    wordlist$3.sort(sortJapanese);
	    // For some reason kyoku and kiyoku are flipped in node (!!).
	    // The order SHOULD be:
	    //   - kyoku
	    //   - kiyoku
	    // This should ignore "if", but that doesn't work here??
	    /* istanbul ignore next */
	    if (hex(wordlist$3[442]) === KiYoKu && hex(wordlist$3[443]) === KyoKu) {
	        var tmp = wordlist$3[442];
	        wordlist$3[442] = wordlist$3[443];
	        wordlist$3[443] = tmp;
	    }
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (wordlist_1$3.Wordlist.check(lang) !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
	        wordlist$3 = null;
	        throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
	    }
	}
	var LangJa = /** @class */ (function (_super) {
	    __extends$q(LangJa, _super);
	    function LangJa() {
	        return _super.call(this, "ja") || this;
	    }
	    LangJa.prototype.getWord = function (index) {
	        loadWords$3(this);
	        return wordlist$3[index];
	    };
	    LangJa.prototype.getWordIndex = function (word) {
	        loadWords$3(this);
	        return wordlist$3.indexOf(word);
	    };
	    LangJa.prototype.split = function (mnemonic) {
	        wordlist_1$3.logger.checkNormalize();
	        return mnemonic.split(/(?:\u3000| )+/g);
	    };
	    LangJa.prototype.join = function (words) {
	        return words.join("\u3000");
	    };
	    return LangJa;
	}(wordlist_1$3.Wordlist));
	var langJa = new LangJa();
	langJa_2 = langJa$1.langJa = langJa;
	wordlist_1$3.Wordlist.register(langJa);

	var langKo$1 = {};

	"use strict";
	var __extends$p = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(langKo$1, "__esModule", { value: true });
	var langKo_2 = langKo$1.langKo = void 0;
	var strings_1$8 = lib$k;
	var wordlist_1$2 = wordlist$9;
	var data$1 = [
	    "OYAa",
	    "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8",
	    "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6",
	    "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv",
	    "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo",
	    "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg",
	    "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb",
	    "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"
	];
	var codes$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
	function getHangul(code) {
	    if (code >= 40) {
	        code = code + 168 - 40;
	    }
	    else if (code >= 19) {
	        code = code + 97 - 19;
	    }
	    return (0, strings_1$8.toUtf8String)([225, (code >> 6) + 132, (code & 0x3f) + 128]);
	}
	var wordlist$2 = null;
	function loadWords$2(lang) {
	    if (wordlist$2 != null) {
	        return;
	    }
	    wordlist$2 = [];
	    data$1.forEach(function (data, length) {
	        length += 4;
	        for (var i = 0; i < data.length; i += length) {
	            var word = "";
	            for (var j = 0; j < length; j++) {
	                word += getHangul(codes$1.indexOf(data[i + j]));
	            }
	            wordlist$2.push(word);
	        }
	    });
	    wordlist$2.sort();
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (wordlist_1$2.Wordlist.check(lang) !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
	        wordlist$2 = null;
	        throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
	    }
	}
	var LangKo = /** @class */ (function (_super) {
	    __extends$p(LangKo, _super);
	    function LangKo() {
	        return _super.call(this, "ko") || this;
	    }
	    LangKo.prototype.getWord = function (index) {
	        loadWords$2(this);
	        return wordlist$2[index];
	    };
	    LangKo.prototype.getWordIndex = function (word) {
	        loadWords$2(this);
	        return wordlist$2.indexOf(word);
	    };
	    return LangKo;
	}(wordlist_1$2.Wordlist));
	var langKo = new LangKo();
	langKo_2 = langKo$1.langKo = langKo;
	wordlist_1$2.Wordlist.register(langKo);

	var langIt$1 = {};

	"use strict";
	var __extends$o = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(langIt$1, "__esModule", { value: true });
	var langIt_2 = langIt$1.langIt = void 0;
	var wordlist_1$1 = wordlist$9;
	var words = "AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGalateoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastraLatenzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa";
	var wordlist$1 = null;
	function loadWords$1(lang) {
	    if (wordlist$1 != null) {
	        return;
	    }
	    wordlist$1 = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (wordlist_1$1.Wordlist.check(lang) !== "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620") {
	        wordlist$1 = null;
	        throw new Error("BIP39 Wordlist for it (Italian) FAILED");
	    }
	}
	var LangIt = /** @class */ (function (_super) {
	    __extends$o(LangIt, _super);
	    function LangIt() {
	        return _super.call(this, "it") || this;
	    }
	    LangIt.prototype.getWord = function (index) {
	        loadWords$1(this);
	        return wordlist$1[index];
	    };
	    LangIt.prototype.getWordIndex = function (word) {
	        loadWords$1(this);
	        return wordlist$1.indexOf(word);
	    };
	    return LangIt;
	}(wordlist_1$1.Wordlist));
	var langIt = new LangIt();
	langIt_2 = langIt$1.langIt = langIt;
	wordlist_1$1.Wordlist.register(langIt);

	var langZh = {};

	"use strict";
	var __extends$n = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(langZh, "__esModule", { value: true });
	var langZhTw_1 = langZh.langZhTw = langZhCn_1 = langZh.langZhCn = void 0;
	var strings_1$7 = lib$k;
	var wordlist_1 = wordlist$9;
	var data = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
	var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
	// @TODO: Load lazily
	var wordlist = {
	    zh_cn: null,
	    zh_tw: null
	};
	var Checks = {
	    zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1",
	    zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d"
	};
	var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
	function loadWords(lang) {
	    if (wordlist[lang.locale] !== null) {
	        return;
	    }
	    wordlist[lang.locale] = [];
	    var deltaOffset = 0;
	    for (var i = 0; i < 2048; i++) {
	        var s = style.indexOf(data[i * 3]);
	        var bytes = [
	            228 + (s >> 2),
	            128 + codes.indexOf(data[i * 3 + 1]),
	            128 + codes.indexOf(data[i * 3 + 2]),
	        ];
	        if (lang.locale === "zh_tw") {
	            var common = s % 4;
	            for (var i_1 = common; i_1 < 3; i_1++) {
	                bytes[i_1] = codes.indexOf(deltaData[deltaOffset++]) + ((i_1 == 0) ? 228 : 128);
	            }
	        }
	        wordlist[lang.locale].push((0, strings_1$7.toUtf8String)(bytes));
	    }
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (wordlist_1.Wordlist.check(lang) !== Checks[lang.locale]) {
	        wordlist[lang.locale] = null;
	        throw new Error("BIP39 Wordlist for " + lang.locale + " (Chinese) FAILED");
	    }
	}
	var LangZh = /** @class */ (function (_super) {
	    __extends$n(LangZh, _super);
	    function LangZh(country) {
	        return _super.call(this, "zh_" + country) || this;
	    }
	    LangZh.prototype.getWord = function (index) {
	        loadWords(this);
	        return wordlist[this.locale][index];
	    };
	    LangZh.prototype.getWordIndex = function (word) {
	        loadWords(this);
	        return wordlist[this.locale].indexOf(word);
	    };
	    LangZh.prototype.split = function (mnemonic) {
	        mnemonic = mnemonic.replace(/(?:\u3000| )+/g, "");
	        return mnemonic.split("");
	    };
	    return LangZh;
	}(wordlist_1.Wordlist));
	var langZhCn = new LangZh("cn");
	var langZhCn_1 = langZh.langZhCn = langZhCn;
	wordlist_1.Wordlist.register(langZhCn);
	wordlist_1.Wordlist.register(langZhCn, "zh");
	var langZhTw = new LangZh("tw");
	langZhTw_1 = langZh.langZhTw = langZhTw;
	wordlist_1.Wordlist.register(langZhTw);

	"use strict";
	Object.defineProperty(wordlists, "__esModule", { value: true });
	var wordlists_1$1 = wordlists.wordlists = void 0;
	var lang_cz_1 = langCz$1;
	var lang_en_1 = langEn$1;
	var lang_es_1 = langEs$1;
	var lang_fr_1 = langFr$1;
	var lang_ja_1 = langJa$1;
	var lang_ko_1 = langKo$1;
	var lang_it_1 = langIt$1;
	var lang_zh_1 = langZh;
	wordlists_1$1 = wordlists.wordlists = {
	    cz: lang_cz_1.langCz,
	    en: lang_en_1.langEn,
	    es: lang_es_1.langEs,
	    fr: lang_fr_1.langFr,
	    it: lang_it_1.langIt,
	    ja: lang_ja_1.langJa,
	    ko: lang_ko_1.langKo,
	    zh: lang_zh_1.langZhCn,
	    zh_cn: lang_zh_1.langZhCn,
	    zh_tw: lang_zh_1.langZhTw
	};

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.wordlists = exports.Wordlist = exports.logger = void 0;
		// Wordlists
		// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md
		var wordlist_1 = wordlist$9;
		Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return wordlist_1.logger; } });
		Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return wordlist_1.Wordlist; } });
		var wordlists_1 = wordlists;
		Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return wordlists_1.wordlists; } });
		
	} (lib$7));

	var index$9 = /*@__PURE__*/getDefaultExportFromCjs(lib$7);

	var _version$9 = {};

	"use strict";
	Object.defineProperty(_version$9, "__esModule", { value: true });
	var version$9 = _version$9.version = void 0;
	version$9 = _version$9.version = "hdnode/5.7.0";

	"use strict";
	Object.defineProperty(lib$b, "__esModule", { value: true });
	var getAccountPath_1 = lib$b.getAccountPath = isValidMnemonic_1 = lib$b.isValidMnemonic = entropyToMnemonic_1 = lib$b.entropyToMnemonic = mnemonicToEntropy_1 = lib$b.mnemonicToEntropy = mnemonicToSeed_1 = lib$b.mnemonicToSeed = HDNode_1 = lib$b.HDNode = defaultPath = lib$b.defaultPath = void 0;
	var basex_1$1 = lib$a;
	var bytes_1$d = lib$r;
	var bignumber_1$7 = lib$s;
	var strings_1$6 = lib$k;
	var pbkdf2_1$2 = lib$9;
	var properties_1$f = lib$p;
	var signing_key_1$1 = lib$d;
	var sha2_1$2 = lib$8;
	var transactions_1$5 = lib$e;
	var wordlists_1 = lib$7;
	var logger_1$n = lib$q;
	var _version_1$n = _version$9;
	var logger$m = new logger_1$n.Logger(_version_1$n.version);
	var N = bignumber_1$7.BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
	// "Bitcoin seed"
	var MasterSecret = (0, strings_1$6.toUtf8Bytes)("Bitcoin seed");
	var HardenedBit = 0x80000000;
	// Returns a byte with the MSB bits set
	function getUpperMask(bits) {
	    return ((1 << bits) - 1) << (8 - bits);
	}
	// Returns a byte with the LSB bits set
	function getLowerMask(bits) {
	    return (1 << bits) - 1;
	}
	function bytes32(value) {
	    return (0, bytes_1$d.hexZeroPad)((0, bytes_1$d.hexlify)(value), 32);
	}
	function base58check(data) {
	    return basex_1$1.Base58.encode((0, bytes_1$d.concat)([data, (0, bytes_1$d.hexDataSlice)((0, sha2_1$2.sha256)((0, sha2_1$2.sha256)(data)), 0, 4)]));
	}
	function getWordlist(wordlist) {
	    if (wordlist == null) {
	        return wordlists_1.wordlists["en"];
	    }
	    if (typeof (wordlist) === "string") {
	        var words = wordlists_1.wordlists[wordlist];
	        if (words == null) {
	            logger$m.throwArgumentError("unknown locale", "wordlist", wordlist);
	        }
	        return words;
	    }
	    return wordlist;
	}
	var _constructorGuard$1 = {};
	var defaultPath = lib$b.defaultPath = "m/44'/60'/0'/0/0";
	;
	var HDNode = /** @class */ (function () {
	    /**
	     *  This constructor should not be called directly.
	     *
	     *  Please use:
	     *   - fromMnemonic
	     *   - fromSeed
	     */
	    function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
	        /* istanbul ignore if */
	        if (constructorGuard !== _constructorGuard$1) {
	            throw new Error("HDNode constructor cannot be called directly");
	        }
	        if (privateKey) {
	            var signingKey = new signing_key_1$1.SigningKey(privateKey);
	            (0, properties_1$f.defineReadOnly)(this, "privateKey", signingKey.privateKey);
	            (0, properties_1$f.defineReadOnly)(this, "publicKey", signingKey.compressedPublicKey);
	        }
	        else {
	            (0, properties_1$f.defineReadOnly)(this, "privateKey", null);
	            (0, properties_1$f.defineReadOnly)(this, "publicKey", (0, bytes_1$d.hexlify)(publicKey));
	        }
	        (0, properties_1$f.defineReadOnly)(this, "parentFingerprint", parentFingerprint);
	        (0, properties_1$f.defineReadOnly)(this, "fingerprint", (0, bytes_1$d.hexDataSlice)((0, sha2_1$2.ripemd160)((0, sha2_1$2.sha256)(this.publicKey)), 0, 4));
	        (0, properties_1$f.defineReadOnly)(this, "address", (0, transactions_1$5.computeAddress)(this.publicKey));
	        (0, properties_1$f.defineReadOnly)(this, "chainCode", chainCode);
	        (0, properties_1$f.defineReadOnly)(this, "index", index);
	        (0, properties_1$f.defineReadOnly)(this, "depth", depth);
	        if (mnemonicOrPath == null) {
	            // From a source that does not preserve the path (e.g. extended keys)
	            (0, properties_1$f.defineReadOnly)(this, "mnemonic", null);
	            (0, properties_1$f.defineReadOnly)(this, "path", null);
	        }
	        else if (typeof (mnemonicOrPath) === "string") {
	            // From a source that does not preserve the mnemonic (e.g. neutered)
	            (0, properties_1$f.defineReadOnly)(this, "mnemonic", null);
	            (0, properties_1$f.defineReadOnly)(this, "path", mnemonicOrPath);
	        }
	        else {
	            // From a fully qualified source
	            (0, properties_1$f.defineReadOnly)(this, "mnemonic", mnemonicOrPath);
	            (0, properties_1$f.defineReadOnly)(this, "path", mnemonicOrPath.path);
	        }
	    }
	    Object.defineProperty(HDNode.prototype, "extendedKey", {
	        get: function () {
	            // We only support the mainnet values for now, but if anyone needs
	            // testnet values, let me know. I believe current sentiment is that
	            // we should always use mainnet, and use BIP-44 to derive the network
	            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
	            //   - Testnet: public=0x043587CF, private=0x04358394
	            if (this.depth >= 256) {
	                throw new Error("Depth too large!");
	            }
	            return base58check((0, bytes_1$d.concat)([
	                ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
	                (0, bytes_1$d.hexlify)(this.depth),
	                this.parentFingerprint,
	                (0, bytes_1$d.hexZeroPad)((0, bytes_1$d.hexlify)(this.index), 4),
	                this.chainCode,
	                ((this.privateKey != null) ? (0, bytes_1$d.concat)(["0x00", this.privateKey]) : this.publicKey),
	            ]));
	        },
	        enumerable: false,
	        configurable: true
	    });
	    HDNode.prototype.neuter = function () {
	        return new HDNode(_constructorGuard$1, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
	    };
	    HDNode.prototype._derive = function (index) {
	        if (index > 0xffffffff) {
	            throw new Error("invalid index - " + String(index));
	        }
	        // Base path
	        var path = this.path;
	        if (path) {
	            path += "/" + (index & ~HardenedBit);
	        }
	        var data = new Uint8Array(37);
	        if (index & HardenedBit) {
	            if (!this.privateKey) {
	                throw new Error("cannot derive child of neutered node");
	            }
	            // Data = 0x00 || ser_256(k_par)
	            data.set((0, bytes_1$d.arrayify)(this.privateKey), 1);
	            // Hardened path
	            if (path) {
	                path += "'";
	            }
	        }
	        else {
	            // Data = ser_p(point(k_par))
	            data.set((0, bytes_1$d.arrayify)(this.publicKey));
	        }
	        // Data += ser_32(i)
	        for (var i = 24; i >= 0; i -= 8) {
	            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
	        }
	        var I = (0, bytes_1$d.arrayify)((0, sha2_1$2.computeHmac)(sha2_1$2.SupportedAlgorithm.sha512, this.chainCode, data));
	        var IL = I.slice(0, 32);
	        var IR = I.slice(32);
	        // The private key
	        var ki = null;
	        // The public key
	        var Ki = null;
	        if (this.privateKey) {
	            ki = bytes32(bignumber_1$7.BigNumber.from(IL).add(this.privateKey).mod(N));
	        }
	        else {
	            var ek = new signing_key_1$1.SigningKey((0, bytes_1$d.hexlify)(IL));
	            Ki = ek._addPoint(this.publicKey);
	        }
	        var mnemonicOrPath = path;
	        var srcMnemonic = this.mnemonic;
	        if (srcMnemonic) {
	            mnemonicOrPath = Object.freeze({
	                phrase: srcMnemonic.phrase,
	                path: path,
	                locale: (srcMnemonic.locale || "en")
	            });
	        }
	        return new HDNode(_constructorGuard$1, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
	    };
	    HDNode.prototype.derivePath = function (path) {
	        var components = path.split("/");
	        if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
	            throw new Error("invalid path - " + path);
	        }
	        if (components[0] === "m") {
	            components.shift();
	        }
	        var result = this;
	        for (var i = 0; i < components.length; i++) {
	            var component = components[i];
	            if (component.match(/^[0-9]+'$/)) {
	                var index = parseInt(component.substring(0, component.length - 1));
	                if (index >= HardenedBit) {
	                    throw new Error("invalid path index - " + component);
	                }
	                result = result._derive(HardenedBit + index);
	            }
	            else if (component.match(/^[0-9]+$/)) {
	                var index = parseInt(component);
	                if (index >= HardenedBit) {
	                    throw new Error("invalid path index - " + component);
	                }
	                result = result._derive(index);
	            }
	            else {
	                throw new Error("invalid path component - " + component);
	            }
	        }
	        return result;
	    };
	    HDNode._fromSeed = function (seed, mnemonic) {
	        var seedArray = (0, bytes_1$d.arrayify)(seed);
	        if (seedArray.length < 16 || seedArray.length > 64) {
	            throw new Error("invalid seed");
	        }
	        var I = (0, bytes_1$d.arrayify)((0, sha2_1$2.computeHmac)(sha2_1$2.SupportedAlgorithm.sha512, MasterSecret, seedArray));
	        return new HDNode(_constructorGuard$1, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
	    };
	    HDNode.fromMnemonic = function (mnemonic, password, wordlist) {
	        // If a locale name was passed in, find the associated wordlist
	        wordlist = getWordlist(wordlist);
	        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
	        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
	        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
	            phrase: mnemonic,
	            path: "m",
	            locale: wordlist.locale
	        });
	    };
	    HDNode.fromSeed = function (seed) {
	        return HDNode._fromSeed(seed, null);
	    };
	    HDNode.fromExtendedKey = function (extendedKey) {
	        var bytes = basex_1$1.Base58.decode(extendedKey);
	        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
	            logger$m.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
	        }
	        var depth = bytes[4];
	        var parentFingerprint = (0, bytes_1$d.hexlify)(bytes.slice(5, 9));
	        var index = parseInt((0, bytes_1$d.hexlify)(bytes.slice(9, 13)).substring(2), 16);
	        var chainCode = (0, bytes_1$d.hexlify)(bytes.slice(13, 45));
	        var key = bytes.slice(45, 78);
	        switch ((0, bytes_1$d.hexlify)(bytes.slice(0, 4))) {
	            // Public Key
	            case "0x0488b21e":
	            case "0x043587cf":
	                return new HDNode(_constructorGuard$1, null, (0, bytes_1$d.hexlify)(key), parentFingerprint, chainCode, index, depth, null);
	            // Private Key
	            case "0x0488ade4":
	            case "0x04358394 ":
	                if (key[0] !== 0) {
	                    break;
	                }
	                return new HDNode(_constructorGuard$1, (0, bytes_1$d.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
	        }
	        return logger$m.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
	    };
	    return HDNode;
	}());
	var HDNode_1 = lib$b.HDNode = HDNode;
	function mnemonicToSeed(mnemonic, password) {
	    if (!password) {
	        password = "";
	    }
	    var salt = (0, strings_1$6.toUtf8Bytes)("mnemonic" + password, strings_1$6.UnicodeNormalizationForm.NFKD);
	    return (0, pbkdf2_1$2.pbkdf2)((0, strings_1$6.toUtf8Bytes)(mnemonic, strings_1$6.UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
	}
	var mnemonicToSeed_1 = lib$b.mnemonicToSeed = mnemonicToSeed;
	function mnemonicToEntropy(mnemonic, wordlist) {
	    wordlist = getWordlist(wordlist);
	    logger$m.checkNormalize();
	    var words = wordlist.split(mnemonic);
	    if ((words.length % 3) !== 0) {
	        throw new Error("invalid mnemonic");
	    }
	    var entropy = (0, bytes_1$d.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));
	    var offset = 0;
	    for (var i = 0; i < words.length; i++) {
	        var index = wordlist.getWordIndex(words[i].normalize("NFKD"));
	        if (index === -1) {
	            throw new Error("invalid mnemonic");
	        }
	        for (var bit = 0; bit < 11; bit++) {
	            if (index & (1 << (10 - bit))) {
	                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
	            }
	            offset++;
	        }
	    }
	    var entropyBits = 32 * words.length / 3;
	    var checksumBits = words.length / 3;
	    var checksumMask = getUpperMask(checksumBits);
	    var checksum = (0, bytes_1$d.arrayify)((0, sha2_1$2.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
	    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
	        throw new Error("invalid checksum");
	    }
	    return (0, bytes_1$d.hexlify)(entropy.slice(0, entropyBits / 8));
	}
	var mnemonicToEntropy_1 = lib$b.mnemonicToEntropy = mnemonicToEntropy;
	function entropyToMnemonic(entropy, wordlist) {
	    wordlist = getWordlist(wordlist);
	    entropy = (0, bytes_1$d.arrayify)(entropy);
	    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
	        throw new Error("invalid entropy");
	    }
	    var indices = [0];
	    var remainingBits = 11;
	    for (var i = 0; i < entropy.length; i++) {
	        // Consume the whole byte (with still more to go)
	        if (remainingBits > 8) {
	            indices[indices.length - 1] <<= 8;
	            indices[indices.length - 1] |= entropy[i];
	            remainingBits -= 8;
	            // This byte will complete an 11-bit index
	        }
	        else {
	            indices[indices.length - 1] <<= remainingBits;
	            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
	            // Start the next word
	            indices.push(entropy[i] & getLowerMask(8 - remainingBits));
	            remainingBits += 3;
	        }
	    }
	    // Compute the checksum bits
	    var checksumBits = entropy.length / 4;
	    var checksum = (0, bytes_1$d.arrayify)((0, sha2_1$2.sha256)(entropy))[0] & getUpperMask(checksumBits);
	    // Shift the checksum into the word indices
	    indices[indices.length - 1] <<= checksumBits;
	    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
	    return wordlist.join(indices.map(function (index) { return wordlist.getWord(index); }));
	}
	var entropyToMnemonic_1 = lib$b.entropyToMnemonic = entropyToMnemonic;
	function isValidMnemonic(mnemonic, wordlist) {
	    try {
	        mnemonicToEntropy(mnemonic, wordlist);
	        return true;
	    }
	    catch (error) { }
	    return false;
	}
	var isValidMnemonic_1 = lib$b.isValidMnemonic = isValidMnemonic;
	function getAccountPath(index) {
	    if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
	        logger$m.throwArgumentError("invalid account index", "index", index);
	    }
	    return "m/44'/60'/" + index + "'/0/0";
	}
	getAccountPath_1 = lib$b.getAccountPath = getAccountPath;

	var lib$6 = {};

	var browserRandom = {};

	var _version$8 = {};

	"use strict";
	Object.defineProperty(_version$8, "__esModule", { value: true });
	var version$8 = _version$8.version = void 0;
	version$8 = _version$8.version = "random/5.7.0";

	"use strict";
	Object.defineProperty(browserRandom, "__esModule", { value: true });
	var randomBytes_1 = browserRandom.randomBytes = void 0;
	var bytes_1$c = lib$r;
	var logger_1$m = lib$q;
	var _version_1$m = _version$8;
	var logger$l = new logger_1$m.Logger(_version_1$m.version);
	// Debugging line for testing browser lib in node
	//const window = { crypto: { getRandomValues: () => { } } };
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
	function getGlobal() {
	    if (typeof self !== 'undefined') {
	        return self;
	    }
	    if (typeof window !== 'undefined') {
	        return window;
	    }
	    if (typeof commonjsGlobal !== 'undefined') {
	        return commonjsGlobal;
	    }
	    throw new Error('unable to locate global object');
	}
	;
	var anyGlobal = getGlobal();
	var crypto$1 = anyGlobal.crypto || anyGlobal.msCrypto;
	if (!crypto$1 || !crypto$1.getRandomValues) {
	    logger$l.warn("WARNING: Missing strong random number source");
	    crypto$1 = {
	        getRandomValues: function (buffer) {
	            return logger$l.throwError("no secure random source avaialble", logger_1$m.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "crypto.getRandomValues"
	            });
	        }
	    };
	}
	function randomBytes(length) {
	    if (length <= 0 || length > 1024 || (length % 1) || length != length) {
	        logger$l.throwArgumentError("invalid length", "length", length);
	    }
	    var result = new Uint8Array(length);
	    crypto$1.getRandomValues(result);
	    return (0, bytes_1$c.arrayify)(result);
	}
	randomBytes_1 = browserRandom.randomBytes = randomBytes;
	;

	var shuffle = {};

	"use strict";
	Object.defineProperty(shuffle, "__esModule", { value: true });
	var shuffled_1 = shuffle.shuffled = void 0;
	function shuffled(array) {
	    array = array.slice();
	    for (var i = array.length - 1; i > 0; i--) {
	        var j = Math.floor(Math.random() * (i + 1));
	        var tmp = array[i];
	        array[i] = array[j];
	        array[j] = tmp;
	    }
	    return array;
	}
	shuffled_1 = shuffle.shuffled = shuffled;

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.shuffled = exports.randomBytes = void 0;
		var random_1 = browserRandom;
		Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_1.randomBytes; } });
		var shuffle_1 = shuffle;
		Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return shuffle_1.shuffled; } });
		
	} (lib$6));

	var index$8 = /*@__PURE__*/getDefaultExportFromCjs(lib$6);

	var lib$5 = {};

	var crowdsale = {};

	var aesJsExports = {};
	var aesJs$1 = {
	  get exports(){ return aesJsExports; },
	  set exports(v){ aesJsExports = v; },
	};

	(function (module, exports) {
		"use strict";

		(function(root) {

		    function checkInt(value) {
		        return (parseInt(value) === value);
		    }

		    function checkInts(arrayish) {
		        if (!checkInt(arrayish.length)) { return false; }

		        for (var i = 0; i < arrayish.length; i++) {
		            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
		                return false;
		            }
		        }

		        return true;
		    }

		    function coerceArray(arg, copy) {

		        // ArrayBuffer view
		        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

		            if (copy) {
		                if (arg.slice) {
		                    arg = arg.slice();
		                } else {
		                    arg = Array.prototype.slice.call(arg);
		                }
		            }

		            return arg;
		        }

		        // It's an array; check it is a valid representation of a byte
		        if (Array.isArray(arg)) {
		            if (!checkInts(arg)) {
		                throw new Error('Array contains invalid value: ' + arg);
		            }

		            return new Uint8Array(arg);
		        }

		        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
		        if (checkInt(arg.length) && checkInts(arg)) {
		            return new Uint8Array(arg);
		        }

		        throw new Error('unsupported array-like object');
		    }

		    function createArray(length) {
		        return new Uint8Array(length);
		    }

		    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
		        if (sourceStart != null || sourceEnd != null) {
		            if (sourceArray.slice) {
		                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
		            } else {
		                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
		            }
		        }
		        targetArray.set(sourceArray, targetStart);
		    }



		    var convertUtf8 = (function() {
		        function toBytes(text) {
		            var result = [], i = 0;
		            text = encodeURI(text);
		            while (i < text.length) {
		                var c = text.charCodeAt(i++);

		                // if it is a % sign, encode the following 2 bytes as a hex value
		                if (c === 37) {
		                    result.push(parseInt(text.substr(i, 2), 16));
		                    i += 2;

		                // otherwise, just the actual byte
		                } else {
		                    result.push(c);
		                }
		            }

		            return coerceArray(result);
		        }

		        function fromBytes(bytes) {
		            var result = [], i = 0;

		            while (i < bytes.length) {
		                var c = bytes[i];

		                if (c < 128) {
		                    result.push(String.fromCharCode(c));
		                    i++;
		                } else if (c > 191 && c < 224) {
		                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
		                    i += 2;
		                } else {
		                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
		                    i += 3;
		                }
		            }

		            return result.join('');
		        }

		        return {
		            toBytes: toBytes,
		            fromBytes: fromBytes,
		        }
		    })();

		    var convertHex = (function() {
		        function toBytes(text) {
		            var result = [];
		            for (var i = 0; i < text.length; i += 2) {
		                result.push(parseInt(text.substr(i, 2), 16));
		            }

		            return result;
		        }

		        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
		        var Hex = '0123456789abcdef';

		        function fromBytes(bytes) {
		                var result = [];
		                for (var i = 0; i < bytes.length; i++) {
		                    var v = bytes[i];
		                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
		                }
		                return result.join('');
		        }

		        return {
		            toBytes: toBytes,
		            fromBytes: fromBytes,
		        }
		    })();


		    // Number of rounds by keysize
		    var numberOfRounds = {16: 10, 24: 12, 32: 14};

		    // Round constant words
		    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

		    // S-box and Inverse S-box (S is for Substitution)
		    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
		    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

		    // Transformations for encryption
		    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
		    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
		    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
		    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

		    // Transformations for decryption
		    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
		    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
		    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
		    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

		    // Transformations for decryption key expansion
		    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
		    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
		    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
		    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

		    function convertToInt32(bytes) {
		        var result = [];
		        for (var i = 0; i < bytes.length; i += 4) {
		            result.push(
		                (bytes[i    ] << 24) |
		                (bytes[i + 1] << 16) |
		                (bytes[i + 2] <<  8) |
		                 bytes[i + 3]
		            );
		        }
		        return result;
		    }

		    var AES = function(key) {
		        if (!(this instanceof AES)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        Object.defineProperty(this, 'key', {
		            value: coerceArray(key, true)
		        });

		        this._prepare();
		    };


		    AES.prototype._prepare = function() {

		        var rounds = numberOfRounds[this.key.length];
		        if (rounds == null) {
		            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
		        }

		        // encryption round keys
		        this._Ke = [];

		        // decryption round keys
		        this._Kd = [];

		        for (var i = 0; i <= rounds; i++) {
		            this._Ke.push([0, 0, 0, 0]);
		            this._Kd.push([0, 0, 0, 0]);
		        }

		        var roundKeyCount = (rounds + 1) * 4;
		        var KC = this.key.length / 4;

		        // convert the key into ints
		        var tk = convertToInt32(this.key);

		        // copy values into round key arrays
		        var index;
		        for (var i = 0; i < KC; i++) {
		            index = i >> 2;
		            this._Ke[index][i % 4] = tk[i];
		            this._Kd[rounds - index][i % 4] = tk[i];
		        }

		        // key expansion (fips-197 section 5.2)
		        var rconpointer = 0;
		        var t = KC, tt;
		        while (t < roundKeyCount) {
		            tt = tk[KC - 1];
		            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
		                      (S[(tt >>  8) & 0xFF] << 16) ^
		                      (S[ tt        & 0xFF] <<  8) ^
		                       S[(tt >> 24) & 0xFF]        ^
		                      (rcon[rconpointer] << 24));
		            rconpointer += 1;

		            // key expansion (for non-256 bit)
		            if (KC != 8) {
		                for (var i = 1; i < KC; i++) {
		                    tk[i] ^= tk[i - 1];
		                }

		            // key expansion for 256-bit keys is "slightly different" (fips-197)
		            } else {
		                for (var i = 1; i < (KC / 2); i++) {
		                    tk[i] ^= tk[i - 1];
		                }
		                tt = tk[(KC / 2) - 1];

		                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
		                              (S[(tt >>  8) & 0xFF] <<  8) ^
		                              (S[(tt >> 16) & 0xFF] << 16) ^
		                              (S[(tt >> 24) & 0xFF] << 24));

		                for (var i = (KC / 2) + 1; i < KC; i++) {
		                    tk[i] ^= tk[i - 1];
		                }
		            }

		            // copy values into round key arrays
		            var i = 0, r, c;
		            while (i < KC && t < roundKeyCount) {
		                r = t >> 2;
		                c = t % 4;
		                this._Ke[r][c] = tk[i];
		                this._Kd[rounds - r][c] = tk[i++];
		                t++;
		            }
		        }

		        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
		        for (var r = 1; r < rounds; r++) {
		            for (var c = 0; c < 4; c++) {
		                tt = this._Kd[r][c];
		                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
		                                  U2[(tt >> 16) & 0xFF] ^
		                                  U3[(tt >>  8) & 0xFF] ^
		                                  U4[ tt        & 0xFF]);
		            }
		        }
		    };

		    AES.prototype.encrypt = function(plaintext) {
		        if (plaintext.length != 16) {
		            throw new Error('invalid plaintext size (must be 16 bytes)');
		        }

		        var rounds = this._Ke.length - 1;
		        var a = [0, 0, 0, 0];

		        // convert plaintext to (ints ^ key)
		        var t = convertToInt32(plaintext);
		        for (var i = 0; i < 4; i++) {
		            t[i] ^= this._Ke[0][i];
		        }

		        // apply round transforms
		        for (var r = 1; r < rounds; r++) {
		            for (var i = 0; i < 4; i++) {
		                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
		                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
		                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
		                        T4[ t[(i + 3) % 4]        & 0xff] ^
		                        this._Ke[r][i]);
		            }
		            t = a.slice();
		        }

		        // the last round is special
		        var result = createArray(16), tt;
		        for (var i = 0; i < 4; i++) {
		            tt = this._Ke[rounds][i];
		            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
		            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
		            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
		            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
		        }

		        return result;
		    };

		    AES.prototype.decrypt = function(ciphertext) {
		        if (ciphertext.length != 16) {
		            throw new Error('invalid ciphertext size (must be 16 bytes)');
		        }

		        var rounds = this._Kd.length - 1;
		        var a = [0, 0, 0, 0];

		        // convert plaintext to (ints ^ key)
		        var t = convertToInt32(ciphertext);
		        for (var i = 0; i < 4; i++) {
		            t[i] ^= this._Kd[0][i];
		        }

		        // apply round transforms
		        for (var r = 1; r < rounds; r++) {
		            for (var i = 0; i < 4; i++) {
		                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
		                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
		                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
		                        T8[ t[(i + 1) % 4]        & 0xff] ^
		                        this._Kd[r][i]);
		            }
		            t = a.slice();
		        }

		        // the last round is special
		        var result = createArray(16), tt;
		        for (var i = 0; i < 4; i++) {
		            tt = this._Kd[rounds][i];
		            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
		            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
		            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
		            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
		        }

		        return result;
		    };


		    /**
		     *  Mode Of Operation - Electonic Codebook (ECB)
		     */
		    var ModeOfOperationECB = function(key) {
		        if (!(this instanceof ModeOfOperationECB)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Electronic Code Block";
		        this.name = "ecb";

		        this._aes = new AES(key);
		    };

		    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
		        plaintext = coerceArray(plaintext);

		        if ((plaintext.length % 16) !== 0) {
		            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
		        }

		        var ciphertext = createArray(plaintext.length);
		        var block = createArray(16);

		        for (var i = 0; i < plaintext.length; i += 16) {
		            copyArray(plaintext, block, 0, i, i + 16);
		            block = this._aes.encrypt(block);
		            copyArray(block, ciphertext, i);
		        }

		        return ciphertext;
		    };

		    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
		        ciphertext = coerceArray(ciphertext);

		        if ((ciphertext.length % 16) !== 0) {
		            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
		        }

		        var plaintext = createArray(ciphertext.length);
		        var block = createArray(16);

		        for (var i = 0; i < ciphertext.length; i += 16) {
		            copyArray(ciphertext, block, 0, i, i + 16);
		            block = this._aes.decrypt(block);
		            copyArray(block, plaintext, i);
		        }

		        return plaintext;
		    };


		    /**
		     *  Mode Of Operation - Cipher Block Chaining (CBC)
		     */
		    var ModeOfOperationCBC = function(key, iv) {
		        if (!(this instanceof ModeOfOperationCBC)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Cipher Block Chaining";
		        this.name = "cbc";

		        if (!iv) {
		            iv = createArray(16);

		        } else if (iv.length != 16) {
		            throw new Error('invalid initialation vector size (must be 16 bytes)');
		        }

		        this._lastCipherblock = coerceArray(iv, true);

		        this._aes = new AES(key);
		    };

		    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
		        plaintext = coerceArray(plaintext);

		        if ((plaintext.length % 16) !== 0) {
		            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
		        }

		        var ciphertext = createArray(plaintext.length);
		        var block = createArray(16);

		        for (var i = 0; i < plaintext.length; i += 16) {
		            copyArray(plaintext, block, 0, i, i + 16);

		            for (var j = 0; j < 16; j++) {
		                block[j] ^= this._lastCipherblock[j];
		            }

		            this._lastCipherblock = this._aes.encrypt(block);
		            copyArray(this._lastCipherblock, ciphertext, i);
		        }

		        return ciphertext;
		    };

		    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
		        ciphertext = coerceArray(ciphertext);

		        if ((ciphertext.length % 16) !== 0) {
		            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
		        }

		        var plaintext = createArray(ciphertext.length);
		        var block = createArray(16);

		        for (var i = 0; i < ciphertext.length; i += 16) {
		            copyArray(ciphertext, block, 0, i, i + 16);
		            block = this._aes.decrypt(block);

		            for (var j = 0; j < 16; j++) {
		                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
		            }

		            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
		        }

		        return plaintext;
		    };


		    /**
		     *  Mode Of Operation - Cipher Feedback (CFB)
		     */
		    var ModeOfOperationCFB = function(key, iv, segmentSize) {
		        if (!(this instanceof ModeOfOperationCFB)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Cipher Feedback";
		        this.name = "cfb";

		        if (!iv) {
		            iv = createArray(16);

		        } else if (iv.length != 16) {
		            throw new Error('invalid initialation vector size (must be 16 size)');
		        }

		        if (!segmentSize) { segmentSize = 1; }

		        this.segmentSize = segmentSize;

		        this._shiftRegister = coerceArray(iv, true);

		        this._aes = new AES(key);
		    };

		    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
		        if ((plaintext.length % this.segmentSize) != 0) {
		            throw new Error('invalid plaintext size (must be segmentSize bytes)');
		        }

		        var encrypted = coerceArray(plaintext, true);

		        var xorSegment;
		        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
		            xorSegment = this._aes.encrypt(this._shiftRegister);
		            for (var j = 0; j < this.segmentSize; j++) {
		                encrypted[i + j] ^= xorSegment[j];
		            }

		            // Shift the register
		            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
		            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
		        }

		        return encrypted;
		    };

		    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
		        if ((ciphertext.length % this.segmentSize) != 0) {
		            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
		        }

		        var plaintext = coerceArray(ciphertext, true);

		        var xorSegment;
		        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
		            xorSegment = this._aes.encrypt(this._shiftRegister);

		            for (var j = 0; j < this.segmentSize; j++) {
		                plaintext[i + j] ^= xorSegment[j];
		            }

		            // Shift the register
		            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
		            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
		        }

		        return plaintext;
		    };

		    /**
		     *  Mode Of Operation - Output Feedback (OFB)
		     */
		    var ModeOfOperationOFB = function(key, iv) {
		        if (!(this instanceof ModeOfOperationOFB)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Output Feedback";
		        this.name = "ofb";

		        if (!iv) {
		            iv = createArray(16);

		        } else if (iv.length != 16) {
		            throw new Error('invalid initialation vector size (must be 16 bytes)');
		        }

		        this._lastPrecipher = coerceArray(iv, true);
		        this._lastPrecipherIndex = 16;

		        this._aes = new AES(key);
		    };

		    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
		        var encrypted = coerceArray(plaintext, true);

		        for (var i = 0; i < encrypted.length; i++) {
		            if (this._lastPrecipherIndex === 16) {
		                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
		                this._lastPrecipherIndex = 0;
		            }
		            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
		        }

		        return encrypted;
		    };

		    // Decryption is symetric
		    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


		    /**
		     *  Counter object for CTR common mode of operation
		     */
		    var Counter = function(initialValue) {
		        if (!(this instanceof Counter)) {
		            throw Error('Counter must be instanitated with `new`');
		        }

		        // We allow 0, but anything false-ish uses the default 1
		        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

		        if (typeof(initialValue) === 'number') {
		            this._counter = createArray(16);
		            this.setValue(initialValue);

		        } else {
		            this.setBytes(initialValue);
		        }
		    };

		    Counter.prototype.setValue = function(value) {
		        if (typeof(value) !== 'number' || parseInt(value) != value) {
		            throw new Error('invalid counter value (must be an integer)');
		        }

		        for (var index = 15; index >= 0; --index) {
		            this._counter[index] = value % 256;
		            value = value >> 8;
		        }
		    };

		    Counter.prototype.setBytes = function(bytes) {
		        bytes = coerceArray(bytes, true);

		        if (bytes.length != 16) {
		            throw new Error('invalid counter bytes size (must be 16 bytes)');
		        }

		        this._counter = bytes;
		    };

		    Counter.prototype.increment = function() {
		        for (var i = 15; i >= 0; i--) {
		            if (this._counter[i] === 255) {
		                this._counter[i] = 0;
		            } else {
		                this._counter[i]++;
		                break;
		            }
		        }
		    };


		    /**
		     *  Mode Of Operation - Counter (CTR)
		     */
		    var ModeOfOperationCTR = function(key, counter) {
		        if (!(this instanceof ModeOfOperationCTR)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Counter";
		        this.name = "ctr";

		        if (!(counter instanceof Counter)) {
		            counter = new Counter(counter);
		        }

		        this._counter = counter;

		        this._remainingCounter = null;
		        this._remainingCounterIndex = 16;

		        this._aes = new AES(key);
		    };

		    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
		        var encrypted = coerceArray(plaintext, true);

		        for (var i = 0; i < encrypted.length; i++) {
		            if (this._remainingCounterIndex === 16) {
		                this._remainingCounter = this._aes.encrypt(this._counter._counter);
		                this._remainingCounterIndex = 0;
		                this._counter.increment();
		            }
		            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
		        }

		        return encrypted;
		    };

		    // Decryption is symetric
		    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


		    ///////////////////////
		    // Padding

		    // See:https://tools.ietf.org/html/rfc2315
		    function pkcs7pad(data) {
		        data = coerceArray(data, true);
		        var padder = 16 - (data.length % 16);
		        var result = createArray(data.length + padder);
		        copyArray(data, result);
		        for (var i = data.length; i < result.length; i++) {
		            result[i] = padder;
		        }
		        return result;
		    }

		    function pkcs7strip(data) {
		        data = coerceArray(data, true);
		        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

		        var padder = data[data.length - 1];
		        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

		        var length = data.length - padder;
		        for (var i = 0; i < padder; i++) {
		            if (data[length + i] !== padder) {
		                throw new Error('PKCS#7 invalid padding byte');
		            }
		        }

		        var result = createArray(length);
		        copyArray(data, result, 0, 0, length);
		        return result;
		    }

		    ///////////////////////
		    // Exporting


		    // The block cipher
		    var aesjs = {
		        AES: AES,
		        Counter: Counter,

		        ModeOfOperation: {
		            ecb: ModeOfOperationECB,
		            cbc: ModeOfOperationCBC,
		            cfb: ModeOfOperationCFB,
		            ofb: ModeOfOperationOFB,
		            ctr: ModeOfOperationCTR
		        },

		        utils: {
		            hex: convertHex,
		            utf8: convertUtf8
		        },

		        padding: {
		            pkcs7: {
		                pad: pkcs7pad,
		                strip: pkcs7strip
		            }
		        },

		        _arrayTest: {
		            coerceArray: coerceArray,
		            createArray: createArray,
		            copyArray: copyArray,
		        }
		    };


		    // node.js
		    if ('object' !== 'undefined') {
		        module.exports = aesjs;

		    // RequireJS/AMD
		    // http://www.requirejs.org/docs/api.html
		    // https://github.com/amdjs/amdjs-api/wiki/AMD
		    } else if (typeof(undefined) === 'function' && undefined.amd) {
		        undefined(aesjs);

		    // Web Browsers
		    } else {

		        // If there was an existing library at "aesjs" make sure it's still available
		        if (root.aesjs) {
		            aesjs._aesjs = root.aesjs;
		        }

		        root.aesjs = aesjs;
		    }


		})(commonjsGlobal);
	} (aesJs$1, aesJsExports));

	var aesJs = aesJsExports;

	var _version$7 = {};

	"use strict";
	Object.defineProperty(_version$7, "__esModule", { value: true });
	var version$7 = _version$7.version = void 0;
	version$7 = _version$7.version = "json-wallets/5.7.0";

	var utils$2 = {};

	"use strict";
	Object.defineProperty(utils$2, "__esModule", { value: true });
	var uuidV4_1 = utils$2.uuidV4 = searchPath_1 = utils$2.searchPath = getPassword_1 = utils$2.getPassword = zpad_1 = utils$2.zpad = looseArrayify_1 = utils$2.looseArrayify = void 0;
	var bytes_1$b = lib$r;
	var strings_1$5 = lib$k;
	function looseArrayify(hexString) {
	    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
	        hexString = '0x' + hexString;
	    }
	    return (0, bytes_1$b.arrayify)(hexString);
	}
	var looseArrayify_1 = utils$2.looseArrayify = looseArrayify;
	function zpad(value, length) {
	    value = String(value);
	    while (value.length < length) {
	        value = '0' + value;
	    }
	    return value;
	}
	var zpad_1 = utils$2.zpad = zpad;
	function getPassword(password) {
	    if (typeof (password) === 'string') {
	        return (0, strings_1$5.toUtf8Bytes)(password, strings_1$5.UnicodeNormalizationForm.NFKC);
	    }
	    return (0, bytes_1$b.arrayify)(password);
	}
	var getPassword_1 = utils$2.getPassword = getPassword;
	function searchPath(object, path) {
	    var currentChild = object;
	    var comps = path.toLowerCase().split('/');
	    for (var i = 0; i < comps.length; i++) {
	        // Search for a child object with a case-insensitive matching key
	        var matchingChild = null;
	        for (var key in currentChild) {
	            if (key.toLowerCase() === comps[i]) {
	                matchingChild = currentChild[key];
	                break;
	            }
	        }
	        // Didn't find one. :'(
	        if (matchingChild === null) {
	            return null;
	        }
	        // Now check this child...
	        currentChild = matchingChild;
	    }
	    return currentChild;
	}
	var searchPath_1 = utils$2.searchPath = searchPath;
	// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
	function uuidV4(randomBytes) {
	    var bytes = (0, bytes_1$b.arrayify)(randomBytes);
	    // Section: 4.1.3:
	    // - time_hi_and_version[12:16] = 0b0100
	    bytes[6] = (bytes[6] & 0x0f) | 0x40;
	    // Section 4.4
	    // - clock_seq_hi_and_reserved[6] = 0b0
	    // - clock_seq_hi_and_reserved[7] = 0b1
	    bytes[8] = (bytes[8] & 0x3f) | 0x80;
	    var value = (0, bytes_1$b.hexlify)(bytes);
	    return [
	        value.substring(2, 10),
	        value.substring(10, 14),
	        value.substring(14, 18),
	        value.substring(18, 22),
	        value.substring(22, 34),
	    ].join("-");
	}
	uuidV4_1 = utils$2.uuidV4 = uuidV4;

	"use strict";
	var __extends$m = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(crowdsale, "__esModule", { value: true });
	var decrypt_1$1 = crowdsale.decrypt = CrowdsaleAccount_1 = crowdsale.CrowdsaleAccount = void 0;
	var aes_js_1$1 = __importDefault$9(aesJsExports);
	var address_1$4 = lib$o;
	var bytes_1$a = lib$r;
	var keccak256_1$3 = lib$n;
	var pbkdf2_1$1 = lib$9;
	var strings_1$4 = lib$k;
	var properties_1$e = lib$p;
	var logger_1$l = lib$q;
	var _version_1$l = _version$7;
	var logger$k = new logger_1$l.Logger(_version_1$l.version);
	var utils_1$1 = utils$2;
	var CrowdsaleAccount = /** @class */ (function (_super) {
	    __extends$m(CrowdsaleAccount, _super);
	    function CrowdsaleAccount() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    CrowdsaleAccount.prototype.isCrowdsaleAccount = function (value) {
	        return !!(value && value._isCrowdsaleAccount);
	    };
	    return CrowdsaleAccount;
	}(properties_1$e.Description));
	var CrowdsaleAccount_1 = crowdsale.CrowdsaleAccount = CrowdsaleAccount;
	// See: https://github.com/ethereum/pyethsaletool
	function decrypt$1(json, password) {
	    var data = JSON.parse(json);
	    password = (0, utils_1$1.getPassword)(password);
	    // Ethereum Address
	    var ethaddr = (0, address_1$4.getAddress)((0, utils_1$1.searchPath)(data, "ethaddr"));
	    // Encrypted Seed
	    var encseed = (0, utils_1$1.looseArrayify)((0, utils_1$1.searchPath)(data, "encseed"));
	    if (!encseed || (encseed.length % 16) !== 0) {
	        logger$k.throwArgumentError("invalid encseed", "json", json);
	    }
	    var key = (0, bytes_1$a.arrayify)((0, pbkdf2_1$1.pbkdf2)(password, password, 2000, 32, "sha256")).slice(0, 16);
	    var iv = encseed.slice(0, 16);
	    var encryptedSeed = encseed.slice(16);
	    // Decrypt the seed
	    var aesCbc = new aes_js_1$1.default.ModeOfOperation.cbc(key, iv);
	    var seed = aes_js_1$1.default.padding.pkcs7.strip((0, bytes_1$a.arrayify)(aesCbc.decrypt(encryptedSeed)));
	    // This wallet format is weird... Convert the binary encoded hex to a string.
	    var seedHex = "";
	    for (var i = 0; i < seed.length; i++) {
	        seedHex += String.fromCharCode(seed[i]);
	    }
	    var seedHexBytes = (0, strings_1$4.toUtf8Bytes)(seedHex);
	    var privateKey = (0, keccak256_1$3.keccak256)(seedHexBytes);
	    return new CrowdsaleAccount({
	        _isCrowdsaleAccount: true,
	        address: ethaddr,
	        privateKey: privateKey
	    });
	}
	decrypt_1$1 = crowdsale.decrypt = decrypt$1;

	var inspect = {};

	"use strict";
	Object.defineProperty(inspect, "__esModule", { value: true });
	var getJsonWalletAddress_1 = inspect.getJsonWalletAddress = isKeystoreWallet_1 = inspect.isKeystoreWallet = isCrowdsaleWallet_1 = inspect.isCrowdsaleWallet = void 0;
	var address_1$3 = lib$o;
	function isCrowdsaleWallet(json) {
	    var data = null;
	    try {
	        data = JSON.parse(json);
	    }
	    catch (error) {
	        return false;
	    }
	    return (data.encseed && data.ethaddr);
	}
	var isCrowdsaleWallet_1 = inspect.isCrowdsaleWallet = isCrowdsaleWallet;
	function isKeystoreWallet(json) {
	    var data = null;
	    try {
	        data = JSON.parse(json);
	    }
	    catch (error) {
	        return false;
	    }
	    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
	        return false;
	    }
	    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
	    return true;
	}
	var isKeystoreWallet_1 = inspect.isKeystoreWallet = isKeystoreWallet;
	//export function isJsonWallet(json: string): boolean {
	//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
	//}
	function getJsonWalletAddress(json) {
	    if (isCrowdsaleWallet(json)) {
	        try {
	            return (0, address_1$3.getAddress)(JSON.parse(json).ethaddr);
	        }
	        catch (error) {
	            return null;
	        }
	    }
	    if (isKeystoreWallet(json)) {
	        try {
	            return (0, address_1$3.getAddress)(JSON.parse(json).address);
	        }
	        catch (error) {
	            return null;
	        }
	    }
	    return null;
	}
	getJsonWalletAddress_1 = inspect.getJsonWalletAddress = getJsonWalletAddress;

	var keystore = {};

	var scryptExports = {};
	var scrypt$1 = {
	  get exports(){ return scryptExports; },
	  set exports(v){ scryptExports = v; },
	};

	(function (module, exports) {
		"use strict";

		(function(root) {
		    const MAX_VALUE = 0x7fffffff;

		    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
		    // See: https://github.com/dchest/scrypt-async-js
		    function SHA256(m) {
		        const K = new Uint32Array([
		           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
		           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
		           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
		           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
		           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
		           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
		           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
		           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
		           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
		           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
		           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
		           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
		           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
		       ]);

		        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
		        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
		        const w = new Uint32Array(64);

		        function blocks(p) {
		            let off = 0, len = p.length;
		            while (len >= 64) {
		                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

		                for (i = 0; i < 16; i++) {
		                    j = off + i*4;
		                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
		                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
		                }

		                for (i = 16; i < 64; i++) {
		                    u = w[i-2];
		                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

		                    u = w[i-15];
		                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

		                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
		                }

		                for (i = 0; i < 64; i++) {
		                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
		                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
		                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

		                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
		                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

		                    h = g;
		                    g = f;
		                    f = e;
		                    e = (d + t1) | 0;
		                    d = c;
		                    c = b;
		                    b = a;
		                    a = (t1 + t2) | 0;
		                }

		                h0 = (h0 + a) | 0;
		                h1 = (h1 + b) | 0;
		                h2 = (h2 + c) | 0;
		                h3 = (h3 + d) | 0;
		                h4 = (h4 + e) | 0;
		                h5 = (h5 + f) | 0;
		                h6 = (h6 + g) | 0;
		                h7 = (h7 + h) | 0;

		                off += 64;
		                len -= 64;
		            }
		        }

		        blocks(m);

		        let i, bytesLeft = m.length % 64,
		        bitLenHi = (m.length / 0x20000000) | 0,
		        bitLenLo = m.length << 3,
		        numZeros = (bytesLeft < 56) ? 56 : 120,
		        p = m.slice(m.length - bytesLeft, m.length);

		        p.push(0x80);
		        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
		        p.push((bitLenHi >>> 24) & 0xff);
		        p.push((bitLenHi >>> 16) & 0xff);
		        p.push((bitLenHi >>> 8)  & 0xff);
		        p.push((bitLenHi >>> 0)  & 0xff);
		        p.push((bitLenLo >>> 24) & 0xff);
		        p.push((bitLenLo >>> 16) & 0xff);
		        p.push((bitLenLo >>> 8)  & 0xff);
		        p.push((bitLenLo >>> 0)  & 0xff);

		        blocks(p);

		        return [
		            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
		            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
		            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
		            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
		            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
		            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
		            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
		            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
		        ];
		    }

		    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
		        // compress password if it's longer than hash block length
		        password = (password.length <= 64) ? password : SHA256(password);

		        const innerLen = 64 + salt.length + 4;
		        const inner = new Array(innerLen);
		        const outerKey = new Array(64);

		        let i;
		        let dk = [];

		        // inner = (password ^ ipad) || salt || counter
		        for (i = 0; i < 64; i++) { inner[i] = 0x36; }
		        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
		        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
		        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

		        // outerKey = password ^ opad
		        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
		        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

		        // increments counter inside inner
		        function incrementCounter() {
		            for (let i = innerLen - 1; i >= innerLen - 4; i--) {
		                inner[i]++;
		                if (inner[i] <= 0xff) return;
		                inner[i] = 0;
		            }
		        }

		        // output blocks = SHA256(outerKey || SHA256(inner)) ...
		        while (dkLen >= 32) {
		            incrementCounter();
		            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
		            dkLen -= 32;
		        }
		        if (dkLen > 0) {
		            incrementCounter();
		            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
		        }

		        return dk;
		    }

		    // The following is an adaptation of scryptsy
		    // See: https://www.npmjs.com/package/scryptsy
		    function blockmix_salsa8(BY, Yi, r, x, _X) {
		        let i;

		        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
		        for (i = 0; i < 2 * r; i++) {
		            blockxor(BY, i * 16, _X, 16);
		            salsa20_8(_X, x);
		            arraycopy(_X, 0, BY, Yi + (i * 16), 16);
		        }

		        for (i = 0; i < r; i++) {
		            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
		        }

		        for (i = 0; i < r; i++) {
		            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
		        }
		    }

		    function R(a, b) {
		        return (a << b) | (a >>> (32 - b));
		    }

		    function salsa20_8(B, x) {
		        arraycopy(B, 0, x, 0, 16);

		        for (let i = 8; i > 0; i -= 2) {
		            x[ 4] ^= R(x[ 0] + x[12], 7);
		            x[ 8] ^= R(x[ 4] + x[ 0], 9);
		            x[12] ^= R(x[ 8] + x[ 4], 13);
		            x[ 0] ^= R(x[12] + x[ 8], 18);
		            x[ 9] ^= R(x[ 5] + x[ 1], 7);
		            x[13] ^= R(x[ 9] + x[ 5], 9);
		            x[ 1] ^= R(x[13] + x[ 9], 13);
		            x[ 5] ^= R(x[ 1] + x[13], 18);
		            x[14] ^= R(x[10] + x[ 6], 7);
		            x[ 2] ^= R(x[14] + x[10], 9);
		            x[ 6] ^= R(x[ 2] + x[14], 13);
		            x[10] ^= R(x[ 6] + x[ 2], 18);
		            x[ 3] ^= R(x[15] + x[11], 7);
		            x[ 7] ^= R(x[ 3] + x[15], 9);
		            x[11] ^= R(x[ 7] + x[ 3], 13);
		            x[15] ^= R(x[11] + x[ 7], 18);
		            x[ 1] ^= R(x[ 0] + x[ 3], 7);
		            x[ 2] ^= R(x[ 1] + x[ 0], 9);
		            x[ 3] ^= R(x[ 2] + x[ 1], 13);
		            x[ 0] ^= R(x[ 3] + x[ 2], 18);
		            x[ 6] ^= R(x[ 5] + x[ 4], 7);
		            x[ 7] ^= R(x[ 6] + x[ 5], 9);
		            x[ 4] ^= R(x[ 7] + x[ 6], 13);
		            x[ 5] ^= R(x[ 4] + x[ 7], 18);
		            x[11] ^= R(x[10] + x[ 9], 7);
		            x[ 8] ^= R(x[11] + x[10], 9);
		            x[ 9] ^= R(x[ 8] + x[11], 13);
		            x[10] ^= R(x[ 9] + x[ 8], 18);
		            x[12] ^= R(x[15] + x[14], 7);
		            x[13] ^= R(x[12] + x[15], 9);
		            x[14] ^= R(x[13] + x[12], 13);
		            x[15] ^= R(x[14] + x[13], 18);
		        }

		        for (let i = 0; i < 16; ++i) {
		            B[i] += x[i];
		        }
		    }

		    // naive approach... going back to loop unrolling may yield additional performance
		    function blockxor(S, Si, D, len) {
		        for (let i = 0; i < len; i++) {
		            D[i] ^= S[Si + i];
		        }
		    }

		    function arraycopy(src, srcPos, dest, destPos, length) {
		        while (length--) {
		            dest[destPos++] = src[srcPos++];
		        }
		    }

		    function checkBufferish(o) {
		        if (!o || typeof(o.length) !== 'number') { return false; }

		        for (let i = 0; i < o.length; i++) {
		            const v = o[i];
		            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
		                return false;
		            }
		        }

		        return true;
		    }

		    function ensureInteger(value, name) {
		        if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
		        return value;
		    }

		    // N = Cpu cost, r = Memory cost, p = parallelization cost
		    // callback(error, progress, key)
		    function _scrypt(password, salt, N, r, p, dkLen, callback) {

		        N = ensureInteger(N, 'N');
		        r = ensureInteger(r, 'r');
		        p = ensureInteger(p, 'p');

		        dkLen = ensureInteger(dkLen, 'dkLen');

		        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

		        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
		        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

		        if (!checkBufferish(password)) {
		            throw new Error('password must be an array or buffer');
		        }
		        password = Array.prototype.slice.call(password);

		        if (!checkBufferish(salt)) {
		            throw new Error('salt must be an array or buffer');
		        }
		        salt = Array.prototype.slice.call(salt);

		        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
		        const B = new Uint32Array(p * 32 * r);
		        for (let i = 0; i < B.length; i++) {
		            const j = i * 4;
		            B[i] = ((b[j + 3] & 0xff) << 24) |
		                   ((b[j + 2] & 0xff) << 16) |
		                   ((b[j + 1] & 0xff) << 8) |
		                   ((b[j + 0] & 0xff) << 0);
		        }

		        const XY = new Uint32Array(64 * r);
		        const V = new Uint32Array(32 * r * N);

		        const Yi = 32 * r;

		        // scratch space
		        const x = new Uint32Array(16);       // salsa20_8
		        const _X = new Uint32Array(16);      // blockmix_salsa8

		        const totalOps = p * N * 2;
		        let currentOp = 0;
		        let lastPercent10 = null;

		        // Set this to true to abandon the scrypt on the next step
		        let stop = false;

		        // State information
		        let state = 0;
		        let i0 = 0, i1;
		        let Bi;

		        // How many blockmix_salsa8 can we do per step?
		        const limit = callback ? parseInt(1000 / r): 0xffffffff;

		        // Trick from scrypt-async; if there is a setImmediate shim in place, use it
		        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

		        // This is really all I changed; making scryptsy a state machine so we occasionally
		        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
		        const incrementalSMix = function() {
		            if (stop) {
		                return callback(new Error('cancelled'), currentOp / totalOps);
		            }

		            let steps;

		            switch (state) {
		                case 0:
		                    // for (var i = 0; i < p; i++)...
		                    Bi = i0 * 32 * r;

		                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

		                    state = 1;                                         // Move to ROMix 2
		                    i1 = 0;

		                    // Fall through

		                case 1:

		                    // Run up to 1000 steps of the first inner smix loop
		                    steps = N - i1;
		                    if (steps > limit) { steps = limit; }
		                    for (let i = 0; i < steps; i++) {                  // ROMix - 2
		                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
		                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
		                    }

		                    // for (var i = 0; i < N; i++)
		                    i1 += steps;
		                    currentOp += steps;

		                    if (callback) {
		                        // Call the callback with the progress (optionally stopping us)
		                        const percent10 = parseInt(1000 * currentOp / totalOps);
		                        if (percent10 !== lastPercent10) {
		                            stop = callback(null, currentOp / totalOps);
		                            if (stop) { break; }
		                            lastPercent10 = percent10;
		                        }
		                    }

		                    if (i1 < N) { break; }

		                    i1 = 0;                                          // Move to ROMix 6
		                    state = 2;

		                    // Fall through

		                case 2:

		                    // Run up to 1000 steps of the second inner smix loop
		                    steps = N - i1;
		                    if (steps > limit) { steps = limit; }
		                    for (let i = 0; i < steps; i++) {                // ROMix - 6
		                        const offset = (2 * r - 1) * 16;             // ROMix - 7
		                        const j = XY[offset] & (N - 1);
		                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
		                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
		                    }

		                    // for (var i = 0; i < N; i++)...
		                    i1 += steps;
		                    currentOp += steps;

		                    // Call the callback with the progress (optionally stopping us)
		                    if (callback) {
		                        const percent10 = parseInt(1000 * currentOp / totalOps);
		                        if (percent10 !== lastPercent10) {
		                            stop = callback(null, currentOp / totalOps);
		                            if (stop) { break; }
		                            lastPercent10 = percent10;
		                        }
		                    }

		                    if (i1 < N) { break; }

		                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

		                    // for (var i = 0; i < p; i++)...
		                    i0++;
		                    if (i0 < p) {
		                        state = 0;
		                        break;
		                    }

		                    b = [];
		                    for (let i = 0; i < B.length; i++) {
		                        b.push((B[i] >>  0) & 0xff);
		                        b.push((B[i] >>  8) & 0xff);
		                        b.push((B[i] >> 16) & 0xff);
		                        b.push((B[i] >> 24) & 0xff);
		                    }

		                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

		                    // Send the result to the callback
		                    if (callback) { callback(null, 1.0, derivedKey); }

		                    // Done; don't break (which would reschedule)
		                    return derivedKey;
		            }

		            // Schedule the next steps
		            if (callback) { nextTick(incrementalSMix); }
		        };

		        // Run the smix state machine until completion
		        if (!callback) {
		            while (true) {
		                const derivedKey = incrementalSMix();
		                if (derivedKey != undefined) { return derivedKey; }
		            }
		        }

		        // Bootstrap the async incremental smix
		        incrementalSMix();
		    }

		    const lib = {
		        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
		            return new Promise(function(resolve, reject) {
		                let lastProgress = 0;
		                if (progressCallback) { progressCallback(0); }
		                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
		                    if (error) {
		                        reject(error);
		                    } else if (key) {
		                        if (progressCallback && lastProgress !== 1) {
		                            progressCallback(1);
		                        }
		                        resolve(new Uint8Array(key));
		                    } else if (progressCallback && progress !== lastProgress) {
		                        lastProgress = progress;
		                        return progressCallback(progress);
		                    }
		                });
		            });
		        },
		        syncScrypt: function(password, salt, N, r, p, dkLen) {
		            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
		        }
		    };

		    // node.js
		    if ('object' !== 'undefined') {
		       module.exports = lib;

		    // RequireJS/AMD
		    // http://www.requirejs.org/docs/api.html
		    // https://github.com/amdjs/amdjs-api/wiki/AMD
		    } else if (typeof(undefined) === 'function' && undefined.amd) {
		        undefined(lib);

		    // Web Browsers
		    } else if (root) {

		        // If there was an existing library "scrypt", make sure it is still available
		        if (root.scrypt) {
		            root._scrypt = root.scrypt;
		        }

		        root.scrypt = lib;
		    }

		})(commonjsGlobal);
	} (scrypt$1, scryptExports));

	var scrypt = scryptExports;

	"use strict";
	var __extends$l = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$l = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$l = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(keystore, "__esModule", { value: true });
	var encrypt_1 = keystore.encrypt = decrypt_1 = keystore.decrypt = decryptSync_1 = keystore.decryptSync = KeystoreAccount_1 = keystore.KeystoreAccount = void 0;
	var aes_js_1 = __importDefault$8(aesJsExports);
	var scrypt_js_1 = __importDefault$8(scryptExports);
	var address_1$2 = lib$o;
	var bytes_1$9 = lib$r;
	var hdnode_1$1 = lib$b;
	var keccak256_1$2 = lib$n;
	var pbkdf2_1 = lib$9;
	var random_1$2 = lib$6;
	var properties_1$d = lib$p;
	var transactions_1$4 = lib$e;
	var utils_1 = utils$2;
	var logger_1$k = lib$q;
	var _version_1$k = _version$7;
	var logger$j = new logger_1$k.Logger(_version_1$k.version);
	// Exported Types
	function hasMnemonic$1(value) {
	    return (value != null && value.mnemonic && value.mnemonic.phrase);
	}
	var KeystoreAccount = /** @class */ (function (_super) {
	    __extends$l(KeystoreAccount, _super);
	    function KeystoreAccount() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    KeystoreAccount.prototype.isKeystoreAccount = function (value) {
	        return !!(value && value._isKeystoreAccount);
	    };
	    return KeystoreAccount;
	}(properties_1$d.Description));
	var KeystoreAccount_1 = keystore.KeystoreAccount = KeystoreAccount;
	function _decrypt(data, key, ciphertext) {
	    var cipher = (0, utils_1.searchPath)(data, "crypto/cipher");
	    if (cipher === "aes-128-ctr") {
	        var iv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/cipherparams/iv"));
	        var counter = new aes_js_1.default.Counter(iv);
	        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);
	        return (0, bytes_1$9.arrayify)(aesCtr.decrypt(ciphertext));
	    }
	    return null;
	}
	function _getAccount(data, key) {
	    var ciphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/ciphertext"));
	    var computedMAC = (0, bytes_1$9.hexlify)((0, keccak256_1$2.keccak256)((0, bytes_1$9.concat)([key.slice(16, 32), ciphertext]))).substring(2);
	    if (computedMAC !== (0, utils_1.searchPath)(data, "crypto/mac").toLowerCase()) {
	        throw new Error("invalid password");
	    }
	    var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
	    if (!privateKey) {
	        logger$j.throwError("unsupported cipher", logger_1$k.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "decrypt"
	        });
	    }
	    var mnemonicKey = key.slice(32, 64);
	    var address = (0, transactions_1$4.computeAddress)(privateKey);
	    if (data.address) {
	        var check = data.address.toLowerCase();
	        if (check.substring(0, 2) !== "0x") {
	            check = "0x" + check;
	        }
	        if ((0, address_1$2.getAddress)(check) !== address) {
	            throw new Error("address mismatch");
	        }
	    }
	    var account = {
	        _isKeystoreAccount: true,
	        address: address,
	        privateKey: (0, bytes_1$9.hexlify)(privateKey)
	    };
	    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
	    if ((0, utils_1.searchPath)(data, "x-ethers/version") === "0.1") {
	        var mnemonicCiphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "x-ethers/mnemonicCiphertext"));
	        var mnemonicIv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "x-ethers/mnemonicCounter"));
	        var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
	        var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
	        var path = (0, utils_1.searchPath)(data, "x-ethers/path") || hdnode_1$1.defaultPath;
	        var locale = (0, utils_1.searchPath)(data, "x-ethers/locale") || "en";
	        var entropy = (0, bytes_1$9.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));
	        try {
	            var mnemonic = (0, hdnode_1$1.entropyToMnemonic)(entropy, locale);
	            var node = hdnode_1$1.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
	            if (node.privateKey != account.privateKey) {
	                throw new Error("mnemonic mismatch");
	            }
	            account.mnemonic = node.mnemonic;
	        }
	        catch (error) {
	            // If we don't have the locale wordlist installed to
	            // read this mnemonic, just bail and don't set the
	            // mnemonic
	            if (error.code !== logger_1$k.Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
	                throw error;
	            }
	        }
	    }
	    return new KeystoreAccount(account);
	}
	function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
	    return (0, bytes_1$9.arrayify)((0, pbkdf2_1.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));
	}
	function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
	    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
	}
	function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
	    var passwordBytes = (0, utils_1.getPassword)(password);
	    var kdf = (0, utils_1.searchPath)(data, "crypto/kdf");
	    if (kdf && typeof (kdf) === "string") {
	        var throwError = function (name, value) {
	            return logger$j.throwArgumentError("invalid key-derivation function parameters", name, value);
	        };
	        if (kdf.toLowerCase() === "scrypt") {
	            var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/kdfparams/salt"));
	            var N = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/n"));
	            var r = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/r"));
	            var p = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/p"));
	            // Check for all required parameters
	            if (!N || !r || !p) {
	                throwError("kdf", kdf);
	            }
	            // Make sure N is a power of 2
	            if ((N & (N - 1)) !== 0) {
	                throwError("N", N);
	            }
	            var dkLen = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/dklen"));
	            if (dkLen !== 32) {
	                throwError("dklen", dkLen);
	            }
	            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
	        }
	        else if (kdf.toLowerCase() === "pbkdf2") {
	            var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/kdfparams/salt"));
	            var prfFunc = null;
	            var prf = (0, utils_1.searchPath)(data, "crypto/kdfparams/prf");
	            if (prf === "hmac-sha256") {
	                prfFunc = "sha256";
	            }
	            else if (prf === "hmac-sha512") {
	                prfFunc = "sha512";
	            }
	            else {
	                throwError("prf", prf);
	            }
	            var count = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/c"));
	            var dkLen = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/dklen"));
	            if (dkLen !== 32) {
	                throwError("dklen", dkLen);
	            }
	            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
	        }
	    }
	    return logger$j.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
	}
	function decryptSync(json, password) {
	    var data = JSON.parse(json);
	    var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt_js_1.default.syncScrypt);
	    return _getAccount(data, key);
	}
	var decryptSync_1 = keystore.decryptSync = decryptSync;
	function decrypt(json, password, progressCallback) {
	    return __awaiter$l(this, void 0, void 0, function () {
	        var data, key;
	        return __generator$l(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    data = JSON.parse(json);
	                    return [4 /*yield*/, _computeKdfKey(data, password, pbkdf2, scrypt_js_1.default.scrypt, progressCallback)];
	                case 1:
	                    key = _a.sent();
	                    return [2 /*return*/, _getAccount(data, key)];
	            }
	        });
	    });
	}
	var decrypt_1 = keystore.decrypt = decrypt;
	function encrypt(account, password, options, progressCallback) {
	    try {
	        // Check the address matches the private key
	        if ((0, address_1$2.getAddress)(account.address) !== (0, transactions_1$4.computeAddress)(account.privateKey)) {
	            throw new Error("address/privateKey mismatch");
	        }
	        // Check the mnemonic (if any) matches the private key
	        if (hasMnemonic$1(account)) {
	            var mnemonic = account.mnemonic;
	            var node = hdnode_1$1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || hdnode_1$1.defaultPath);
	            if (node.privateKey != account.privateKey) {
	                throw new Error("mnemonic mismatch");
	            }
	        }
	    }
	    catch (e) {
	        return Promise.reject(e);
	    }
	    // The options are optional, so adjust the call as needed
	    if (typeof (options) === "function" && !progressCallback) {
	        progressCallback = options;
	        options = {};
	    }
	    if (!options) {
	        options = {};
	    }
	    var privateKey = (0, bytes_1$9.arrayify)(account.privateKey);
	    var passwordBytes = (0, utils_1.getPassword)(password);
	    var entropy = null;
	    var path = null;
	    var locale = null;
	    if (hasMnemonic$1(account)) {
	        var srcMnemonic = account.mnemonic;
	        entropy = (0, bytes_1$9.arrayify)((0, hdnode_1$1.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || "en"));
	        path = srcMnemonic.path || hdnode_1$1.defaultPath;
	        locale = srcMnemonic.locale || "en";
	    }
	    var client = options.client;
	    if (!client) {
	        client = "ethers.js";
	    }
	    // Check/generate the salt
	    var salt = null;
	    if (options.salt) {
	        salt = (0, bytes_1$9.arrayify)(options.salt);
	    }
	    else {
	        salt = (0, random_1$2.randomBytes)(32);
	        ;
	    }
	    // Override initialization vector
	    var iv = null;
	    if (options.iv) {
	        iv = (0, bytes_1$9.arrayify)(options.iv);
	        if (iv.length !== 16) {
	            throw new Error("invalid iv");
	        }
	    }
	    else {
	        iv = (0, random_1$2.randomBytes)(16);
	    }
	    // Override the uuid
	    var uuidRandom = null;
	    if (options.uuid) {
	        uuidRandom = (0, bytes_1$9.arrayify)(options.uuid);
	        if (uuidRandom.length !== 16) {
	            throw new Error("invalid uuid");
	        }
	    }
	    else {
	        uuidRandom = (0, random_1$2.randomBytes)(16);
	    }
	    // Override the scrypt password-based key derivation function parameters
	    var N = (1 << 17), r = 8, p = 1;
	    if (options.scrypt) {
	        if (options.scrypt.N) {
	            N = options.scrypt.N;
	        }
	        if (options.scrypt.r) {
	            r = options.scrypt.r;
	        }
	        if (options.scrypt.p) {
	            p = options.scrypt.p;
	        }
	    }
	    // We take 64 bytes:
	    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
	    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
	    return scrypt_js_1.default.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function (key) {
	        key = (0, bytes_1$9.arrayify)(key);
	        // This will be used to encrypt the wallet (as per Web3 secret storage)
	        var derivedKey = key.slice(0, 16);
	        var macPrefix = key.slice(16, 32);
	        // This will be used to encrypt the mnemonic phrase (if any)
	        var mnemonicKey = key.slice(32, 64);
	        // Encrypt the private key
	        var counter = new aes_js_1.default.Counter(iv);
	        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
	        var ciphertext = (0, bytes_1$9.arrayify)(aesCtr.encrypt(privateKey));
	        // Compute the message authentication code, used to check the password
	        var mac = (0, keccak256_1$2.keccak256)((0, bytes_1$9.concat)([macPrefix, ciphertext]));
	        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
	        var data = {
	            address: account.address.substring(2).toLowerCase(),
	            id: (0, utils_1.uuidV4)(uuidRandom),
	            version: 3,
	            crypto: {
	                cipher: "aes-128-ctr",
	                cipherparams: {
	                    iv: (0, bytes_1$9.hexlify)(iv).substring(2),
	                },
	                ciphertext: (0, bytes_1$9.hexlify)(ciphertext).substring(2),
	                kdf: "scrypt",
	                kdfparams: {
	                    salt: (0, bytes_1$9.hexlify)(salt).substring(2),
	                    n: N,
	                    dklen: 32,
	                    p: p,
	                    r: r
	                },
	                mac: mac.substring(2)
	            }
	        };
	        // If we have a mnemonic, encrypt it into the JSON wallet
	        if (entropy) {
	            var mnemonicIv = (0, random_1$2.randomBytes)(16);
	            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
	            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
	            var mnemonicCiphertext = (0, bytes_1$9.arrayify)(mnemonicAesCtr.encrypt(entropy));
	            var now = new Date();
	            var timestamp = (now.getUTCFullYear() + "-" +
	                (0, utils_1.zpad)(now.getUTCMonth() + 1, 2) + "-" +
	                (0, utils_1.zpad)(now.getUTCDate(), 2) + "T" +
	                (0, utils_1.zpad)(now.getUTCHours(), 2) + "-" +
	                (0, utils_1.zpad)(now.getUTCMinutes(), 2) + "-" +
	                (0, utils_1.zpad)(now.getUTCSeconds(), 2) + ".0Z");
	            data["x-ethers"] = {
	                client: client,
	                gethFilename: ("UTC--" + timestamp + "--" + data.address),
	                mnemonicCounter: (0, bytes_1$9.hexlify)(mnemonicIv).substring(2),
	                mnemonicCiphertext: (0, bytes_1$9.hexlify)(mnemonicCiphertext).substring(2),
	                path: path,
	                locale: locale,
	                version: "0.1"
	            };
	        }
	        return JSON.stringify(data);
	    });
	}
	encrypt_1 = keystore.encrypt = encrypt;

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.decryptJsonWalletSync = exports.decryptJsonWallet = exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = exports.encryptKeystore = exports.decryptKeystoreSync = exports.decryptKeystore = exports.decryptCrowdsale = void 0;
		var crowdsale_1 = crowdsale;
		Object.defineProperty(exports, "decryptCrowdsale", { enumerable: true, get: function () { return crowdsale_1.decrypt; } });
		var inspect_1 = inspect;
		Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return inspect_1.getJsonWalletAddress; } });
		Object.defineProperty(exports, "isCrowdsaleWallet", { enumerable: true, get: function () { return inspect_1.isCrowdsaleWallet; } });
		Object.defineProperty(exports, "isKeystoreWallet", { enumerable: true, get: function () { return inspect_1.isKeystoreWallet; } });
		var keystore_1 = keystore;
		Object.defineProperty(exports, "decryptKeystore", { enumerable: true, get: function () { return keystore_1.decrypt; } });
		Object.defineProperty(exports, "decryptKeystoreSync", { enumerable: true, get: function () { return keystore_1.decryptSync; } });
		Object.defineProperty(exports, "encryptKeystore", { enumerable: true, get: function () { return keystore_1.encrypt; } });
		function decryptJsonWallet(json, password, progressCallback) {
		    if ((0, inspect_1.isCrowdsaleWallet)(json)) {
		        if (progressCallback) {
		            progressCallback(0);
		        }
		        var account = (0, crowdsale_1.decrypt)(json, password);
		        if (progressCallback) {
		            progressCallback(1);
		        }
		        return Promise.resolve(account);
		    }
		    if ((0, inspect_1.isKeystoreWallet)(json)) {
		        return (0, keystore_1.decrypt)(json, password, progressCallback);
		    }
		    return Promise.reject(new Error("invalid JSON wallet"));
		}
		exports.decryptJsonWallet = decryptJsonWallet;
		function decryptJsonWalletSync(json, password) {
		    if ((0, inspect_1.isCrowdsaleWallet)(json)) {
		        return (0, crowdsale_1.decrypt)(json, password);
		    }
		    if ((0, inspect_1.isKeystoreWallet)(json)) {
		        return (0, keystore_1.decryptSync)(json, password);
		    }
		    throw new Error("invalid JSON wallet");
		}
		exports.decryptJsonWalletSync = decryptJsonWalletSync;
		
	} (lib$5));

	var index$7 = /*@__PURE__*/getDefaultExportFromCjs(lib$5);

	var _version$6 = {};

	"use strict";
	Object.defineProperty(_version$6, "__esModule", { value: true });
	var version$6 = _version$6.version = void 0;
	version$6 = _version$6.version = "wallet/5.7.0";

	"use strict";
	var __extends$k = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$k = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$k = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(lib$c, "__esModule", { value: true });
	var verifyTypedData_1 = lib$c.verifyTypedData = verifyMessage_1 = lib$c.verifyMessage = Wallet_1 = lib$c.Wallet = void 0;
	var address_1$1 = lib$o;
	var abstract_provider_1$2 = lib$g;
	var abstract_signer_1$1 = lib$f;
	var bytes_1$8 = lib$r;
	var hash_1$2 = lib$j;
	var hdnode_1 = lib$b;
	var keccak256_1$1 = lib$n;
	var properties_1$c = lib$p;
	var random_1$1 = lib$6;
	var signing_key_1 = lib$d;
	var json_wallets_1 = lib$5;
	var transactions_1$3 = lib$e;
	var logger_1$j = lib$q;
	var _version_1$j = _version$6;
	var logger$i = new logger_1$j.Logger(_version_1$j.version);
	function isAccount(value) {
	    return (value != null && (0, bytes_1$8.isHexString)(value.privateKey, 32) && value.address != null);
	}
	function hasMnemonic(value) {
	    var mnemonic = value.mnemonic;
	    return (mnemonic && mnemonic.phrase);
	}
	var Wallet = /** @class */ (function (_super) {
	    __extends$k(Wallet, _super);
	    function Wallet(privateKey, provider) {
	        var _this = _super.call(this) || this;
	        if (isAccount(privateKey)) {
	            var signingKey_1 = new signing_key_1.SigningKey(privateKey.privateKey);
	            (0, properties_1$c.defineReadOnly)(_this, "_signingKey", function () { return signingKey_1; });
	            (0, properties_1$c.defineReadOnly)(_this, "address", (0, transactions_1$3.computeAddress)(_this.publicKey));
	            if (_this.address !== (0, address_1$1.getAddress)(privateKey.address)) {
	                logger$i.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
	            }
	            if (hasMnemonic(privateKey)) {
	                var srcMnemonic_1 = privateKey.mnemonic;
	                (0, properties_1$c.defineReadOnly)(_this, "_mnemonic", function () { return ({
	                    phrase: srcMnemonic_1.phrase,
	                    path: srcMnemonic_1.path || hdnode_1.defaultPath,
	                    locale: srcMnemonic_1.locale || "en"
	                }); });
	                var mnemonic = _this.mnemonic;
	                var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
	                if ((0, transactions_1$3.computeAddress)(node.privateKey) !== _this.address) {
	                    logger$i.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
	                }
	            }
	            else {
	                (0, properties_1$c.defineReadOnly)(_this, "_mnemonic", function () { return null; });
	            }
	        }
	        else {
	            if (signing_key_1.SigningKey.isSigningKey(privateKey)) {
	                /* istanbul ignore if */
	                if (privateKey.curve !== "secp256k1") {
	                    logger$i.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
	                }
	                (0, properties_1$c.defineReadOnly)(_this, "_signingKey", function () { return privateKey; });
	            }
	            else {
	                // A lot of common tools do not prefix private keys with a 0x (see: #1166)
	                if (typeof (privateKey) === "string") {
	                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
	                        privateKey = "0x" + privateKey;
	                    }
	                }
	                var signingKey_2 = new signing_key_1.SigningKey(privateKey);
	                (0, properties_1$c.defineReadOnly)(_this, "_signingKey", function () { return signingKey_2; });
	            }
	            (0, properties_1$c.defineReadOnly)(_this, "_mnemonic", function () { return null; });
	            (0, properties_1$c.defineReadOnly)(_this, "address", (0, transactions_1$3.computeAddress)(_this.publicKey));
	        }
	        /* istanbul ignore if */
	        if (provider && !abstract_provider_1$2.Provider.isProvider(provider)) {
	            logger$i.throwArgumentError("invalid provider", "provider", provider);
	        }
	        (0, properties_1$c.defineReadOnly)(_this, "provider", provider || null);
	        return _this;
	    }
	    Object.defineProperty(Wallet.prototype, "mnemonic", {
	        get: function () { return this._mnemonic(); },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Wallet.prototype, "privateKey", {
	        get: function () { return this._signingKey().privateKey; },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Wallet.prototype, "publicKey", {
	        get: function () { return this._signingKey().publicKey; },
	        enumerable: false,
	        configurable: true
	    });
	    Wallet.prototype.getAddress = function () {
	        return Promise.resolve(this.address);
	    };
	    Wallet.prototype.connect = function (provider) {
	        return new Wallet(this, provider);
	    };
	    Wallet.prototype.signTransaction = function (transaction) {
	        var _this = this;
	        return (0, properties_1$c.resolveProperties)(transaction).then(function (tx) {
	            if (tx.from != null) {
	                if ((0, address_1$1.getAddress)(tx.from) !== _this.address) {
	                    logger$i.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
	                }
	                delete tx.from;
	            }
	            var signature = _this._signingKey().signDigest((0, keccak256_1$1.keccak256)((0, transactions_1$3.serialize)(tx)));
	            return (0, transactions_1$3.serialize)(tx, signature);
	        });
	    };
	    Wallet.prototype.signMessage = function (message) {
	        return __awaiter$k(this, void 0, void 0, function () {
	            return __generator$k(this, function (_a) {
	                return [2 /*return*/, (0, bytes_1$8.joinSignature)(this._signingKey().signDigest((0, hash_1$2.hashMessage)(message)))];
	            });
	        });
	    };
	    Wallet.prototype._signTypedData = function (domain, types, value) {
	        return __awaiter$k(this, void 0, void 0, function () {
	            var populated;
	            var _this = this;
	            return __generator$k(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, hash_1$2._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
	                            if (_this.provider == null) {
	                                logger$i.throwError("cannot resolve ENS names without a provider", logger_1$j.Logger.errors.UNSUPPORTED_OPERATION, {
	                                    operation: "resolveName",
	                                    value: name
	                                });
	                            }
	                            return _this.provider.resolveName(name);
	                        })];
	                    case 1:
	                        populated = _a.sent();
	                        return [2 /*return*/, (0, bytes_1$8.joinSignature)(this._signingKey().signDigest(hash_1$2._TypedDataEncoder.hash(populated.domain, types, populated.value)))];
	                }
	            });
	        });
	    };
	    Wallet.prototype.encrypt = function (password, options, progressCallback) {
	        if (typeof (options) === "function" && !progressCallback) {
	            progressCallback = options;
	            options = {};
	        }
	        if (progressCallback && typeof (progressCallback) !== "function") {
	            throw new Error("invalid callback");
	        }
	        if (!options) {
	            options = {};
	        }
	        return (0, json_wallets_1.encryptKeystore)(this, password, options, progressCallback);
	    };
	    /**
	     *  Static methods to create Wallet instances.
	     */
	    Wallet.createRandom = function (options) {
	        var entropy = (0, random_1$1.randomBytes)(16);
	        if (!options) {
	            options = {};
	        }
	        if (options.extraEntropy) {
	            entropy = (0, bytes_1$8.arrayify)((0, bytes_1$8.hexDataSlice)((0, keccak256_1$1.keccak256)((0, bytes_1$8.concat)([entropy, options.extraEntropy])), 0, 16));
	        }
	        var mnemonic = (0, hdnode_1.entropyToMnemonic)(entropy, options.locale);
	        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
	    };
	    Wallet.fromEncryptedJson = function (json, password, progressCallback) {
	        return (0, json_wallets_1.decryptJsonWallet)(json, password, progressCallback).then(function (account) {
	            return new Wallet(account);
	        });
	    };
	    Wallet.fromEncryptedJsonSync = function (json, password) {
	        return new Wallet((0, json_wallets_1.decryptJsonWalletSync)(json, password));
	    };
	    Wallet.fromMnemonic = function (mnemonic, path, wordlist) {
	        if (!path) {
	            path = hdnode_1.defaultPath;
	        }
	        return new Wallet(hdnode_1.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
	    };
	    return Wallet;
	}(abstract_signer_1$1.Signer));
	var Wallet_1 = lib$c.Wallet = Wallet;
	function verifyMessage(message, signature) {
	    return (0, transactions_1$3.recoverAddress)((0, hash_1$2.hashMessage)(message), signature);
	}
	var verifyMessage_1 = lib$c.verifyMessage = verifyMessage;
	function verifyTypedData(domain, types, value, signature) {
	    return (0, transactions_1$3.recoverAddress)(hash_1$2._TypedDataEncoder.hash(domain, types, value), signature);
	}
	verifyTypedData_1 = lib$c.verifyTypedData = verifyTypedData;

	var lib$4 = {};

	var lib$3 = {};

	var _version$5 = {};

	"use strict";
	Object.defineProperty(_version$5, "__esModule", { value: true });
	var version$5 = _version$5.version = void 0;
	version$5 = _version$5.version = "networks/5.7.1";

	"use strict";
	Object.defineProperty(lib$3, "__esModule", { value: true });
	var getNetwork_1 = lib$3.getNetwork = void 0;
	var logger_1$i = lib$q;
	var _version_1$i = _version$5;
	var logger$h = new logger_1$i.Logger(_version_1$i.version);
	;
	function isRenetworkable(value) {
	    return (value && typeof (value.renetwork) === "function");
	}
	function ethDefaultProvider(network) {
	    var func = function (providers, options) {
	        if (options == null) {
	            options = {};
	        }
	        var providerList = [];
	        if (providers.InfuraProvider && options.infura !== "-") {
	            try {
	                providerList.push(new providers.InfuraProvider(network, options.infura));
	            }
	            catch (error) { }
	        }
	        if (providers.EtherscanProvider && options.etherscan !== "-") {
	            try {
	                providerList.push(new providers.EtherscanProvider(network, options.etherscan));
	            }
	            catch (error) { }
	        }
	        if (providers.AlchemyProvider && options.alchemy !== "-") {
	            try {
	                providerList.push(new providers.AlchemyProvider(network, options.alchemy));
	            }
	            catch (error) { }
	        }
	        if (providers.PocketProvider && options.pocket !== "-") {
	            // These networks are currently faulty on Pocket as their
	            // network does not handle the Berlin hardfork, which is
	            // live on these ones.
	            // @TODO: This goes away once Pocket has upgraded their nodes
	            var skip = ["goerli", "ropsten", "rinkeby", "sepolia"];
	            try {
	                var provider = new providers.PocketProvider(network, options.pocket);
	                if (provider.network && skip.indexOf(provider.network.name) === -1) {
	                    providerList.push(provider);
	                }
	            }
	            catch (error) { }
	        }
	        if (providers.CloudflareProvider && options.cloudflare !== "-") {
	            try {
	                providerList.push(new providers.CloudflareProvider(network));
	            }
	            catch (error) { }
	        }
	        if (providers.AnkrProvider && options.ankr !== "-") {
	            try {
	                var skip = ["ropsten"];
	                var provider = new providers.AnkrProvider(network, options.ankr);
	                if (provider.network && skip.indexOf(provider.network.name) === -1) {
	                    providerList.push(provider);
	                }
	            }
	            catch (error) { }
	        }
	        if (providerList.length === 0) {
	            return null;
	        }
	        if (providers.FallbackProvider) {
	            var quorum = 1;
	            if (options.quorum != null) {
	                quorum = options.quorum;
	            }
	            else if (network === "homestead") {
	                quorum = 2;
	            }
	            return new providers.FallbackProvider(providerList, quorum);
	        }
	        return providerList[0];
	    };
	    func.renetwork = function (network) {
	        return ethDefaultProvider(network);
	    };
	    return func;
	}
	function etcDefaultProvider(url, network) {
	    var func = function (providers, options) {
	        if (providers.JsonRpcProvider) {
	            return new providers.JsonRpcProvider(url, network);
	        }
	        return null;
	    };
	    func.renetwork = function (network) {
	        return etcDefaultProvider(url, network);
	    };
	    return func;
	}
	var homestead = {
	    chainId: 1,
	    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	    name: "homestead",
	    _defaultProvider: ethDefaultProvider("homestead")
	};
	var ropsten = {
	    chainId: 3,
	    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	    name: "ropsten",
	    _defaultProvider: ethDefaultProvider("ropsten")
	};
	var classicMordor = {
	    chainId: 63,
	    name: "classicMordor",
	    _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
	};
	// See: https://chainlist.org
	var networks = {
	    unspecified: { chainId: 0, name: "unspecified" },
	    homestead: homestead,
	    mainnet: homestead,
	    morden: { chainId: 2, name: "morden" },
	    ropsten: ropsten,
	    testnet: ropsten,
	    rinkeby: {
	        chainId: 4,
	        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	        name: "rinkeby",
	        _defaultProvider: ethDefaultProvider("rinkeby")
	    },
	    kovan: {
	        chainId: 42,
	        name: "kovan",
	        _defaultProvider: ethDefaultProvider("kovan")
	    },
	    goerli: {
	        chainId: 5,
	        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	        name: "goerli",
	        _defaultProvider: ethDefaultProvider("goerli")
	    },
	    kintsugi: { chainId: 1337702, name: "kintsugi" },
	    sepolia: {
	        chainId: 11155111,
	        name: "sepolia",
	        _defaultProvider: ethDefaultProvider("sepolia")
	    },
	    // ETC (See: #351)
	    classic: {
	        chainId: 61,
	        name: "classic",
	        _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
	    },
	    classicMorden: { chainId: 62, name: "classicMorden" },
	    classicMordor: classicMordor,
	    classicTestnet: classicMordor,
	    classicKotti: {
	        chainId: 6,
	        name: "classicKotti",
	        _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
	    },
	    xdai: { chainId: 100, name: "xdai" },
	    matic: {
	        chainId: 137,
	        name: "matic",
	        _defaultProvider: ethDefaultProvider("matic")
	    },
	    maticmum: { chainId: 80001, name: "maticmum" },
	    optimism: {
	        chainId: 10,
	        name: "optimism",
	        _defaultProvider: ethDefaultProvider("optimism")
	    },
	    "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
	    "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
	    arbitrum: { chainId: 42161, name: "arbitrum" },
	    "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
	    "arbitrum-goerli": { chainId: 421613, name: "arbitrum-goerli" },
	    bnb: { chainId: 56, name: "bnb" },
	    bnbt: { chainId: 97, name: "bnbt" },
	};
	/**
	 *  getNetwork
	 *
	 *  Converts a named common networks or chain ID (network ID) to a Network
	 *  and verifies a network is a valid Network..
	 */
	function getNetwork(network) {
	    // No network (null)
	    if (network == null) {
	        return null;
	    }
	    if (typeof (network) === "number") {
	        for (var name_1 in networks) {
	            var standard_1 = networks[name_1];
	            if (standard_1.chainId === network) {
	                return {
	                    name: standard_1.name,
	                    chainId: standard_1.chainId,
	                    ensAddress: (standard_1.ensAddress || null),
	                    _defaultProvider: (standard_1._defaultProvider || null)
	                };
	            }
	        }
	        return {
	            chainId: network,
	            name: "unknown"
	        };
	    }
	    if (typeof (network) === "string") {
	        var standard_2 = networks[network];
	        if (standard_2 == null) {
	            return null;
	        }
	        return {
	            name: standard_2.name,
	            chainId: standard_2.chainId,
	            ensAddress: standard_2.ensAddress,
	            _defaultProvider: (standard_2._defaultProvider || null)
	        };
	    }
	    var standard = networks[network.name];
	    // Not a standard network; check that it is a valid network in general
	    if (!standard) {
	        if (typeof (network.chainId) !== "number") {
	            logger$h.throwArgumentError("invalid network chainId", "network", network);
	        }
	        return network;
	    }
	    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
	    if (network.chainId !== 0 && network.chainId !== standard.chainId) {
	        logger$h.throwArgumentError("network chainId mismatch", "network", network);
	    }
	    // @TODO: In the next major version add an attach function to a defaultProvider
	    // class and move the _defaultProvider internal to this file (extend Network)
	    var defaultProvider = network._defaultProvider || null;
	    if (defaultProvider == null && standard._defaultProvider) {
	        if (isRenetworkable(standard._defaultProvider)) {
	            defaultProvider = standard._defaultProvider.renetwork(network);
	        }
	        else {
	            defaultProvider = standard._defaultProvider;
	        }
	    }
	    // Standard Network (allow overriding the ENS address)
	    return {
	        name: network.name,
	        chainId: standard.chainId,
	        ensAddress: (network.ensAddress || standard.ensAddress || null),
	        _defaultProvider: defaultProvider
	    };
	}
	getNetwork_1 = lib$3.getNetwork = getNetwork;

	var baseProvider = {};

	var lib$2 = {};

	var _version$4 = {};

	"use strict";
	Object.defineProperty(_version$4, "__esModule", { value: true });
	var version$4 = _version$4.version = void 0;
	version$4 = _version$4.version = "web/5.7.1";

	var browserGeturl = {};

	"use strict";
	var __awaiter$j = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$j = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(browserGeturl, "__esModule", { value: true });
	var getUrl_1 = browserGeturl.getUrl = void 0;
	var bytes_1$7 = lib$r;
	function getUrl(href, options) {
	    return __awaiter$j(this, void 0, void 0, function () {
	        var request, opts, response, body, headers;
	        return __generator$j(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    if (options == null) {
	                        options = {};
	                    }
	                    request = {
	                        method: (options.method || "GET"),
	                        headers: (options.headers || {}),
	                        body: (options.body || undefined),
	                    };
	                    if (options.skipFetchSetup !== true) {
	                        request.mode = "cors"; // no-cors, cors, *same-origin
	                        request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
	                        request.credentials = "same-origin"; // include, *same-origin, omit
	                        request.redirect = "follow"; // manual, *follow, error
	                        request.referrer = "client"; // no-referrer, *client
	                    }
	                    ;
	                    if (options.fetchOptions != null) {
	                        opts = options.fetchOptions;
	                        if (opts.mode) {
	                            request.mode = (opts.mode);
	                        }
	                        if (opts.cache) {
	                            request.cache = (opts.cache);
	                        }
	                        if (opts.credentials) {
	                            request.credentials = (opts.credentials);
	                        }
	                        if (opts.redirect) {
	                            request.redirect = (opts.redirect);
	                        }
	                        if (opts.referrer) {
	                            request.referrer = opts.referrer;
	                        }
	                    }
	                    return [4 /*yield*/, fetch(href, request)];
	                case 1:
	                    response = _a.sent();
	                    return [4 /*yield*/, response.arrayBuffer()];
	                case 2:
	                    body = _a.sent();
	                    headers = {};
	                    if (response.headers.forEach) {
	                        response.headers.forEach(function (value, key) {
	                            headers[key.toLowerCase()] = value;
	                        });
	                    }
	                    else {
	                        ((response.headers).keys)().forEach(function (key) {
	                            headers[key.toLowerCase()] = response.headers.get(key);
	                        });
	                    }
	                    return [2 /*return*/, {
	                            headers: headers,
	                            statusCode: response.status,
	                            statusMessage: response.statusText,
	                            body: (0, bytes_1$7.arrayify)(new Uint8Array(body)),
	                        }];
	            }
	        });
	    });
	}
	getUrl_1 = browserGeturl.getUrl = getUrl;

	"use strict";
	var __awaiter$i = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$i = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(lib$2, "__esModule", { value: true });
	var poll_1 = lib$2.poll = fetchJson_1 = lib$2.fetchJson = _fetchData_1 = lib$2._fetchData = void 0;
	var base64_1$1 = lib$h;
	var bytes_1$6 = lib$r;
	var properties_1$b = lib$p;
	var strings_1$3 = lib$k;
	var logger_1$h = lib$q;
	var _version_1$h = _version$4;
	var logger$g = new logger_1$h.Logger(_version_1$h.version);
	var geturl_1 = browserGeturl;
	function staller(duration) {
	    return new Promise(function (resolve) {
	        setTimeout(resolve, duration);
	    });
	}
	function bodyify(value, type) {
	    if (value == null) {
	        return null;
	    }
	    if (typeof (value) === "string") {
	        return value;
	    }
	    if ((0, bytes_1$6.isBytesLike)(value)) {
	        if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
	            try {
	                return (0, strings_1$3.toUtf8String)(value);
	            }
	            catch (error) { }
	            ;
	        }
	        return (0, bytes_1$6.hexlify)(value);
	    }
	    return value;
	}
	function unpercent(value) {
	    return (0, strings_1$3.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, function (all, code) {
	        return String.fromCharCode(parseInt(code, 16));
	    }));
	}
	// This API is still a work in progress; the future changes will likely be:
	// - ConnectionInfo => FetchDataRequest<T = any>
	// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
	//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
	// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
	// For this reason, it should be considered internal until the API is finalized
	function _fetchData(connection, body, processFunc) {
	    // How many times to retry in the event of a throttle
	    var attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
	    logger$g.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
	    var throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
	    var throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
	    logger$g.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
	    var errorPassThrough = ((typeof (connection) === "object") ? !!(connection.errorPassThrough) : false);
	    var headers = {};
	    var url = null;
	    // @TODO: Allow ConnectionInfo to override some of these values
	    var options = {
	        method: "GET",
	    };
	    var allow304 = false;
	    var timeout = 2 * 60 * 1000;
	    if (typeof (connection) === "string") {
	        url = connection;
	    }
	    else if (typeof (connection) === "object") {
	        if (connection == null || connection.url == null) {
	            logger$g.throwArgumentError("missing URL", "connection.url", connection);
	        }
	        url = connection.url;
	        if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
	            timeout = connection.timeout;
	        }
	        if (connection.headers) {
	            for (var key in connection.headers) {
	                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
	                if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
	                    allow304 = true;
	                }
	            }
	        }
	        options.allowGzip = !!connection.allowGzip;
	        if (connection.user != null && connection.password != null) {
	            if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
	                logger$g.throwError("basic authentication requires a secure https url", logger_1$h.Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
	            }
	            var authorization = connection.user + ":" + connection.password;
	            headers["authorization"] = {
	                key: "Authorization",
	                value: "Basic " + (0, base64_1$1.encode)((0, strings_1$3.toUtf8Bytes)(authorization))
	            };
	        }
	        if (connection.skipFetchSetup != null) {
	            options.skipFetchSetup = !!connection.skipFetchSetup;
	        }
	        if (connection.fetchOptions != null) {
	            options.fetchOptions = (0, properties_1$b.shallowCopy)(connection.fetchOptions);
	        }
	    }
	    var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
	    var dataMatch = ((url) ? url.match(reData) : null);
	    if (dataMatch) {
	        try {
	            var response = {
	                statusCode: 200,
	                statusMessage: "OK",
	                headers: { "content-type": (dataMatch[1] || "text/plain") },
	                body: (dataMatch[2] ? (0, base64_1$1.decode)(dataMatch[3]) : unpercent(dataMatch[3]))
	            };
	            var result = response.body;
	            if (processFunc) {
	                result = processFunc(response.body, response);
	            }
	            return Promise.resolve(result);
	        }
	        catch (error) {
	            logger$g.throwError("processing response error", logger_1$h.Logger.errors.SERVER_ERROR, {
	                body: bodyify(dataMatch[1], dataMatch[2]),
	                error: error,
	                requestBody: null,
	                requestMethod: "GET",
	                url: url
	            });
	        }
	    }
	    if (body) {
	        options.method = "POST";
	        options.body = body;
	        if (headers["content-type"] == null) {
	            headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
	        }
	        if (headers["content-length"] == null) {
	            headers["content-length"] = { key: "Content-Length", value: String(body.length) };
	        }
	    }
	    var flatHeaders = {};
	    Object.keys(headers).forEach(function (key) {
	        var header = headers[key];
	        flatHeaders[header.key] = header.value;
	    });
	    options.headers = flatHeaders;
	    var runningTimeout = (function () {
	        var timer = null;
	        var promise = new Promise(function (resolve, reject) {
	            if (timeout) {
	                timer = setTimeout(function () {
	                    if (timer == null) {
	                        return;
	                    }
	                    timer = null;
	                    reject(logger$g.makeError("timeout", logger_1$h.Logger.errors.TIMEOUT, {
	                        requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                        requestMethod: options.method,
	                        timeout: timeout,
	                        url: url
	                    }));
	                }, timeout);
	            }
	        });
	        var cancel = function () {
	            if (timer == null) {
	                return;
	            }
	            clearTimeout(timer);
	            timer = null;
	        };
	        return { promise: promise, cancel: cancel };
	    })();
	    var runningFetch = (function () {
	        return __awaiter$i(this, void 0, void 0, function () {
	            var attempt, response, location_1, tryAgain, stall, retryAfter, error_1, body_1, result, error_2, tryAgain, timeout_1;
	            return __generator$i(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        attempt = 0;
	                        _a.label = 1;
	                    case 1:
	                        if (!(attempt < attemptLimit)) return [3 /*break*/, 20];
	                        response = null;
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 9, , 10]);
	                        return [4 /*yield*/, (0, geturl_1.getUrl)(url, options)];
	                    case 3:
	                        response = _a.sent();
	                        if (!(attempt < attemptLimit)) return [3 /*break*/, 8];
	                        if (!(response.statusCode === 301 || response.statusCode === 302)) return [3 /*break*/, 4];
	                        location_1 = response.headers.location || "";
	                        if (options.method === "GET" && location_1.match(/^https:/)) {
	                            url = response.headers.location;
	                            return [3 /*break*/, 19];
	                        }
	                        return [3 /*break*/, 8];
	                    case 4:
	                        if (!(response.statusCode === 429)) return [3 /*break*/, 8];
	                        tryAgain = true;
	                        if (!throttleCallback) return [3 /*break*/, 6];
	                        return [4 /*yield*/, throttleCallback(attempt, url)];
	                    case 5:
	                        tryAgain = _a.sent();
	                        _a.label = 6;
	                    case 6:
	                        if (!tryAgain) return [3 /*break*/, 8];
	                        stall = 0;
	                        retryAfter = response.headers["retry-after"];
	                        if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
	                            stall = parseInt(retryAfter) * 1000;
	                        }
	                        else {
	                            stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
	                        }
	                        //console.log("Stalling 429");
	                        return [4 /*yield*/, staller(stall)];
	                    case 7:
	                        //console.log("Stalling 429");
	                        _a.sent();
	                        return [3 /*break*/, 19];
	                    case 8: return [3 /*break*/, 10];
	                    case 9:
	                        error_1 = _a.sent();
	                        response = error_1.response;
	                        if (response == null) {
	                            runningTimeout.cancel();
	                            logger$g.throwError("missing response", logger_1$h.Logger.errors.SERVER_ERROR, {
	                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                                requestMethod: options.method,
	                                serverError: error_1,
	                                url: url
	                            });
	                        }
	                        return [3 /*break*/, 10];
	                    case 10:
	                        body_1 = response.body;
	                        if (allow304 && response.statusCode === 304) {
	                            body_1 = null;
	                        }
	                        else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
	                            runningTimeout.cancel();
	                            logger$g.throwError("bad response", logger_1$h.Logger.errors.SERVER_ERROR, {
	                                status: response.statusCode,
	                                headers: response.headers,
	                                body: bodyify(body_1, ((response.headers) ? response.headers["content-type"] : null)),
	                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                                requestMethod: options.method,
	                                url: url
	                            });
	                        }
	                        if (!processFunc) return [3 /*break*/, 18];
	                        _a.label = 11;
	                    case 11:
	                        _a.trys.push([11, 13, , 18]);
	                        return [4 /*yield*/, processFunc(body_1, response)];
	                    case 12:
	                        result = _a.sent();
	                        runningTimeout.cancel();
	                        return [2 /*return*/, result];
	                    case 13:
	                        error_2 = _a.sent();
	                        if (!(error_2.throttleRetry && attempt < attemptLimit)) return [3 /*break*/, 17];
	                        tryAgain = true;
	                        if (!throttleCallback) return [3 /*break*/, 15];
	                        return [4 /*yield*/, throttleCallback(attempt, url)];
	                    case 14:
	                        tryAgain = _a.sent();
	                        _a.label = 15;
	                    case 15:
	                        if (!tryAgain) return [3 /*break*/, 17];
	                        timeout_1 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
	                        //console.log("Stalling callback");
	                        return [4 /*yield*/, staller(timeout_1)];
	                    case 16:
	                        //console.log("Stalling callback");
	                        _a.sent();
	                        return [3 /*break*/, 19];
	                    case 17:
	                        runningTimeout.cancel();
	                        logger$g.throwError("processing response error", logger_1$h.Logger.errors.SERVER_ERROR, {
	                            body: bodyify(body_1, ((response.headers) ? response.headers["content-type"] : null)),
	                            error: error_2,
	                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                            requestMethod: options.method,
	                            url: url
	                        });
	                        return [3 /*break*/, 18];
	                    case 18:
	                        runningTimeout.cancel();
	                        // If we had a processFunc, it either returned a T or threw above.
	                        // The "body" is now a Uint8Array.
	                        return [2 /*return*/, body_1];
	                    case 19:
	                        attempt++;
	                        return [3 /*break*/, 1];
	                    case 20: return [2 /*return*/, logger$g.throwError("failed response", logger_1$h.Logger.errors.SERVER_ERROR, {
	                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
	                            requestMethod: options.method,
	                            url: url
	                        })];
	                }
	            });
	        });
	    })();
	    return Promise.race([runningTimeout.promise, runningFetch]);
	}
	var _fetchData_1 = lib$2._fetchData = _fetchData;
	function fetchJson(connection, json, processFunc) {
	    var processJsonFunc = function (value, response) {
	        var result = null;
	        if (value != null) {
	            try {
	                result = JSON.parse((0, strings_1$3.toUtf8String)(value));
	            }
	            catch (error) {
	                logger$g.throwError("invalid JSON", logger_1$h.Logger.errors.SERVER_ERROR, {
	                    body: value,
	                    error: error
	                });
	            }
	        }
	        if (processFunc) {
	            result = processFunc(result, response);
	        }
	        return result;
	    };
	    // If we have json to send, we must
	    // - add content-type of application/json (unless already overridden)
	    // - convert the json to bytes
	    var body = null;
	    if (json != null) {
	        body = (0, strings_1$3.toUtf8Bytes)(json);
	        // Create a connection with the content-type set for JSON
	        var updated = (typeof (connection) === "string") ? ({ url: connection }) : (0, properties_1$b.shallowCopy)(connection);
	        if (updated.headers) {
	            var hasContentType = (Object.keys(updated.headers).filter(function (k) { return (k.toLowerCase() === "content-type"); }).length) !== 0;
	            if (!hasContentType) {
	                updated.headers = (0, properties_1$b.shallowCopy)(updated.headers);
	                updated.headers["content-type"] = "application/json";
	            }
	        }
	        else {
	            updated.headers = { "content-type": "application/json" };
	        }
	        connection = updated;
	    }
	    return _fetchData(connection, body, processJsonFunc);
	}
	var fetchJson_1 = lib$2.fetchJson = fetchJson;
	function poll(func, options) {
	    if (!options) {
	        options = {};
	    }
	    options = (0, properties_1$b.shallowCopy)(options);
	    if (options.floor == null) {
	        options.floor = 0;
	    }
	    if (options.ceiling == null) {
	        options.ceiling = 10000;
	    }
	    if (options.interval == null) {
	        options.interval = 250;
	    }
	    return new Promise(function (resolve, reject) {
	        var timer = null;
	        var done = false;
	        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
	        var cancel = function () {
	            if (done) {
	                return false;
	            }
	            done = true;
	            if (timer) {
	                clearTimeout(timer);
	            }
	            return true;
	        };
	        if (options.timeout) {
	            timer = setTimeout(function () {
	                if (cancel()) {
	                    reject(new Error("timeout"));
	                }
	            }, options.timeout);
	        }
	        var retryLimit = options.retryLimit;
	        var attempt = 0;
	        function check() {
	            return func().then(function (result) {
	                // If we have a result, or are allowed null then we're done
	                if (result !== undefined) {
	                    if (cancel()) {
	                        resolve(result);
	                    }
	                }
	                else if (options.oncePoll) {
	                    options.oncePoll.once("poll", check);
	                }
	                else if (options.onceBlock) {
	                    options.onceBlock.once("block", check);
	                    // Otherwise, exponential back-off (up to 10s) our next request
	                }
	                else if (!done) {
	                    attempt++;
	                    if (attempt > retryLimit) {
	                        if (cancel()) {
	                            reject(new Error("retry limit reached"));
	                        }
	                        return;
	                    }
	                    var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
	                    if (timeout < options.floor) {
	                        timeout = options.floor;
	                    }
	                    if (timeout > options.ceiling) {
	                        timeout = options.ceiling;
	                    }
	                    setTimeout(check, timeout);
	                }
	                return null;
	            }, function (error) {
	                if (cancel()) {
	                    reject(error);
	                }
	            });
	        }
	        check();
	    });
	}
	poll_1 = lib$2.poll = poll;

	'use strict';
	var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

	// pre-compute lookup table
	var ALPHABET_MAP = {};
	for (var z = 0; z < ALPHABET.length; z++) {
	  var x = ALPHABET.charAt(z);

	  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
	  ALPHABET_MAP[x] = z;
	}

	function polymodStep (pre) {
	  var b = pre >> 25;
	  return ((pre & 0x1FFFFFF) << 5) ^
	    (-((b >> 0) & 1) & 0x3b6a57b2) ^
	    (-((b >> 1) & 1) & 0x26508e6d) ^
	    (-((b >> 2) & 1) & 0x1ea119fa) ^
	    (-((b >> 3) & 1) & 0x3d4233dd) ^
	    (-((b >> 4) & 1) & 0x2a1462b3)
	}

	function prefixChk (prefix) {
	  var chk = 1;
	  for (var i = 0; i < prefix.length; ++i) {
	    var c = prefix.charCodeAt(i);
	    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

	    chk = polymodStep(chk) ^ (c >> 5);
	  }
	  chk = polymodStep(chk);

	  for (i = 0; i < prefix.length; ++i) {
	    var v = prefix.charCodeAt(i);
	    chk = polymodStep(chk) ^ (v & 0x1f);
	  }
	  return chk
	}

	function encode (prefix, words, LIMIT) {
	  LIMIT = LIMIT || 90;
	  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

	  prefix = prefix.toLowerCase();

	  // determine chk mod
	  var chk = prefixChk(prefix);
	  if (typeof chk === 'string') throw new Error(chk)

	  var result = prefix + '1';
	  for (var i = 0; i < words.length; ++i) {
	    var x = words[i];
	    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

	    chk = polymodStep(chk) ^ x;
	    result += ALPHABET.charAt(x);
	  }

	  for (i = 0; i < 6; ++i) {
	    chk = polymodStep(chk);
	  }
	  chk ^= 1;

	  for (i = 0; i < 6; ++i) {
	    var v = (chk >> ((5 - i) * 5)) & 0x1f;
	    result += ALPHABET.charAt(v);
	  }

	  return result
	}

	function __decode (str, LIMIT) {
	  LIMIT = LIMIT || 90;
	  if (str.length < 8) return str + ' too short'
	  if (str.length > LIMIT) return 'Exceeds length limit'

	  // don't allow mixed case
	  var lowered = str.toLowerCase();
	  var uppered = str.toUpperCase();
	  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
	  str = lowered;

	  var split = str.lastIndexOf('1');
	  if (split === -1) return 'No separator character for ' + str
	  if (split === 0) return 'Missing prefix for ' + str

	  var prefix = str.slice(0, split);
	  var wordChars = str.slice(split + 1);
	  if (wordChars.length < 6) return 'Data too short'

	  var chk = prefixChk(prefix);
	  if (typeof chk === 'string') return chk

	  var words = [];
	  for (var i = 0; i < wordChars.length; ++i) {
	    var c = wordChars.charAt(i);
	    var v = ALPHABET_MAP[c];
	    if (v === undefined) return 'Unknown character ' + c
	    chk = polymodStep(chk) ^ v;

	    // not in the checksum?
	    if (i + 6 >= wordChars.length) continue
	    words.push(v);
	  }

	  if (chk !== 1) return 'Invalid checksum for ' + str
	  return { prefix: prefix, words: words }
	}

	function decodeUnsafe () {
	  var res = __decode.apply(null, arguments);
	  if (typeof res === 'object') return res
	}

	function decode (str) {
	  var res = __decode.apply(null, arguments);
	  if (typeof res === 'object') return res

	  throw new Error(res)
	}

	function convert (data, inBits, outBits, pad) {
	  var value = 0;
	  var bits = 0;
	  var maxV = (1 << outBits) - 1;

	  var result = [];
	  for (var i = 0; i < data.length; ++i) {
	    value = (value << inBits) | data[i];
	    bits += inBits;

	    while (bits >= outBits) {
	      bits -= outBits;
	      result.push((value >> bits) & maxV);
	    }
	  }

	  if (pad) {
	    if (bits > 0) {
	      result.push((value << (outBits - bits)) & maxV);
	    }
	  } else {
	    if (bits >= inBits) return 'Excess padding'
	    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
	  }

	  return result
	}

	function toWordsUnsafe (bytes) {
	  var res = convert(bytes, 8, 5, true);
	  if (Array.isArray(res)) return res
	}

	function toWords (bytes) {
	  var res = convert(bytes, 8, 5, true);
	  if (Array.isArray(res)) return res

	  throw new Error(res)
	}

	function fromWordsUnsafe (words) {
	  var res = convert(words, 5, 8, false);
	  if (Array.isArray(res)) return res
	}

	function fromWords (words) {
	  var res = convert(words, 5, 8, false);
	  if (Array.isArray(res)) return res

	  throw new Error(res)
	}

	var bech32 = {
	  decodeUnsafe: decodeUnsafe,
	  decode: decode,
	  encode: encode,
	  toWordsUnsafe: toWordsUnsafe,
	  toWords: toWords,
	  fromWordsUnsafe: fromWordsUnsafe,
	  fromWords: fromWords
	};

	var _version$3 = {};

	"use strict";
	Object.defineProperty(_version$3, "__esModule", { value: true });
	var version$3 = _version$3.version = void 0;
	version$3 = _version$3.version = "providers/5.7.2";

	var formatter = {};

	"use strict";
	Object.defineProperty(formatter, "__esModule", { value: true });
	var showThrottleMessage_1 = formatter.showThrottleMessage = isCommunityResource_1 = formatter.isCommunityResource = isCommunityResourcable_1 = formatter.isCommunityResourcable = Formatter_1 = formatter.Formatter = void 0;
	var address_1 = lib$o;
	var bignumber_1$6 = lib$s;
	var bytes_1$5 = lib$r;
	var constants_1$1 = lib$l;
	var properties_1$a = lib$p;
	var transactions_1$2 = lib$e;
	var logger_1$g = lib$q;
	var _version_1$g = _version$3;
	var logger$f = new logger_1$g.Logger(_version_1$g.version);
	var Formatter = /** @class */ (function () {
	    function Formatter() {
	        this.formats = this.getDefaultFormats();
	    }
	    Formatter.prototype.getDefaultFormats = function () {
	        var _this = this;
	        var formats = ({});
	        var address = this.address.bind(this);
	        var bigNumber = this.bigNumber.bind(this);
	        var blockTag = this.blockTag.bind(this);
	        var data = this.data.bind(this);
	        var hash = this.hash.bind(this);
	        var hex = this.hex.bind(this);
	        var number = this.number.bind(this);
	        var type = this.type.bind(this);
	        var strictData = function (v) { return _this.data(v, true); };
	        formats.transaction = {
	            hash: hash,
	            type: type,
	            accessList: Formatter.allowNull(this.accessList.bind(this), null),
	            blockHash: Formatter.allowNull(hash, null),
	            blockNumber: Formatter.allowNull(number, null),
	            transactionIndex: Formatter.allowNull(number, null),
	            confirmations: Formatter.allowNull(number, null),
	            from: address,
	            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
	            // must be set
	            gasPrice: Formatter.allowNull(bigNumber),
	            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
	            maxFeePerGas: Formatter.allowNull(bigNumber),
	            gasLimit: bigNumber,
	            to: Formatter.allowNull(address, null),
	            value: bigNumber,
	            nonce: number,
	            data: data,
	            r: Formatter.allowNull(this.uint256),
	            s: Formatter.allowNull(this.uint256),
	            v: Formatter.allowNull(number),
	            creates: Formatter.allowNull(address, null),
	            raw: Formatter.allowNull(data),
	        };
	        formats.transactionRequest = {
	            from: Formatter.allowNull(address),
	            nonce: Formatter.allowNull(number),
	            gasLimit: Formatter.allowNull(bigNumber),
	            gasPrice: Formatter.allowNull(bigNumber),
	            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
	            maxFeePerGas: Formatter.allowNull(bigNumber),
	            to: Formatter.allowNull(address),
	            value: Formatter.allowNull(bigNumber),
	            data: Formatter.allowNull(strictData),
	            type: Formatter.allowNull(number),
	            accessList: Formatter.allowNull(this.accessList.bind(this), null),
	        };
	        formats.receiptLog = {
	            transactionIndex: number,
	            blockNumber: number,
	            transactionHash: hash,
	            address: address,
	            topics: Formatter.arrayOf(hash),
	            data: data,
	            logIndex: number,
	            blockHash: hash,
	        };
	        formats.receipt = {
	            to: Formatter.allowNull(this.address, null),
	            from: Formatter.allowNull(this.address, null),
	            contractAddress: Formatter.allowNull(address, null),
	            transactionIndex: number,
	            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
	            root: Formatter.allowNull(hex),
	            gasUsed: bigNumber,
	            logsBloom: Formatter.allowNull(data),
	            blockHash: hash,
	            transactionHash: hash,
	            logs: Formatter.arrayOf(this.receiptLog.bind(this)),
	            blockNumber: number,
	            confirmations: Formatter.allowNull(number, null),
	            cumulativeGasUsed: bigNumber,
	            effectiveGasPrice: Formatter.allowNull(bigNumber),
	            status: Formatter.allowNull(number),
	            type: type
	        };
	        formats.block = {
	            hash: Formatter.allowNull(hash),
	            parentHash: hash,
	            number: number,
	            timestamp: number,
	            nonce: Formatter.allowNull(hex),
	            difficulty: this.difficulty.bind(this),
	            gasLimit: bigNumber,
	            gasUsed: bigNumber,
	            miner: Formatter.allowNull(address),
	            extraData: data,
	            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
	            baseFeePerGas: Formatter.allowNull(bigNumber)
	        };
	        formats.blockWithTransactions = (0, properties_1$a.shallowCopy)(formats.block);
	        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
	        formats.filter = {
	            fromBlock: Formatter.allowNull(blockTag, undefined),
	            toBlock: Formatter.allowNull(blockTag, undefined),
	            blockHash: Formatter.allowNull(hash, undefined),
	            address: Formatter.allowNull(address, undefined),
	            topics: Formatter.allowNull(this.topics.bind(this), undefined),
	        };
	        formats.filterLog = {
	            blockNumber: Formatter.allowNull(number),
	            blockHash: Formatter.allowNull(hash),
	            transactionIndex: number,
	            removed: Formatter.allowNull(this.boolean.bind(this)),
	            address: address,
	            data: Formatter.allowFalsish(data, "0x"),
	            topics: Formatter.arrayOf(hash),
	            transactionHash: hash,
	            logIndex: number,
	        };
	        return formats;
	    };
	    Formatter.prototype.accessList = function (accessList) {
	        return (0, transactions_1$2.accessListify)(accessList || []);
	    };
	    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
	    // Strict! Used on input.
	    Formatter.prototype.number = function (number) {
	        if (number === "0x") {
	            return 0;
	        }
	        return bignumber_1$6.BigNumber.from(number).toNumber();
	    };
	    Formatter.prototype.type = function (number) {
	        if (number === "0x" || number == null) {
	            return 0;
	        }
	        return bignumber_1$6.BigNumber.from(number).toNumber();
	    };
	    // Strict! Used on input.
	    Formatter.prototype.bigNumber = function (value) {
	        return bignumber_1$6.BigNumber.from(value);
	    };
	    // Requires a boolean, "true" or  "false"; returns a boolean
	    Formatter.prototype.boolean = function (value) {
	        if (typeof (value) === "boolean") {
	            return value;
	        }
	        if (typeof (value) === "string") {
	            value = value.toLowerCase();
	            if (value === "true") {
	                return true;
	            }
	            if (value === "false") {
	                return false;
	            }
	        }
	        throw new Error("invalid boolean - " + value);
	    };
	    Formatter.prototype.hex = function (value, strict) {
	        if (typeof (value) === "string") {
	            if (!strict && value.substring(0, 2) !== "0x") {
	                value = "0x" + value;
	            }
	            if ((0, bytes_1$5.isHexString)(value)) {
	                return value.toLowerCase();
	            }
	        }
	        return logger$f.throwArgumentError("invalid hash", "value", value);
	    };
	    Formatter.prototype.data = function (value, strict) {
	        var result = this.hex(value, strict);
	        if ((result.length % 2) !== 0) {
	            throw new Error("invalid data; odd-length - " + value);
	        }
	        return result;
	    };
	    // Requires an address
	    // Strict! Used on input.
	    Formatter.prototype.address = function (value) {
	        return (0, address_1.getAddress)(value);
	    };
	    Formatter.prototype.callAddress = function (value) {
	        if (!(0, bytes_1$5.isHexString)(value, 32)) {
	            return null;
	        }
	        var address = (0, address_1.getAddress)((0, bytes_1$5.hexDataSlice)(value, 12));
	        return (address === constants_1$1.AddressZero) ? null : address;
	    };
	    Formatter.prototype.contractAddress = function (value) {
	        return (0, address_1.getContractAddress)(value);
	    };
	    // Strict! Used on input.
	    Formatter.prototype.blockTag = function (blockTag) {
	        if (blockTag == null) {
	            return "latest";
	        }
	        if (blockTag === "earliest") {
	            return "0x0";
	        }
	        switch (blockTag) {
	            case "earliest": return "0x0";
	            case "latest":
	            case "pending":
	            case "safe":
	            case "finalized":
	                return blockTag;
	        }
	        if (typeof (blockTag) === "number" || (0, bytes_1$5.isHexString)(blockTag)) {
	            return (0, bytes_1$5.hexValue)(blockTag);
	        }
	        throw new Error("invalid blockTag");
	    };
	    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
	    Formatter.prototype.hash = function (value, strict) {
	        var result = this.hex(value, strict);
	        if ((0, bytes_1$5.hexDataLength)(result) !== 32) {
	            return logger$f.throwArgumentError("invalid hash", "value", value);
	        }
	        return result;
	    };
	    // Returns the difficulty as a number, or if too large (i.e. PoA network) null
	    Formatter.prototype.difficulty = function (value) {
	        if (value == null) {
	            return null;
	        }
	        var v = bignumber_1$6.BigNumber.from(value);
	        try {
	            return v.toNumber();
	        }
	        catch (error) { }
	        return null;
	    };
	    Formatter.prototype.uint256 = function (value) {
	        if (!(0, bytes_1$5.isHexString)(value)) {
	            throw new Error("invalid uint256");
	        }
	        return (0, bytes_1$5.hexZeroPad)(value, 32);
	    };
	    Formatter.prototype._block = function (value, format) {
	        if (value.author != null && value.miner == null) {
	            value.miner = value.author;
	        }
	        // The difficulty may need to come from _difficulty in recursed blocks
	        var difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
	        var result = Formatter.check(format, value);
	        result._difficulty = ((difficulty == null) ? null : bignumber_1$6.BigNumber.from(difficulty));
	        return result;
	    };
	    Formatter.prototype.block = function (value) {
	        return this._block(value, this.formats.block);
	    };
	    Formatter.prototype.blockWithTransactions = function (value) {
	        return this._block(value, this.formats.blockWithTransactions);
	    };
	    // Strict! Used on input.
	    Formatter.prototype.transactionRequest = function (value) {
	        return Formatter.check(this.formats.transactionRequest, value);
	    };
	    Formatter.prototype.transactionResponse = function (transaction) {
	        // Rename gas to gasLimit
	        if (transaction.gas != null && transaction.gasLimit == null) {
	            transaction.gasLimit = transaction.gas;
	        }
	        // Some clients (TestRPC) do strange things like return 0x0 for the
	        // 0 address; correct this to be a real address
	        if (transaction.to && bignumber_1$6.BigNumber.from(transaction.to).isZero()) {
	            transaction.to = "0x0000000000000000000000000000000000000000";
	        }
	        // Rename input to data
	        if (transaction.input != null && transaction.data == null) {
	            transaction.data = transaction.input;
	        }
	        // If to and creates are empty, populate the creates from the transaction
	        if (transaction.to == null && transaction.creates == null) {
	            transaction.creates = this.contractAddress(transaction);
	        }
	        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
	            transaction.accessList = [];
	        }
	        var result = Formatter.check(this.formats.transaction, transaction);
	        if (transaction.chainId != null) {
	            var chainId = transaction.chainId;
	            if ((0, bytes_1$5.isHexString)(chainId)) {
	                chainId = bignumber_1$6.BigNumber.from(chainId).toNumber();
	            }
	            result.chainId = chainId;
	        }
	        else {
	            var chainId = transaction.networkId;
	            // geth-etc returns chainId
	            if (chainId == null && result.v == null) {
	                chainId = transaction.chainId;
	            }
	            if ((0, bytes_1$5.isHexString)(chainId)) {
	                chainId = bignumber_1$6.BigNumber.from(chainId).toNumber();
	            }
	            if (typeof (chainId) !== "number" && result.v != null) {
	                chainId = (result.v - 35) / 2;
	                if (chainId < 0) {
	                    chainId = 0;
	                }
	                chainId = parseInt(chainId);
	            }
	            if (typeof (chainId) !== "number") {
	                chainId = 0;
	            }
	            result.chainId = chainId;
	        }
	        // 0x0000... should actually be null
	        if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
	            result.blockHash = null;
	        }
	        return result;
	    };
	    Formatter.prototype.transaction = function (value) {
	        return (0, transactions_1$2.parse)(value);
	    };
	    Formatter.prototype.receiptLog = function (value) {
	        return Formatter.check(this.formats.receiptLog, value);
	    };
	    Formatter.prototype.receipt = function (value) {
	        var result = Formatter.check(this.formats.receipt, value);
	        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
	        if (result.root != null) {
	            if (result.root.length <= 4) {
	                // Could be 0x00, 0x0, 0x01 or 0x1
	                var value_1 = bignumber_1$6.BigNumber.from(result.root).toNumber();
	                if (value_1 === 0 || value_1 === 1) {
	                    // Make sure if both are specified, they match
	                    if (result.status != null && (result.status !== value_1)) {
	                        logger$f.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
	                    }
	                    result.status = value_1;
	                    delete result.root;
	                }
	                else {
	                    logger$f.throwArgumentError("invalid alt-root-status", "value.root", result.root);
	                }
	            }
	            else if (result.root.length !== 66) {
	                // Must be a valid bytes32
	                logger$f.throwArgumentError("invalid root hash", "value.root", result.root);
	            }
	        }
	        if (result.status != null) {
	            result.byzantium = true;
	        }
	        return result;
	    };
	    Formatter.prototype.topics = function (value) {
	        var _this = this;
	        if (Array.isArray(value)) {
	            return value.map(function (v) { return _this.topics(v); });
	        }
	        else if (value != null) {
	            return this.hash(value, true);
	        }
	        return null;
	    };
	    Formatter.prototype.filter = function (value) {
	        return Formatter.check(this.formats.filter, value);
	    };
	    Formatter.prototype.filterLog = function (value) {
	        return Formatter.check(this.formats.filterLog, value);
	    };
	    Formatter.check = function (format, object) {
	        var result = {};
	        for (var key in format) {
	            try {
	                var value = format[key](object[key]);
	                if (value !== undefined) {
	                    result[key] = value;
	                }
	            }
	            catch (error) {
	                error.checkKey = key;
	                error.checkValue = object[key];
	                throw error;
	            }
	        }
	        return result;
	    };
	    // if value is null-ish, nullValue is returned
	    Formatter.allowNull = function (format, nullValue) {
	        return (function (value) {
	            if (value == null) {
	                return nullValue;
	            }
	            return format(value);
	        });
	    };
	    // If value is false-ish, replaceValue is returned
	    Formatter.allowFalsish = function (format, replaceValue) {
	        return (function (value) {
	            if (!value) {
	                return replaceValue;
	            }
	            return format(value);
	        });
	    };
	    // Requires an Array satisfying check
	    Formatter.arrayOf = function (format) {
	        return (function (array) {
	            if (!Array.isArray(array)) {
	                throw new Error("not an array");
	            }
	            var result = [];
	            array.forEach(function (value) {
	                result.push(format(value));
	            });
	            return result;
	        });
	    };
	    return Formatter;
	}());
	var Formatter_1 = formatter.Formatter = Formatter;
	function isCommunityResourcable(value) {
	    return (value && typeof (value.isCommunityResource) === "function");
	}
	var isCommunityResourcable_1 = formatter.isCommunityResourcable = isCommunityResourcable;
	function isCommunityResource(value) {
	    return (isCommunityResourcable(value) && value.isCommunityResource());
	}
	var isCommunityResource_1 = formatter.isCommunityResource = isCommunityResource;
	// Show the throttle message only once
	var throttleMessage = false;
	function showThrottleMessage() {
	    if (throttleMessage) {
	        return;
	    }
	    throttleMessage = true;
	    console.log("========= NOTICE =========");
	    console.log("Request-Rate Exceeded  (this message will not be repeated)");
	    console.log("");
	    console.log("The default API keys for each service are provided as a highly-throttled,");
	    console.log("community resource for low-traffic projects and early prototyping.");
	    console.log("");
	    console.log("While your application will continue to function, we highly recommended");
	    console.log("signing up for your own API keys to improve performance, increase your");
	    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
	    console.log("");
	    console.log("For more details: https:/\/docs.ethers.io/api-keys/");
	    console.log("==========================");
	}
	showThrottleMessage_1 = formatter.showThrottleMessage = showThrottleMessage;

	"use strict";
	var __extends$j = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$h = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$h = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(baseProvider, "__esModule", { value: true });
	var BaseProvider_1 = baseProvider.BaseProvider = Resolver_1 = baseProvider.Resolver = Event_1 = baseProvider.Event = void 0;
	var abstract_provider_1$1 = lib$g;
	var base64_1 = lib$h;
	var basex_1 = lib$a;
	var bignumber_1$5 = lib$s;
	var bytes_1$4 = lib$r;
	var constants_1 = lib$l;
	var hash_1$1 = lib$j;
	var networks_1 = lib$3;
	var properties_1$9 = lib$p;
	var sha2_1$1 = lib$8;
	var strings_1$2 = lib$k;
	var web_1$4 = lib$2;
	var bech32_1 = __importDefault$7(bech32);
	var logger_1$f = lib$q;
	var _version_1$f = _version$3;
	var logger$e = new logger_1$f.Logger(_version_1$f.version);
	var formatter_1$5 = formatter;
	var MAX_CCIP_REDIRECTS = 10;
	//////////////////////////////
	// Event Serializeing
	function checkTopic(topic) {
	    if (topic == null) {
	        return "null";
	    }
	    if ((0, bytes_1$4.hexDataLength)(topic) !== 32) {
	        logger$e.throwArgumentError("invalid topic", "topic", topic);
	    }
	    return topic.toLowerCase();
	}
	function serializeTopics(topics) {
	    // Remove trailing null AND-topics; they are redundant
	    topics = topics.slice();
	    while (topics.length > 0 && topics[topics.length - 1] == null) {
	        topics.pop();
	    }
	    return topics.map(function (topic) {
	        if (Array.isArray(topic)) {
	            // Only track unique OR-topics
	            var unique_1 = {};
	            topic.forEach(function (topic) {
	                unique_1[checkTopic(topic)] = true;
	            });
	            // The order of OR-topics does not matter
	            var sorted = Object.keys(unique_1);
	            sorted.sort();
	            return sorted.join("|");
	        }
	        else {
	            return checkTopic(topic);
	        }
	    }).join("&");
	}
	function deserializeTopics(data) {
	    if (data === "") {
	        return [];
	    }
	    return data.split(/&/g).map(function (topic) {
	        if (topic === "") {
	            return [];
	        }
	        var comps = topic.split("|").map(function (topic) {
	            return ((topic === "null") ? null : topic);
	        });
	        return ((comps.length === 1) ? comps[0] : comps);
	    });
	}
	function getEventTag(eventName) {
	    if (typeof (eventName) === "string") {
	        eventName = eventName.toLowerCase();
	        if ((0, bytes_1$4.hexDataLength)(eventName) === 32) {
	            return "tx:" + eventName;
	        }
	        if (eventName.indexOf(":") === -1) {
	            return eventName;
	        }
	    }
	    else if (Array.isArray(eventName)) {
	        return "filter:*:" + serializeTopics(eventName);
	    }
	    else if (abstract_provider_1$1.ForkEvent.isForkEvent(eventName)) {
	        logger$e.warn("not implemented");
	        throw new Error("not implemented");
	    }
	    else if (eventName && typeof (eventName) === "object") {
	        return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
	    }
	    throw new Error("invalid event - " + eventName);
	}
	//////////////////////////////
	// Helper Object
	function getTime() {
	    return (new Date()).getTime();
	}
	function stall$1(duration) {
	    return new Promise(function (resolve) {
	        setTimeout(resolve, duration);
	    });
	}
	//////////////////////////////
	// Provider Object
	/**
	 *  EventType
	 *   - "block"
	 *   - "poll"
	 *   - "didPoll"
	 *   - "pending"
	 *   - "error"
	 *   - "network"
	 *   - filter
	 *   - topics array
	 *   - transaction hash
	 */
	var PollableEvents = ["block", "network", "pending", "poll"];
	var Event = /** @class */ (function () {
	    function Event(tag, listener, once) {
	        (0, properties_1$9.defineReadOnly)(this, "tag", tag);
	        (0, properties_1$9.defineReadOnly)(this, "listener", listener);
	        (0, properties_1$9.defineReadOnly)(this, "once", once);
	        this._lastBlockNumber = -2;
	        this._inflight = false;
	    }
	    Object.defineProperty(Event.prototype, "event", {
	        get: function () {
	            switch (this.type) {
	                case "tx":
	                    return this.hash;
	                case "filter":
	                    return this.filter;
	            }
	            return this.tag;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Event.prototype, "type", {
	        get: function () {
	            return this.tag.split(":")[0];
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Event.prototype, "hash", {
	        get: function () {
	            var comps = this.tag.split(":");
	            if (comps[0] !== "tx") {
	                return null;
	            }
	            return comps[1];
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Event.prototype, "filter", {
	        get: function () {
	            var comps = this.tag.split(":");
	            if (comps[0] !== "filter") {
	                return null;
	            }
	            var address = comps[1];
	            var topics = deserializeTopics(comps[2]);
	            var filter = {};
	            if (topics.length > 0) {
	                filter.topics = topics;
	            }
	            if (address && address !== "*") {
	                filter.address = address;
	            }
	            return filter;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Event.prototype.pollable = function () {
	        return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
	    };
	    return Event;
	}());
	var Event_1 = baseProvider.Event = Event;
	;
	// https://github.com/satoshilabs/slips/blob/master/slip-0044.md
	var coinInfos = {
	    "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
	    "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
	    "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
	    "60": { symbol: "eth", ilk: "eth" },
	    "61": { symbol: "etc", ilk: "eth" },
	    "700": { symbol: "xdai", ilk: "eth" },
	};
	function bytes32ify(value) {
	    return (0, bytes_1$4.hexZeroPad)(bignumber_1$5.BigNumber.from(value).toHexString(), 32);
	}
	// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
	function base58Encode(data) {
	    return basex_1.Base58.encode((0, bytes_1$4.concat)([data, (0, bytes_1$4.hexDataSlice)((0, sha2_1$1.sha256)((0, sha2_1$1.sha256)(data)), 0, 4)]));
	}
	var matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
	var matchers = [
	    new RegExp("^(https):/\/(.*)$", "i"),
	    new RegExp("^(data):(.*)$", "i"),
	    matcherIpfs,
	    new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
	];
	function _parseString(result, start) {
	    try {
	        return (0, strings_1$2.toUtf8String)(_parseBytes(result, start));
	    }
	    catch (error) { }
	    return null;
	}
	function _parseBytes(result, start) {
	    if (result === "0x") {
	        return null;
	    }
	    var offset = bignumber_1$5.BigNumber.from((0, bytes_1$4.hexDataSlice)(result, start, start + 32)).toNumber();
	    var length = bignumber_1$5.BigNumber.from((0, bytes_1$4.hexDataSlice)(result, offset, offset + 32)).toNumber();
	    return (0, bytes_1$4.hexDataSlice)(result, offset + 32, offset + 32 + length);
	}
	// Trim off the ipfs:// prefix and return the default gateway URL
	function getIpfsLink(link) {
	    if (link.match(/^ipfs:\/\/ipfs\//i)) {
	        link = link.substring(12);
	    }
	    else if (link.match(/^ipfs:\/\//i)) {
	        link = link.substring(7);
	    }
	    else {
	        logger$e.throwArgumentError("unsupported IPFS format", "link", link);
	    }
	    return "https://gateway.ipfs.io/ipfs/" + link;
	}
	function numPad(value) {
	    var result = (0, bytes_1$4.arrayify)(value);
	    if (result.length > 32) {
	        throw new Error("internal; should not happen");
	    }
	    var padded = new Uint8Array(32);
	    padded.set(result, 32 - result.length);
	    return padded;
	}
	function bytesPad(value) {
	    if ((value.length % 32) === 0) {
	        return value;
	    }
	    var result = new Uint8Array(Math.ceil(value.length / 32) * 32);
	    result.set(value);
	    return result;
	}
	// ABI Encodes a series of (bytes, bytes, ...)
	function encodeBytes(datas) {
	    var result = [];
	    var byteCount = 0;
	    // Add place-holders for pointers as we add items
	    for (var i = 0; i < datas.length; i++) {
	        result.push(null);
	        byteCount += 32;
	    }
	    for (var i = 0; i < datas.length; i++) {
	        var data = (0, bytes_1$4.arrayify)(datas[i]);
	        // Update the bytes offset
	        result[i] = numPad(byteCount);
	        // The length and padded value of data
	        result.push(numPad(data.length));
	        result.push(bytesPad(data));
	        byteCount += 32 + Math.ceil(data.length / 32) * 32;
	    }
	    return (0, bytes_1$4.hexConcat)(result);
	}
	var Resolver = /** @class */ (function () {
	    // The resolvedAddress is only for creating a ReverseLookup resolver
	    function Resolver(provider, address, name, resolvedAddress) {
	        (0, properties_1$9.defineReadOnly)(this, "provider", provider);
	        (0, properties_1$9.defineReadOnly)(this, "name", name);
	        (0, properties_1$9.defineReadOnly)(this, "address", provider.formatter.address(address));
	        (0, properties_1$9.defineReadOnly)(this, "_resolvedAddress", resolvedAddress);
	    }
	    Resolver.prototype.supportsWildcard = function () {
	        var _this = this;
	        if (!this._supportsEip2544) {
	            // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
	            this._supportsEip2544 = this.provider.call({
	                to: this.address,
	                data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
	            }).then(function (result) {
	                return bignumber_1$5.BigNumber.from(result).eq(1);
	            }).catch(function (error) {
	                if (error.code === logger_1$f.Logger.errors.CALL_EXCEPTION) {
	                    return false;
	                }
	                // Rethrow the error: link is down, etc. Let future attempts retry.
	                _this._supportsEip2544 = null;
	                throw error;
	            });
	        }
	        return this._supportsEip2544;
	    };
	    Resolver.prototype._fetch = function (selector, parameters) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var tx, parseBytes, result, error_1;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        tx = {
	                            to: this.address,
	                            ccipReadEnabled: true,
	                            data: (0, bytes_1$4.hexConcat)([selector, (0, hash_1$1.namehash)(this.name), (parameters || "0x")])
	                        };
	                        parseBytes = false;
	                        return [4 /*yield*/, this.supportsWildcard()];
	                    case 1:
	                        if (_a.sent()) {
	                            parseBytes = true;
	                            // selector("resolve(bytes,bytes)")
	                            tx.data = (0, bytes_1$4.hexConcat)(["0x9061b923", encodeBytes([(0, hash_1$1.dnsEncode)(this.name), tx.data])]);
	                        }
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, this.provider.call(tx)];
	                    case 3:
	                        result = _a.sent();
	                        if (((0, bytes_1$4.arrayify)(result).length % 32) === 4) {
	                            logger$e.throwError("resolver threw error", logger_1$f.Logger.errors.CALL_EXCEPTION, {
	                                transaction: tx, data: result
	                            });
	                        }
	                        if (parseBytes) {
	                            result = _parseBytes(result, 0);
	                        }
	                        return [2 /*return*/, result];
	                    case 4:
	                        error_1 = _a.sent();
	                        if (error_1.code === logger_1$f.Logger.errors.CALL_EXCEPTION) {
	                            return [2 /*return*/, null];
	                        }
	                        throw error_1;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Resolver.prototype._fetchBytes = function (selector, parameters) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var result;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._fetch(selector, parameters)];
	                    case 1:
	                        result = _a.sent();
	                        if (result != null) {
	                            return [2 /*return*/, _parseBytes(result, 0)];
	                        }
	                        return [2 /*return*/, null];
	                }
	            });
	        });
	    };
	    Resolver.prototype._getAddress = function (coinType, hexBytes) {
	        var coinInfo = coinInfos[String(coinType)];
	        if (coinInfo == null) {
	            logger$e.throwError("unsupported coin type: " + coinType, logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "getAddress(" + coinType + ")"
	            });
	        }
	        if (coinInfo.ilk === "eth") {
	            return this.provider.formatter.address(hexBytes);
	        }
	        var bytes = (0, bytes_1$4.arrayify)(hexBytes);
	        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
	        if (coinInfo.p2pkh != null) {
	            var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
	            if (p2pkh) {
	                var length_1 = parseInt(p2pkh[1], 16);
	                if (p2pkh[2].length === length_1 * 2 && length_1 >= 1 && length_1 <= 75) {
	                    return base58Encode((0, bytes_1$4.concat)([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
	                }
	            }
	        }
	        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
	        if (coinInfo.p2sh != null) {
	            var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
	            if (p2sh) {
	                var length_2 = parseInt(p2sh[1], 16);
	                if (p2sh[2].length === length_2 * 2 && length_2 >= 1 && length_2 <= 75) {
	                    return base58Encode((0, bytes_1$4.concat)([[coinInfo.p2sh], ("0x" + p2sh[2])]));
	                }
	            }
	        }
	        // Bech32
	        if (coinInfo.prefix != null) {
	            var length_3 = bytes[1];
	            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
	            var version_1 = bytes[0];
	            if (version_1 === 0x00) {
	                if (length_3 !== 20 && length_3 !== 32) {
	                    version_1 = -1;
	                }
	            }
	            else {
	                version_1 = -1;
	            }
	            if (version_1 >= 0 && bytes.length === 2 + length_3 && length_3 >= 1 && length_3 <= 75) {
	                var words = bech32_1.default.toWords(bytes.slice(2));
	                words.unshift(version_1);
	                return bech32_1.default.encode(coinInfo.prefix, words);
	            }
	        }
	        return null;
	    };
	    Resolver.prototype.getAddress = function (coinType) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var result, error_2, hexBytes, address;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (coinType == null) {
	                            coinType = 60;
	                        }
	                        if (!(coinType === 60)) return [3 /*break*/, 4];
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, this._fetch("0x3b3b57de")];
	                    case 2:
	                        result = _a.sent();
	                        // No address
	                        if (result === "0x" || result === constants_1.HashZero) {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, this.provider.formatter.callAddress(result)];
	                    case 3:
	                        error_2 = _a.sent();
	                        if (error_2.code === logger_1$f.Logger.errors.CALL_EXCEPTION) {
	                            return [2 /*return*/, null];
	                        }
	                        throw error_2;
	                    case 4: return [4 /*yield*/, this._fetchBytes("0xf1cb7e06", bytes32ify(coinType))];
	                    case 5:
	                        hexBytes = _a.sent();
	                        // No address
	                        if (hexBytes == null || hexBytes === "0x") {
	                            return [2 /*return*/, null];
	                        }
	                        address = this._getAddress(coinType, hexBytes);
	                        if (address == null) {
	                            logger$e.throwError("invalid or unsupported coin data", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "getAddress(" + coinType + ")",
	                                coinType: coinType,
	                                data: hexBytes
	                            });
	                        }
	                        return [2 /*return*/, address];
	                }
	            });
	        });
	    };
	    Resolver.prototype.getAvatar = function () {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var linkage, avatar, i, match, scheme, _a, selector, owner, _b, comps, addr, tokenId, tokenOwner, _c, _d, balance, _e, _f, tx, metadataUrl, _g, metadata, imageUrl, ipfs, error_3;
	            return __generator$h(this, function (_h) {
	                switch (_h.label) {
	                    case 0:
	                        linkage = [{ type: "name", content: this.name }];
	                        _h.label = 1;
	                    case 1:
	                        _h.trys.push([1, 19, , 20]);
	                        return [4 /*yield*/, this.getText("avatar")];
	                    case 2:
	                        avatar = _h.sent();
	                        if (avatar == null) {
	                            return [2 /*return*/, null];
	                        }
	                        i = 0;
	                        _h.label = 3;
	                    case 3:
	                        if (!(i < matchers.length)) return [3 /*break*/, 18];
	                        match = avatar.match(matchers[i]);
	                        if (match == null) {
	                            return [3 /*break*/, 17];
	                        }
	                        scheme = match[1].toLowerCase();
	                        _a = scheme;
	                        switch (_a) {
	                            case "https": return [3 /*break*/, 4];
	                            case "data": return [3 /*break*/, 5];
	                            case "ipfs": return [3 /*break*/, 6];
	                            case "erc721": return [3 /*break*/, 7];
	                            case "erc1155": return [3 /*break*/, 7];
	                        }
	                        return [3 /*break*/, 17];
	                    case 4:
	                        linkage.push({ type: "url", content: avatar });
	                        return [2 /*return*/, { linkage: linkage, url: avatar }];
	                    case 5:
	                        linkage.push({ type: "data", content: avatar });
	                        return [2 /*return*/, { linkage: linkage, url: avatar }];
	                    case 6:
	                        linkage.push({ type: "ipfs", content: avatar });
	                        return [2 /*return*/, { linkage: linkage, url: getIpfsLink(avatar) }];
	                    case 7:
	                        selector = (scheme === "erc721") ? "0xc87b56dd" : "0x0e89341c";
	                        linkage.push({ type: scheme, content: avatar });
	                        _b = this._resolvedAddress;
	                        if (_b) return [3 /*break*/, 9];
	                        return [4 /*yield*/, this.getAddress()];
	                    case 8:
	                        _b = (_h.sent());
	                        _h.label = 9;
	                    case 9:
	                        owner = (_b);
	                        comps = (match[2] || "").split("/");
	                        if (comps.length !== 2) {
	                            return [2 /*return*/, null];
	                        }
	                        return [4 /*yield*/, this.provider.formatter.address(comps[0])];
	                    case 10:
	                        addr = _h.sent();
	                        tokenId = (0, bytes_1$4.hexZeroPad)(bignumber_1$5.BigNumber.from(comps[1]).toHexString(), 32);
	                        if (!(scheme === "erc721")) return [3 /*break*/, 12];
	                        _d = (_c = this.provider.formatter).callAddress;
	                        return [4 /*yield*/, this.provider.call({
	                                to: addr, data: (0, bytes_1$4.hexConcat)(["0x6352211e", tokenId])
	                            })];
	                    case 11:
	                        tokenOwner = _d.apply(_c, [_h.sent()]);
	                        if (owner !== tokenOwner) {
	                            return [2 /*return*/, null];
	                        }
	                        linkage.push({ type: "owner", content: tokenOwner });
	                        return [3 /*break*/, 14];
	                    case 12:
	                        if (!(scheme === "erc1155")) return [3 /*break*/, 14];
	                        _f = (_e = bignumber_1$5.BigNumber).from;
	                        return [4 /*yield*/, this.provider.call({
	                                to: addr, data: (0, bytes_1$4.hexConcat)(["0x00fdd58e", (0, bytes_1$4.hexZeroPad)(owner, 32), tokenId])
	                            })];
	                    case 13:
	                        balance = _f.apply(_e, [_h.sent()]);
	                        if (balance.isZero()) {
	                            return [2 /*return*/, null];
	                        }
	                        linkage.push({ type: "balance", content: balance.toString() });
	                        _h.label = 14;
	                    case 14:
	                        tx = {
	                            to: this.provider.formatter.address(comps[0]),
	                            data: (0, bytes_1$4.hexConcat)([selector, tokenId])
	                        };
	                        _g = _parseString;
	                        return [4 /*yield*/, this.provider.call(tx)];
	                    case 15:
	                        metadataUrl = _g.apply(void 0, [_h.sent(), 0]);
	                        if (metadataUrl == null) {
	                            return [2 /*return*/, null];
	                        }
	                        linkage.push({ type: "metadata-url-base", content: metadataUrl });
	                        // ERC-1155 allows a generic {id} in the URL
	                        if (scheme === "erc1155") {
	                            metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
	                            linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
	                        }
	                        // Transform IPFS metadata links
	                        if (metadataUrl.match(/^ipfs:/i)) {
	                            metadataUrl = getIpfsLink(metadataUrl);
	                        }
	                        linkage.push({ type: "metadata-url", content: metadataUrl });
	                        return [4 /*yield*/, (0, web_1$4.fetchJson)(metadataUrl)];
	                    case 16:
	                        metadata = _h.sent();
	                        if (!metadata) {
	                            return [2 /*return*/, null];
	                        }
	                        linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
	                        imageUrl = metadata.image;
	                        if (typeof (imageUrl) !== "string") {
	                            return [2 /*return*/, null];
	                        }
	                        if (imageUrl.match(/^(https:\/\/|data:)/i)) {
	                            // Allow
	                        }
	                        else {
	                            ipfs = imageUrl.match(matcherIpfs);
	                            if (ipfs == null) {
	                                return [2 /*return*/, null];
	                            }
	                            linkage.push({ type: "url-ipfs", content: imageUrl });
	                            imageUrl = getIpfsLink(imageUrl);
	                        }
	                        linkage.push({ type: "url", content: imageUrl });
	                        return [2 /*return*/, { linkage: linkage, url: imageUrl }];
	                    case 17:
	                        i++;
	                        return [3 /*break*/, 3];
	                    case 18: return [3 /*break*/, 20];
	                    case 19:
	                        error_3 = _h.sent();
	                        return [3 /*break*/, 20];
	                    case 20: return [2 /*return*/, null];
	                }
	            });
	        });
	    };
	    Resolver.prototype.getContentHash = function () {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var hexBytes, ipfs, length_4, ipns, length_5, swarm, skynet, urlSafe_1, hash;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._fetchBytes("0xbc1c58d1")];
	                    case 1:
	                        hexBytes = _a.sent();
	                        // No contenthash
	                        if (hexBytes == null || hexBytes === "0x") {
	                            return [2 /*return*/, null];
	                        }
	                        ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
	                        if (ipfs) {
	                            length_4 = parseInt(ipfs[3], 16);
	                            if (ipfs[4].length === length_4 * 2) {
	                                return [2 /*return*/, "ipfs:/\/" + basex_1.Base58.encode("0x" + ipfs[1])];
	                            }
	                        }
	                        ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
	                        if (ipns) {
	                            length_5 = parseInt(ipns[3], 16);
	                            if (ipns[4].length === length_5 * 2) {
	                                return [2 /*return*/, "ipns:/\/" + basex_1.Base58.encode("0x" + ipns[1])];
	                            }
	                        }
	                        swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
	                        if (swarm) {
	                            if (swarm[1].length === (32 * 2)) {
	                                return [2 /*return*/, "bzz:/\/" + swarm[1]];
	                            }
	                        }
	                        skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
	                        if (skynet) {
	                            if (skynet[1].length === (34 * 2)) {
	                                urlSafe_1 = { "=": "", "+": "-", "/": "_" };
	                                hash = (0, base64_1.encode)("0x" + skynet[1]).replace(/[=+\/]/g, function (a) { return (urlSafe_1[a]); });
	                                return [2 /*return*/, "sia:/\/" + hash];
	                            }
	                        }
	                        return [2 /*return*/, logger$e.throwError("invalid or unsupported content hash data", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "getContentHash()",
	                                data: hexBytes
	                            })];
	                }
	            });
	        });
	    };
	    Resolver.prototype.getText = function (key) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var keyBytes, hexBytes;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        keyBytes = (0, strings_1$2.toUtf8Bytes)(key);
	                        // The nodehash consumes the first slot, so the string pointer targets
	                        // offset 64, with the length at offset 64 and data starting at offset 96
	                        keyBytes = (0, bytes_1$4.concat)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
	                        // Pad to word-size (32 bytes)
	                        if ((keyBytes.length % 32) !== 0) {
	                            keyBytes = (0, bytes_1$4.concat)([keyBytes, (0, bytes_1$4.hexZeroPad)("0x", 32 - (key.length % 32))]);
	                        }
	                        return [4 /*yield*/, this._fetchBytes("0x59d1d43c", (0, bytes_1$4.hexlify)(keyBytes))];
	                    case 1:
	                        hexBytes = _a.sent();
	                        if (hexBytes == null || hexBytes === "0x") {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, (0, strings_1$2.toUtf8String)(hexBytes)];
	                }
	            });
	        });
	    };
	    return Resolver;
	}());
	var Resolver_1 = baseProvider.Resolver = Resolver;
	var defaultFormatter = null;
	var nextPollId = 1;
	var BaseProvider = /** @class */ (function (_super) {
	    __extends$j(BaseProvider, _super);
	    /**
	     *  ready
	     *
	     *  A Promise<Network> that resolves only once the provider is ready.
	     *
	     *  Sub-classes that call the super with a network without a chainId
	     *  MUST set this. Standard named networks have a known chainId.
	     *
	     */
	    function BaseProvider(network) {
	        var _newTarget = this.constructor;
	        var _this = _super.call(this) || this;
	        // Events being listened to
	        _this._events = [];
	        _this._emitted = { block: -2 };
	        _this.disableCcipRead = false;
	        _this.formatter = _newTarget.getFormatter();
	        // If network is any, this Provider allows the underlying
	        // network to change dynamically, and we auto-detect the
	        // current network
	        (0, properties_1$9.defineReadOnly)(_this, "anyNetwork", (network === "any"));
	        if (_this.anyNetwork) {
	            network = _this.detectNetwork();
	        }
	        if (network instanceof Promise) {
	            _this._networkPromise = network;
	            // Squash any "unhandled promise" errors; that do not need to be handled
	            network.catch(function (error) { });
	            // Trigger initial network setting (async)
	            _this._ready().catch(function (error) { });
	        }
	        else {
	            var knownNetwork = (0, properties_1$9.getStatic)(_newTarget, "getNetwork")(network);
	            if (knownNetwork) {
	                (0, properties_1$9.defineReadOnly)(_this, "_network", knownNetwork);
	                _this.emit("network", knownNetwork, null);
	            }
	            else {
	                logger$e.throwArgumentError("invalid network", "network", network);
	            }
	        }
	        _this._maxInternalBlockNumber = -1024;
	        _this._lastBlockNumber = -2;
	        _this._maxFilterBlockRange = 10;
	        _this._pollingInterval = 4000;
	        _this._fastQueryDate = 0;
	        return _this;
	    }
	    BaseProvider.prototype._ready = function () {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var network, error_4;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(this._network == null)) return [3 /*break*/, 7];
	                        network = null;
	                        if (!this._networkPromise) return [3 /*break*/, 4];
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, this._networkPromise];
	                    case 2:
	                        network = _a.sent();
	                        return [3 /*break*/, 4];
	                    case 3:
	                        error_4 = _a.sent();
	                        return [3 /*break*/, 4];
	                    case 4:
	                        if (!(network == null)) return [3 /*break*/, 6];
	                        return [4 /*yield*/, this.detectNetwork()];
	                    case 5:
	                        network = _a.sent();
	                        _a.label = 6;
	                    case 6:
	                        // This should never happen; every Provider sub-class should have
	                        // suggested a network by here (or have thrown).
	                        if (!network) {
	                            logger$e.throwError("no network detected", logger_1$f.Logger.errors.UNKNOWN_ERROR, {});
	                        }
	                        // Possible this call stacked so do not call defineReadOnly again
	                        if (this._network == null) {
	                            if (this.anyNetwork) {
	                                this._network = network;
	                            }
	                            else {
	                                (0, properties_1$9.defineReadOnly)(this, "_network", network);
	                            }
	                            this.emit("network", network, null);
	                        }
	                        _a.label = 7;
	                    case 7: return [2 /*return*/, this._network];
	                }
	            });
	        });
	    };
	    Object.defineProperty(BaseProvider.prototype, "ready", {
	        // This will always return the most recently established network.
	        // For "any", this can change (a "network" event is emitted before
	        // any change is reflected); otherwise this cannot change
	        get: function () {
	            var _this = this;
	            return (0, web_1$4.poll)(function () {
	                return _this._ready().then(function (network) {
	                    return network;
	                }, function (error) {
	                    // If the network isn't running yet, we will wait
	                    if (error.code === logger_1$f.Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
	                        return undefined;
	                    }
	                    throw error;
	                });
	            });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    // @TODO: Remove this and just create a singleton formatter
	    BaseProvider.getFormatter = function () {
	        if (defaultFormatter == null) {
	            defaultFormatter = new formatter_1$5.Formatter();
	        }
	        return defaultFormatter;
	    };
	    // @TODO: Remove this and just use getNetwork
	    BaseProvider.getNetwork = function (network) {
	        return (0, networks_1.getNetwork)((network == null) ? "homestead" : network);
	    };
	    BaseProvider.prototype.ccipReadFetch = function (tx, calldata, urls) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var sender, data, errorMessages, i, url, href, json, result, errorMessage;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (this.disableCcipRead || urls.length === 0) {
	                            return [2 /*return*/, null];
	                        }
	                        sender = tx.to.toLowerCase();
	                        data = calldata.toLowerCase();
	                        errorMessages = [];
	                        i = 0;
	                        _a.label = 1;
	                    case 1:
	                        if (!(i < urls.length)) return [3 /*break*/, 4];
	                        url = urls[i];
	                        href = url.replace("{sender}", sender).replace("{data}", data);
	                        json = (url.indexOf("{data}") >= 0) ? null : JSON.stringify({ data: data, sender: sender });
	                        return [4 /*yield*/, (0, web_1$4.fetchJson)({ url: href, errorPassThrough: true }, json, function (value, response) {
	                                value.status = response.statusCode;
	                                return value;
	                            })];
	                    case 2:
	                        result = _a.sent();
	                        if (result.data) {
	                            return [2 /*return*/, result.data];
	                        }
	                        errorMessage = (result.message || "unknown error");
	                        // 4xx indicates the result is not present; stop
	                        if (result.status >= 400 && result.status < 500) {
	                            return [2 /*return*/, logger$e.throwError("response not found during CCIP fetch: " + errorMessage, logger_1$f.Logger.errors.SERVER_ERROR, { url: url, errorMessage: errorMessage })];
	                        }
	                        // 5xx indicates server issue; try the next url
	                        errorMessages.push(errorMessage);
	                        _a.label = 3;
	                    case 3:
	                        i++;
	                        return [3 /*break*/, 1];
	                    case 4: return [2 /*return*/, logger$e.throwError("error encountered during CCIP fetch: " + errorMessages.map(function (m) { return JSON.stringify(m); }).join(", "), logger_1$f.Logger.errors.SERVER_ERROR, {
	                            urls: urls,
	                            errorMessages: errorMessages
	                        })];
	                }
	            });
	        });
	    };
	    // Fetches the blockNumber, but will reuse any result that is less
	    // than maxAge old or has been requested since the last request
	    BaseProvider.prototype._getInternalBlockNumber = function (maxAge) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var internalBlockNumber, result, error_5, reqTime, checkInternalBlockNumber;
	            var _this = this;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._ready()];
	                    case 1:
	                        _a.sent();
	                        if (!(maxAge > 0)) return [3 /*break*/, 7];
	                        _a.label = 2;
	                    case 2:
	                        if (!this._internalBlockNumber) return [3 /*break*/, 7];
	                        internalBlockNumber = this._internalBlockNumber;
	                        _a.label = 3;
	                    case 3:
	                        _a.trys.push([3, 5, , 6]);
	                        return [4 /*yield*/, internalBlockNumber];
	                    case 4:
	                        result = _a.sent();
	                        if ((getTime() - result.respTime) <= maxAge) {
	                            return [2 /*return*/, result.blockNumber];
	                        }
	                        // Too old; fetch a new value
	                        return [3 /*break*/, 7];
	                    case 5:
	                        error_5 = _a.sent();
	                        // The fetch rejected; if we are the first to get the
	                        // rejection, drop through so we replace it with a new
	                        // fetch; all others blocked will then get that fetch
	                        // which won't match the one they "remembered" and loop
	                        if (this._internalBlockNumber === internalBlockNumber) {
	                            return [3 /*break*/, 7];
	                        }
	                        return [3 /*break*/, 6];
	                    case 6: return [3 /*break*/, 2];
	                    case 7:
	                        reqTime = getTime();
	                        checkInternalBlockNumber = (0, properties_1$9.resolveProperties)({
	                            blockNumber: this.perform("getBlockNumber", {}),
	                            networkError: this.getNetwork().then(function (network) { return (null); }, function (error) { return (error); })
	                        }).then(function (_a) {
	                            var blockNumber = _a.blockNumber, networkError = _a.networkError;
	                            if (networkError) {
	                                // Unremember this bad internal block number
	                                if (_this._internalBlockNumber === checkInternalBlockNumber) {
	                                    _this._internalBlockNumber = null;
	                                }
	                                throw networkError;
	                            }
	                            var respTime = getTime();
	                            blockNumber = bignumber_1$5.BigNumber.from(blockNumber).toNumber();
	                            if (blockNumber < _this._maxInternalBlockNumber) {
	                                blockNumber = _this._maxInternalBlockNumber;
	                            }
	                            _this._maxInternalBlockNumber = blockNumber;
	                            _this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
	                            return { blockNumber: blockNumber, reqTime: reqTime, respTime: respTime };
	                        });
	                        this._internalBlockNumber = checkInternalBlockNumber;
	                        // Swallow unhandled exceptions; if needed they are handled else where
	                        checkInternalBlockNumber.catch(function (error) {
	                            // Don't null the dead (rejected) fetch, if it has already been updated
	                            if (_this._internalBlockNumber === checkInternalBlockNumber) {
	                                _this._internalBlockNumber = null;
	                            }
	                        });
	                        return [4 /*yield*/, checkInternalBlockNumber];
	                    case 8: return [2 /*return*/, (_a.sent()).blockNumber];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.poll = function () {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var pollId, runners, blockNumber, error_6, i;
	            var _this = this;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        pollId = nextPollId++;
	                        runners = [];
	                        blockNumber = null;
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];
	                    case 2:
	                        blockNumber = _a.sent();
	                        return [3 /*break*/, 4];
	                    case 3:
	                        error_6 = _a.sent();
	                        this.emit("error", error_6);
	                        return [2 /*return*/];
	                    case 4:
	                        this._setFastBlockNumber(blockNumber);
	                        // Emit a poll event after we have the latest (fast) block number
	                        this.emit("poll", pollId, blockNumber);
	                        // If the block has not changed, meh.
	                        if (blockNumber === this._lastBlockNumber) {
	                            this.emit("didPoll", pollId);
	                            return [2 /*return*/];
	                        }
	                        // First polling cycle, trigger a "block" events
	                        if (this._emitted.block === -2) {
	                            this._emitted.block = blockNumber - 1;
	                        }
	                        if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
	                            logger$e.warn("network block skew detected; skipping block events (emitted=" + this._emitted.block + " blockNumber" + blockNumber + ")");
	                            this.emit("error", logger$e.makeError("network block skew detected", logger_1$f.Logger.errors.NETWORK_ERROR, {
	                                blockNumber: blockNumber,
	                                event: "blockSkew",
	                                previousBlockNumber: this._emitted.block
	                            }));
	                            this.emit("block", blockNumber);
	                        }
	                        else {
	                            // Notify all listener for each block that has passed
	                            for (i = this._emitted.block + 1; i <= blockNumber; i++) {
	                                this.emit("block", i);
	                            }
	                        }
	                        // The emitted block was updated, check for obsolete events
	                        if (this._emitted.block !== blockNumber) {
	                            this._emitted.block = blockNumber;
	                            Object.keys(this._emitted).forEach(function (key) {
	                                // The block event does not expire
	                                if (key === "block") {
	                                    return;
	                                }
	                                // The block we were at when we emitted this event
	                                var eventBlockNumber = _this._emitted[key];
	                                // We cannot garbage collect pending transactions or blocks here
	                                // They should be garbage collected by the Provider when setting
	                                // "pending" events
	                                if (eventBlockNumber === "pending") {
	                                    return;
	                                }
	                                // Evict any transaction hashes or block hashes over 12 blocks
	                                // old, since they should not return null anyways
	                                if (blockNumber - eventBlockNumber > 12) {
	                                    delete _this._emitted[key];
	                                }
	                            });
	                        }
	                        // First polling cycle
	                        if (this._lastBlockNumber === -2) {
	                            this._lastBlockNumber = blockNumber - 1;
	                        }
	                        // Find all transaction hashes we are waiting on
	                        this._events.forEach(function (event) {
	                            switch (event.type) {
	                                case "tx": {
	                                    var hash_2 = event.hash;
	                                    var runner = _this.getTransactionReceipt(hash_2).then(function (receipt) {
	                                        if (!receipt || receipt.blockNumber == null) {
	                                            return null;
	                                        }
	                                        _this._emitted["t:" + hash_2] = receipt.blockNumber;
	                                        _this.emit(hash_2, receipt);
	                                        return null;
	                                    }).catch(function (error) { _this.emit("error", error); });
	                                    runners.push(runner);
	                                    break;
	                                }
	                                case "filter": {
	                                    // We only allow a single getLogs to be in-flight at a time
	                                    if (!event._inflight) {
	                                        event._inflight = true;
	                                        // This is the first filter for this event, so we want to
	                                        // restrict events to events that happened no earlier than now
	                                        if (event._lastBlockNumber === -2) {
	                                            event._lastBlockNumber = blockNumber - 1;
	                                        }
	                                        // Filter from the last *known* event; due to load-balancing
	                                        // and some nodes returning updated block numbers before
	                                        // indexing events, a logs result with 0 entries cannot be
	                                        // trusted and we must retry a range which includes it again
	                                        var filter_1 = event.filter;
	                                        filter_1.fromBlock = event._lastBlockNumber + 1;
	                                        filter_1.toBlock = blockNumber;
	                                        // Prevent fitler ranges from growing too wild, since it is quite
	                                        // likely there just haven't been any events to move the lastBlockNumber.
	                                        var minFromBlock = filter_1.toBlock - _this._maxFilterBlockRange;
	                                        if (minFromBlock > filter_1.fromBlock) {
	                                            filter_1.fromBlock = minFromBlock;
	                                        }
	                                        if (filter_1.fromBlock < 0) {
	                                            filter_1.fromBlock = 0;
	                                        }
	                                        var runner = _this.getLogs(filter_1).then(function (logs) {
	                                            // Allow the next getLogs
	                                            event._inflight = false;
	                                            if (logs.length === 0) {
	                                                return;
	                                            }
	                                            logs.forEach(function (log) {
	                                                // Only when we get an event for a given block number
	                                                // can we trust the events are indexed
	                                                if (log.blockNumber > event._lastBlockNumber) {
	                                                    event._lastBlockNumber = log.blockNumber;
	                                                }
	                                                // Make sure we stall requests to fetch blocks and txs
	                                                _this._emitted["b:" + log.blockHash] = log.blockNumber;
	                                                _this._emitted["t:" + log.transactionHash] = log.blockNumber;
	                                                _this.emit(filter_1, log);
	                                            });
	                                        }).catch(function (error) {
	                                            _this.emit("error", error);
	                                            // Allow another getLogs (the range was not updated)
	                                            event._inflight = false;
	                                        });
	                                        runners.push(runner);
	                                    }
	                                    break;
	                                }
	                            }
	                        });
	                        this._lastBlockNumber = blockNumber;
	                        // Once all events for this loop have been processed, emit "didPoll"
	                        Promise.all(runners).then(function () {
	                            _this.emit("didPoll", pollId);
	                        }).catch(function (error) { _this.emit("error", error); });
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    // Deprecated; do not use this
	    BaseProvider.prototype.resetEventsBlock = function (blockNumber) {
	        this._lastBlockNumber = blockNumber - 1;
	        if (this.polling) {
	            this.poll();
	        }
	    };
	    Object.defineProperty(BaseProvider.prototype, "network", {
	        get: function () {
	            return this._network;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    // This method should query the network if the underlying network
	    // can change, such as when connected to a JSON-RPC backend
	    BaseProvider.prototype.detectNetwork = function () {
	        return __awaiter$h(this, void 0, void 0, function () {
	            return __generator$h(this, function (_a) {
	                return [2 /*return*/, logger$e.throwError("provider does not support network detection", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
	                        operation: "provider.detectNetwork"
	                    })];
	            });
	        });
	    };
	    BaseProvider.prototype.getNetwork = function () {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var network, currentNetwork, error;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._ready()];
	                    case 1:
	                        network = _a.sent();
	                        return [4 /*yield*/, this.detectNetwork()];
	                    case 2:
	                        currentNetwork = _a.sent();
	                        if (!(network.chainId !== currentNetwork.chainId)) return [3 /*break*/, 5];
	                        if (!this.anyNetwork) return [3 /*break*/, 4];
	                        this._network = currentNetwork;
	                        // Reset all internal block number guards and caches
	                        this._lastBlockNumber = -2;
	                        this._fastBlockNumber = null;
	                        this._fastBlockNumberPromise = null;
	                        this._fastQueryDate = 0;
	                        this._emitted.block = -2;
	                        this._maxInternalBlockNumber = -1024;
	                        this._internalBlockNumber = null;
	                        // The "network" event MUST happen before this method resolves
	                        // so any events have a chance to unregister, so we stall an
	                        // additional event loop before returning from /this/ call
	                        this.emit("network", currentNetwork, network);
	                        return [4 /*yield*/, stall$1(0)];
	                    case 3:
	                        _a.sent();
	                        return [2 /*return*/, this._network];
	                    case 4:
	                        error = logger$e.makeError("underlying network changed", logger_1$f.Logger.errors.NETWORK_ERROR, {
	                            event: "changed",
	                            network: network,
	                            detectedNetwork: currentNetwork
	                        });
	                        this.emit("error", error);
	                        throw error;
	                    case 5: return [2 /*return*/, network];
	                }
	            });
	        });
	    };
	    Object.defineProperty(BaseProvider.prototype, "blockNumber", {
	        get: function () {
	            var _this = this;
	            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {
	                _this._setFastBlockNumber(blockNumber);
	            }, function (error) { });
	            return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BaseProvider.prototype, "polling", {
	        get: function () {
	            return (this._poller != null);
	        },
	        set: function (value) {
	            var _this = this;
	            if (value && !this._poller) {
	                this._poller = setInterval(function () { _this.poll(); }, this.pollingInterval);
	                if (!this._bootstrapPoll) {
	                    this._bootstrapPoll = setTimeout(function () {
	                        _this.poll();
	                        // We block additional polls until the polling interval
	                        // is done, to prevent overwhelming the poll function
	                        _this._bootstrapPoll = setTimeout(function () {
	                            // If polling was disabled, something may require a poke
	                            // since starting the bootstrap poll and it was disabled
	                            if (!_this._poller) {
	                                _this.poll();
	                            }
	                            // Clear out the bootstrap so we can do another
	                            _this._bootstrapPoll = null;
	                        }, _this.pollingInterval);
	                    }, 0);
	                }
	            }
	            else if (!value && this._poller) {
	                clearInterval(this._poller);
	                this._poller = null;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BaseProvider.prototype, "pollingInterval", {
	        get: function () {
	            return this._pollingInterval;
	        },
	        set: function (value) {
	            var _this = this;
	            if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
	                throw new Error("invalid polling interval");
	            }
	            this._pollingInterval = value;
	            if (this._poller) {
	                clearInterval(this._poller);
	                this._poller = setInterval(function () { _this.poll(); }, this._pollingInterval);
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    BaseProvider.prototype._getFastBlockNumber = function () {
	        var _this = this;
	        var now = getTime();
	        // Stale block number, request a newer value
	        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
	            this._fastQueryDate = now;
	            this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {
	                if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
	                    _this._fastBlockNumber = blockNumber;
	                }
	                return _this._fastBlockNumber;
	            });
	        }
	        return this._fastBlockNumberPromise;
	    };
	    BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {
	        // Older block, maybe a stale request
	        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
	            return;
	        }
	        // Update the time we updated the blocknumber
	        this._fastQueryDate = getTime();
	        // Newer block number, use  it
	        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
	            this._fastBlockNumber = blockNumber;
	            this._fastBlockNumberPromise = Promise.resolve(blockNumber);
	        }
	    };
	    BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations, timeout) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            return __generator$h(this, function (_a) {
	                return [2 /*return*/, this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null)];
	            });
	        });
	    };
	    BaseProvider.prototype._waitForTransaction = function (transactionHash, confirmations, timeout, replaceable) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var receipt;
	            var _this = this;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getTransactionReceipt(transactionHash)];
	                    case 1:
	                        receipt = _a.sent();
	                        // Receipt is already good
	                        if ((receipt ? receipt.confirmations : 0) >= confirmations) {
	                            return [2 /*return*/, receipt];
	                        }
	                        // Poll until the receipt is good...
	                        return [2 /*return*/, new Promise(function (resolve, reject) {
	                                var cancelFuncs = [];
	                                var done = false;
	                                var alreadyDone = function () {
	                                    if (done) {
	                                        return true;
	                                    }
	                                    done = true;
	                                    cancelFuncs.forEach(function (func) { func(); });
	                                    return false;
	                                };
	                                var minedHandler = function (receipt) {
	                                    if (receipt.confirmations < confirmations) {
	                                        return;
	                                    }
	                                    if (alreadyDone()) {
	                                        return;
	                                    }
	                                    resolve(receipt);
	                                };
	                                _this.on(transactionHash, minedHandler);
	                                cancelFuncs.push(function () { _this.removeListener(transactionHash, minedHandler); });
	                                if (replaceable) {
	                                    var lastBlockNumber_1 = replaceable.startBlock;
	                                    var scannedBlock_1 = null;
	                                    var replaceHandler_1 = function (blockNumber) { return __awaiter$h(_this, void 0, void 0, function () {
	                                        var _this = this;
	                                        return __generator$h(this, function (_a) {
	                                            switch (_a.label) {
	                                                case 0:
	                                                    if (done) {
	                                                        return [2 /*return*/];
	                                                    }
	                                                    // Wait 1 second; this is only used in the case of a fault, so
	                                                    // we will trade off a little bit of latency for more consistent
	                                                    // results and fewer JSON-RPC calls
	                                                    return [4 /*yield*/, stall$1(1000)];
	                                                case 1:
	                                                    // Wait 1 second; this is only used in the case of a fault, so
	                                                    // we will trade off a little bit of latency for more consistent
	                                                    // results and fewer JSON-RPC calls
	                                                    _a.sent();
	                                                    this.getTransactionCount(replaceable.from).then(function (nonce) { return __awaiter$h(_this, void 0, void 0, function () {
	                                                        var mined, block, ti, tx, receipt_1, reason;
	                                                        return __generator$h(this, function (_a) {
	                                                            switch (_a.label) {
	                                                                case 0:
	                                                                    if (done) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    if (!(nonce <= replaceable.nonce)) return [3 /*break*/, 1];
	                                                                    lastBlockNumber_1 = blockNumber;
	                                                                    return [3 /*break*/, 9];
	                                                                case 1: return [4 /*yield*/, this.getTransaction(transactionHash)];
	                                                                case 2:
	                                                                    mined = _a.sent();
	                                                                    if (mined && mined.blockNumber != null) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    // First time scanning. We start a little earlier for some
	                                                                    // wiggle room here to handle the eventually consistent nature
	                                                                    // of blockchain (e.g. the getTransactionCount was for a
	                                                                    // different block)
	                                                                    if (scannedBlock_1 == null) {
	                                                                        scannedBlock_1 = lastBlockNumber_1 - 3;
	                                                                        if (scannedBlock_1 < replaceable.startBlock) {
	                                                                            scannedBlock_1 = replaceable.startBlock;
	                                                                        }
	                                                                    }
	                                                                    _a.label = 3;
	                                                                case 3:
	                                                                    if (!(scannedBlock_1 <= blockNumber)) return [3 /*break*/, 9];
	                                                                    if (done) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    return [4 /*yield*/, this.getBlockWithTransactions(scannedBlock_1)];
	                                                                case 4:
	                                                                    block = _a.sent();
	                                                                    ti = 0;
	                                                                    _a.label = 5;
	                                                                case 5:
	                                                                    if (!(ti < block.transactions.length)) return [3 /*break*/, 8];
	                                                                    tx = block.transactions[ti];
	                                                                    // Successfully mined!
	                                                                    if (tx.hash === transactionHash) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) return [3 /*break*/, 7];
	                                                                    if (done) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    return [4 /*yield*/, this.waitForTransaction(tx.hash, confirmations)];
	                                                                case 6:
	                                                                    receipt_1 = _a.sent();
	                                                                    // Already resolved or rejected (prolly a timeout)
	                                                                    if (alreadyDone()) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    reason = "replaced";
	                                                                    if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
	                                                                        reason = "repriced";
	                                                                    }
	                                                                    else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
	                                                                        reason = "cancelled";
	                                                                    }
	                                                                    // Explain why we were replaced
	                                                                    reject(logger$e.makeError("transaction was replaced", logger_1$f.Logger.errors.TRANSACTION_REPLACED, {
	                                                                        cancelled: (reason === "replaced" || reason === "cancelled"),
	                                                                        reason: reason,
	                                                                        replacement: this._wrapTransaction(tx),
	                                                                        hash: transactionHash,
	                                                                        receipt: receipt_1
	                                                                    }));
	                                                                    return [2 /*return*/];
	                                                                case 7:
	                                                                    ti++;
	                                                                    return [3 /*break*/, 5];
	                                                                case 8:
	                                                                    scannedBlock_1++;
	                                                                    return [3 /*break*/, 3];
	                                                                case 9:
	                                                                    if (done) {
	                                                                        return [2 /*return*/];
	                                                                    }
	                                                                    this.once("block", replaceHandler_1);
	                                                                    return [2 /*return*/];
	                                                            }
	                                                        });
	                                                    }); }, function (error) {
	                                                        if (done) {
	                                                            return;
	                                                        }
	                                                        _this.once("block", replaceHandler_1);
	                                                    });
	                                                    return [2 /*return*/];
	                                            }
	                                        });
	                                    }); };
	                                    if (done) {
	                                        return;
	                                    }
	                                    _this.once("block", replaceHandler_1);
	                                    cancelFuncs.push(function () {
	                                        _this.removeListener("block", replaceHandler_1);
	                                    });
	                                }
	                                if (typeof (timeout) === "number" && timeout > 0) {
	                                    var timer_1 = setTimeout(function () {
	                                        if (alreadyDone()) {
	                                            return;
	                                        }
	                                        reject(logger$e.makeError("timeout exceeded", logger_1$f.Logger.errors.TIMEOUT, { timeout: timeout }));
	                                    }, timeout);
	                                    if (timer_1.unref) {
	                                        timer_1.unref();
	                                    }
	                                    cancelFuncs.push(function () { clearTimeout(timer_1); });
	                                }
	                            })];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getBlockNumber = function () {
	        return __awaiter$h(this, void 0, void 0, function () {
	            return __generator$h(this, function (_a) {
	                return [2 /*return*/, this._getInternalBlockNumber(0)];
	            });
	        });
	    };
	    BaseProvider.prototype.getGasPrice = function () {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var result;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.perform("getGasPrice", {})];
	                    case 2:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, bignumber_1$5.BigNumber.from(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger$e.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
	                                    method: "getGasPrice",
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var params, result;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
	                                address: this._getAddress(addressOrName),
	                                blockTag: this._getBlockTag(blockTag)
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getBalance", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, bignumber_1$5.BigNumber.from(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger$e.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
	                                    method: "getBalance",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var params, result;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
	                                address: this._getAddress(addressOrName),
	                                blockTag: this._getBlockTag(blockTag)
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getTransactionCount", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, bignumber_1$5.BigNumber.from(result).toNumber()];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger$e.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
	                                    method: "getTransactionCount",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getCode = function (addressOrName, blockTag) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var params, result;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
	                                address: this._getAddress(addressOrName),
	                                blockTag: this._getBlockTag(blockTag)
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getCode", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, (0, bytes_1$4.hexlify)(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger$e.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
	                                    method: "getCode",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var params, result;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
	                                address: this._getAddress(addressOrName),
	                                blockTag: this._getBlockTag(blockTag),
	                                position: Promise.resolve(position).then(function (p) { return (0, bytes_1$4.hexValue)(p); })
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getStorageAt", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, (0, bytes_1$4.hexlify)(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger$e.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
	                                    method: "getStorageAt",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    // This should be called by any subclass wrapping a TransactionResponse
	    BaseProvider.prototype._wrapTransaction = function (tx, hash, startBlock) {
	        var _this = this;
	        if (hash != null && (0, bytes_1$4.hexDataLength)(hash) !== 32) {
	            throw new Error("invalid response - sendTransaction");
	        }
	        var result = tx;
	        // Check the hash we expect is the same as the hash the server reported
	        if (hash != null && tx.hash !== hash) {
	            logger$e.throwError("Transaction hash mismatch from Provider.sendTransaction.", logger_1$f.Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
	        }
	        result.wait = function (confirms, timeout) { return __awaiter$h(_this, void 0, void 0, function () {
	            var replacement, receipt;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (confirms == null) {
	                            confirms = 1;
	                        }
	                        if (timeout == null) {
	                            timeout = 0;
	                        }
	                        replacement = undefined;
	                        if (confirms !== 0 && startBlock != null) {
	                            replacement = {
	                                data: tx.data,
	                                from: tx.from,
	                                nonce: tx.nonce,
	                                to: tx.to,
	                                value: tx.value,
	                                startBlock: startBlock
	                            };
	                        }
	                        return [4 /*yield*/, this._waitForTransaction(tx.hash, confirms, timeout, replacement)];
	                    case 1:
	                        receipt = _a.sent();
	                        if (receipt == null && confirms === 0) {
	                            return [2 /*return*/, null];
	                        }
	                        // No longer pending, allow the polling loop to garbage collect this
	                        this._emitted["t:" + tx.hash] = receipt.blockNumber;
	                        if (receipt.status === 0) {
	                            logger$e.throwError("transaction failed", logger_1$f.Logger.errors.CALL_EXCEPTION, {
	                                transactionHash: tx.hash,
	                                transaction: tx,
	                                receipt: receipt
	                            });
	                        }
	                        return [2 /*return*/, receipt];
	                }
	            });
	        }); };
	        return result;
	    };
	    BaseProvider.prototype.sendTransaction = function (signedTransaction) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var hexTx, tx, blockNumber, hash, error_7;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, Promise.resolve(signedTransaction).then(function (t) { return (0, bytes_1$4.hexlify)(t); })];
	                    case 2:
	                        hexTx = _a.sent();
	                        tx = this.formatter.transaction(signedTransaction);
	                        if (tx.confirmations == null) {
	                            tx.confirmations = 0;
	                        }
	                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                    case 3:
	                        blockNumber = _a.sent();
	                        _a.label = 4;
	                    case 4:
	                        _a.trys.push([4, 6, , 7]);
	                        return [4 /*yield*/, this.perform("sendTransaction", { signedTransaction: hexTx })];
	                    case 5:
	                        hash = _a.sent();
	                        return [2 /*return*/, this._wrapTransaction(tx, hash, blockNumber)];
	                    case 6:
	                        error_7 = _a.sent();
	                        error_7.transaction = tx;
	                        error_7.transactionHash = tx.hash;
	                        throw error_7;
	                    case 7: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getTransactionRequest = function (transaction) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var values, tx, _a, _b;
	            var _this = this;
	            return __generator$h(this, function (_c) {
	                switch (_c.label) {
	                    case 0: return [4 /*yield*/, transaction];
	                    case 1:
	                        values = _c.sent();
	                        tx = {};
	                        ["from", "to"].forEach(function (key) {
	                            if (values[key] == null) {
	                                return;
	                            }
	                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? _this._getAddress(v) : null); });
	                        });
	                        ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach(function (key) {
	                            if (values[key] == null) {
	                                return;
	                            }
	                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? bignumber_1$5.BigNumber.from(v) : null); });
	                        });
	                        ["type"].forEach(function (key) {
	                            if (values[key] == null) {
	                                return;
	                            }
	                            tx[key] = Promise.resolve(values[key]).then(function (v) { return ((v != null) ? v : null); });
	                        });
	                        if (values.accessList) {
	                            tx.accessList = this.formatter.accessList(values.accessList);
	                        }
	                        ["data"].forEach(function (key) {
	                            if (values[key] == null) {
	                                return;
	                            }
	                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? (0, bytes_1$4.hexlify)(v) : null); });
	                        });
	                        _b = (_a = this.formatter).transactionRequest;
	                        return [4 /*yield*/, (0, properties_1$9.resolveProperties)(tx)];
	                    case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getFilter = function (filter) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var result, _a, _b;
	            var _this = this;
	            return __generator$h(this, function (_c) {
	                switch (_c.label) {
	                    case 0: return [4 /*yield*/, filter];
	                    case 1:
	                        filter = _c.sent();
	                        result = {};
	                        if (filter.address != null) {
	                            result.address = this._getAddress(filter.address);
	                        }
	                        ["blockHash", "topics"].forEach(function (key) {
	                            if (filter[key] == null) {
	                                return;
	                            }
	                            result[key] = filter[key];
	                        });
	                        ["fromBlock", "toBlock"].forEach(function (key) {
	                            if (filter[key] == null) {
	                                return;
	                            }
	                            result[key] = _this._getBlockTag(filter[key]);
	                        });
	                        _b = (_a = this.formatter).filter;
	                        return [4 /*yield*/, (0, properties_1$9.resolveProperties)(result)];
	                    case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._call = function (transaction, blockTag, attempt) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx, error_8;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (attempt >= MAX_CCIP_REDIRECTS) {
	                            logger$e.throwError("CCIP read exceeded maximum redirections", logger_1$f.Logger.errors.SERVER_ERROR, {
	                                redirects: attempt,
	                                transaction: transaction
	                            });
	                        }
	                        txSender = transaction.to;
	                        return [4 /*yield*/, this.perform("call", { transaction: transaction, blockTag: blockTag })];
	                    case 1:
	                        result = _a.sent();
	                        if (!(attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && ((0, bytes_1$4.hexDataLength)(result) % 32 === 4))) return [3 /*break*/, 5];
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        data = (0, bytes_1$4.hexDataSlice)(result, 4);
	                        sender = (0, bytes_1$4.hexDataSlice)(data, 0, 32);
	                        if (!bignumber_1$5.BigNumber.from(sender).eq(txSender)) {
	                            logger$e.throwError("CCIP Read sender did not match", logger_1$f.Logger.errors.CALL_EXCEPTION, {
	                                name: "OffchainLookup",
	                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
	                                transaction: transaction,
	                                data: result
	                            });
	                        }
	                        urls = [];
	                        urlsOffset = bignumber_1$5.BigNumber.from((0, bytes_1$4.hexDataSlice)(data, 32, 64)).toNumber();
	                        urlsLength = bignumber_1$5.BigNumber.from((0, bytes_1$4.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();
	                        urlsData = (0, bytes_1$4.hexDataSlice)(data, urlsOffset + 32);
	                        for (u = 0; u < urlsLength; u++) {
	                            url = _parseString(urlsData, u * 32);
	                            if (url == null) {
	                                logger$e.throwError("CCIP Read contained corrupt URL string", logger_1$f.Logger.errors.CALL_EXCEPTION, {
	                                    name: "OffchainLookup",
	                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
	                                    transaction: transaction,
	                                    data: result
	                                });
	                            }
	                            urls.push(url);
	                        }
	                        calldata = _parseBytes(data, 64);
	                        // Get the callbackSelector (bytes4)
	                        if (!bignumber_1$5.BigNumber.from((0, bytes_1$4.hexDataSlice)(data, 100, 128)).isZero()) {
	                            logger$e.throwError("CCIP Read callback selector included junk", logger_1$f.Logger.errors.CALL_EXCEPTION, {
	                                name: "OffchainLookup",
	                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
	                                transaction: transaction,
	                                data: result
	                            });
	                        }
	                        callbackSelector = (0, bytes_1$4.hexDataSlice)(data, 96, 100);
	                        extraData = _parseBytes(data, 128);
	                        return [4 /*yield*/, this.ccipReadFetch(transaction, calldata, urls)];
	                    case 3:
	                        ccipResult = _a.sent();
	                        if (ccipResult == null) {
	                            logger$e.throwError("CCIP Read disabled or provided no URLs", logger_1$f.Logger.errors.CALL_EXCEPTION, {
	                                name: "OffchainLookup",
	                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
	                                transaction: transaction,
	                                data: result
	                            });
	                        }
	                        tx = {
	                            to: txSender,
	                            data: (0, bytes_1$4.hexConcat)([callbackSelector, encodeBytes([ccipResult, extraData])])
	                        };
	                        return [2 /*return*/, this._call(tx, blockTag, attempt + 1)];
	                    case 4:
	                        error_8 = _a.sent();
	                        if (error_8.code === logger_1$f.Logger.errors.SERVER_ERROR) {
	                            throw error_8;
	                        }
	                        return [3 /*break*/, 5];
	                    case 5:
	                        try {
	                            return [2 /*return*/, (0, bytes_1$4.hexlify)(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger$e.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
	                                    method: "call",
	                                    params: { transaction: transaction, blockTag: blockTag },
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.call = function (transaction, blockTag) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var resolved;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
	                                transaction: this._getTransactionRequest(transaction),
	                                blockTag: this._getBlockTag(blockTag),
	                                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
	                            })];
	                    case 2:
	                        resolved = _a.sent();
	                        return [2 /*return*/, this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1)];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.estimateGas = function (transaction) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var params, result;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
	                                transaction: this._getTransactionRequest(transaction)
	                            })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("estimateGas", params)];
	                    case 3:
	                        result = _a.sent();
	                        try {
	                            return [2 /*return*/, bignumber_1$5.BigNumber.from(result)];
	                        }
	                        catch (error) {
	                            return [2 /*return*/, logger$e.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
	                                    method: "estimateGas",
	                                    params: params,
	                                    result: result,
	                                    error: error
	                                })];
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getAddress = function (addressOrName) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var address;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, addressOrName];
	                    case 1:
	                        addressOrName = _a.sent();
	                        if (typeof (addressOrName) !== "string") {
	                            logger$e.throwArgumentError("invalid address or ENS name", "name", addressOrName);
	                        }
	                        return [4 /*yield*/, this.resolveName(addressOrName)];
	                    case 2:
	                        address = _a.sent();
	                        if (address == null) {
	                            logger$e.throwError("ENS name not configured", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
	                                operation: "resolveName(" + JSON.stringify(addressOrName) + ")"
	                            });
	                        }
	                        return [2 /*return*/, address];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getBlock = function (blockHashOrBlockTag, includeTransactions) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var blockNumber, params, _a, error_9;
	            var _this = this;
	            return __generator$h(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _b.sent();
	                        return [4 /*yield*/, blockHashOrBlockTag];
	                    case 2:
	                        blockHashOrBlockTag = _b.sent();
	                        blockNumber = -128;
	                        params = {
	                            includeTransactions: !!includeTransactions
	                        };
	                        if (!(0, bytes_1$4.isHexString)(blockHashOrBlockTag, 32)) return [3 /*break*/, 3];
	                        params.blockHash = blockHashOrBlockTag;
	                        return [3 /*break*/, 6];
	                    case 3:
	                        _b.trys.push([3, 5, , 6]);
	                        _a = params;
	                        return [4 /*yield*/, this._getBlockTag(blockHashOrBlockTag)];
	                    case 4:
	                        _a.blockTag = _b.sent();
	                        if ((0, bytes_1$4.isHexString)(params.blockTag)) {
	                            blockNumber = parseInt(params.blockTag.substring(2), 16);
	                        }
	                        return [3 /*break*/, 6];
	                    case 5:
	                        error_9 = _b.sent();
	                        logger$e.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
	                        return [3 /*break*/, 6];
	                    case 6: return [2 /*return*/, (0, web_1$4.poll)(function () { return __awaiter$h(_this, void 0, void 0, function () {
	                            var block, blockNumber_1, i, tx, confirmations, blockWithTxs;
	                            var _this = this;
	                            return __generator$h(this, function (_a) {
	                                switch (_a.label) {
	                                    case 0: return [4 /*yield*/, this.perform("getBlock", params)];
	                                    case 1:
	                                        block = _a.sent();
	                                        // Block was not found
	                                        if (block == null) {
	                                            // For blockhashes, if we didn't say it existed, that blockhash may
	                                            // not exist. If we did see it though, perhaps from a log, we know
	                                            // it exists, and this node is just not caught up yet.
	                                            if (params.blockHash != null) {
	                                                if (this._emitted["b:" + params.blockHash] == null) {
	                                                    return [2 /*return*/, null];
	                                                }
	                                            }
	                                            // For block tags, if we are asking for a future block, we return null
	                                            if (params.blockTag != null) {
	                                                if (blockNumber > this._emitted.block) {
	                                                    return [2 /*return*/, null];
	                                                }
	                                            }
	                                            // Retry on the next block
	                                            return [2 /*return*/, undefined];
	                                        }
	                                        if (!includeTransactions) return [3 /*break*/, 8];
	                                        blockNumber_1 = null;
	                                        i = 0;
	                                        _a.label = 2;
	                                    case 2:
	                                        if (!(i < block.transactions.length)) return [3 /*break*/, 7];
	                                        tx = block.transactions[i];
	                                        if (!(tx.blockNumber == null)) return [3 /*break*/, 3];
	                                        tx.confirmations = 0;
	                                        return [3 /*break*/, 6];
	                                    case 3:
	                                        if (!(tx.confirmations == null)) return [3 /*break*/, 6];
	                                        if (!(blockNumber_1 == null)) return [3 /*break*/, 5];
	                                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                                    case 4:
	                                        blockNumber_1 = _a.sent();
	                                        _a.label = 5;
	                                    case 5:
	                                        confirmations = (blockNumber_1 - tx.blockNumber) + 1;
	                                        if (confirmations <= 0) {
	                                            confirmations = 1;
	                                        }
	                                        tx.confirmations = confirmations;
	                                        _a.label = 6;
	                                    case 6:
	                                        i++;
	                                        return [3 /*break*/, 2];
	                                    case 7:
	                                        blockWithTxs = this.formatter.blockWithTransactions(block);
	                                        blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) { return _this._wrapTransaction(tx); });
	                                        return [2 /*return*/, blockWithTxs];
	                                    case 8: return [2 /*return*/, this.formatter.block(block)];
	                                }
	                            });
	                        }); }, { oncePoll: this })];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getBlock = function (blockHashOrBlockTag) {
	        return (this._getBlock(blockHashOrBlockTag, false));
	    };
	    BaseProvider.prototype.getBlockWithTransactions = function (blockHashOrBlockTag) {
	        return (this._getBlock(blockHashOrBlockTag, true));
	    };
	    BaseProvider.prototype.getTransaction = function (transactionHash) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var params;
	            var _this = this;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, transactionHash];
	                    case 2:
	                        transactionHash = _a.sent();
	                        params = { transactionHash: this.formatter.hash(transactionHash, true) };
	                        return [2 /*return*/, (0, web_1$4.poll)(function () { return __awaiter$h(_this, void 0, void 0, function () {
	                                var result, tx, blockNumber, confirmations;
	                                return __generator$h(this, function (_a) {
	                                    switch (_a.label) {
	                                        case 0: return [4 /*yield*/, this.perform("getTransaction", params)];
	                                        case 1:
	                                            result = _a.sent();
	                                            if (result == null) {
	                                                if (this._emitted["t:" + transactionHash] == null) {
	                                                    return [2 /*return*/, null];
	                                                }
	                                                return [2 /*return*/, undefined];
	                                            }
	                                            tx = this.formatter.transactionResponse(result);
	                                            if (!(tx.blockNumber == null)) return [3 /*break*/, 2];
	                                            tx.confirmations = 0;
	                                            return [3 /*break*/, 4];
	                                        case 2:
	                                            if (!(tx.confirmations == null)) return [3 /*break*/, 4];
	                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                                        case 3:
	                                            blockNumber = _a.sent();
	                                            confirmations = (blockNumber - tx.blockNumber) + 1;
	                                            if (confirmations <= 0) {
	                                                confirmations = 1;
	                                            }
	                                            tx.confirmations = confirmations;
	                                            _a.label = 4;
	                                        case 4: return [2 /*return*/, this._wrapTransaction(tx)];
	                                    }
	                                });
	                            }); }, { oncePoll: this })];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var params;
	            var _this = this;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, transactionHash];
	                    case 2:
	                        transactionHash = _a.sent();
	                        params = { transactionHash: this.formatter.hash(transactionHash, true) };
	                        return [2 /*return*/, (0, web_1$4.poll)(function () { return __awaiter$h(_this, void 0, void 0, function () {
	                                var result, receipt, blockNumber, confirmations;
	                                return __generator$h(this, function (_a) {
	                                    switch (_a.label) {
	                                        case 0: return [4 /*yield*/, this.perform("getTransactionReceipt", params)];
	                                        case 1:
	                                            result = _a.sent();
	                                            if (result == null) {
	                                                if (this._emitted["t:" + transactionHash] == null) {
	                                                    return [2 /*return*/, null];
	                                                }
	                                                return [2 /*return*/, undefined];
	                                            }
	                                            // "geth-etc" returns receipts before they are ready
	                                            if (result.blockHash == null) {
	                                                return [2 /*return*/, undefined];
	                                            }
	                                            receipt = this.formatter.receipt(result);
	                                            if (!(receipt.blockNumber == null)) return [3 /*break*/, 2];
	                                            receipt.confirmations = 0;
	                                            return [3 /*break*/, 4];
	                                        case 2:
	                                            if (!(receipt.confirmations == null)) return [3 /*break*/, 4];
	                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                                        case 3:
	                                            blockNumber = _a.sent();
	                                            confirmations = (blockNumber - receipt.blockNumber) + 1;
	                                            if (confirmations <= 0) {
	                                                confirmations = 1;
	                                            }
	                                            receipt.confirmations = confirmations;
	                                            _a.label = 4;
	                                        case 4: return [2 /*return*/, receipt];
	                                    }
	                                });
	                            }); }, { oncePoll: this })];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getLogs = function (filter) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var params, logs;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, (0, properties_1$9.resolveProperties)({ filter: this._getFilter(filter) })];
	                    case 2:
	                        params = _a.sent();
	                        return [4 /*yield*/, this.perform("getLogs", params)];
	                    case 3:
	                        logs = _a.sent();
	                        logs.forEach(function (log) {
	                            if (log.removed == null) {
	                                log.removed = false;
	                            }
	                        });
	                        return [2 /*return*/, formatter_1$5.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getEtherPrice = function () {
	        return __awaiter$h(this, void 0, void 0, function () {
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/, this.perform("getEtherPrice", {})];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getBlockTag = function (blockTag) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var blockNumber;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, blockTag];
	                    case 1:
	                        blockTag = _a.sent();
	                        if (!(typeof (blockTag) === "number" && blockTag < 0)) return [3 /*break*/, 3];
	                        if (blockTag % 1) {
	                            logger$e.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
	                        }
	                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
	                    case 2:
	                        blockNumber = _a.sent();
	                        blockNumber += blockTag;
	                        if (blockNumber < 0) {
	                            blockNumber = 0;
	                        }
	                        return [2 /*return*/, this.formatter.blockTag(blockNumber)];
	                    case 3: return [2 /*return*/, this.formatter.blockTag(blockTag)];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getResolver = function (name) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var currentName, addr, resolver, _a;
	            return __generator$h(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        currentName = name;
	                        _b.label = 1;
	                    case 1:
	                        if (!true) return [3 /*break*/, 6];
	                        if (currentName === "" || currentName === ".") {
	                            return [2 /*return*/, null];
	                        }
	                        // Optimization since the eth node cannot change and does
	                        // not have a wildcard resolver
	                        if (name !== "eth" && currentName === "eth") {
	                            return [2 /*return*/, null];
	                        }
	                        return [4 /*yield*/, this._getResolver(currentName, "getResolver")];
	                    case 2:
	                        addr = _b.sent();
	                        if (!(addr != null)) return [3 /*break*/, 5];
	                        resolver = new Resolver(this, addr, name);
	                        _a = currentName !== name;
	                        if (!_a) return [3 /*break*/, 4];
	                        return [4 /*yield*/, resolver.supportsWildcard()];
	                    case 3:
	                        _a = !(_b.sent());
	                        _b.label = 4;
	                    case 4:
	                        // Legacy resolver found, using EIP-2544 so it isn't safe to use
	                        if (_a) {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, resolver];
	                    case 5:
	                        // Get the parent node
	                        currentName = currentName.split(".").slice(1).join(".");
	                        return [3 /*break*/, 1];
	                    case 6: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype._getResolver = function (name, operation) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var network, addrData, error_10;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (operation == null) {
	                            operation = "ENS";
	                        }
	                        return [4 /*yield*/, this.getNetwork()];
	                    case 1:
	                        network = _a.sent();
	                        // No ENS...
	                        if (!network.ensAddress) {
	                            logger$e.throwError("network does not support ENS", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, { operation: operation, network: network.name });
	                        }
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, this.call({
	                                to: network.ensAddress,
	                                data: ("0x0178b8bf" + (0, hash_1$1.namehash)(name).substring(2))
	                            })];
	                    case 3:
	                        addrData = _a.sent();
	                        return [2 /*return*/, this.formatter.callAddress(addrData)];
	                    case 4:
	                        error_10 = _a.sent();
	                        return [3 /*break*/, 5];
	                    case 5: return [2 /*return*/, null];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.resolveName = function (name) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var resolver;
	            return __generator$h(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, name];
	                    case 1:
	                        name = _a.sent();
	                        // If it is already an address, nothing to resolve
	                        try {
	                            return [2 /*return*/, Promise.resolve(this.formatter.address(name))];
	                        }
	                        catch (error) {
	                            // If is is a hexstring, the address is bad (See #694)
	                            if ((0, bytes_1$4.isHexString)(name)) {
	                                throw error;
	                            }
	                        }
	                        if (typeof (name) !== "string") {
	                            logger$e.throwArgumentError("invalid ENS name", "name", name);
	                        }
	                        return [4 /*yield*/, this.getResolver(name)];
	                    case 2:
	                        resolver = _a.sent();
	                        if (!resolver) {
	                            return [2 /*return*/, null];
	                        }
	                        return [4 /*yield*/, resolver.getAddress()];
	                    case 3: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.lookupAddress = function (address) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var node, resolverAddr, name, _a, addr;
	            return __generator$h(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, address];
	                    case 1:
	                        address = _b.sent();
	                        address = this.formatter.address(address);
	                        node = address.substring(2).toLowerCase() + ".addr.reverse";
	                        return [4 /*yield*/, this._getResolver(node, "lookupAddress")];
	                    case 2:
	                        resolverAddr = _b.sent();
	                        if (resolverAddr == null) {
	                            return [2 /*return*/, null];
	                        }
	                        _a = _parseString;
	                        return [4 /*yield*/, this.call({
	                                to: resolverAddr,
	                                data: ("0x691f3431" + (0, hash_1$1.namehash)(node).substring(2))
	                            })];
	                    case 3:
	                        name = _a.apply(void 0, [_b.sent(), 0]);
	                        return [4 /*yield*/, this.resolveName(name)];
	                    case 4:
	                        addr = _b.sent();
	                        if (addr != address) {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, name];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.getAvatar = function (nameOrAddress) {
	        return __awaiter$h(this, void 0, void 0, function () {
	            var resolver, address, node, resolverAddress, avatar_1, error_11, name_1, _a, error_12, avatar;
	            return __generator$h(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        resolver = null;
	                        if (!(0, bytes_1$4.isHexString)(nameOrAddress)) return [3 /*break*/, 10];
	                        address = this.formatter.address(nameOrAddress);
	                        node = address.substring(2).toLowerCase() + ".addr.reverse";
	                        return [4 /*yield*/, this._getResolver(node, "getAvatar")];
	                    case 1:
	                        resolverAddress = _b.sent();
	                        if (!resolverAddress) {
	                            return [2 /*return*/, null];
	                        }
	                        // Try resolving the avatar against the addr.reverse resolver
	                        resolver = new Resolver(this, resolverAddress, node);
	                        _b.label = 2;
	                    case 2:
	                        _b.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, resolver.getAvatar()];
	                    case 3:
	                        avatar_1 = _b.sent();
	                        if (avatar_1) {
	                            return [2 /*return*/, avatar_1.url];
	                        }
	                        return [3 /*break*/, 5];
	                    case 4:
	                        error_11 = _b.sent();
	                        if (error_11.code !== logger_1$f.Logger.errors.CALL_EXCEPTION) {
	                            throw error_11;
	                        }
	                        return [3 /*break*/, 5];
	                    case 5:
	                        _b.trys.push([5, 8, , 9]);
	                        _a = _parseString;
	                        return [4 /*yield*/, this.call({
	                                to: resolverAddress,
	                                data: ("0x691f3431" + (0, hash_1$1.namehash)(node).substring(2))
	                            })];
	                    case 6:
	                        name_1 = _a.apply(void 0, [_b.sent(), 0]);
	                        return [4 /*yield*/, this.getResolver(name_1)];
	                    case 7:
	                        resolver = _b.sent();
	                        return [3 /*break*/, 9];
	                    case 8:
	                        error_12 = _b.sent();
	                        if (error_12.code !== logger_1$f.Logger.errors.CALL_EXCEPTION) {
	                            throw error_12;
	                        }
	                        return [2 /*return*/, null];
	                    case 9: return [3 /*break*/, 12];
	                    case 10: return [4 /*yield*/, this.getResolver(nameOrAddress)];
	                    case 11:
	                        // ENS name; forward lookup with wildcard
	                        resolver = _b.sent();
	                        if (!resolver) {
	                            return [2 /*return*/, null];
	                        }
	                        _b.label = 12;
	                    case 12: return [4 /*yield*/, resolver.getAvatar()];
	                    case 13:
	                        avatar = _b.sent();
	                        if (avatar == null) {
	                            return [2 /*return*/, null];
	                        }
	                        return [2 /*return*/, avatar.url];
	                }
	            });
	        });
	    };
	    BaseProvider.prototype.perform = function (method, params) {
	        return logger$e.throwError(method + " not implemented", logger_1$f.Logger.errors.NOT_IMPLEMENTED, { operation: method });
	    };
	    BaseProvider.prototype._startEvent = function (event) {
	        this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);
	    };
	    BaseProvider.prototype._stopEvent = function (event) {
	        this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);
	    };
	    BaseProvider.prototype._addEventListener = function (eventName, listener, once) {
	        var event = new Event(getEventTag(eventName), listener, once);
	        this._events.push(event);
	        this._startEvent(event);
	        return this;
	    };
	    BaseProvider.prototype.on = function (eventName, listener) {
	        return this._addEventListener(eventName, listener, false);
	    };
	    BaseProvider.prototype.once = function (eventName, listener) {
	        return this._addEventListener(eventName, listener, true);
	    };
	    BaseProvider.prototype.emit = function (eventName) {
	        var _this = this;
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var result = false;
	        var stopped = [];
	        var eventTag = getEventTag(eventName);
	        this._events = this._events.filter(function (event) {
	            if (event.tag !== eventTag) {
	                return true;
	            }
	            setTimeout(function () {
	                event.listener.apply(_this, args);
	            }, 0);
	            result = true;
	            if (event.once) {
	                stopped.push(event);
	                return false;
	            }
	            return true;
	        });
	        stopped.forEach(function (event) { _this._stopEvent(event); });
	        return result;
	    };
	    BaseProvider.prototype.listenerCount = function (eventName) {
	        if (!eventName) {
	            return this._events.length;
	        }
	        var eventTag = getEventTag(eventName);
	        return this._events.filter(function (event) {
	            return (event.tag === eventTag);
	        }).length;
	    };
	    BaseProvider.prototype.listeners = function (eventName) {
	        if (eventName == null) {
	            return this._events.map(function (event) { return event.listener; });
	        }
	        var eventTag = getEventTag(eventName);
	        return this._events
	            .filter(function (event) { return (event.tag === eventTag); })
	            .map(function (event) { return event.listener; });
	    };
	    BaseProvider.prototype.off = function (eventName, listener) {
	        var _this = this;
	        if (listener == null) {
	            return this.removeAllListeners(eventName);
	        }
	        var stopped = [];
	        var found = false;
	        var eventTag = getEventTag(eventName);
	        this._events = this._events.filter(function (event) {
	            if (event.tag !== eventTag || event.listener != listener) {
	                return true;
	            }
	            if (found) {
	                return true;
	            }
	            found = true;
	            stopped.push(event);
	            return false;
	        });
	        stopped.forEach(function (event) { _this._stopEvent(event); });
	        return this;
	    };
	    BaseProvider.prototype.removeAllListeners = function (eventName) {
	        var _this = this;
	        var stopped = [];
	        if (eventName == null) {
	            stopped = this._events;
	            this._events = [];
	        }
	        else {
	            var eventTag_1 = getEventTag(eventName);
	            this._events = this._events.filter(function (event) {
	                if (event.tag !== eventTag_1) {
	                    return true;
	                }
	                stopped.push(event);
	                return false;
	            });
	        }
	        stopped.forEach(function (event) { _this._stopEvent(event); });
	        return this;
	    };
	    return BaseProvider;
	}(abstract_provider_1$1.Provider));
	BaseProvider_1 = baseProvider.BaseProvider = BaseProvider;

	var alchemyProvider = {};

	var websocketProvider = {};

	var jsonRpcProvider = {};

	"use strict";
	var __extends$i = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$g = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$g = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(jsonRpcProvider, "__esModule", { value: true });
	var JsonRpcProvider_1 = jsonRpcProvider.JsonRpcProvider = JsonRpcSigner_1 = jsonRpcProvider.JsonRpcSigner = void 0;
	var abstract_signer_1 = lib$f;
	var bignumber_1$4 = lib$s;
	var bytes_1$3 = lib$r;
	var hash_1 = lib$j;
	var properties_1$8 = lib$p;
	var strings_1$1 = lib$k;
	var transactions_1$1 = lib$e;
	var web_1$3 = lib$2;
	var logger_1$e = lib$q;
	var _version_1$e = _version$3;
	var logger$d = new logger_1$e.Logger(_version_1$e.version);
	var base_provider_1$2 = baseProvider;
	var errorGas = ["call", "estimateGas"];
	function spelunk(value, requireData) {
	    if (value == null) {
	        return null;
	    }
	    // These *are* the droids we're looking for.
	    if (typeof (value.message) === "string" && value.message.match("reverted")) {
	        var data = (0, bytes_1$3.isHexString)(value.data) ? value.data : null;
	        if (!requireData || data) {
	            return { message: value.message, data: data };
	        }
	    }
	    // Spelunk further...
	    if (typeof (value) === "object") {
	        for (var key in value) {
	            var result = spelunk(value[key], requireData);
	            if (result) {
	                return result;
	            }
	        }
	        return null;
	    }
	    // Might be a JSON string we can further descend...
	    if (typeof (value) === "string") {
	        try {
	            return spelunk(JSON.parse(value), requireData);
	        }
	        catch (error) { }
	    }
	    return null;
	}
	function checkError$1(method, error, params) {
	    var transaction = params.transaction || params.signedTransaction;
	    // Undo the "convenience" some nodes are attempting to prevent backwards
	    // incompatibility; maybe for v6 consider forwarding reverts as errors
	    if (method === "call") {
	        var result = spelunk(error, true);
	        if (result) {
	            return result.data;
	        }
	        // Nothing descriptive..
	        logger$d.throwError("missing revert data in call exception; Transaction reverted without a reason string", logger_1$e.Logger.errors.CALL_EXCEPTION, {
	            data: "0x",
	            transaction: transaction,
	            error: error
	        });
	    }
	    if (method === "estimateGas") {
	        // Try to find something, with a preference on SERVER_ERROR body
	        var result = spelunk(error.body, false);
	        if (result == null) {
	            result = spelunk(error, false);
	        }
	        // Found "reverted", this is a CALL_EXCEPTION
	        if (result) {
	            logger$d.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1$e.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
	                reason: result.message,
	                method: method,
	                transaction: transaction,
	                error: error
	            });
	        }
	    }
	    // @TODO: Should we spelunk for message too?
	    var message = error.message;
	    if (error.code === logger_1$e.Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
	        message = error.error.message;
	    }
	    else if (typeof (error.body) === "string") {
	        message = error.body;
	    }
	    else if (typeof (error.responseText) === "string") {
	        message = error.responseText;
	    }
	    message = (message || "").toLowerCase();
	    // "insufficient funds for gas * price + value + cost(data)"
	    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
	        logger$d.throwError("insufficient funds for intrinsic transaction cost", logger_1$e.Logger.errors.INSUFFICIENT_FUNDS, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "nonce too low"
	    if (message.match(/nonce (is )?too low/i)) {
	        logger$d.throwError("nonce has already been used", logger_1$e.Logger.errors.NONCE_EXPIRED, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "replacement transaction underpriced"
	    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
	        logger$d.throwError("replacement fee too low", logger_1$e.Logger.errors.REPLACEMENT_UNDERPRICED, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "replacement transaction underpriced"
	    if (message.match(/only replay-protected/i)) {
	        logger$d.throwError("legacy pre-eip-155 transactions not supported", logger_1$e.Logger.errors.UNSUPPORTED_OPERATION, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
	        logger$d.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1$e.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    throw error;
	}
	function timer(timeout) {
	    return new Promise(function (resolve) {
	        setTimeout(resolve, timeout);
	    });
	}
	function getResult$1(payload) {
	    if (payload.error) {
	        // @TODO: not any
	        var error = new Error(payload.error.message);
	        error.code = payload.error.code;
	        error.data = payload.error.data;
	        throw error;
	    }
	    return payload.result;
	}
	function getLowerCase(value) {
	    if (value) {
	        return value.toLowerCase();
	    }
	    return value;
	}
	var _constructorGuard = {};
	var JsonRpcSigner = /** @class */ (function (_super) {
	    __extends$i(JsonRpcSigner, _super);
	    function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {
	        var _this = _super.call(this) || this;
	        if (constructorGuard !== _constructorGuard) {
	            throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
	        }
	        (0, properties_1$8.defineReadOnly)(_this, "provider", provider);
	        if (addressOrIndex == null) {
	            addressOrIndex = 0;
	        }
	        if (typeof (addressOrIndex) === "string") {
	            (0, properties_1$8.defineReadOnly)(_this, "_address", _this.provider.formatter.address(addressOrIndex));
	            (0, properties_1$8.defineReadOnly)(_this, "_index", null);
	        }
	        else if (typeof (addressOrIndex) === "number") {
	            (0, properties_1$8.defineReadOnly)(_this, "_index", addressOrIndex);
	            (0, properties_1$8.defineReadOnly)(_this, "_address", null);
	        }
	        else {
	            logger$d.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
	        }
	        return _this;
	    }
	    JsonRpcSigner.prototype.connect = function (provider) {
	        return logger$d.throwError("cannot alter JSON-RPC Signer connection", logger_1$e.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "connect"
	        });
	    };
	    JsonRpcSigner.prototype.connectUnchecked = function () {
	        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
	    };
	    JsonRpcSigner.prototype.getAddress = function () {
	        var _this = this;
	        if (this._address) {
	            return Promise.resolve(this._address);
	        }
	        return this.provider.send("eth_accounts", []).then(function (accounts) {
	            if (accounts.length <= _this._index) {
	                logger$d.throwError("unknown account #" + _this._index, logger_1$e.Logger.errors.UNSUPPORTED_OPERATION, {
	                    operation: "getAddress"
	                });
	            }
	            return _this.provider.formatter.address(accounts[_this._index]);
	        });
	    };
	    JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {
	        var _this = this;
	        transaction = (0, properties_1$8.shallowCopy)(transaction);
	        var fromAddress = this.getAddress().then(function (address) {
	            if (address) {
	                address = address.toLowerCase();
	            }
	            return address;
	        });
	        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
	        // wishes to use this, it is easy to specify explicitly, otherwise
	        // we look it up for them.
	        if (transaction.gasLimit == null) {
	            var estimate = (0, properties_1$8.shallowCopy)(transaction);
	            estimate.from = fromAddress;
	            transaction.gasLimit = this.provider.estimateGas(estimate);
	        }
	        if (transaction.to != null) {
	            transaction.to = Promise.resolve(transaction.to).then(function (to) { return __awaiter$g(_this, void 0, void 0, function () {
	                var address;
	                return __generator$g(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            if (to == null) {
	                                return [2 /*return*/, null];
	                            }
	                            return [4 /*yield*/, this.provider.resolveName(to)];
	                        case 1:
	                            address = _a.sent();
	                            if (address == null) {
	                                logger$d.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
	                            }
	                            return [2 /*return*/, address];
	                    }
	                });
	            }); });
	        }
	        return (0, properties_1$8.resolveProperties)({
	            tx: (0, properties_1$8.resolveProperties)(transaction),
	            sender: fromAddress
	        }).then(function (_a) {
	            var tx = _a.tx, sender = _a.sender;
	            if (tx.from != null) {
	                if (tx.from.toLowerCase() !== sender) {
	                    logger$d.throwArgumentError("from address mismatch", "transaction", transaction);
	                }
	            }
	            else {
	                tx.from = sender;
	            }
	            var hexTx = _this.provider.constructor.hexlifyTransaction(tx, { from: true });
	            return _this.provider.send("eth_sendTransaction", [hexTx]).then(function (hash) {
	                return hash;
	            }, function (error) {
	                if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
	                    logger$d.throwError("user rejected transaction", logger_1$e.Logger.errors.ACTION_REJECTED, {
	                        action: "sendTransaction",
	                        transaction: tx
	                    });
	                }
	                return checkError$1("sendTransaction", error, hexTx);
	            });
	        });
	    };
	    JsonRpcSigner.prototype.signTransaction = function (transaction) {
	        return logger$d.throwError("signing transactions is unsupported", logger_1$e.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "signTransaction"
	        });
	    };
	    JsonRpcSigner.prototype.sendTransaction = function (transaction) {
	        return __awaiter$g(this, void 0, void 0, function () {
	            var blockNumber, hash, error_1;
	            var _this = this;
	            return __generator$g(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval)];
	                    case 1:
	                        blockNumber = _a.sent();
	                        return [4 /*yield*/, this.sendUncheckedTransaction(transaction)];
	                    case 2:
	                        hash = _a.sent();
	                        _a.label = 3;
	                    case 3:
	                        _a.trys.push([3, 5, , 6]);
	                        return [4 /*yield*/, (0, web_1$3.poll)(function () { return __awaiter$g(_this, void 0, void 0, function () {
	                                var tx;
	                                return __generator$g(this, function (_a) {
	                                    switch (_a.label) {
	                                        case 0: return [4 /*yield*/, this.provider.getTransaction(hash)];
	                                        case 1:
	                                            tx = _a.sent();
	                                            if (tx === null) {
	                                                return [2 /*return*/, undefined];
	                                            }
	                                            return [2 /*return*/, this.provider._wrapTransaction(tx, hash, blockNumber)];
	                                    }
	                                });
	                            }); }, { oncePoll: this.provider })];
	                    case 4: 
	                    // Unfortunately, JSON-RPC only provides and opaque transaction hash
	                    // for a response, and we need the actual transaction, so we poll
	                    // for it; it should show up very quickly
	                    return [2 /*return*/, _a.sent()];
	                    case 5:
	                        error_1 = _a.sent();
	                        error_1.transactionHash = hash;
	                        throw error_1;
	                    case 6: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcSigner.prototype.signMessage = function (message) {
	        return __awaiter$g(this, void 0, void 0, function () {
	            var data, address, error_2;
	            return __generator$g(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        data = ((typeof (message) === "string") ? (0, strings_1$1.toUtf8Bytes)(message) : message);
	                        return [4 /*yield*/, this.getAddress()];
	                    case 1:
	                        address = _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, this.provider.send("personal_sign", [(0, bytes_1$3.hexlify)(data), address.toLowerCase()])];
	                    case 3: return [2 /*return*/, _a.sent()];
	                    case 4:
	                        error_2 = _a.sent();
	                        if (typeof (error_2.message) === "string" && error_2.message.match(/user denied/i)) {
	                            logger$d.throwError("user rejected signing", logger_1$e.Logger.errors.ACTION_REJECTED, {
	                                action: "signMessage",
	                                from: address,
	                                messageData: message
	                            });
	                        }
	                        throw error_2;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcSigner.prototype._legacySignMessage = function (message) {
	        return __awaiter$g(this, void 0, void 0, function () {
	            var data, address, error_3;
	            return __generator$g(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        data = ((typeof (message) === "string") ? (0, strings_1$1.toUtf8Bytes)(message) : message);
	                        return [4 /*yield*/, this.getAddress()];
	                    case 1:
	                        address = _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, this.provider.send("eth_sign", [address.toLowerCase(), (0, bytes_1$3.hexlify)(data)])];
	                    case 3: 
	                    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
	                    return [2 /*return*/, _a.sent()];
	                    case 4:
	                        error_3 = _a.sent();
	                        if (typeof (error_3.message) === "string" && error_3.message.match(/user denied/i)) {
	                            logger$d.throwError("user rejected signing", logger_1$e.Logger.errors.ACTION_REJECTED, {
	                                action: "_legacySignMessage",
	                                from: address,
	                                messageData: message
	                            });
	                        }
	                        throw error_3;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcSigner.prototype._signTypedData = function (domain, types, value) {
	        return __awaiter$g(this, void 0, void 0, function () {
	            var populated, address, error_4;
	            var _this = this;
	            return __generator$g(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, hash_1._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
	                            return _this.provider.resolveName(name);
	                        })];
	                    case 1:
	                        populated = _a.sent();
	                        return [4 /*yield*/, this.getAddress()];
	                    case 2:
	                        address = _a.sent();
	                        _a.label = 3;
	                    case 3:
	                        _a.trys.push([3, 5, , 6]);
	                        return [4 /*yield*/, this.provider.send("eth_signTypedData_v4", [
	                                address.toLowerCase(),
	                                JSON.stringify(hash_1._TypedDataEncoder.getPayload(populated.domain, types, populated.value))
	                            ])];
	                    case 4: return [2 /*return*/, _a.sent()];
	                    case 5:
	                        error_4 = _a.sent();
	                        if (typeof (error_4.message) === "string" && error_4.message.match(/user denied/i)) {
	                            logger$d.throwError("user rejected signing", logger_1$e.Logger.errors.ACTION_REJECTED, {
	                                action: "_signTypedData",
	                                from: address,
	                                messageData: { domain: populated.domain, types: types, value: populated.value }
	                            });
	                        }
	                        throw error_4;
	                    case 6: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcSigner.prototype.unlock = function (password) {
	        return __awaiter$g(this, void 0, void 0, function () {
	            var provider, address;
	            return __generator$g(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        provider = this.provider;
	                        return [4 /*yield*/, this.getAddress()];
	                    case 1:
	                        address = _a.sent();
	                        return [2 /*return*/, provider.send("personal_unlockAccount", [address.toLowerCase(), password, null])];
	                }
	            });
	        });
	    };
	    return JsonRpcSigner;
	}(abstract_signer_1.Signer));
	var JsonRpcSigner_1 = jsonRpcProvider.JsonRpcSigner = JsonRpcSigner;
	var UncheckedJsonRpcSigner = /** @class */ (function (_super) {
	    __extends$i(UncheckedJsonRpcSigner, _super);
	    function UncheckedJsonRpcSigner() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    UncheckedJsonRpcSigner.prototype.sendTransaction = function (transaction) {
	        var _this = this;
	        return this.sendUncheckedTransaction(transaction).then(function (hash) {
	            return {
	                hash: hash,
	                nonce: null,
	                gasLimit: null,
	                gasPrice: null,
	                data: null,
	                value: null,
	                chainId: null,
	                confirmations: 0,
	                from: null,
	                wait: function (confirmations) { return _this.provider.waitForTransaction(hash, confirmations); }
	            };
	        });
	    };
	    return UncheckedJsonRpcSigner;
	}(JsonRpcSigner));
	var allowedTransactionKeys = {
	    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
	    type: true, accessList: true,
	    maxFeePerGas: true, maxPriorityFeePerGas: true
	};
	var JsonRpcProvider = /** @class */ (function (_super) {
	    __extends$i(JsonRpcProvider, _super);
	    function JsonRpcProvider(url, network) {
	        var _this = this;
	        var networkOrReady = network;
	        // The network is unknown, query the JSON-RPC for it
	        if (networkOrReady == null) {
	            networkOrReady = new Promise(function (resolve, reject) {
	                setTimeout(function () {
	                    _this.detectNetwork().then(function (network) {
	                        resolve(network);
	                    }, function (error) {
	                        reject(error);
	                    });
	                }, 0);
	            });
	        }
	        _this = _super.call(this, networkOrReady) || this;
	        // Default URL
	        if (!url) {
	            url = (0, properties_1$8.getStatic)(_this.constructor, "defaultUrl")();
	        }
	        if (typeof (url) === "string") {
	            (0, properties_1$8.defineReadOnly)(_this, "connection", Object.freeze({
	                url: url
	            }));
	        }
	        else {
	            (0, properties_1$8.defineReadOnly)(_this, "connection", Object.freeze((0, properties_1$8.shallowCopy)(url)));
	        }
	        _this._nextId = 42;
	        return _this;
	    }
	    Object.defineProperty(JsonRpcProvider.prototype, "_cache", {
	        get: function () {
	            if (this._eventLoopCache == null) {
	                this._eventLoopCache = {};
	            }
	            return this._eventLoopCache;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    JsonRpcProvider.defaultUrl = function () {
	        return "http:/\/localhost:8545";
	    };
	    JsonRpcProvider.prototype.detectNetwork = function () {
	        var _this = this;
	        if (!this._cache["detectNetwork"]) {
	            this._cache["detectNetwork"] = this._uncachedDetectNetwork();
	            // Clear this cache at the beginning of the next event loop
	            setTimeout(function () {
	                _this._cache["detectNetwork"] = null;
	            }, 0);
	        }
	        return this._cache["detectNetwork"];
	    };
	    JsonRpcProvider.prototype._uncachedDetectNetwork = function () {
	        return __awaiter$g(this, void 0, void 0, function () {
	            var chainId, error_5, error_6, getNetwork;
	            return __generator$g(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, timer(0)];
	                    case 1:
	                        _a.sent();
	                        chainId = null;
	                        _a.label = 2;
	                    case 2:
	                        _a.trys.push([2, 4, , 9]);
	                        return [4 /*yield*/, this.send("eth_chainId", [])];
	                    case 3:
	                        chainId = _a.sent();
	                        return [3 /*break*/, 9];
	                    case 4:
	                        error_5 = _a.sent();
	                        _a.label = 5;
	                    case 5:
	                        _a.trys.push([5, 7, , 8]);
	                        return [4 /*yield*/, this.send("net_version", [])];
	                    case 6:
	                        chainId = _a.sent();
	                        return [3 /*break*/, 8];
	                    case 7:
	                        error_6 = _a.sent();
	                        return [3 /*break*/, 8];
	                    case 8: return [3 /*break*/, 9];
	                    case 9:
	                        if (chainId != null) {
	                            getNetwork = (0, properties_1$8.getStatic)(this.constructor, "getNetwork");
	                            try {
	                                return [2 /*return*/, getNetwork(bignumber_1$4.BigNumber.from(chainId).toNumber())];
	                            }
	                            catch (error) {
	                                return [2 /*return*/, logger$d.throwError("could not detect network", logger_1$e.Logger.errors.NETWORK_ERROR, {
	                                        chainId: chainId,
	                                        event: "invalidNetwork",
	                                        serverError: error
	                                    })];
	                            }
	                        }
	                        return [2 /*return*/, logger$d.throwError("could not detect network", logger_1$e.Logger.errors.NETWORK_ERROR, {
	                                event: "noNetwork"
	                            })];
	                }
	            });
	        });
	    };
	    JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {
	        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
	    };
	    JsonRpcProvider.prototype.getUncheckedSigner = function (addressOrIndex) {
	        return this.getSigner(addressOrIndex).connectUnchecked();
	    };
	    JsonRpcProvider.prototype.listAccounts = function () {
	        var _this = this;
	        return this.send("eth_accounts", []).then(function (accounts) {
	            return accounts.map(function (a) { return _this.formatter.address(a); });
	        });
	    };
	    JsonRpcProvider.prototype.send = function (method, params) {
	        var _this = this;
	        var request = {
	            method: method,
	            params: params,
	            id: (this._nextId++),
	            jsonrpc: "2.0"
	        };
	        this.emit("debug", {
	            action: "request",
	            request: (0, properties_1$8.deepCopy)(request),
	            provider: this
	        });
	        // We can expand this in the future to any call, but for now these
	        // are the biggest wins and do not require any serializing parameters.
	        var cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
	        if (cache && this._cache[method]) {
	            return this._cache[method];
	        }
	        var result = (0, web_1$3.fetchJson)(this.connection, JSON.stringify(request), getResult$1).then(function (result) {
	            _this.emit("debug", {
	                action: "response",
	                request: request,
	                response: result,
	                provider: _this
	            });
	            return result;
	        }, function (error) {
	            _this.emit("debug", {
	                action: "response",
	                error: error,
	                request: request,
	                provider: _this
	            });
	            throw error;
	        });
	        // Cache the fetch, but clear it on the next event loop
	        if (cache) {
	            this._cache[method] = result;
	            setTimeout(function () {
	                _this._cache[method] = null;
	            }, 0);
	        }
	        return result;
	    };
	    JsonRpcProvider.prototype.prepareRequest = function (method, params) {
	        switch (method) {
	            case "getBlockNumber":
	                return ["eth_blockNumber", []];
	            case "getGasPrice":
	                return ["eth_gasPrice", []];
	            case "getBalance":
	                return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
	            case "getTransactionCount":
	                return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
	            case "getCode":
	                return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
	            case "getStorageAt":
	                return ["eth_getStorageAt", [getLowerCase(params.address), (0, bytes_1$3.hexZeroPad)(params.position, 32), params.blockTag]];
	            case "sendTransaction":
	                return ["eth_sendRawTransaction", [params.signedTransaction]];
	            case "getBlock":
	                if (params.blockTag) {
	                    return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
	                }
	                else if (params.blockHash) {
	                    return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
	                }
	                return null;
	            case "getTransaction":
	                return ["eth_getTransactionByHash", [params.transactionHash]];
	            case "getTransactionReceipt":
	                return ["eth_getTransactionReceipt", [params.transactionHash]];
	            case "call": {
	                var hexlifyTransaction = (0, properties_1$8.getStatic)(this.constructor, "hexlifyTransaction");
	                return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
	            }
	            case "estimateGas": {
	                var hexlifyTransaction = (0, properties_1$8.getStatic)(this.constructor, "hexlifyTransaction");
	                return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
	            }
	            case "getLogs":
	                if (params.filter && params.filter.address != null) {
	                    params.filter.address = getLowerCase(params.filter.address);
	                }
	                return ["eth_getLogs", [params.filter]];
	            default:
	                break;
	        }
	        return null;
	    };
	    JsonRpcProvider.prototype.perform = function (method, params) {
	        return __awaiter$g(this, void 0, void 0, function () {
	            var tx, feeData, args, error_7;
	            return __generator$g(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(method === "call" || method === "estimateGas")) return [3 /*break*/, 2];
	                        tx = params.transaction;
	                        if (!(tx && tx.type != null && bignumber_1$4.BigNumber.from(tx.type).isZero())) return [3 /*break*/, 2];
	                        if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.getFeeData()];
	                    case 1:
	                        feeData = _a.sent();
	                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
	                            // Network doesn't know about EIP-1559 (and hence type)
	                            params = (0, properties_1$8.shallowCopy)(params);
	                            params.transaction = (0, properties_1$8.shallowCopy)(tx);
	                            delete params.transaction.type;
	                        }
	                        _a.label = 2;
	                    case 2:
	                        args = this.prepareRequest(method, params);
	                        if (args == null) {
	                            logger$d.throwError(method + " not implemented", logger_1$e.Logger.errors.NOT_IMPLEMENTED, { operation: method });
	                        }
	                        _a.label = 3;
	                    case 3:
	                        _a.trys.push([3, 5, , 6]);
	                        return [4 /*yield*/, this.send(args[0], args[1])];
	                    case 4: return [2 /*return*/, _a.sent()];
	                    case 5:
	                        error_7 = _a.sent();
	                        return [2 /*return*/, checkError$1(method, error_7, params)];
	                    case 6: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    JsonRpcProvider.prototype._startEvent = function (event) {
	        if (event.tag === "pending") {
	            this._startPending();
	        }
	        _super.prototype._startEvent.call(this, event);
	    };
	    JsonRpcProvider.prototype._startPending = function () {
	        if (this._pendingFilter != null) {
	            return;
	        }
	        var self = this;
	        var pendingFilter = this.send("eth_newPendingTransactionFilter", []);
	        this._pendingFilter = pendingFilter;
	        pendingFilter.then(function (filterId) {
	            function poll() {
	                self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
	                    if (self._pendingFilter != pendingFilter) {
	                        return null;
	                    }
	                    var seq = Promise.resolve();
	                    hashes.forEach(function (hash) {
	                        // @TODO: This should be garbage collected at some point... How? When?
	                        self._emitted["t:" + hash.toLowerCase()] = "pending";
	                        seq = seq.then(function () {
	                            return self.getTransaction(hash).then(function (tx) {
	                                self.emit("pending", tx);
	                                return null;
	                            });
	                        });
	                    });
	                    return seq.then(function () {
	                        return timer(1000);
	                    });
	                }).then(function () {
	                    if (self._pendingFilter != pendingFilter) {
	                        self.send("eth_uninstallFilter", [filterId]);
	                        return;
	                    }
	                    setTimeout(function () { poll(); }, 0);
	                    return null;
	                }).catch(function (error) { });
	            }
	            poll();
	            return filterId;
	        }).catch(function (error) { });
	    };
	    JsonRpcProvider.prototype._stopEvent = function (event) {
	        if (event.tag === "pending" && this.listenerCount("pending") === 0) {
	            this._pendingFilter = null;
	        }
	        _super.prototype._stopEvent.call(this, event);
	    };
	    // Convert an ethers.js transaction into a JSON-RPC transaction
	    //  - gasLimit => gas
	    //  - All values hexlified
	    //  - All numeric values zero-striped
	    //  - All addresses are lowercased
	    // NOTE: This allows a TransactionRequest, but all values should be resolved
	    //       before this is called
	    // @TODO: This will likely be removed in future versions and prepareRequest
	    //        will be the preferred method for this.
	    JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {
	        // Check only allowed properties are given
	        var allowed = (0, properties_1$8.shallowCopy)(allowedTransactionKeys);
	        if (allowExtra) {
	            for (var key in allowExtra) {
	                if (allowExtra[key]) {
	                    allowed[key] = true;
	                }
	            }
	        }
	        (0, properties_1$8.checkProperties)(transaction, allowed);
	        var result = {};
	        // JSON-RPC now requires numeric values to be "quantity" values
	        ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
	            if (transaction[key] == null) {
	                return;
	            }
	            var value = (0, bytes_1$3.hexValue)(bignumber_1$4.BigNumber.from(transaction[key]));
	            if (key === "gasLimit") {
	                key = "gas";
	            }
	            result[key] = value;
	        });
	        ["from", "to", "data"].forEach(function (key) {
	            if (transaction[key] == null) {
	                return;
	            }
	            result[key] = (0, bytes_1$3.hexlify)(transaction[key]);
	        });
	        if (transaction.accessList) {
	            result["accessList"] = (0, transactions_1$1.accessListify)(transaction.accessList);
	        }
	        return result;
	    };
	    return JsonRpcProvider;
	}(base_provider_1$2.BaseProvider));
	JsonRpcProvider_1 = jsonRpcProvider.JsonRpcProvider = JsonRpcProvider;

	var browserWs = {};

	"use strict";
	Object.defineProperty(browserWs, "__esModule", { value: true });
	var WebSocket_1 = browserWs.WebSocket = void 0;
	var logger_1$d = lib$q;
	var _version_1$d = _version$3;
	var WS = null;
	WebSocket_1 = browserWs.WebSocket = WS;
	try {
	    WebSocket_1 = browserWs.WebSocket = WS = WebSocket;
	    if (WS == null) {
	        throw new Error("inject please");
	    }
	}
	catch (error) {
	    var logger_2 = new logger_1$d.Logger(_version_1$d.version);
	    WebSocket_1 = browserWs.WebSocket = WS = function () {
	        logger_2.throwError("WebSockets not supported in this environment", logger_1$d.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "new WebSocket()"
	        });
	    };
	}

	"use strict";
	var __extends$h = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$f = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$f = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(websocketProvider, "__esModule", { value: true });
	var WebSocketProvider_1 = websocketProvider.WebSocketProvider = void 0;
	var bignumber_1$3 = lib$s;
	var properties_1$7 = lib$p;
	var json_rpc_provider_1$3 = jsonRpcProvider;
	var ws_1 = browserWs;
	var logger_1$c = lib$q;
	var _version_1$c = _version$3;
	var logger$c = new logger_1$c.Logger(_version_1$c.version);
	/**
	 *  Notes:
	 *
	 *  This provider differs a bit from the polling providers. One main
	 *  difference is how it handles consistency. The polling providers
	 *  will stall responses to ensure a consistent state, while this
	 *  WebSocket provider assumes the connected backend will manage this.
	 *
	 *  For example, if a polling provider emits an event which indicates
	 *  the event occurred in blockhash XXX, a call to fetch that block by
	 *  its hash XXX, if not present will retry until it is present. This
	 *  can occur when querying a pool of nodes that are mildly out of sync
	 *  with each other.
	 */
	var NextId = 1;
	// For more info about the Real-time Event API see:
	//   https://geth.ethereum.org/docs/rpc/pubsub
	var WebSocketProvider = /** @class */ (function (_super) {
	    __extends$h(WebSocketProvider, _super);
	    function WebSocketProvider(url, network) {
	        var _this = this;
	        // This will be added in the future; please open an issue to expedite
	        if (network === "any") {
	            logger$c.throwError("WebSocketProvider does not support 'any' network yet", logger_1$c.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "network:any"
	            });
	        }
	        if (typeof (url) === "string") {
	            _this = _super.call(this, url, network) || this;
	        }
	        else {
	            _this = _super.call(this, "_websocket", network) || this;
	        }
	        _this._pollingInterval = -1;
	        _this._wsReady = false;
	        if (typeof (url) === "string") {
	            (0, properties_1$7.defineReadOnly)(_this, "_websocket", new ws_1.WebSocket(_this.connection.url));
	        }
	        else {
	            (0, properties_1$7.defineReadOnly)(_this, "_websocket", url);
	        }
	        (0, properties_1$7.defineReadOnly)(_this, "_requests", {});
	        (0, properties_1$7.defineReadOnly)(_this, "_subs", {});
	        (0, properties_1$7.defineReadOnly)(_this, "_subIds", {});
	        (0, properties_1$7.defineReadOnly)(_this, "_detectNetwork", _super.prototype.detectNetwork.call(_this));
	        // Stall sending requests until the socket is open...
	        _this.websocket.onopen = function () {
	            _this._wsReady = true;
	            Object.keys(_this._requests).forEach(function (id) {
	                _this.websocket.send(_this._requests[id].payload);
	            });
	        };
	        _this.websocket.onmessage = function (messageEvent) {
	            var data = messageEvent.data;
	            var result = JSON.parse(data);
	            if (result.id != null) {
	                var id = String(result.id);
	                var request = _this._requests[id];
	                delete _this._requests[id];
	                if (result.result !== undefined) {
	                    request.callback(null, result.result);
	                    _this.emit("debug", {
	                        action: "response",
	                        request: JSON.parse(request.payload),
	                        response: result.result,
	                        provider: _this
	                    });
	                }
	                else {
	                    var error = null;
	                    if (result.error) {
	                        error = new Error(result.error.message || "unknown error");
	                        (0, properties_1$7.defineReadOnly)(error, "code", result.error.code || null);
	                        (0, properties_1$7.defineReadOnly)(error, "response", data);
	                    }
	                    else {
	                        error = new Error("unknown error");
	                    }
	                    request.callback(error, undefined);
	                    _this.emit("debug", {
	                        action: "response",
	                        error: error,
	                        request: JSON.parse(request.payload),
	                        provider: _this
	                    });
	                }
	            }
	            else if (result.method === "eth_subscription") {
	                // Subscription...
	                var sub = _this._subs[result.params.subscription];
	                if (sub) {
	                    //this.emit.apply(this,                  );
	                    sub.processFunc(result.params.result);
	                }
	            }
	            else {
	                console.warn("this should not happen");
	            }
	        };
	        // This Provider does not actually poll, but we want to trigger
	        // poll events for things that depend on them (like stalling for
	        // block and transaction lookups)
	        var fauxPoll = setInterval(function () {
	            _this.emit("poll");
	        }, 1000);
	        if (fauxPoll.unref) {
	            fauxPoll.unref();
	        }
	        return _this;
	    }
	    Object.defineProperty(WebSocketProvider.prototype, "websocket", {
	        // Cannot narrow the type of _websocket, as that is not backwards compatible
	        // so we add a getter and let the WebSocket be a public API.
	        get: function () { return this._websocket; },
	        enumerable: false,
	        configurable: true
	    });
	    WebSocketProvider.prototype.detectNetwork = function () {
	        return this._detectNetwork;
	    };
	    Object.defineProperty(WebSocketProvider.prototype, "pollingInterval", {
	        get: function () {
	            return 0;
	        },
	        set: function (value) {
	            logger$c.throwError("cannot set polling interval on WebSocketProvider", logger_1$c.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setPollingInterval"
	            });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    WebSocketProvider.prototype.resetEventsBlock = function (blockNumber) {
	        logger$c.throwError("cannot reset events block on WebSocketProvider", logger_1$c.Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "resetEventBlock"
	        });
	    };
	    WebSocketProvider.prototype.poll = function () {
	        return __awaiter$f(this, void 0, void 0, function () {
	            return __generator$f(this, function (_a) {
	                return [2 /*return*/, null];
	            });
	        });
	    };
	    Object.defineProperty(WebSocketProvider.prototype, "polling", {
	        set: function (value) {
	            if (!value) {
	                return;
	            }
	            logger$c.throwError("cannot set polling on WebSocketProvider", logger_1$c.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setPolling"
	            });
	        },
	        enumerable: false,
	        configurable: true
	    });
	    WebSocketProvider.prototype.send = function (method, params) {
	        var _this = this;
	        var rid = NextId++;
	        return new Promise(function (resolve, reject) {
	            function callback(error, result) {
	                if (error) {
	                    return reject(error);
	                }
	                return resolve(result);
	            }
	            var payload = JSON.stringify({
	                method: method,
	                params: params,
	                id: rid,
	                jsonrpc: "2.0"
	            });
	            _this.emit("debug", {
	                action: "request",
	                request: JSON.parse(payload),
	                provider: _this
	            });
	            _this._requests[String(rid)] = { callback: callback, payload: payload };
	            if (_this._wsReady) {
	                _this.websocket.send(payload);
	            }
	        });
	    };
	    WebSocketProvider.defaultUrl = function () {
	        return "ws:/\/localhost:8546";
	    };
	    WebSocketProvider.prototype._subscribe = function (tag, param, processFunc) {
	        return __awaiter$f(this, void 0, void 0, function () {
	            var subIdPromise, subId;
	            var _this = this;
	            return __generator$f(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        subIdPromise = this._subIds[tag];
	                        if (subIdPromise == null) {
	                            subIdPromise = Promise.all(param).then(function (param) {
	                                return _this.send("eth_subscribe", param);
	                            });
	                            this._subIds[tag] = subIdPromise;
	                        }
	                        return [4 /*yield*/, subIdPromise];
	                    case 1:
	                        subId = _a.sent();
	                        this._subs[subId] = { tag: tag, processFunc: processFunc };
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    WebSocketProvider.prototype._startEvent = function (event) {
	        var _this = this;
	        switch (event.type) {
	            case "block":
	                this._subscribe("block", ["newHeads"], function (result) {
	                    var blockNumber = bignumber_1$3.BigNumber.from(result.number).toNumber();
	                    _this._emitted.block = blockNumber;
	                    _this.emit("block", blockNumber);
	                });
	                break;
	            case "pending":
	                this._subscribe("pending", ["newPendingTransactions"], function (result) {
	                    _this.emit("pending", result);
	                });
	                break;
	            case "filter":
	                this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], function (result) {
	                    if (result.removed == null) {
	                        result.removed = false;
	                    }
	                    _this.emit(event.filter, _this.formatter.filterLog(result));
	                });
	                break;
	            case "tx": {
	                var emitReceipt_1 = function (event) {
	                    var hash = event.hash;
	                    _this.getTransactionReceipt(hash).then(function (receipt) {
	                        if (!receipt) {
	                            return;
	                        }
	                        _this.emit(hash, receipt);
	                    });
	                };
	                // In case it is already mined
	                emitReceipt_1(event);
	                // To keep things simple, we start up a single newHeads subscription
	                // to keep an eye out for transactions we are watching for.
	                // Starting a subscription for an event (i.e. "tx") that is already
	                // running is (basically) a nop.
	                this._subscribe("tx", ["newHeads"], function (result) {
	                    _this._events.filter(function (e) { return (e.type === "tx"); }).forEach(emitReceipt_1);
	                });
	                break;
	            }
	            // Nothing is needed
	            case "debug":
	            case "poll":
	            case "willPoll":
	            case "didPoll":
	            case "error":
	                break;
	            default:
	                console.log("unhandled:", event);
	                break;
	        }
	    };
	    WebSocketProvider.prototype._stopEvent = function (event) {
	        var _this = this;
	        var tag = event.tag;
	        if (event.type === "tx") {
	            // There are remaining transaction event listeners
	            if (this._events.filter(function (e) { return (e.type === "tx"); }).length) {
	                return;
	            }
	            tag = "tx";
	        }
	        else if (this.listenerCount(event.event)) {
	            // There are remaining event listeners
	            return;
	        }
	        var subId = this._subIds[tag];
	        if (!subId) {
	            return;
	        }
	        delete this._subIds[tag];
	        subId.then(function (subId) {
	            if (!_this._subs[subId]) {
	                return;
	            }
	            delete _this._subs[subId];
	            _this.send("eth_unsubscribe", [subId]);
	        });
	    };
	    WebSocketProvider.prototype.destroy = function () {
	        return __awaiter$f(this, void 0, void 0, function () {
	            var _this = this;
	            return __generator$f(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(this.websocket.readyState === ws_1.WebSocket.CONNECTING)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, (new Promise(function (resolve) {
	                                _this.websocket.onopen = function () {
	                                    resolve(true);
	                                };
	                                _this.websocket.onerror = function () {
	                                    resolve(false);
	                                };
	                            }))];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        // Hangup
	                        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
	                        this.websocket.close(1000);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return WebSocketProvider;
	}(json_rpc_provider_1$3.JsonRpcProvider));
	WebSocketProvider_1 = websocketProvider.WebSocketProvider = WebSocketProvider;

	var urlJsonRpcProvider = {};

	"use strict";
	var __extends$g = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$e = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$e = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(urlJsonRpcProvider, "__esModule", { value: true });
	var UrlJsonRpcProvider_1 = urlJsonRpcProvider.UrlJsonRpcProvider = StaticJsonRpcProvider_1 = urlJsonRpcProvider.StaticJsonRpcProvider = void 0;
	var properties_1$6 = lib$p;
	var logger_1$b = lib$q;
	var _version_1$b = _version$3;
	var logger$b = new logger_1$b.Logger(_version_1$b.version);
	var json_rpc_provider_1$2 = jsonRpcProvider;
	// A StaticJsonRpcProvider is useful when you *know* for certain that
	// the backend will never change, as it never calls eth_chainId to
	// verify its backend. However, if the backend does change, the effects
	// are undefined and may include:
	// - inconsistent results
	// - locking up the UI
	// - block skew warnings
	// - wrong results
	// If the network is not explicit (i.e. auto-detection is expected), the
	// node MUST be running and available to respond to requests BEFORE this
	// is instantiated.
	var StaticJsonRpcProvider = /** @class */ (function (_super) {
	    __extends$g(StaticJsonRpcProvider, _super);
	    function StaticJsonRpcProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    StaticJsonRpcProvider.prototype.detectNetwork = function () {
	        return __awaiter$e(this, void 0, void 0, function () {
	            var network;
	            return __generator$e(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        network = this.network;
	                        if (!(network == null)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, _super.prototype.detectNetwork.call(this)];
	                    case 1:
	                        network = _a.sent();
	                        if (!network) {
	                            logger$b.throwError("no network detected", logger_1$b.Logger.errors.UNKNOWN_ERROR, {});
	                        }
	                        // If still not set, set it
	                        if (this._network == null) {
	                            // A static network does not support "any"
	                            (0, properties_1$6.defineReadOnly)(this, "_network", network);
	                            this.emit("network", network, null);
	                        }
	                        _a.label = 2;
	                    case 2: return [2 /*return*/, network];
	                }
	            });
	        });
	    };
	    return StaticJsonRpcProvider;
	}(json_rpc_provider_1$2.JsonRpcProvider));
	var StaticJsonRpcProvider_1 = urlJsonRpcProvider.StaticJsonRpcProvider = StaticJsonRpcProvider;
	var UrlJsonRpcProvider = /** @class */ (function (_super) {
	    __extends$g(UrlJsonRpcProvider, _super);
	    function UrlJsonRpcProvider(network, apiKey) {
	        var _newTarget = this.constructor;
	        var _this = this;
	        logger$b.checkAbstract(_newTarget, UrlJsonRpcProvider);
	        // Normalize the Network and API Key
	        network = (0, properties_1$6.getStatic)(_newTarget, "getNetwork")(network);
	        apiKey = (0, properties_1$6.getStatic)(_newTarget, "getApiKey")(apiKey);
	        var connection = (0, properties_1$6.getStatic)(_newTarget, "getUrl")(network, apiKey);
	        _this = _super.call(this, connection, network) || this;
	        if (typeof (apiKey) === "string") {
	            (0, properties_1$6.defineReadOnly)(_this, "apiKey", apiKey);
	        }
	        else if (apiKey != null) {
	            Object.keys(apiKey).forEach(function (key) {
	                (0, properties_1$6.defineReadOnly)(_this, key, apiKey[key]);
	            });
	        }
	        return _this;
	    }
	    UrlJsonRpcProvider.prototype._startPending = function () {
	        logger$b.warn("WARNING: API provider does not support pending filters");
	    };
	    UrlJsonRpcProvider.prototype.isCommunityResource = function () {
	        return false;
	    };
	    UrlJsonRpcProvider.prototype.getSigner = function (address) {
	        return logger$b.throwError("API provider does not support signing", logger_1$b.Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
	    };
	    UrlJsonRpcProvider.prototype.listAccounts = function () {
	        return Promise.resolve([]);
	    };
	    // Return a defaultApiKey if null, otherwise validate the API key
	    UrlJsonRpcProvider.getApiKey = function (apiKey) {
	        return apiKey;
	    };
	    // Returns the url or connection for the given network and API key. The
	    // API key will have been sanitized by the getApiKey first, so any validation
	    // or transformations can be done there.
	    UrlJsonRpcProvider.getUrl = function (network, apiKey) {
	        return logger$b.throwError("not implemented; sub-classes must override getUrl", logger_1$b.Logger.errors.NOT_IMPLEMENTED, {
	            operation: "getUrl"
	        });
	    };
	    return UrlJsonRpcProvider;
	}(StaticJsonRpcProvider));
	UrlJsonRpcProvider_1 = urlJsonRpcProvider.UrlJsonRpcProvider = UrlJsonRpcProvider;

	"use strict";
	var __extends$f = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(alchemyProvider, "__esModule", { value: true });
	var AlchemyProvider_1 = alchemyProvider.AlchemyProvider = AlchemyWebSocketProvider_1 = alchemyProvider.AlchemyWebSocketProvider = void 0;
	var properties_1$5 = lib$p;
	var formatter_1$4 = formatter;
	var websocket_provider_1$1 = websocketProvider;
	var logger_1$a = lib$q;
	var _version_1$a = _version$3;
	var logger$a = new logger_1$a.Logger(_version_1$a.version);
	var url_json_rpc_provider_1$5 = urlJsonRpcProvider;
	// This key was provided to ethers.js by Alchemy to be used by the
	// default provider, but it is recommended that for your own
	// production environments, that you acquire your own API key at:
	//   https://dashboard.alchemyapi.io
	var defaultApiKey$2 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
	var AlchemyWebSocketProvider = /** @class */ (function (_super) {
	    __extends$f(AlchemyWebSocketProvider, _super);
	    function AlchemyWebSocketProvider(network, apiKey) {
	        var _this = this;
	        var provider = new AlchemyProvider(network, apiKey);
	        var url = provider.connection.url.replace(/^http/i, "ws")
	            .replace(".alchemyapi.", ".ws.alchemyapi.");
	        _this = _super.call(this, url, provider.network) || this;
	        (0, properties_1$5.defineReadOnly)(_this, "apiKey", provider.apiKey);
	        return _this;
	    }
	    AlchemyWebSocketProvider.prototype.isCommunityResource = function () {
	        return (this.apiKey === defaultApiKey$2);
	    };
	    return AlchemyWebSocketProvider;
	}(websocket_provider_1$1.WebSocketProvider));
	var AlchemyWebSocketProvider_1 = alchemyProvider.AlchemyWebSocketProvider = AlchemyWebSocketProvider;
	var AlchemyProvider = /** @class */ (function (_super) {
	    __extends$f(AlchemyProvider, _super);
	    function AlchemyProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AlchemyProvider.getWebSocketProvider = function (network, apiKey) {
	        return new AlchemyWebSocketProvider(network, apiKey);
	    };
	    AlchemyProvider.getApiKey = function (apiKey) {
	        if (apiKey == null) {
	            return defaultApiKey$2;
	        }
	        if (apiKey && typeof (apiKey) !== "string") {
	            logger$a.throwArgumentError("invalid apiKey", "apiKey", apiKey);
	        }
	        return apiKey;
	    };
	    AlchemyProvider.getUrl = function (network, apiKey) {
	        var host = null;
	        switch (network.name) {
	            case "homestead":
	                host = "eth-mainnet.alchemyapi.io/v2/";
	                break;
	            case "goerli":
	                host = "eth-goerli.g.alchemy.com/v2/";
	                break;
	            case "matic":
	                host = "polygon-mainnet.g.alchemy.com/v2/";
	                break;
	            case "maticmum":
	                host = "polygon-mumbai.g.alchemy.com/v2/";
	                break;
	            case "arbitrum":
	                host = "arb-mainnet.g.alchemy.com/v2/";
	                break;
	            case "arbitrum-goerli":
	                host = "arb-goerli.g.alchemy.com/v2/";
	                break;
	            case "optimism":
	                host = "opt-mainnet.g.alchemy.com/v2/";
	                break;
	            case "optimism-goerli":
	                host = "opt-goerli.g.alchemy.com/v2/";
	                break;
	            default:
	                logger$a.throwArgumentError("unsupported network", "network", arguments[0]);
	        }
	        return {
	            allowGzip: true,
	            url: ("https:/" + "/" + host + apiKey),
	            throttleCallback: function (attempt, url) {
	                if (apiKey === defaultApiKey$2) {
	                    (0, formatter_1$4.showThrottleMessage)();
	                }
	                return Promise.resolve(true);
	            }
	        };
	    };
	    AlchemyProvider.prototype.isCommunityResource = function () {
	        return (this.apiKey === defaultApiKey$2);
	    };
	    return AlchemyProvider;
	}(url_json_rpc_provider_1$5.UrlJsonRpcProvider));
	AlchemyProvider_1 = alchemyProvider.AlchemyProvider = AlchemyProvider;

	var ankrProvider = {};

	"use strict";
	var __extends$e = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(ankrProvider, "__esModule", { value: true });
	var AnkrProvider_1 = ankrProvider.AnkrProvider = void 0;
	var formatter_1$3 = formatter;
	var url_json_rpc_provider_1$4 = urlJsonRpcProvider;
	var logger_1$9 = lib$q;
	var _version_1$9 = _version$3;
	var logger$9 = new logger_1$9.Logger(_version_1$9.version);
	var defaultApiKey$1 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
	function getHost(name) {
	    switch (name) {
	        case "homestead":
	            return "rpc.ankr.com/eth/";
	        case "ropsten":
	            return "rpc.ankr.com/eth_ropsten/";
	        case "rinkeby":
	            return "rpc.ankr.com/eth_rinkeby/";
	        case "goerli":
	            return "rpc.ankr.com/eth_goerli/";
	        case "matic":
	            return "rpc.ankr.com/polygon/";
	        case "arbitrum":
	            return "rpc.ankr.com/arbitrum/";
	    }
	    return logger$9.throwArgumentError("unsupported network", "name", name);
	}
	var AnkrProvider = /** @class */ (function (_super) {
	    __extends$e(AnkrProvider, _super);
	    function AnkrProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AnkrProvider.prototype.isCommunityResource = function () {
	        return (this.apiKey === defaultApiKey$1);
	    };
	    AnkrProvider.getApiKey = function (apiKey) {
	        if (apiKey == null) {
	            return defaultApiKey$1;
	        }
	        return apiKey;
	    };
	    AnkrProvider.getUrl = function (network, apiKey) {
	        if (apiKey == null) {
	            apiKey = defaultApiKey$1;
	        }
	        var connection = {
	            allowGzip: true,
	            url: ("https:/\/" + getHost(network.name) + apiKey),
	            throttleCallback: function (attempt, url) {
	                if (apiKey.apiKey === defaultApiKey$1) {
	                    (0, formatter_1$3.showThrottleMessage)();
	                }
	                return Promise.resolve(true);
	            }
	        };
	        if (apiKey.projectSecret != null) {
	            connection.user = "";
	            connection.password = apiKey.projectSecret;
	        }
	        return connection;
	    };
	    return AnkrProvider;
	}(url_json_rpc_provider_1$4.UrlJsonRpcProvider));
	AnkrProvider_1 = ankrProvider.AnkrProvider = AnkrProvider;

	var cloudflareProvider = {};

	"use strict";
	var __extends$d = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$d = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$d = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(cloudflareProvider, "__esModule", { value: true });
	var CloudflareProvider_1 = cloudflareProvider.CloudflareProvider = void 0;
	var url_json_rpc_provider_1$3 = urlJsonRpcProvider;
	var logger_1$8 = lib$q;
	var _version_1$8 = _version$3;
	var logger$8 = new logger_1$8.Logger(_version_1$8.version);
	var CloudflareProvider = /** @class */ (function (_super) {
	    __extends$d(CloudflareProvider, _super);
	    function CloudflareProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    CloudflareProvider.getApiKey = function (apiKey) {
	        if (apiKey != null) {
	            logger$8.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
	        }
	        return null;
	    };
	    CloudflareProvider.getUrl = function (network, apiKey) {
	        var host = null;
	        switch (network.name) {
	            case "homestead":
	                host = "https://cloudflare-eth.com/";
	                break;
	            default:
	                logger$8.throwArgumentError("unsupported network", "network", arguments[0]);
	        }
	        return host;
	    };
	    CloudflareProvider.prototype.perform = function (method, params) {
	        return __awaiter$d(this, void 0, void 0, function () {
	            var block;
	            return __generator$d(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(method === "getBlockNumber")) return [3 /*break*/, 2];
	                        return [4 /*yield*/, _super.prototype.perform.call(this, "getBlock", { blockTag: "latest" })];
	                    case 1:
	                        block = _a.sent();
	                        return [2 /*return*/, block.number];
	                    case 2: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];
	                }
	            });
	        });
	    };
	    return CloudflareProvider;
	}(url_json_rpc_provider_1$3.UrlJsonRpcProvider));
	CloudflareProvider_1 = cloudflareProvider.CloudflareProvider = CloudflareProvider;

	var etherscanProvider = {};

	"use strict";
	var __extends$c = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$c = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$c = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(etherscanProvider, "__esModule", { value: true });
	var EtherscanProvider_1 = etherscanProvider.EtherscanProvider = void 0;
	var bytes_1$2 = lib$r;
	var properties_1$4 = lib$p;
	var transactions_1 = lib$e;
	var web_1$2 = lib$2;
	var formatter_1$2 = formatter;
	var logger_1$7 = lib$q;
	var _version_1$7 = _version$3;
	var logger$7 = new logger_1$7.Logger(_version_1$7.version);
	var base_provider_1$1 = baseProvider;
	// The transaction has already been sanitized by the calls in Provider
	function getTransactionPostData(transaction) {
	    var result = {};
	    for (var key in transaction) {
	        if (transaction[key] == null) {
	            continue;
	        }
	        var value = transaction[key];
	        if (key === "type" && value === 0) {
	            continue;
	        }
	        // Quantity-types require no leading zero, unless 0
	        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
	            value = (0, bytes_1$2.hexValue)((0, bytes_1$2.hexlify)(value));
	        }
	        else if (key === "accessList") {
	            value = "[" + (0, transactions_1.accessListify)(value).map(function (set) {
	                return "{address:\"" + set.address + "\",storageKeys:[\"" + set.storageKeys.join('","') + "\"]}";
	            }).join(",") + "]";
	        }
	        else {
	            value = (0, bytes_1$2.hexlify)(value);
	        }
	        result[key] = value;
	    }
	    return result;
	}
	function getResult(result) {
	    // getLogs, getHistory have weird success responses
	    if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
	        return result.result;
	    }
	    if (result.status != 1 || typeof (result.message) !== "string" || !result.message.match(/^OK/)) {
	        var error = new Error("invalid response");
	        error.result = JSON.stringify(result);
	        if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
	            error.throttleRetry = true;
	        }
	        throw error;
	    }
	    return result.result;
	}
	function getJsonResult(result) {
	    // This response indicates we are being throttled
	    if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
	        var error = new Error("throttled response");
	        error.result = JSON.stringify(result);
	        error.throttleRetry = true;
	        throw error;
	    }
	    if (result.jsonrpc != "2.0") {
	        // @TODO: not any
	        var error = new Error("invalid response");
	        error.result = JSON.stringify(result);
	        throw error;
	    }
	    if (result.error) {
	        // @TODO: not any
	        var error = new Error(result.error.message || "unknown error");
	        if (result.error.code) {
	            error.code = result.error.code;
	        }
	        if (result.error.data) {
	            error.data = result.error.data;
	        }
	        throw error;
	    }
	    return result.result;
	}
	// The blockTag was normalized as a string by the Provider pre-perform operations
	function checkLogTag(blockTag) {
	    if (blockTag === "pending") {
	        throw new Error("pending not supported");
	    }
	    if (blockTag === "latest") {
	        return blockTag;
	    }
	    return parseInt(blockTag.substring(2), 16);
	}
	function checkError(method, error, transaction) {
	    // Undo the "convenience" some nodes are attempting to prevent backwards
	    // incompatibility; maybe for v6 consider forwarding reverts as errors
	    if (method === "call" && error.code === logger_1$7.Logger.errors.SERVER_ERROR) {
	        var e = error.error;
	        // Etherscan keeps changing their string
	        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
	            // Etherscan prefixes the data like "Reverted 0x1234"
	            var data = e.data;
	            if (data) {
	                data = "0x" + data.replace(/^.*0x/i, "");
	            }
	            if ((0, bytes_1$2.isHexString)(data)) {
	                return data;
	            }
	            logger$7.throwError("missing revert data in call exception", logger_1$7.Logger.errors.CALL_EXCEPTION, {
	                error: error,
	                data: "0x"
	            });
	        }
	    }
	    // Get the message from any nested error structure
	    var message = error.message;
	    if (error.code === logger_1$7.Logger.errors.SERVER_ERROR) {
	        if (error.error && typeof (error.error.message) === "string") {
	            message = error.error.message;
	        }
	        else if (typeof (error.body) === "string") {
	            message = error.body;
	        }
	        else if (typeof (error.responseText) === "string") {
	            message = error.responseText;
	        }
	    }
	    message = (message || "").toLowerCase();
	    // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
	    if (message.match(/insufficient funds/)) {
	        logger$7.throwError("insufficient funds for intrinsic transaction cost", logger_1$7.Logger.errors.INSUFFICIENT_FUNDS, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "Transaction with the same hash was already imported."
	    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
	        logger$7.throwError("nonce has already been used", logger_1$7.Logger.errors.NONCE_EXPIRED, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
	    if (message.match(/another transaction with same nonce/)) {
	        logger$7.throwError("replacement fee too low", logger_1$7.Logger.errors.REPLACEMENT_UNDERPRICED, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    if (message.match(/execution failed due to an exception|execution reverted/)) {
	        logger$7.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1$7.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
	            error: error,
	            method: method,
	            transaction: transaction
	        });
	    }
	    throw error;
	}
	var EtherscanProvider = /** @class */ (function (_super) {
	    __extends$c(EtherscanProvider, _super);
	    function EtherscanProvider(network, apiKey) {
	        var _this = _super.call(this, network) || this;
	        (0, properties_1$4.defineReadOnly)(_this, "baseUrl", _this.getBaseUrl());
	        (0, properties_1$4.defineReadOnly)(_this, "apiKey", apiKey || null);
	        return _this;
	    }
	    EtherscanProvider.prototype.getBaseUrl = function () {
	        switch (this.network ? this.network.name : "invalid") {
	            case "homestead":
	                return "https:/\/api.etherscan.io";
	            case "goerli":
	                return "https:/\/api-goerli.etherscan.io";
	            case "sepolia":
	                return "https:/\/api-sepolia.etherscan.io";
	            case "matic":
	                return "https:/\/api.polygonscan.com";
	            case "maticmum":
	                return "https:/\/api-testnet.polygonscan.com";
	            case "arbitrum":
	                return "https:/\/api.arbiscan.io";
	            case "arbitrum-goerli":
	                return "https:/\/api-goerli.arbiscan.io";
	            case "optimism":
	                return "https:/\/api-optimistic.etherscan.io";
	            case "optimism-goerli":
	                return "https:/\/api-goerli-optimistic.etherscan.io";
	            default:
	        }
	        return logger$7.throwArgumentError("unsupported network", "network", this.network.name);
	    };
	    EtherscanProvider.prototype.getUrl = function (module, params) {
	        var query = Object.keys(params).reduce(function (accum, key) {
	            var value = params[key];
	            if (value != null) {
	                accum += "&" + key + "=" + value;
	            }
	            return accum;
	        }, "");
	        var apiKey = ((this.apiKey) ? "&apikey=" + this.apiKey : "");
	        return this.baseUrl + "/api?module=" + module + query + apiKey;
	    };
	    EtherscanProvider.prototype.getPostUrl = function () {
	        return this.baseUrl + "/api";
	    };
	    EtherscanProvider.prototype.getPostData = function (module, params) {
	        params.module = module;
	        params.apikey = this.apiKey;
	        return params;
	    };
	    EtherscanProvider.prototype.fetch = function (module, params, post) {
	        return __awaiter$c(this, void 0, void 0, function () {
	            var url, payload, procFunc, connection, payloadStr, result;
	            var _this = this;
	            return __generator$c(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        url = (post ? this.getPostUrl() : this.getUrl(module, params));
	                        payload = (post ? this.getPostData(module, params) : null);
	                        procFunc = (module === "proxy") ? getJsonResult : getResult;
	                        this.emit("debug", {
	                            action: "request",
	                            request: url,
	                            provider: this
	                        });
	                        connection = {
	                            url: url,
	                            throttleSlotInterval: 1000,
	                            throttleCallback: function (attempt, url) {
	                                if (_this.isCommunityResource()) {
	                                    (0, formatter_1$2.showThrottleMessage)();
	                                }
	                                return Promise.resolve(true);
	                            }
	                        };
	                        payloadStr = null;
	                        if (payload) {
	                            connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
	                            payloadStr = Object.keys(payload).map(function (key) {
	                                return key + "=" + payload[key];
	                            }).join("&");
	                        }
	                        return [4 /*yield*/, (0, web_1$2.fetchJson)(connection, payloadStr, procFunc || getJsonResult)];
	                    case 1:
	                        result = _a.sent();
	                        this.emit("debug", {
	                            action: "response",
	                            request: url,
	                            response: (0, properties_1$4.deepCopy)(result),
	                            provider: this
	                        });
	                        return [2 /*return*/, result];
	                }
	            });
	        });
	    };
	    EtherscanProvider.prototype.detectNetwork = function () {
	        return __awaiter$c(this, void 0, void 0, function () {
	            return __generator$c(this, function (_a) {
	                return [2 /*return*/, this.network];
	            });
	        });
	    };
	    EtherscanProvider.prototype.perform = function (method, params) {
	        return __awaiter$c(this, void 0, void 0, function () {
	            var _a, postData, error_1, postData, error_2, args, topic0, logs, blocks, i, log, block, _b;
	            return __generator$c(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        _a = method;
	                        switch (_a) {
	                            case "getBlockNumber": return [3 /*break*/, 1];
	                            case "getGasPrice": return [3 /*break*/, 2];
	                            case "getBalance": return [3 /*break*/, 3];
	                            case "getTransactionCount": return [3 /*break*/, 4];
	                            case "getCode": return [3 /*break*/, 5];
	                            case "getStorageAt": return [3 /*break*/, 6];
	                            case "sendTransaction": return [3 /*break*/, 7];
	                            case "getBlock": return [3 /*break*/, 8];
	                            case "getTransaction": return [3 /*break*/, 9];
	                            case "getTransactionReceipt": return [3 /*break*/, 10];
	                            case "call": return [3 /*break*/, 11];
	                            case "estimateGas": return [3 /*break*/, 15];
	                            case "getLogs": return [3 /*break*/, 19];
	                            case "getEtherPrice": return [3 /*break*/, 26];
	                        }
	                        return [3 /*break*/, 28];
	                    case 1: return [2 /*return*/, this.fetch("proxy", { action: "eth_blockNumber" })];
	                    case 2: return [2 /*return*/, this.fetch("proxy", { action: "eth_gasPrice" })];
	                    case 3: 
	                    // Returns base-10 result
	                    return [2 /*return*/, this.fetch("account", {
	                            action: "balance",
	                            address: params.address,
	                            tag: params.blockTag
	                        })];
	                    case 4: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getTransactionCount",
	                            address: params.address,
	                            tag: params.blockTag
	                        })];
	                    case 5: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getCode",
	                            address: params.address,
	                            tag: params.blockTag
	                        })];
	                    case 6: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getStorageAt",
	                            address: params.address,
	                            position: params.position,
	                            tag: params.blockTag
	                        })];
	                    case 7: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_sendRawTransaction",
	                            hex: params.signedTransaction
	                        }, true).catch(function (error) {
	                            return checkError("sendTransaction", error, params.signedTransaction);
	                        })];
	                    case 8:
	                        if (params.blockTag) {
	                            return [2 /*return*/, this.fetch("proxy", {
	                                    action: "eth_getBlockByNumber",
	                                    tag: params.blockTag,
	                                    boolean: (params.includeTransactions ? "true" : "false")
	                                })];
	                        }
	                        throw new Error("getBlock by blockHash not implemented");
	                    case 9: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getTransactionByHash",
	                            txhash: params.transactionHash
	                        })];
	                    case 10: return [2 /*return*/, this.fetch("proxy", {
	                            action: "eth_getTransactionReceipt",
	                            txhash: params.transactionHash
	                        })];
	                    case 11:
	                        if (params.blockTag !== "latest") {
	                            throw new Error("EtherscanProvider does not support blockTag for call");
	                        }
	                        postData = getTransactionPostData(params.transaction);
	                        postData.module = "proxy";
	                        postData.action = "eth_call";
	                        _c.label = 12;
	                    case 12:
	                        _c.trys.push([12, 14, , 15]);
	                        return [4 /*yield*/, this.fetch("proxy", postData, true)];
	                    case 13: return [2 /*return*/, _c.sent()];
	                    case 14:
	                        error_1 = _c.sent();
	                        return [2 /*return*/, checkError("call", error_1, params.transaction)];
	                    case 15:
	                        postData = getTransactionPostData(params.transaction);
	                        postData.module = "proxy";
	                        postData.action = "eth_estimateGas";
	                        _c.label = 16;
	                    case 16:
	                        _c.trys.push([16, 18, , 19]);
	                        return [4 /*yield*/, this.fetch("proxy", postData, true)];
	                    case 17: return [2 /*return*/, _c.sent()];
	                    case 18:
	                        error_2 = _c.sent();
	                        return [2 /*return*/, checkError("estimateGas", error_2, params.transaction)];
	                    case 19:
	                        args = { action: "getLogs" };
	                        if (params.filter.fromBlock) {
	                            args.fromBlock = checkLogTag(params.filter.fromBlock);
	                        }
	                        if (params.filter.toBlock) {
	                            args.toBlock = checkLogTag(params.filter.toBlock);
	                        }
	                        if (params.filter.address) {
	                            args.address = params.filter.address;
	                        }
	                        // @TODO: We can handle slightly more complicated logs using the logs API
	                        if (params.filter.topics && params.filter.topics.length > 0) {
	                            if (params.filter.topics.length > 1) {
	                                logger$7.throwError("unsupported topic count", logger_1$7.Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
	                            }
	                            if (params.filter.topics.length === 1) {
	                                topic0 = params.filter.topics[0];
	                                if (typeof (topic0) !== "string" || topic0.length !== 66) {
	                                    logger$7.throwError("unsupported topic format", logger_1$7.Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
	                                }
	                                args.topic0 = topic0;
	                            }
	                        }
	                        return [4 /*yield*/, this.fetch("logs", args)];
	                    case 20:
	                        logs = _c.sent();
	                        blocks = {};
	                        i = 0;
	                        _c.label = 21;
	                    case 21:
	                        if (!(i < logs.length)) return [3 /*break*/, 25];
	                        log = logs[i];
	                        if (log.blockHash != null) {
	                            return [3 /*break*/, 24];
	                        }
	                        if (!(blocks[log.blockNumber] == null)) return [3 /*break*/, 23];
	                        return [4 /*yield*/, this.getBlock(log.blockNumber)];
	                    case 22:
	                        block = _c.sent();
	                        if (block) {
	                            blocks[log.blockNumber] = block.hash;
	                        }
	                        _c.label = 23;
	                    case 23:
	                        log.blockHash = blocks[log.blockNumber];
	                        _c.label = 24;
	                    case 24:
	                        i++;
	                        return [3 /*break*/, 21];
	                    case 25: return [2 /*return*/, logs];
	                    case 26:
	                        if (this.network.name !== "homestead") {
	                            return [2 /*return*/, 0.0];
	                        }
	                        _b = parseFloat;
	                        return [4 /*yield*/, this.fetch("stats", { action: "ethprice" })];
	                    case 27: return [2 /*return*/, _b.apply(void 0, [(_c.sent()).ethusd])];
	                    case 28: return [3 /*break*/, 29];
	                    case 29: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];
	                }
	            });
	        });
	    };
	    // Note: The `page` page parameter only allows pagination within the
	    //       10,000 window available without a page and offset parameter
	    //       Error: Result window is too large, PageNo x Offset size must
	    //              be less than or equal to 10000
	    EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {
	        return __awaiter$c(this, void 0, void 0, function () {
	            var params, result;
	            var _a;
	            var _this = this;
	            return __generator$c(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        _a = {
	                            action: "txlist"
	                        };
	                        return [4 /*yield*/, this.resolveName(addressOrName)];
	                    case 1:
	                        params = (_a.address = (_b.sent()),
	                            _a.startblock = ((startBlock == null) ? 0 : startBlock),
	                            _a.endblock = ((endBlock == null) ? 99999999 : endBlock),
	                            _a.sort = "asc",
	                            _a);
	                        return [4 /*yield*/, this.fetch("account", params)];
	                    case 2:
	                        result = _b.sent();
	                        return [2 /*return*/, result.map(function (tx) {
	                                ["contractAddress", "to"].forEach(function (key) {
	                                    if (tx[key] == "") {
	                                        delete tx[key];
	                                    }
	                                });
	                                if (tx.creates == null && tx.contractAddress != null) {
	                                    tx.creates = tx.contractAddress;
	                                }
	                                var item = _this.formatter.transactionResponse(tx);
	                                if (tx.timeStamp) {
	                                    item.timestamp = parseInt(tx.timeStamp);
	                                }
	                                return item;
	                            })];
	                }
	            });
	        });
	    };
	    EtherscanProvider.prototype.isCommunityResource = function () {
	        return (this.apiKey == null);
	    };
	    return EtherscanProvider;
	}(base_provider_1$1.BaseProvider));
	EtherscanProvider_1 = etherscanProvider.EtherscanProvider = EtherscanProvider;

	var fallbackProvider = {};

	"use strict";
	var __extends$b = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$b = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$b = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(fallbackProvider, "__esModule", { value: true });
	var FallbackProvider_1 = fallbackProvider.FallbackProvider = void 0;
	var abstract_provider_1 = lib$g;
	var bignumber_1$2 = lib$s;
	var bytes_1$1 = lib$r;
	var properties_1$3 = lib$p;
	var random_1 = lib$6;
	var web_1$1 = lib$2;
	var base_provider_1 = baseProvider;
	var formatter_1$1 = formatter;
	var logger_1$6 = lib$q;
	var _version_1$6 = _version$3;
	var logger$6 = new logger_1$6.Logger(_version_1$6.version);
	function now() { return (new Date()).getTime(); }
	// Returns to network as long as all agree, or null if any is null.
	// Throws an error if any two networks do not match.
	function checkNetworks(networks) {
	    var result = null;
	    for (var i = 0; i < networks.length; i++) {
	        var network = networks[i];
	        // Null! We do not know our network; bail.
	        if (network == null) {
	            return null;
	        }
	        if (result) {
	            // Make sure the network matches the previous networks
	            if (!(result.name === network.name && result.chainId === network.chainId &&
	                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {
	                logger$6.throwArgumentError("provider mismatch", "networks", networks);
	            }
	        }
	        else {
	            result = network;
	        }
	    }
	    return result;
	}
	function median(values, maxDelta) {
	    values = values.slice().sort();
	    var middle = Math.floor(values.length / 2);
	    // Odd length; take the middle
	    if (values.length % 2) {
	        return values[middle];
	    }
	    // Even length; take the average of the two middle
	    var a = values[middle - 1], b = values[middle];
	    if (maxDelta != null && Math.abs(a - b) > maxDelta) {
	        return null;
	    }
	    return (a + b) / 2;
	}
	function serialize(value) {
	    if (value === null) {
	        return "null";
	    }
	    else if (typeof (value) === "number" || typeof (value) === "boolean") {
	        return JSON.stringify(value);
	    }
	    else if (typeof (value) === "string") {
	        return value;
	    }
	    else if (bignumber_1$2.BigNumber.isBigNumber(value)) {
	        return value.toString();
	    }
	    else if (Array.isArray(value)) {
	        return JSON.stringify(value.map(function (i) { return serialize(i); }));
	    }
	    else if (typeof (value) === "object") {
	        var keys = Object.keys(value);
	        keys.sort();
	        return "{" + keys.map(function (key) {
	            var v = value[key];
	            if (typeof (v) === "function") {
	                v = "[function]";
	            }
	            else {
	                v = serialize(v);
	            }
	            return JSON.stringify(key) + ":" + v;
	        }).join(",") + "}";
	    }
	    throw new Error("unknown value type: " + typeof (value));
	}
	// Next request ID to use for emitting debug info
	var nextRid = 1;
	;
	function stall(duration) {
	    var cancel = null;
	    var timer = null;
	    var promise = (new Promise(function (resolve) {
	        cancel = function () {
	            if (timer) {
	                clearTimeout(timer);
	                timer = null;
	            }
	            resolve();
	        };
	        timer = setTimeout(cancel, duration);
	    }));
	    var wait = function (func) {
	        promise = promise.then(func);
	        return promise;
	    };
	    function getPromise() {
	        return promise;
	    }
	    return { cancel: cancel, getPromise: getPromise, wait: wait };
	}
	var ForwardErrors = [
	    logger_1$6.Logger.errors.CALL_EXCEPTION,
	    logger_1$6.Logger.errors.INSUFFICIENT_FUNDS,
	    logger_1$6.Logger.errors.NONCE_EXPIRED,
	    logger_1$6.Logger.errors.REPLACEMENT_UNDERPRICED,
	    logger_1$6.Logger.errors.UNPREDICTABLE_GAS_LIMIT
	];
	var ForwardProperties = [
	    "address",
	    "args",
	    "errorArgs",
	    "errorSignature",
	    "method",
	    "transaction",
	];
	;
	function exposeDebugConfig(config, now) {
	    var result = {
	        weight: config.weight
	    };
	    Object.defineProperty(result, "provider", { get: function () { return config.provider; } });
	    if (config.start) {
	        result.start = config.start;
	    }
	    if (now) {
	        result.duration = (now - config.start);
	    }
	    if (config.done) {
	        if (config.error) {
	            result.error = config.error;
	        }
	        else {
	            result.result = config.result || null;
	        }
	    }
	    return result;
	}
	function normalizedTally(normalize, quorum) {
	    return function (configs) {
	        // Count the votes for each result
	        var tally = {};
	        configs.forEach(function (c) {
	            var value = normalize(c.result);
	            if (!tally[value]) {
	                tally[value] = { count: 0, result: c.result };
	            }
	            tally[value].count++;
	        });
	        // Check for a quorum on any given result
	        var keys = Object.keys(tally);
	        for (var i = 0; i < keys.length; i++) {
	            var check = tally[keys[i]];
	            if (check.count >= quorum) {
	                return check.result;
	            }
	        }
	        // No quroum
	        return undefined;
	    };
	}
	function getProcessFunc(provider, method, params) {
	    var normalize = serialize;
	    switch (method) {
	        case "getBlockNumber":
	            // Return the median value, unless there is (median + 1) is also
	            // present, in which case that is probably true and the median
	            // is going to be stale soon. In the event of a malicious node,
	            // the lie will be true soon enough.
	            return function (configs) {
	                var values = configs.map(function (c) { return c.result; });
	                // Get the median block number
	                var blockNumber = median(configs.map(function (c) { return c.result; }), 2);
	                if (blockNumber == null) {
	                    return undefined;
	                }
	                blockNumber = Math.ceil(blockNumber);
	                // If the next block height is present, its prolly safe to use
	                if (values.indexOf(blockNumber + 1) >= 0) {
	                    blockNumber++;
	                }
	                // Don't ever roll back the blockNumber
	                if (blockNumber >= provider._highestBlockNumber) {
	                    provider._highestBlockNumber = blockNumber;
	                }
	                return provider._highestBlockNumber;
	            };
	        case "getGasPrice":
	            // Return the middle (round index up) value, similar to median
	            // but do not average even entries and choose the higher.
	            // Malicious actors must compromise 50% of the nodes to lie.
	            return function (configs) {
	                var values = configs.map(function (c) { return c.result; });
	                values.sort();
	                return values[Math.floor(values.length / 2)];
	            };
	        case "getEtherPrice":
	            // Returns the median price. Malicious actors must compromise at
	            // least 50% of the nodes to lie (in a meaningful way).
	            return function (configs) {
	                return median(configs.map(function (c) { return c.result; }));
	            };
	        // No additional normalizing required; serialize is enough
	        case "getBalance":
	        case "getTransactionCount":
	        case "getCode":
	        case "getStorageAt":
	        case "call":
	        case "estimateGas":
	        case "getLogs":
	            break;
	        // We drop the confirmations from transactions as it is approximate
	        case "getTransaction":
	        case "getTransactionReceipt":
	            normalize = function (tx) {
	                if (tx == null) {
	                    return null;
	                }
	                tx = (0, properties_1$3.shallowCopy)(tx);
	                tx.confirmations = -1;
	                return serialize(tx);
	            };
	            break;
	        // We drop the confirmations from transactions as it is approximate
	        case "getBlock":
	            // We drop the confirmations from transactions as it is approximate
	            if (params.includeTransactions) {
	                normalize = function (block) {
	                    if (block == null) {
	                        return null;
	                    }
	                    block = (0, properties_1$3.shallowCopy)(block);
	                    block.transactions = block.transactions.map(function (tx) {
	                        tx = (0, properties_1$3.shallowCopy)(tx);
	                        tx.confirmations = -1;
	                        return tx;
	                    });
	                    return serialize(block);
	                };
	            }
	            else {
	                normalize = function (block) {
	                    if (block == null) {
	                        return null;
	                    }
	                    return serialize(block);
	                };
	            }
	            break;
	        default:
	            throw new Error("unknown method: " + method);
	    }
	    // Return the result if and only if the expected quorum is
	    // satisfied and agreed upon for the final result.
	    return normalizedTally(normalize, provider.quorum);
	}
	// If we are doing a blockTag query, we need to make sure the backend is
	// caught up to the FallbackProvider, before sending a request to it.
	function waitForSync(config, blockNumber) {
	    return __awaiter$b(this, void 0, void 0, function () {
	        var provider;
	        return __generator$b(this, function (_a) {
	            provider = (config.provider);
	            if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {
	                return [2 /*return*/, provider];
	            }
	            return [2 /*return*/, (0, web_1$1.poll)(function () {
	                    return new Promise(function (resolve, reject) {
	                        setTimeout(function () {
	                            // We are synced
	                            if (provider.blockNumber >= blockNumber) {
	                                return resolve(provider);
	                            }
	                            // We're done; just quit
	                            if (config.cancelled) {
	                                return resolve(null);
	                            }
	                            // Try again, next block
	                            return resolve(undefined);
	                        }, 0);
	                    });
	                }, { oncePoll: provider })];
	        });
	    });
	}
	function getRunner(config, currentBlockNumber, method, params) {
	    return __awaiter$b(this, void 0, void 0, function () {
	        var provider, _a, filter;
	        return __generator$b(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    provider = config.provider;
	                    _a = method;
	                    switch (_a) {
	                        case "getBlockNumber": return [3 /*break*/, 1];
	                        case "getGasPrice": return [3 /*break*/, 1];
	                        case "getEtherPrice": return [3 /*break*/, 2];
	                        case "getBalance": return [3 /*break*/, 3];
	                        case "getTransactionCount": return [3 /*break*/, 3];
	                        case "getCode": return [3 /*break*/, 3];
	                        case "getStorageAt": return [3 /*break*/, 6];
	                        case "getBlock": return [3 /*break*/, 9];
	                        case "call": return [3 /*break*/, 12];
	                        case "estimateGas": return [3 /*break*/, 12];
	                        case "getTransaction": return [3 /*break*/, 15];
	                        case "getTransactionReceipt": return [3 /*break*/, 15];
	                        case "getLogs": return [3 /*break*/, 16];
	                    }
	                    return [3 /*break*/, 19];
	                case 1: return [2 /*return*/, provider[method]()];
	                case 2:
	                    if (provider.getEtherPrice) {
	                        return [2 /*return*/, provider.getEtherPrice()];
	                    }
	                    return [3 /*break*/, 19];
	                case 3:
	                    if (!(params.blockTag && (0, bytes_1$1.isHexString)(params.blockTag))) return [3 /*break*/, 5];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 4:
	                    provider = _b.sent();
	                    _b.label = 5;
	                case 5: return [2 /*return*/, provider[method](params.address, params.blockTag || "latest")];
	                case 6:
	                    if (!(params.blockTag && (0, bytes_1$1.isHexString)(params.blockTag))) return [3 /*break*/, 8];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 7:
	                    provider = _b.sent();
	                    _b.label = 8;
	                case 8: return [2 /*return*/, provider.getStorageAt(params.address, params.position, params.blockTag || "latest")];
	                case 9:
	                    if (!(params.blockTag && (0, bytes_1$1.isHexString)(params.blockTag))) return [3 /*break*/, 11];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 10:
	                    provider = _b.sent();
	                    _b.label = 11;
	                case 11: return [2 /*return*/, provider[(params.includeTransactions ? "getBlockWithTransactions" : "getBlock")](params.blockTag || params.blockHash)];
	                case 12:
	                    if (!(params.blockTag && (0, bytes_1$1.isHexString)(params.blockTag))) return [3 /*break*/, 14];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 13:
	                    provider = _b.sent();
	                    _b.label = 14;
	                case 14:
	                    if (method === "call" && params.blockTag) {
	                        return [2 /*return*/, provider[method](params.transaction, params.blockTag)];
	                    }
	                    return [2 /*return*/, provider[method](params.transaction)];
	                case 15: return [2 /*return*/, provider[method](params.transactionHash)];
	                case 16:
	                    filter = params.filter;
	                    if (!((filter.fromBlock && (0, bytes_1$1.isHexString)(filter.fromBlock)) || (filter.toBlock && (0, bytes_1$1.isHexString)(filter.toBlock)))) return [3 /*break*/, 18];
	                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
	                case 17:
	                    provider = _b.sent();
	                    _b.label = 18;
	                case 18: return [2 /*return*/, provider.getLogs(filter)];
	                case 19: return [2 /*return*/, logger$6.throwError("unknown method error", logger_1$6.Logger.errors.UNKNOWN_ERROR, {
	                        method: method,
	                        params: params
	                    })];
	            }
	        });
	    });
	}
	var FallbackProvider = /** @class */ (function (_super) {
	    __extends$b(FallbackProvider, _super);
	    function FallbackProvider(providers, quorum) {
	        var _this = this;
	        if (providers.length === 0) {
	            logger$6.throwArgumentError("missing providers", "providers", providers);
	        }
	        var providerConfigs = providers.map(function (configOrProvider, index) {
	            if (abstract_provider_1.Provider.isProvider(configOrProvider)) {
	                var stallTimeout = (0, formatter_1$1.isCommunityResource)(configOrProvider) ? 2000 : 750;
	                var priority = 1;
	                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout: stallTimeout, priority: priority });
	            }
	            var config = (0, properties_1$3.shallowCopy)(configOrProvider);
	            if (config.priority == null) {
	                config.priority = 1;
	            }
	            if (config.stallTimeout == null) {
	                config.stallTimeout = (0, formatter_1$1.isCommunityResource)(configOrProvider) ? 2000 : 750;
	            }
	            if (config.weight == null) {
	                config.weight = 1;
	            }
	            var weight = config.weight;
	            if (weight % 1 || weight > 512 || weight < 1) {
	                logger$6.throwArgumentError("invalid weight; must be integer in [1, 512]", "providers[" + index + "].weight", weight);
	            }
	            return Object.freeze(config);
	        });
	        var total = providerConfigs.reduce(function (accum, c) { return (accum + c.weight); }, 0);
	        if (quorum == null) {
	            quorum = total / 2;
	        }
	        else if (quorum > total) {
	            logger$6.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
	        }
	        // Are all providers' networks are known
	        var networkOrReady = checkNetworks(providerConfigs.map(function (c) { return (c.provider).network; }));
	        // Not all networks are known; we must stall
	        if (networkOrReady == null) {
	            networkOrReady = new Promise(function (resolve, reject) {
	                setTimeout(function () {
	                    _this.detectNetwork().then(resolve, reject);
	                }, 0);
	            });
	        }
	        _this = _super.call(this, networkOrReady) || this;
	        // Preserve a copy, so we do not get mutated
	        (0, properties_1$3.defineReadOnly)(_this, "providerConfigs", Object.freeze(providerConfigs));
	        (0, properties_1$3.defineReadOnly)(_this, "quorum", quorum);
	        _this._highestBlockNumber = -1;
	        return _this;
	    }
	    FallbackProvider.prototype.detectNetwork = function () {
	        return __awaiter$b(this, void 0, void 0, function () {
	            var networks;
	            return __generator$b(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) { return c.provider.getNetwork(); }))];
	                    case 1:
	                        networks = _a.sent();
	                        return [2 /*return*/, checkNetworks(networks)];
	                }
	            });
	        });
	    };
	    FallbackProvider.prototype.perform = function (method, params) {
	        return __awaiter$b(this, void 0, void 0, function () {
	            var results, i_1, result, processFunc, configs, currentBlockNumber, i, first, _loop_1, this_1, state_1;
	            var _this = this;
	            return __generator$b(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(method === "sendTransaction")) return [3 /*break*/, 2];
	                        return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) {
	                                return c.provider.sendTransaction(params.signedTransaction).then(function (result) {
	                                    return result.hash;
	                                }, function (error) {
	                                    return error;
	                                });
	                            }))];
	                    case 1:
	                        results = _a.sent();
	                        // Any success is good enough (other errors are likely "already seen" errors
	                        for (i_1 = 0; i_1 < results.length; i_1++) {
	                            result = results[i_1];
	                            if (typeof (result) === "string") {
	                                return [2 /*return*/, result];
	                            }
	                        }
	                        // They were all an error; pick the first error
	                        throw results[0];
	                    case 2:
	                        if (!(this._highestBlockNumber === -1 && method !== "getBlockNumber")) return [3 /*break*/, 4];
	                        return [4 /*yield*/, this.getBlockNumber()];
	                    case 3:
	                        _a.sent();
	                        _a.label = 4;
	                    case 4:
	                        processFunc = getProcessFunc(this, method, params);
	                        configs = (0, random_1.shuffled)(this.providerConfigs.map(properties_1$3.shallowCopy));
	                        configs.sort(function (a, b) { return (a.priority - b.priority); });
	                        currentBlockNumber = this._highestBlockNumber;
	                        i = 0;
	                        first = true;
	                        _loop_1 = function () {
	                            var t0, inflightWeight, _loop_2, waiting, results, result, errors;
	                            return __generator$b(this, function (_b) {
	                                switch (_b.label) {
	                                    case 0:
	                                        t0 = now();
	                                        inflightWeight = configs.filter(function (c) { return (c.runner && ((t0 - c.start) < c.stallTimeout)); })
	                                            .reduce(function (accum, c) { return (accum + c.weight); }, 0);
	                                        _loop_2 = function () {
	                                            var config = configs[i++];
	                                            var rid = nextRid++;
	                                            config.start = now();
	                                            config.staller = stall(config.stallTimeout);
	                                            config.staller.wait(function () { config.staller = null; });
	                                            config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {
	                                                config.done = true;
	                                                config.result = result;
	                                                if (_this.listenerCount("debug")) {
	                                                    _this.emit("debug", {
	                                                        action: "request",
	                                                        rid: rid,
	                                                        backend: exposeDebugConfig(config, now()),
	                                                        request: { method: method, params: (0, properties_1$3.deepCopy)(params) },
	                                                        provider: _this
	                                                    });
	                                                }
	                                            }, function (error) {
	                                                config.done = true;
	                                                config.error = error;
	                                                if (_this.listenerCount("debug")) {
	                                                    _this.emit("debug", {
	                                                        action: "request",
	                                                        rid: rid,
	                                                        backend: exposeDebugConfig(config, now()),
	                                                        request: { method: method, params: (0, properties_1$3.deepCopy)(params) },
	                                                        provider: _this
	                                                    });
	                                                }
	                                            });
	                                            if (this_1.listenerCount("debug")) {
	                                                this_1.emit("debug", {
	                                                    action: "request",
	                                                    rid: rid,
	                                                    backend: exposeDebugConfig(config, null),
	                                                    request: { method: method, params: (0, properties_1$3.deepCopy)(params) },
	                                                    provider: this_1
	                                                });
	                                            }
	                                            inflightWeight += config.weight;
	                                        };
	                                        // Start running enough to meet quorum
	                                        while (inflightWeight < this_1.quorum && i < configs.length) {
	                                            _loop_2();
	                                        }
	                                        waiting = [];
	                                        configs.forEach(function (c) {
	                                            if (c.done || !c.runner) {
	                                                return;
	                                            }
	                                            waiting.push(c.runner);
	                                            if (c.staller) {
	                                                waiting.push(c.staller.getPromise());
	                                            }
	                                        });
	                                        if (!waiting.length) return [3 /*break*/, 2];
	                                        return [4 /*yield*/, Promise.race(waiting)];
	                                    case 1:
	                                        _b.sent();
	                                        _b.label = 2;
	                                    case 2:
	                                        results = configs.filter(function (c) { return (c.done && c.error == null); });
	                                        if (!(results.length >= this_1.quorum)) return [3 /*break*/, 5];
	                                        result = processFunc(results);
	                                        if (result !== undefined) {
	                                            // Shut down any stallers
	                                            configs.forEach(function (c) {
	                                                if (c.staller) {
	                                                    c.staller.cancel();
	                                                }
	                                                c.cancelled = true;
	                                            });
	                                            return [2 /*return*/, { value: result }];
	                                        }
	                                        if (!!first) return [3 /*break*/, 4];
	                                        return [4 /*yield*/, stall(100).getPromise()];
	                                    case 3:
	                                        _b.sent();
	                                        _b.label = 4;
	                                    case 4:
	                                        first = false;
	                                        _b.label = 5;
	                                    case 5:
	                                        errors = configs.reduce(function (accum, c) {
	                                            if (!c.done || c.error == null) {
	                                                return accum;
	                                            }
	                                            var code = (c.error).code;
	                                            if (ForwardErrors.indexOf(code) >= 0) {
	                                                if (!accum[code]) {
	                                                    accum[code] = { error: c.error, weight: 0 };
	                                                }
	                                                accum[code].weight += c.weight;
	                                            }
	                                            return accum;
	                                        }, ({}));
	                                        Object.keys(errors).forEach(function (errorCode) {
	                                            var tally = errors[errorCode];
	                                            if (tally.weight < _this.quorum) {
	                                                return;
	                                            }
	                                            // Shut down any stallers
	                                            configs.forEach(function (c) {
	                                                if (c.staller) {
	                                                    c.staller.cancel();
	                                                }
	                                                c.cancelled = true;
	                                            });
	                                            var e = (tally.error);
	                                            var props = {};
	                                            ForwardProperties.forEach(function (name) {
	                                                if (e[name] == null) {
	                                                    return;
	                                                }
	                                                props[name] = e[name];
	                                            });
	                                            logger$6.throwError(e.reason || e.message, errorCode, props);
	                                        });
	                                        // All configs have run to completion; we will never get more data
	                                        if (configs.filter(function (c) { return !c.done; }).length === 0) {
	                                            return [2 /*return*/, "break"];
	                                        }
	                                        return [2 /*return*/];
	                                }
	                            });
	                        };
	                        this_1 = this;
	                        _a.label = 5;
	                    case 5:
	                        if (!true) return [3 /*break*/, 7];
	                        return [5 /*yield**/, _loop_1()];
	                    case 6:
	                        state_1 = _a.sent();
	                        if (typeof state_1 === "object")
	                            return [2 /*return*/, state_1.value];
	                        if (state_1 === "break")
	                            return [3 /*break*/, 7];
	                        return [3 /*break*/, 5];
	                    case 7:
	                        // Shut down any stallers; shouldn't be any
	                        configs.forEach(function (c) {
	                            if (c.staller) {
	                                c.staller.cancel();
	                            }
	                            c.cancelled = true;
	                        });
	                        return [2 /*return*/, logger$6.throwError("failed to meet quorum", logger_1$6.Logger.errors.SERVER_ERROR, {
	                                method: method,
	                                params: params,
	                                //results: configs.map((c) => c.result),
	                                //errors: configs.map((c) => c.error),
	                                results: configs.map(function (c) { return exposeDebugConfig(c); }),
	                                provider: this
	                            })];
	                }
	            });
	        });
	    };
	    return FallbackProvider;
	}(base_provider_1.BaseProvider));
	FallbackProvider_1 = fallbackProvider.FallbackProvider = FallbackProvider;

	var browserIpcProvider = {};

	"use strict";
	Object.defineProperty(browserIpcProvider, "__esModule", { value: true });
	var IpcProvider_1 = browserIpcProvider.IpcProvider = void 0;
	var IpcProvider = null;
	IpcProvider_1 = browserIpcProvider.IpcProvider = IpcProvider;

	var infuraProvider = {};

	"use strict";
	var __extends$a = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(infuraProvider, "__esModule", { value: true });
	var InfuraProvider_1 = infuraProvider.InfuraProvider = InfuraWebSocketProvider_1 = infuraProvider.InfuraWebSocketProvider = void 0;
	var properties_1$2 = lib$p;
	var websocket_provider_1 = websocketProvider;
	var formatter_1 = formatter;
	var logger_1$5 = lib$q;
	var _version_1$5 = _version$3;
	var logger$5 = new logger_1$5.Logger(_version_1$5.version);
	var url_json_rpc_provider_1$2 = urlJsonRpcProvider;
	var defaultProjectId = "84842078b09946638c03157f83405213";
	var InfuraWebSocketProvider = /** @class */ (function (_super) {
	    __extends$a(InfuraWebSocketProvider, _super);
	    function InfuraWebSocketProvider(network, apiKey) {
	        var _this = this;
	        var provider = new InfuraProvider(network, apiKey);
	        var connection = provider.connection;
	        if (connection.password) {
	            logger$5.throwError("INFURA WebSocket project secrets unsupported", logger_1$5.Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "InfuraProvider.getWebSocketProvider()"
	            });
	        }
	        var url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
	        _this = _super.call(this, url, network) || this;
	        (0, properties_1$2.defineReadOnly)(_this, "apiKey", provider.projectId);
	        (0, properties_1$2.defineReadOnly)(_this, "projectId", provider.projectId);
	        (0, properties_1$2.defineReadOnly)(_this, "projectSecret", provider.projectSecret);
	        return _this;
	    }
	    InfuraWebSocketProvider.prototype.isCommunityResource = function () {
	        return (this.projectId === defaultProjectId);
	    };
	    return InfuraWebSocketProvider;
	}(websocket_provider_1.WebSocketProvider));
	var InfuraWebSocketProvider_1 = infuraProvider.InfuraWebSocketProvider = InfuraWebSocketProvider;
	var InfuraProvider = /** @class */ (function (_super) {
	    __extends$a(InfuraProvider, _super);
	    function InfuraProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    InfuraProvider.getWebSocketProvider = function (network, apiKey) {
	        return new InfuraWebSocketProvider(network, apiKey);
	    };
	    InfuraProvider.getApiKey = function (apiKey) {
	        var apiKeyObj = {
	            apiKey: defaultProjectId,
	            projectId: defaultProjectId,
	            projectSecret: null
	        };
	        if (apiKey == null) {
	            return apiKeyObj;
	        }
	        if (typeof (apiKey) === "string") {
	            apiKeyObj.projectId = apiKey;
	        }
	        else if (apiKey.projectSecret != null) {
	            logger$5.assertArgument((typeof (apiKey.projectId) === "string"), "projectSecret requires a projectId", "projectId", apiKey.projectId);
	            logger$5.assertArgument((typeof (apiKey.projectSecret) === "string"), "invalid projectSecret", "projectSecret", "[REDACTED]");
	            apiKeyObj.projectId = apiKey.projectId;
	            apiKeyObj.projectSecret = apiKey.projectSecret;
	        }
	        else if (apiKey.projectId) {
	            apiKeyObj.projectId = apiKey.projectId;
	        }
	        apiKeyObj.apiKey = apiKeyObj.projectId;
	        return apiKeyObj;
	    };
	    InfuraProvider.getUrl = function (network, apiKey) {
	        var host = null;
	        switch (network ? network.name : "unknown") {
	            case "homestead":
	                host = "mainnet.infura.io";
	                break;
	            case "goerli":
	                host = "goerli.infura.io";
	                break;
	            case "sepolia":
	                host = "sepolia.infura.io";
	                break;
	            case "matic":
	                host = "polygon-mainnet.infura.io";
	                break;
	            case "maticmum":
	                host = "polygon-mumbai.infura.io";
	                break;
	            case "optimism":
	                host = "optimism-mainnet.infura.io";
	                break;
	            case "optimism-goerli":
	                host = "optimism-goerli.infura.io";
	                break;
	            case "arbitrum":
	                host = "arbitrum-mainnet.infura.io";
	                break;
	            case "arbitrum-goerli":
	                host = "arbitrum-goerli.infura.io";
	                break;
	            default:
	                logger$5.throwError("unsupported network", logger_1$5.Logger.errors.INVALID_ARGUMENT, {
	                    argument: "network",
	                    value: network
	                });
	        }
	        var connection = {
	            allowGzip: true,
	            url: ("https:/" + "/" + host + "/v3/" + apiKey.projectId),
	            throttleCallback: function (attempt, url) {
	                if (apiKey.projectId === defaultProjectId) {
	                    (0, formatter_1.showThrottleMessage)();
	                }
	                return Promise.resolve(true);
	            }
	        };
	        if (apiKey.projectSecret != null) {
	            connection.user = "";
	            connection.password = apiKey.projectSecret;
	        }
	        return connection;
	    };
	    InfuraProvider.prototype.isCommunityResource = function () {
	        return (this.projectId === defaultProjectId);
	    };
	    return InfuraProvider;
	}(url_json_rpc_provider_1$2.UrlJsonRpcProvider));
	InfuraProvider_1 = infuraProvider.InfuraProvider = InfuraProvider;

	var jsonRpcBatchProvider = {};

	"use strict";
	var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(jsonRpcBatchProvider, "__esModule", { value: true });
	var JsonRpcBatchProvider_1 = jsonRpcBatchProvider.JsonRpcBatchProvider = void 0;
	var properties_1$1 = lib$p;
	var web_1 = lib$2;
	var json_rpc_provider_1$1 = jsonRpcProvider;
	// Experimental
	var JsonRpcBatchProvider = /** @class */ (function (_super) {
	    __extends$9(JsonRpcBatchProvider, _super);
	    function JsonRpcBatchProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    JsonRpcBatchProvider.prototype.send = function (method, params) {
	        var _this = this;
	        var request = {
	            method: method,
	            params: params,
	            id: (this._nextId++),
	            jsonrpc: "2.0"
	        };
	        if (this._pendingBatch == null) {
	            this._pendingBatch = [];
	        }
	        var inflightRequest = { request: request, resolve: null, reject: null };
	        var promise = new Promise(function (resolve, reject) {
	            inflightRequest.resolve = resolve;
	            inflightRequest.reject = reject;
	        });
	        this._pendingBatch.push(inflightRequest);
	        if (!this._pendingBatchAggregator) {
	            // Schedule batch for next event loop + short duration
	            this._pendingBatchAggregator = setTimeout(function () {
	                // Get teh current batch and clear it, so new requests
	                // go into the next batch
	                var batch = _this._pendingBatch;
	                _this._pendingBatch = null;
	                _this._pendingBatchAggregator = null;
	                // Get the request as an array of requests
	                var request = batch.map(function (inflight) { return inflight.request; });
	                _this.emit("debug", {
	                    action: "requestBatch",
	                    request: (0, properties_1$1.deepCopy)(request),
	                    provider: _this
	                });
	                return (0, web_1.fetchJson)(_this.connection, JSON.stringify(request)).then(function (result) {
	                    _this.emit("debug", {
	                        action: "response",
	                        request: request,
	                        response: result,
	                        provider: _this
	                    });
	                    // For each result, feed it to the correct Promise, depending
	                    // on whether it was a success or error
	                    batch.forEach(function (inflightRequest, index) {
	                        var payload = result[index];
	                        if (payload.error) {
	                            var error = new Error(payload.error.message);
	                            error.code = payload.error.code;
	                            error.data = payload.error.data;
	                            inflightRequest.reject(error);
	                        }
	                        else {
	                            inflightRequest.resolve(payload.result);
	                        }
	                    });
	                }, function (error) {
	                    _this.emit("debug", {
	                        action: "response",
	                        error: error,
	                        request: request,
	                        provider: _this
	                    });
	                    batch.forEach(function (inflightRequest) {
	                        inflightRequest.reject(error);
	                    });
	                });
	            }, 10);
	        }
	        return promise;
	    };
	    return JsonRpcBatchProvider;
	}(json_rpc_provider_1$1.JsonRpcProvider));
	JsonRpcBatchProvider_1 = jsonRpcBatchProvider.JsonRpcBatchProvider = JsonRpcBatchProvider;

	var nodesmithProvider = {};

	/* istanbul ignore file */

	"use strict";
	var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(nodesmithProvider, "__esModule", { value: true });
	var NodesmithProvider_1 = nodesmithProvider.NodesmithProvider = void 0;
	var url_json_rpc_provider_1$1 = urlJsonRpcProvider;
	var logger_1$4 = lib$q;
	var _version_1$4 = _version$3;
	var logger$4 = new logger_1$4.Logger(_version_1$4.version);
	// Special API key provided by Nodesmith for ethers.js
	var defaultApiKey = "ETHERS_JS_SHARED";
	var NodesmithProvider = /** @class */ (function (_super) {
	    __extends$8(NodesmithProvider, _super);
	    function NodesmithProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    NodesmithProvider.getApiKey = function (apiKey) {
	        if (apiKey && typeof (apiKey) !== "string") {
	            logger$4.throwArgumentError("invalid apiKey", "apiKey", apiKey);
	        }
	        return apiKey || defaultApiKey;
	    };
	    NodesmithProvider.getUrl = function (network, apiKey) {
	        logger$4.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
	        var host = null;
	        switch (network.name) {
	            case "homestead":
	                host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
	                break;
	            case "ropsten":
	                host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
	                break;
	            case "rinkeby":
	                host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
	                break;
	            case "goerli":
	                host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
	                break;
	            case "kovan":
	                host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
	                break;
	            default:
	                logger$4.throwArgumentError("unsupported network", "network", arguments[0]);
	        }
	        return (host + "?apiKey=" + apiKey);
	    };
	    return NodesmithProvider;
	}(url_json_rpc_provider_1$1.UrlJsonRpcProvider));
	NodesmithProvider_1 = nodesmithProvider.NodesmithProvider = NodesmithProvider;

	var pocketProvider = {};

	"use strict";
	var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(pocketProvider, "__esModule", { value: true });
	var PocketProvider_1 = pocketProvider.PocketProvider = void 0;
	var logger_1$3 = lib$q;
	var _version_1$3 = _version$3;
	var logger$3 = new logger_1$3.Logger(_version_1$3.version);
	var url_json_rpc_provider_1 = urlJsonRpcProvider;
	var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
	var PocketProvider = /** @class */ (function (_super) {
	    __extends$7(PocketProvider, _super);
	    function PocketProvider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PocketProvider.getApiKey = function (apiKey) {
	        var apiKeyObj = {
	            applicationId: null,
	            loadBalancer: true,
	            applicationSecretKey: null
	        };
	        // Parse applicationId and applicationSecretKey
	        if (apiKey == null) {
	            apiKeyObj.applicationId = defaultApplicationId;
	        }
	        else if (typeof (apiKey) === "string") {
	            apiKeyObj.applicationId = apiKey;
	        }
	        else if (apiKey.applicationSecretKey != null) {
	            apiKeyObj.applicationId = apiKey.applicationId;
	            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
	        }
	        else if (apiKey.applicationId) {
	            apiKeyObj.applicationId = apiKey.applicationId;
	        }
	        else {
	            logger$3.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
	        }
	        return apiKeyObj;
	    };
	    PocketProvider.getUrl = function (network, apiKey) {
	        var host = null;
	        switch (network ? network.name : "unknown") {
	            case "goerli":
	                host = "eth-goerli.gateway.pokt.network";
	                break;
	            case "homestead":
	                host = "eth-mainnet.gateway.pokt.network";
	                break;
	            case "kovan":
	                host = "poa-kovan.gateway.pokt.network";
	                break;
	            case "matic":
	                host = "poly-mainnet.gateway.pokt.network";
	                break;
	            case "maticmum":
	                host = "polygon-mumbai-rpc.gateway.pokt.network";
	                break;
	            case "rinkeby":
	                host = "eth-rinkeby.gateway.pokt.network";
	                break;
	            case "ropsten":
	                host = "eth-ropsten.gateway.pokt.network";
	                break;
	            default:
	                logger$3.throwError("unsupported network", logger_1$3.Logger.errors.INVALID_ARGUMENT, {
	                    argument: "network",
	                    value: network
	                });
	        }
	        var url = "https://" + host + "/v1/lb/" + apiKey.applicationId;
	        var connection = { headers: {}, url: url };
	        if (apiKey.applicationSecretKey != null) {
	            connection.user = "";
	            connection.password = apiKey.applicationSecretKey;
	        }
	        return connection;
	    };
	    PocketProvider.prototype.isCommunityResource = function () {
	        return (this.applicationId === defaultApplicationId);
	    };
	    return PocketProvider;
	}(url_json_rpc_provider_1.UrlJsonRpcProvider));
	PocketProvider_1 = pocketProvider.PocketProvider = PocketProvider;

	var web3Provider = {};

	"use strict";
	var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(web3Provider, "__esModule", { value: true });
	var Web3Provider_1 = web3Provider.Web3Provider = void 0;
	var properties_1 = lib$p;
	var logger_1$2 = lib$q;
	var _version_1$2 = _version$3;
	var logger$2 = new logger_1$2.Logger(_version_1$2.version);
	var json_rpc_provider_1 = jsonRpcProvider;
	var _nextId = 1;
	function buildWeb3LegacyFetcher(provider, sendFunc) {
	    var fetcher = "Web3LegacyFetcher";
	    return function (method, params) {
	        var _this = this;
	        var request = {
	            method: method,
	            params: params,
	            id: (_nextId++),
	            jsonrpc: "2.0"
	        };
	        return new Promise(function (resolve, reject) {
	            _this.emit("debug", {
	                action: "request",
	                fetcher: fetcher,
	                request: (0, properties_1.deepCopy)(request),
	                provider: _this
	            });
	            sendFunc(request, function (error, response) {
	                if (error) {
	                    _this.emit("debug", {
	                        action: "response",
	                        fetcher: fetcher,
	                        error: error,
	                        request: request,
	                        provider: _this
	                    });
	                    return reject(error);
	                }
	                _this.emit("debug", {
	                    action: "response",
	                    fetcher: fetcher,
	                    request: request,
	                    response: response,
	                    provider: _this
	                });
	                if (response.error) {
	                    var error_1 = new Error(response.error.message);
	                    error_1.code = response.error.code;
	                    error_1.data = response.error.data;
	                    return reject(error_1);
	                }
	                resolve(response.result);
	            });
	        });
	    };
	}
	function buildEip1193Fetcher(provider) {
	    return function (method, params) {
	        var _this = this;
	        if (params == null) {
	            params = [];
	        }
	        var request = { method: method, params: params };
	        this.emit("debug", {
	            action: "request",
	            fetcher: "Eip1193Fetcher",
	            request: (0, properties_1.deepCopy)(request),
	            provider: this
	        });
	        return provider.request(request).then(function (response) {
	            _this.emit("debug", {
	                action: "response",
	                fetcher: "Eip1193Fetcher",
	                request: request,
	                response: response,
	                provider: _this
	            });
	            return response;
	        }, function (error) {
	            _this.emit("debug", {
	                action: "response",
	                fetcher: "Eip1193Fetcher",
	                request: request,
	                error: error,
	                provider: _this
	            });
	            throw error;
	        });
	    };
	}
	var Web3Provider = /** @class */ (function (_super) {
	    __extends$6(Web3Provider, _super);
	    function Web3Provider(provider, network) {
	        var _this = this;
	        if (provider == null) {
	            logger$2.throwArgumentError("missing provider", "provider", provider);
	        }
	        var path = null;
	        var jsonRpcFetchFunc = null;
	        var subprovider = null;
	        if (typeof (provider) === "function") {
	            path = "unknown:";
	            jsonRpcFetchFunc = provider;
	        }
	        else {
	            path = provider.host || provider.path || "";
	            if (!path && provider.isMetaMask) {
	                path = "metamask";
	            }
	            subprovider = provider;
	            if (provider.request) {
	                if (path === "") {
	                    path = "eip-1193:";
	                }
	                jsonRpcFetchFunc = buildEip1193Fetcher(provider);
	            }
	            else if (provider.sendAsync) {
	                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
	            }
	            else if (provider.send) {
	                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
	            }
	            else {
	                logger$2.throwArgumentError("unsupported provider", "provider", provider);
	            }
	            if (!path) {
	                path = "unknown:";
	            }
	        }
	        _this = _super.call(this, path, network) || this;
	        (0, properties_1.defineReadOnly)(_this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
	        (0, properties_1.defineReadOnly)(_this, "provider", subprovider);
	        return _this;
	    }
	    Web3Provider.prototype.send = function (method, params) {
	        return this.jsonRpcFetchFunc(method, params);
	    };
	    return Web3Provider;
	}(json_rpc_provider_1.JsonRpcProvider));
	Web3Provider_1 = web3Provider.Web3Provider = Web3Provider;

	(function (exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Formatter = exports.showThrottleMessage = exports.isCommunityResourcable = exports.isCommunityResource = exports.getNetwork = exports.getDefaultProvider = exports.JsonRpcSigner = exports.IpcProvider = exports.WebSocketProvider = exports.Web3Provider = exports.StaticJsonRpcProvider = exports.PocketProvider = exports.NodesmithProvider = exports.JsonRpcBatchProvider = exports.JsonRpcProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyWebSocketProvider = exports.AlchemyProvider = exports.FallbackProvider = exports.UrlJsonRpcProvider = exports.Resolver = exports.BaseProvider = exports.Provider = void 0;
		var abstract_provider_1 = lib$g;
		Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return abstract_provider_1.Provider; } });
		var networks_1 = lib$3;
		Object.defineProperty(exports, "getNetwork", { enumerable: true, get: function () { return networks_1.getNetwork; } });
		var base_provider_1 = baseProvider;
		Object.defineProperty(exports, "BaseProvider", { enumerable: true, get: function () { return base_provider_1.BaseProvider; } });
		Object.defineProperty(exports, "Resolver", { enumerable: true, get: function () { return base_provider_1.Resolver; } });
		var alchemy_provider_1 = alchemyProvider;
		Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function () { return alchemy_provider_1.AlchemyProvider; } });
		Object.defineProperty(exports, "AlchemyWebSocketProvider", { enumerable: true, get: function () { return alchemy_provider_1.AlchemyWebSocketProvider; } });
		var ankr_provider_1 = ankrProvider;
		Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function () { return ankr_provider_1.AnkrProvider; } });
		var cloudflare_provider_1 = cloudflareProvider;
		Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function () { return cloudflare_provider_1.CloudflareProvider; } });
		var etherscan_provider_1 = etherscanProvider;
		Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function () { return etherscan_provider_1.EtherscanProvider; } });
		var fallback_provider_1 = fallbackProvider;
		Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function () { return fallback_provider_1.FallbackProvider; } });
		var ipc_provider_1 = browserIpcProvider;
		Object.defineProperty(exports, "IpcProvider", { enumerable: true, get: function () { return ipc_provider_1.IpcProvider; } });
		var infura_provider_1 = infuraProvider;
		Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function () { return infura_provider_1.InfuraProvider; } });
		Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function () { return infura_provider_1.InfuraWebSocketProvider; } });
		var json_rpc_provider_1 = jsonRpcProvider;
		Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcProvider; } });
		Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcSigner; } });
		var json_rpc_batch_provider_1 = jsonRpcBatchProvider;
		Object.defineProperty(exports, "JsonRpcBatchProvider", { enumerable: true, get: function () { return json_rpc_batch_provider_1.JsonRpcBatchProvider; } });
		var nodesmith_provider_1 = nodesmithProvider;
		Object.defineProperty(exports, "NodesmithProvider", { enumerable: true, get: function () { return nodesmith_provider_1.NodesmithProvider; } });
		var pocket_provider_1 = pocketProvider;
		Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function () { return pocket_provider_1.PocketProvider; } });
		var url_json_rpc_provider_1 = urlJsonRpcProvider;
		Object.defineProperty(exports, "StaticJsonRpcProvider", { enumerable: true, get: function () { return url_json_rpc_provider_1.StaticJsonRpcProvider; } });
		Object.defineProperty(exports, "UrlJsonRpcProvider", { enumerable: true, get: function () { return url_json_rpc_provider_1.UrlJsonRpcProvider; } });
		var web3_provider_1 = web3Provider;
		Object.defineProperty(exports, "Web3Provider", { enumerable: true, get: function () { return web3_provider_1.Web3Provider; } });
		var websocket_provider_1 = websocketProvider;
		Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function () { return websocket_provider_1.WebSocketProvider; } });
		var formatter_1 = formatter;
		Object.defineProperty(exports, "Formatter", { enumerable: true, get: function () { return formatter_1.Formatter; } });
		Object.defineProperty(exports, "isCommunityResourcable", { enumerable: true, get: function () { return formatter_1.isCommunityResourcable; } });
		Object.defineProperty(exports, "isCommunityResource", { enumerable: true, get: function () { return formatter_1.isCommunityResource; } });
		Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function () { return formatter_1.showThrottleMessage; } });
		var logger_1 = lib$q;
		var _version_1 = _version$3;
		var logger = new logger_1.Logger(_version_1.version);
		////////////////////////
		// Helper Functions
		function getDefaultProvider(network, options) {
		    if (network == null) {
		        network = "homestead";
		    }
		    // If passed a URL, figure out the right type of provider based on the scheme
		    if (typeof (network) === "string") {
		        // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
		        // Handle http and ws (and their secure variants)
		        var match = network.match(/^(ws|http)s?:/i);
		        if (match) {
		            switch (match[1].toLowerCase()) {
		                case "http":
		                case "https":
		                    return new json_rpc_provider_1.JsonRpcProvider(network);
		                case "ws":
		                case "wss":
		                    return new websocket_provider_1.WebSocketProvider(network);
		                default:
		                    logger.throwArgumentError("unsupported URL scheme", "network", network);
		            }
		        }
		    }
		    var n = (0, networks_1.getNetwork)(network);
		    if (!n || !n._defaultProvider) {
		        logger.throwError("unsupported getDefaultProvider network", logger_1.Logger.errors.NETWORK_ERROR, {
		            operation: "getDefaultProvider",
		            network: network
		        });
		    }
		    return n._defaultProvider({
		        FallbackProvider: fallback_provider_1.FallbackProvider,
		        AlchemyProvider: alchemy_provider_1.AlchemyProvider,
		        AnkrProvider: ankr_provider_1.AnkrProvider,
		        CloudflareProvider: cloudflare_provider_1.CloudflareProvider,
		        EtherscanProvider: etherscan_provider_1.EtherscanProvider,
		        InfuraProvider: infura_provider_1.InfuraProvider,
		        JsonRpcProvider: json_rpc_provider_1.JsonRpcProvider,
		        NodesmithProvider: nodesmith_provider_1.NodesmithProvider,
		        PocketProvider: pocket_provider_1.PocketProvider,
		        Web3Provider: web3_provider_1.Web3Provider,
		        IpcProvider: ipc_provider_1.IpcProvider,
		    }, options);
		}
		exports.getDefaultProvider = getDefaultProvider;
		
	} (lib$4));

	var index$6 = /*@__PURE__*/getDefaultExportFromCjs(lib$4);

	var utils$1 = {};

	var lib$1 = {};

	var _version$2 = {};

	"use strict";
	Object.defineProperty(_version$2, "__esModule", { value: true });
	var version$2 = _version$2.version = void 0;
	version$2 = _version$2.version = "solidity/5.7.0";

	"use strict";
	Object.defineProperty(lib$1, "__esModule", { value: true });
	var sha256_1 = lib$1.sha256 = keccak256_2 = lib$1.keccak256 = pack_1 = lib$1.pack = void 0;
	var bignumber_1$1 = lib$s;
	var bytes_1 = lib$r;
	var keccak256_1 = lib$n;
	var sha2_1 = lib$8;
	var strings_1 = lib$k;
	var regexBytes = new RegExp("^bytes([0-9]+)$");
	var regexNumber = new RegExp("^(u?int)([0-9]*)$");
	var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
	var Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
	var logger_1$1 = lib$q;
	var _version_1$1 = _version$2;
	var logger$1 = new logger_1$1.Logger(_version_1$1.version);
	function _pack(type, value, isArray) {
	    switch (type) {
	        case "address":
	            if (isArray) {
	                return (0, bytes_1.zeroPad)(value, 32);
	            }
	            return (0, bytes_1.arrayify)(value);
	        case "string":
	            return (0, strings_1.toUtf8Bytes)(value);
	        case "bytes":
	            return (0, bytes_1.arrayify)(value);
	        case "bool":
	            value = (value ? "0x01" : "0x00");
	            if (isArray) {
	                return (0, bytes_1.zeroPad)(value, 32);
	            }
	            return (0, bytes_1.arrayify)(value);
	    }
	    var match = type.match(regexNumber);
	    if (match) {
	        //let signed = (match[1] === "int")
	        var size = parseInt(match[2] || "256");
	        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
	            logger$1.throwArgumentError("invalid number type", "type", type);
	        }
	        if (isArray) {
	            size = 256;
	        }
	        value = bignumber_1$1.BigNumber.from(value).toTwos(size);
	        return (0, bytes_1.zeroPad)(value, size / 8);
	    }
	    match = type.match(regexBytes);
	    if (match) {
	        var size = parseInt(match[1]);
	        if (String(size) !== match[1] || size === 0 || size > 32) {
	            logger$1.throwArgumentError("invalid bytes type", "type", type);
	        }
	        if ((0, bytes_1.arrayify)(value).byteLength !== size) {
	            logger$1.throwArgumentError("invalid value for " + type, "value", value);
	        }
	        if (isArray) {
	            return (0, bytes_1.arrayify)((value + Zeros).substring(0, 66));
	        }
	        return value;
	    }
	    match = type.match(regexArray);
	    if (match && Array.isArray(value)) {
	        var baseType_1 = match[1];
	        var count = parseInt(match[2] || String(value.length));
	        if (count != value.length) {
	            logger$1.throwArgumentError("invalid array length for " + type, "value", value);
	        }
	        var result_1 = [];
	        value.forEach(function (value) {
	            result_1.push(_pack(baseType_1, value, true));
	        });
	        return (0, bytes_1.concat)(result_1);
	    }
	    return logger$1.throwArgumentError("invalid type", "type", type);
	}
	// @TODO: Array Enum
	function pack(types, values) {
	    if (types.length != values.length) {
	        logger$1.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
	    }
	    var tight = [];
	    types.forEach(function (type, index) {
	        tight.push(_pack(type, values[index]));
	    });
	    return (0, bytes_1.hexlify)((0, bytes_1.concat)(tight));
	}
	var pack_1 = lib$1.pack = pack;
	function keccak256(types, values) {
	    return (0, keccak256_1.keccak256)(pack(types, values));
	}
	var keccak256_2 = lib$1.keccak256 = keccak256;
	function sha256(types, values) {
	    return (0, sha2_1.sha256)(pack(types, values));
	}
	sha256_1 = lib$1.sha256 = sha256;

	var lib = {};

	var _version$1 = {};

	"use strict";
	Object.defineProperty(_version$1, "__esModule", { value: true });
	var version$1 = _version$1.version = void 0;
	version$1 = _version$1.version = "units/5.7.0";

	"use strict";
	Object.defineProperty(lib, "__esModule", { value: true });
	var parseEther_1 = lib.parseEther = formatEther_1 = lib.formatEther = parseUnits_1 = lib.parseUnits = formatUnits_1 = lib.formatUnits = commify_1 = lib.commify = void 0;
	var bignumber_1 = lib$s;
	var logger_1 = lib$q;
	var _version_1 = _version$1;
	var logger = new logger_1.Logger(_version_1.version);
	var names = [
	    "wei",
	    "kwei",
	    "mwei",
	    "gwei",
	    "szabo",
	    "finney",
	    "ether",
	];
	// Some environments have issues with RegEx that contain back-tracking, so we cannot
	// use them.
	function commify(value) {
	    var comps = String(value).split(".");
	    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === "." || value === "-.") {
	        logger.throwArgumentError("invalid value", "value", value);
	    }
	    // Make sure we have at least one whole digit (0 if none)
	    var whole = comps[0];
	    var negative = "";
	    if (whole.substring(0, 1) === "-") {
	        negative = "-";
	        whole = whole.substring(1);
	    }
	    // Make sure we have at least 1 whole digit with no leading zeros
	    while (whole.substring(0, 1) === "0") {
	        whole = whole.substring(1);
	    }
	    if (whole === "") {
	        whole = "0";
	    }
	    var suffix = "";
	    if (comps.length === 2) {
	        suffix = "." + (comps[1] || "0");
	    }
	    while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
	        suffix = suffix.substring(0, suffix.length - 1);
	    }
	    var formatted = [];
	    while (whole.length) {
	        if (whole.length <= 3) {
	            formatted.unshift(whole);
	            break;
	        }
	        else {
	            var index = whole.length - 3;
	            formatted.unshift(whole.substring(index));
	            whole = whole.substring(0, index);
	        }
	    }
	    return negative + formatted.join(",") + suffix;
	}
	var commify_1 = lib.commify = commify;
	function formatUnits(value, unitName) {
	    if (typeof (unitName) === "string") {
	        var index = names.indexOf(unitName);
	        if (index !== -1) {
	            unitName = 3 * index;
	        }
	    }
	    return (0, bignumber_1.formatFixed)(value, (unitName != null) ? unitName : 18);
	}
	var formatUnits_1 = lib.formatUnits = formatUnits;
	function parseUnits(value, unitName) {
	    if (typeof (value) !== "string") {
	        logger.throwArgumentError("value must be a string", "value", value);
	    }
	    if (typeof (unitName) === "string") {
	        var index = names.indexOf(unitName);
	        if (index !== -1) {
	            unitName = 3 * index;
	        }
	    }
	    return (0, bignumber_1.parseFixed)(value, (unitName != null) ? unitName : 18);
	}
	var parseUnits_1 = lib.parseUnits = parseUnits;
	function formatEther(wei) {
	    return formatUnits(wei, 18);
	}
	var formatEther_1 = lib.formatEther = formatEther;
	function parseEther(ether) {
	    return parseUnits(ether, 18);
	}
	parseEther_1 = lib.parseEther = parseEther;

	(function (exports) {
		"use strict";
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
		    Object.defineProperty(o, "default", { enumerable: true, value: v });
		}) : function(o, v) {
		    o["default"] = v;
		});
		var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
		    if (mod && mod.__esModule) return mod;
		    var result = {};
		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		    __setModuleDefault(result, mod);
		    return result;
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
		exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.dnsEncode = exports.parseBytes32String = void 0;
		var abi_1 = lib$t;
		Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi_1.AbiCoder; } });
		Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abi_1.checkResultErrors; } });
		Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return abi_1.ConstructorFragment; } });
		Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abi_1.defaultAbiCoder; } });
		Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return abi_1.ErrorFragment; } });
		Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return abi_1.EventFragment; } });
		Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return abi_1.FormatTypes; } });
		Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return abi_1.Fragment; } });
		Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return abi_1.FunctionFragment; } });
		Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return abi_1.Indexed; } });
		Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return abi_1.Interface; } });
		Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return abi_1.LogDescription; } });
		Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return abi_1.ParamType; } });
		Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return abi_1.TransactionDescription; } });
		var address_1 = lib$o;
		Object.defineProperty(exports, "getAddress", { enumerable: true, get: function () { return address_1.getAddress; } });
		Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function () { return address_1.getCreate2Address; } });
		Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function () { return address_1.getContractAddress; } });
		Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function () { return address_1.getIcapAddress; } });
		Object.defineProperty(exports, "isAddress", { enumerable: true, get: function () { return address_1.isAddress; } });
		var base64 = __importStar(lib$h);
		exports.base64 = base64;
		var basex_1 = lib$a;
		Object.defineProperty(exports, "base58", { enumerable: true, get: function () { return basex_1.Base58; } });
		var bytes_1 = lib$r;
		Object.defineProperty(exports, "arrayify", { enumerable: true, get: function () { return bytes_1.arrayify; } });
		Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return bytes_1.concat; } });
		Object.defineProperty(exports, "hexConcat", { enumerable: true, get: function () { return bytes_1.hexConcat; } });
		Object.defineProperty(exports, "hexDataSlice", { enumerable: true, get: function () { return bytes_1.hexDataSlice; } });
		Object.defineProperty(exports, "hexDataLength", { enumerable: true, get: function () { return bytes_1.hexDataLength; } });
		Object.defineProperty(exports, "hexlify", { enumerable: true, get: function () { return bytes_1.hexlify; } });
		Object.defineProperty(exports, "hexStripZeros", { enumerable: true, get: function () { return bytes_1.hexStripZeros; } });
		Object.defineProperty(exports, "hexValue", { enumerable: true, get: function () { return bytes_1.hexValue; } });
		Object.defineProperty(exports, "hexZeroPad", { enumerable: true, get: function () { return bytes_1.hexZeroPad; } });
		Object.defineProperty(exports, "isBytes", { enumerable: true, get: function () { return bytes_1.isBytes; } });
		Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function () { return bytes_1.isBytesLike; } });
		Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return bytes_1.isHexString; } });
		Object.defineProperty(exports, "joinSignature", { enumerable: true, get: function () { return bytes_1.joinSignature; } });
		Object.defineProperty(exports, "zeroPad", { enumerable: true, get: function () { return bytes_1.zeroPad; } });
		Object.defineProperty(exports, "splitSignature", { enumerable: true, get: function () { return bytes_1.splitSignature; } });
		Object.defineProperty(exports, "stripZeros", { enumerable: true, get: function () { return bytes_1.stripZeros; } });
		var hash_1 = lib$j;
		Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return hash_1._TypedDataEncoder; } });
		Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return hash_1.dnsEncode; } });
		Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return hash_1.hashMessage; } });
		Object.defineProperty(exports, "id", { enumerable: true, get: function () { return hash_1.id; } });
		Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return hash_1.isValidName; } });
		Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return hash_1.namehash; } });
		var hdnode_1 = lib$b;
		Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function () { return hdnode_1.defaultPath; } });
		Object.defineProperty(exports, "entropyToMnemonic", { enumerable: true, get: function () { return hdnode_1.entropyToMnemonic; } });
		Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function () { return hdnode_1.getAccountPath; } });
		Object.defineProperty(exports, "HDNode", { enumerable: true, get: function () { return hdnode_1.HDNode; } });
		Object.defineProperty(exports, "isValidMnemonic", { enumerable: true, get: function () { return hdnode_1.isValidMnemonic; } });
		Object.defineProperty(exports, "mnemonicToEntropy", { enumerable: true, get: function () { return hdnode_1.mnemonicToEntropy; } });
		Object.defineProperty(exports, "mnemonicToSeed", { enumerable: true, get: function () { return hdnode_1.mnemonicToSeed; } });
		var json_wallets_1 = lib$5;
		Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return json_wallets_1.getJsonWalletAddress; } });
		var keccak256_1 = lib$n;
		Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return keccak256_1.keccak256; } });
		var logger_1 = lib$q;
		Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return logger_1.Logger; } });
		var sha2_1 = lib$8;
		Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return sha2_1.computeHmac; } });
		Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return sha2_1.ripemd160; } });
		Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_1.sha256; } });
		Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_1.sha512; } });
		var solidity_1 = lib$1;
		Object.defineProperty(exports, "solidityKeccak256", { enumerable: true, get: function () { return solidity_1.keccak256; } });
		Object.defineProperty(exports, "solidityPack", { enumerable: true, get: function () { return solidity_1.pack; } });
		Object.defineProperty(exports, "soliditySha256", { enumerable: true, get: function () { return solidity_1.sha256; } });
		var random_1 = lib$6;
		Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_1.randomBytes; } });
		Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return random_1.shuffled; } });
		var properties_1 = lib$p;
		Object.defineProperty(exports, "checkProperties", { enumerable: true, get: function () { return properties_1.checkProperties; } });
		Object.defineProperty(exports, "deepCopy", { enumerable: true, get: function () { return properties_1.deepCopy; } });
		Object.defineProperty(exports, "defineReadOnly", { enumerable: true, get: function () { return properties_1.defineReadOnly; } });
		Object.defineProperty(exports, "getStatic", { enumerable: true, get: function () { return properties_1.getStatic; } });
		Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function () { return properties_1.resolveProperties; } });
		Object.defineProperty(exports, "shallowCopy", { enumerable: true, get: function () { return properties_1.shallowCopy; } });
		var RLP = __importStar(lib$m);
		exports.RLP = RLP;
		var signing_key_1 = lib$d;
		Object.defineProperty(exports, "computePublicKey", { enumerable: true, get: function () { return signing_key_1.computePublicKey; } });
		Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function () { return signing_key_1.recoverPublicKey; } });
		Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function () { return signing_key_1.SigningKey; } });
		var strings_1 = lib$k;
		Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return strings_1.formatBytes32String; } });
		Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return strings_1.nameprep; } });
		Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return strings_1.parseBytes32String; } });
		Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return strings_1._toEscapedUtf8String; } });
		Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return strings_1.toUtf8Bytes; } });
		Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return strings_1.toUtf8CodePoints; } });
		Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return strings_1.toUtf8String; } });
		Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return strings_1.Utf8ErrorFuncs; } });
		var transactions_1 = lib$e;
		Object.defineProperty(exports, "accessListify", { enumerable: true, get: function () { return transactions_1.accessListify; } });
		Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function () { return transactions_1.computeAddress; } });
		Object.defineProperty(exports, "parseTransaction", { enumerable: true, get: function () { return transactions_1.parse; } });
		Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function () { return transactions_1.recoverAddress; } });
		Object.defineProperty(exports, "serializeTransaction", { enumerable: true, get: function () { return transactions_1.serialize; } });
		Object.defineProperty(exports, "TransactionTypes", { enumerable: true, get: function () { return transactions_1.TransactionTypes; } });
		var units_1 = lib;
		Object.defineProperty(exports, "commify", { enumerable: true, get: function () { return units_1.commify; } });
		Object.defineProperty(exports, "formatEther", { enumerable: true, get: function () { return units_1.formatEther; } });
		Object.defineProperty(exports, "parseEther", { enumerable: true, get: function () { return units_1.parseEther; } });
		Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function () { return units_1.formatUnits; } });
		Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function () { return units_1.parseUnits; } });
		var wallet_1 = lib$c;
		Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function () { return wallet_1.verifyMessage; } });
		Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function () { return wallet_1.verifyTypedData; } });
		var web_1 = lib$2;
		Object.defineProperty(exports, "_fetchData", { enumerable: true, get: function () { return web_1._fetchData; } });
		Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function () { return web_1.fetchJson; } });
		Object.defineProperty(exports, "poll", { enumerable: true, get: function () { return web_1.poll; } });
		////////////////////////
		// Enums
		var sha2_2 = lib$8;
		Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return sha2_2.SupportedAlgorithm; } });
		var strings_2 = lib$k;
		Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return strings_2.UnicodeNormalizationForm; } });
		Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return strings_2.Utf8ErrorReason; } });
		
	} (utils$1));

	var utils = /*@__PURE__*/getDefaultExportFromCjs(utils$1);

	var _version = {};

	"use strict";
	Object.defineProperty(_version, "__esModule", { value: true });
	var version = _version.version = void 0;
	version = _version.version = "ethers/5.7.2";

	(function (exports) {
		"use strict";
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
		    Object.defineProperty(o, "default", { enumerable: true, value: v });
		}) : function(o, v) {
		    o["default"] = v;
		});
		var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
		    if (mod && mod.__esModule) return mod;
		    var result = {};
		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		    __setModuleDefault(result, mod);
		    return result;
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = void 0;
		var contracts_1 = lib$u;
		Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return contracts_1.BaseContract; } });
		Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return contracts_1.Contract; } });
		Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return contracts_1.ContractFactory; } });
		var bignumber_1 = lib$s;
		Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return bignumber_1.BigNumber; } });
		Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return bignumber_1.FixedNumber; } });
		var abstract_signer_1 = lib$f;
		Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return abstract_signer_1.Signer; } });
		Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return abstract_signer_1.VoidSigner; } });
		var wallet_1 = lib$c;
		Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return wallet_1.Wallet; } });
		var constants = __importStar(lib$l);
		exports.constants = constants;
		var providers = __importStar(lib$4);
		exports.providers = providers;
		var providers_1 = lib$4;
		Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return providers_1.getDefaultProvider; } });
		var wordlists_1 = lib$7;
		Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return wordlists_1.Wordlist; } });
		Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return wordlists_1.wordlists; } });
		var utils = __importStar(utils$1);
		exports.utils = utils;
		var logger_1 = lib$q;
		Object.defineProperty(exports, "errors", { enumerable: true, get: function () { return logger_1.ErrorCode; } });
		////////////////////////
		// Compile-Time Constants
		// This is generated by "npm run dist"
		var _version_1 = _version;
		Object.defineProperty(exports, "version", { enumerable: true, get: function () { return _version_1.version; } });
		var logger = new logger_1.Logger(_version_1.version);
		exports.logger = logger;
		
	} (ethers$1));

	var ethers = /*@__PURE__*/getDefaultExportFromCjs(ethers$1);

	(function (exports) {
		"use strict";
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
		    Object.defineProperty(o, "default", { enumerable: true, value: v });
		}) : function(o, v) {
		    o["default"] = v;
		});
		var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
		    if (mod && mod.__esModule) return mod;
		    var result = {};
		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		    __setModuleDefault(result, mod);
		    return result;
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = exports.ethers = void 0;
		// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js
		var ethers = __importStar(ethers$1);
		exports.ethers = ethers;
		try {
		    var anyGlobal = window;
		    if (anyGlobal._ethers == null) {
		        anyGlobal._ethers = ethers;
		    }
		}
		catch (error) { }
		var ethers_1 = ethers$1;
		Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return ethers_1.Signer; } });
		Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return ethers_1.Wallet; } });
		Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return ethers_1.VoidSigner; } });
		Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return ethers_1.getDefaultProvider; } });
		Object.defineProperty(exports, "providers", { enumerable: true, get: function () { return ethers_1.providers; } });
		Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return ethers_1.BaseContract; } });
		Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return ethers_1.Contract; } });
		Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return ethers_1.ContractFactory; } });
		Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return ethers_1.BigNumber; } });
		Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return ethers_1.FixedNumber; } });
		Object.defineProperty(exports, "constants", { enumerable: true, get: function () { return ethers_1.constants; } });
		Object.defineProperty(exports, "errors", { enumerable: true, get: function () { return ethers_1.errors; } });
		Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return ethers_1.logger; } });
		Object.defineProperty(exports, "utils", { enumerable: true, get: function () { return ethers_1.utils; } });
		Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return ethers_1.wordlists; } });
		////////////////////////
		// Compile-Time Constants
		Object.defineProperty(exports, "version", { enumerable: true, get: function () { return ethers_1.version; } });
		Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return ethers_1.Wordlist; } });
		
	} (lib$v));

	var index$5 = /*@__PURE__*/getDefaultExportFromCjs(lib$v);

	var abi$5 = [
		{
			inputs: [
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "bytes32",
					name: "domainSeparator",
					type: "bytes32"
				},
				{
					indexed: false,
					internalType: "bytes",
					name: "domainValue",
					type: "bytes"
				}
			],
			name: "DomainRegistered",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "userAddress",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "relayerAddress",
					type: "address"
				},
				{
					indexed: true,
					internalType: "bytes",
					name: "functionSignature",
					type: "bytes"
				}
			],
			name: "MetaTransactionExecuted",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "previousOwner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "OwnershipTransferred",
			type: "event"
		},
		{
			inputs: [
			],
			name: "CUSTOM_FORWARD_REQUEST_TYPEHASH",
			outputs: [
				{
					internalType: "bytes32",
					name: "",
					type: "bytes32"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "EIP712_DOMAIN_TYPE",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "FORWARD_REQUEST_TYPEHASH",
			outputs: [
				{
					internalType: "bytes32",
					name: "",
					type: "bytes32"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "REQUEST_TYPEHASH",
			outputs: [
				{
					internalType: "bytes32",
					name: "",
					type: "bytes32"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "bytes32",
					name: "",
					type: "bytes32"
				}
			],
			name: "domains",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "from",
							type: "address"
						},
						{
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							internalType: "address",
							name: "token",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "txGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "tokenGasPrice",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "batchId",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "batchNonce",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "deadline",
							type: "uint256"
						},
						{
							internalType: "bytes",
							name: "data",
							type: "bytes"
						}
					],
					internalType: "struct ForwardRequestTypesV2.ERC20ForwardRequest",
					name: "req",
					type: "tuple"
				},
				{
					internalType: "bytes32",
					name: "domainSeparator",
					type: "bytes32"
				},
				{
					internalType: "bytes",
					name: "sig",
					type: "bytes"
				}
			],
			name: "executeEIP712",
			outputs: [
				{
					internalType: "bool",
					name: "success",
					type: "bool"
				},
				{
					internalType: "bytes",
					name: "ret",
					type: "bytes"
				}
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "string",
							name: "warning",
							type: "string"
						},
						{
							internalType: "string",
							name: "info",
							type: "string"
						},
						{
							internalType: "string",
							name: "action",
							type: "string"
						},
						{
							components: [
								{
									internalType: "address",
									name: "from",
									type: "address"
								},
								{
									internalType: "address",
									name: "to",
									type: "address"
								},
								{
									internalType: "address",
									name: "token",
									type: "address"
								},
								{
									internalType: "uint256",
									name: "txGas",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "tokenGasPrice",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "batchId",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "batchNonce",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "deadline",
									type: "uint256"
								},
								{
									internalType: "bytes",
									name: "data",
									type: "bytes"
								}
							],
							internalType: "struct ForwardRequestTypesV2.ERC20ForwardRequest",
							name: "request",
							type: "tuple"
						}
					],
					internalType: "struct ForwardRequestTypesV2.CustomForwardRequest",
					name: "req",
					type: "tuple"
				},
				{
					internalType: "bytes32",
					name: "domainSeparator",
					type: "bytes32"
				},
				{
					internalType: "bytes",
					name: "sig",
					type: "bytes"
				}
			],
			name: "executeEIP712Custom",
			outputs: [
				{
					internalType: "bool",
					name: "success",
					type: "bool"
				},
				{
					internalType: "bytes",
					name: "ret",
					type: "bytes"
				}
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "from",
							type: "address"
						},
						{
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							internalType: "address",
							name: "token",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "txGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "tokenGasPrice",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "batchId",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "batchNonce",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "deadline",
							type: "uint256"
						},
						{
							internalType: "bytes",
							name: "data",
							type: "bytes"
						}
					],
					internalType: "struct ForwardRequestTypesV2.ERC20ForwardRequest",
					name: "req",
					type: "tuple"
				},
				{
					internalType: "bytes",
					name: "sig",
					type: "bytes"
				}
			],
			name: "executePersonalSign",
			outputs: [
				{
					internalType: "bool",
					name: "success",
					type: "bool"
				},
				{
					internalType: "bytes",
					name: "ret",
					type: "bytes"
				}
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "batchId",
					type: "uint256"
				}
			],
			name: "getNonce",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "owner",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "name",
					type: "string"
				},
				{
					internalType: "string",
					name: "version",
					type: "string"
				}
			],
			name: "registerDomainSeparator",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "renounceOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "transferOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "from",
							type: "address"
						},
						{
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							internalType: "address",
							name: "token",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "txGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "tokenGasPrice",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "batchId",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "batchNonce",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "deadline",
							type: "uint256"
						},
						{
							internalType: "bytes",
							name: "data",
							type: "bytes"
						}
					],
					internalType: "struct ForwardRequestTypesV2.ERC20ForwardRequest",
					name: "req",
					type: "tuple"
				},
				{
					internalType: "bytes32",
					name: "domainSeparator",
					type: "bytes32"
				},
				{
					internalType: "bytes",
					name: "sig",
					type: "bytes"
				}
			],
			name: "verifyEIP712",
			outputs: [
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "from",
							type: "address"
						},
						{
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							internalType: "address",
							name: "token",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "txGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "tokenGasPrice",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "batchId",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "batchNonce",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "deadline",
							type: "uint256"
						},
						{
							internalType: "bytes",
							name: "data",
							type: "bytes"
						}
					],
					internalType: "struct ForwardRequestTypesV2.ERC20ForwardRequest",
					name: "req",
					type: "tuple"
				},
				{
					internalType: "bytes",
					name: "sig",
					type: "bytes"
				}
			],
			name: "verifyPersonalSign",
			outputs: [
			],
			stateMutability: "view",
			type: "function"
		}
	];
	var require$$2$1 = {
		abi: abi$5
	};

	var abi$4 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_gatewayProxy",
					type: "address"
				},
				{
					internalType: "address",
					name: "_accessCheckerContract",
					type: "address"
				},
				{
					internalType: "address",
					name: "_forwarder",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "approved",
					type: "address"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "Approval",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: false,
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "ApprovalForAll",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "previousOwner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "OwnershipTransferred",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "Transfer",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "address",
					name: "oldAccessCheckerContract",
					type: "address"
				},
				{
					indexed: false,
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "accessCheckerContractChanged",
			type: "event"
		},
		{
			inputs: [
			],
			name: "INVERSE_BASIS_POINT",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "accessCheckerContract",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "approve",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				}
			],
			name: "balanceOf",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "baseURI",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "counter",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "gatewayProxy",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getApproved",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getFee",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getGatewayAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getMinter",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "minter",
					type: "address"
				}
			],
			name: "getTokenByMinter",
			outputs: [
				{
					internalType: "uint256[]",
					name: "",
					type: "uint256[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getTrustedForwarder",
			outputs: [
				{
					internalType: "address",
					name: "forwarder",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "address",
					name: "operator",
					type: "address"
				}
			],
			name: "isApprovedForAll",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "forwarder",
					type: "address"
				}
			],
			name: "isTrustedForwarder",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_getKeyURl",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_royaltiesPercentage",
					type: "uint256"
				},
				{
					internalType: "bytes32",
					name: "_documentId",
					type: "bytes32"
				}
			],
			name: "mint",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "name",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "owner",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "ownerOf",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "renounceOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_tokenId",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_salePrice",
					type: "uint256"
				}
			],
			name: "royaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "receiver",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltyAmount",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "safeTransferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "setAccessCheckerContract",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "setApprovalForAll",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_baseURI",
					type: "string"
				}
			],
			name: "setBaseURI",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "bytes4",
					name: "interfaceId",
					type: "bytes4"
				}
			],
			name: "supportsInterface",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "symbol",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToRoyaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "recipient",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltiesPercentage",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToTokenInfo",
			outputs: [
				{
					internalType: "bytes32",
					name: "documentId",
					type: "bytes32"
				},
				{
					internalType: "address",
					name: "minterAddress",
					type: "address"
				},
				{
					internalType: "string",
					name: "getKeyURl",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenOfOwnerByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "tokenURI",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "totalSupply",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "transferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "transferOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "versionRecipient",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "pure",
			type: "function"
		}
	];
	var require$$3 = {
		abi: abi$4
	};

	var abi$3 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_gatewayProxy",
					type: "address"
				},
				{
					internalType: "address",
					name: "_accessCheckerContract",
					type: "address"
				},
				{
					internalType: "address",
					name: "_forwarder",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "approved",
					type: "address"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "Approval",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: false,
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "ApprovalForAll",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "previousOwner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "OwnershipTransferred",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "Transfer",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "address",
					name: "oldAccessCheckerContract",
					type: "address"
				},
				{
					indexed: false,
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "accessCheckerContractChanged",
			type: "event"
		},
		{
			inputs: [
			],
			name: "INVERSE_BASIS_POINT",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "accessCheckerContract",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "approve",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				}
			],
			name: "balanceOf",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "baseURI",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "counter",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "gatewayProxy",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getApproved",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getFee",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getGatewayAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getMinter",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "minter",
					type: "address"
				}
			],
			name: "getTokenByMinter",
			outputs: [
				{
					internalType: "uint256[]",
					name: "",
					type: "uint256[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getTrustedForwarder",
			outputs: [
				{
					internalType: "address",
					name: "forwarder",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "address",
					name: "operator",
					type: "address"
				}
			],
			name: "isApprovedForAll",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "forwarder",
					type: "address"
				}
			],
			name: "isTrustedForwarder",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_metadataURl",
					type: "string"
				},
				{
					internalType: "string",
					name: "_getKeyURl",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_royaltiesPercentage",
					type: "uint256"
				},
				{
					internalType: "bytes32",
					name: "_documentId",
					type: "bytes32"
				}
			],
			name: "mint",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "name",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "owner",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "ownerOf",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "renounceOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_tokenId",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_salePrice",
					type: "uint256"
				}
			],
			name: "royaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "receiver",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltyAmount",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "safeTransferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "setAccessCheckerContract",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "setApprovalForAll",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_baseURI",
					type: "string"
				}
			],
			name: "setBaseURI",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "bytes4",
					name: "interfaceId",
					type: "bytes4"
				}
			],
			name: "supportsInterface",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "symbol",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToRoyaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "recipient",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltiesPercentage",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToTokenInfo",
			outputs: [
				{
					internalType: "bytes32",
					name: "documentId",
					type: "bytes32"
				},
				{
					internalType: "address",
					name: "minterAddress",
					type: "address"
				},
				{
					internalType: "string",
					name: "getKeyURl",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenOfOwnerByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "tokenURI",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "totalSupply",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "transferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "transferOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "versionRecipient",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "pure",
			type: "function"
		}
	];
	var require$$4 = {
		abi: abi$3
	};

	var biconomyHelper = {};

	"use strict";
	Object.defineProperty(biconomyHelper, "__esModule", {
	  value: true
	});
	var getDomainSeparator_1 = biconomyHelper.getDomainSeparator = getDataToSignForEIP712_1 = biconomyHelper.getDataToSignForEIP712 = buildForwardTxRequest_1 = biconomyHelper.buildForwardTxRequest = void 0;
	var ethers_1$6 = lib$v;
	var biconomyForwarderDomainData = {
	  name: "Biconomy Forwarder",
	  version: "1",
	  verifyingContract: "",
	  salt: ""
	};
	var domainType = [{
	  name: "name",
	  type: "string"
	}, {
	  name: "version",
	  type: "string"
	}, {
	  name: "verifyingContract",
	  type: "address"
	}, {
	  name: "salt",
	  type: "bytes32"
	}];
	var forwardRequestType = [{
	  name: "from",
	  type: "address"
	}, {
	  name: "to",
	  type: "address"
	}, {
	  name: "token",
	  type: "address"
	}, {
	  name: "txGas",
	  type: "uint256"
	}, {
	  name: "tokenGasPrice",
	  type: "uint256"
	}, {
	  name: "batchId",
	  type: "uint256"
	}, {
	  name: "batchNonce",
	  type: "uint256"
	}, {
	  name: "deadline",
	  type: "uint256"
	}, {
	  name: "data",
	  type: "bytes"
	}];
	var buildForwardTxRequest = function (account, toAddress, gasLimitNum, batchNonce, data) {
	  var req = {
	    from: account,
	    to: toAddress,
	    token: "0x0000000000000000000000000000000000000000",
	    txGas: gasLimitNum,
	    tokenGasPrice: "0",
	    batchId: parseInt("0"),
	    batchNonce: parseInt(batchNonce),
	    deadline: Math.floor(Date.now() / 1000 + 3600),
	    data: data
	  };
	  return req;
	};
	var buildForwardTxRequest_1 = biconomyHelper.buildForwardTxRequest = buildForwardTxRequest;
	var getDataToSignForEIP712 = function (request, forwarderAddress, chainId) {
	  var domainData = biconomyForwarderDomainData;
	  domainData.verifyingContract = forwarderAddress;
	  domainData.salt = ethers_1$6.ethers.utils.hexZeroPad(ethers_1$6.ethers.BigNumber.from(chainId).toHexString(), 32);
	  var dataToSign = JSON.stringify({
	    types: {
	      EIP712Domain: domainType,
	      ERC20ForwardRequest: forwardRequestType
	    },
	    domain: domainData,
	    primaryType: "ERC20ForwardRequest",
	    message: request
	  });
	  return dataToSign;
	};
	var getDataToSignForEIP712_1 = biconomyHelper.getDataToSignForEIP712 = getDataToSignForEIP712;
	var getDomainSeparator = function (forwarderAddress, chainId) {
	  var domainSeparator = ethers_1$6.ethers.utils.keccak256(ethers_1$6.ethers.utils.defaultAbiCoder.encode(["bytes32", "bytes32", "bytes32", "address", "bytes32"], [ethers_1$6.ethers.utils.id("EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)"), ethers_1$6.ethers.utils.id(biconomyForwarderDomainData.name), ethers_1$6.ethers.utils.id(biconomyForwarderDomainData.version), forwarderAddress, ethers_1$6.ethers.utils.hexZeroPad(ethers_1$6.ethers.BigNumber.from(chainId).toHexString(), 32)]));
	  return domainSeparator;
	};
	getDomainSeparator_1 = biconomyHelper.getDomainSeparator = getDomainSeparator;

	"use strict";
	var __createBinding$5 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$5 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$5 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
	  __setModuleDefault$5(result, mod);
	  return result;
	};
	var __awaiter$a = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$a = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	var __importDefault$6 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(VWBLMetaTxProtocol, "__esModule", {
	  value: true
	});
	var VWBLNFTMetaTx_1 = VWBLMetaTxProtocol.VWBLNFTMetaTx = void 0;
	var axios_1$6 = __importDefault$6(axiosExports$1);
	var ethers_1$5 = lib$v;
	var forwarder = __importStar$5(require$$2$1);
	var vwblMetaTx = __importStar$5(require$$3);
	var vwblMetaTxIpfs = __importStar$5(require$$4);
	var biconomyHelper_1 = biconomyHelper;
	var VWBLNFTMetaTx = /** @class */function () {
	  function VWBLNFTMetaTx(biconomyAPIKey, walletProvider, nftAddress, forwarderAddress) {
	    this.biconomyAPIKey = biconomyAPIKey;
	    this.walletProvider = walletProvider;
	    this.nftAddress = nftAddress;
	    this.forwarderAddress = forwarderAddress;
	  }
	  VWBLNFTMetaTx.prototype.mintToken = function (decryptUrl, royaltiesPercentage, documentId, mintApiId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var walletSigner, myAddress, vwblMetaTxContract, data, chainId, _a, txParam, sig, domainSeparator, receipt, tokenId;
	      return __generator$a(this, function (_b) {
	        switch (_b.label) {
	          case 0:
	            walletSigner = this.walletProvider.getSigner();
	            return [4 /*yield*/, walletSigner.getAddress()];
	          case 1:
	            myAddress = _b.sent();
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTx.abi, walletSigner);
	            return [4 /*yield*/, vwblMetaTxContract.populateTransaction.mint(decryptUrl, royaltiesPercentage, documentId)];
	          case 2:
	            data = _b.sent().data;
	            return [4 /*yield*/, walletSigner.getChainId()];
	          case 3:
	            chainId = _b.sent();
	            return [4 /*yield*/, this.constructMetaTx(myAddress, data, chainId)];
	          case 4:
	            _a = _b.sent(), txParam = _a.txParam, sig = _a.sig, domainSeparator = _a.domainSeparator;
	            console.log("transaction start");
	            return [4 /*yield*/, this.sendTransaction(txParam, sig, myAddress, domainSeparator, mintApiId, "EIP712_SIGN")];
	          case 5:
	            receipt = _b.sent();
	            console.log("transaction end");
	            tokenId = parseToTokenId$2(receipt);
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.mintTokenForIPFS = function (metadataUrl, decryptUrl, royaltiesPercentage, documentId, mintApiId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var walletSigner, myAddress, vwblMetaTxContract, data, chainId, _a, txParam, sig, domainSeparator, receipt, tokenId;
	      return __generator$a(this, function (_b) {
	        switch (_b.label) {
	          case 0:
	            walletSigner = this.walletProvider.getSigner();
	            return [4 /*yield*/, walletSigner.getAddress()];
	          case 1:
	            myAddress = _b.sent();
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, walletSigner);
	            return [4 /*yield*/, vwblMetaTxContract.populateTransaction.mint(metadataUrl, decryptUrl, royaltiesPercentage, documentId)];
	          case 2:
	            data = _b.sent().data;
	            return [4 /*yield*/, walletSigner.getChainId()];
	          case 3:
	            chainId = _b.sent();
	            return [4 /*yield*/, this.constructMetaTx(myAddress, data, chainId)];
	          case 4:
	            _a = _b.sent(), txParam = _a.txParam, sig = _a.sig, domainSeparator = _a.domainSeparator;
	            console.log("transaction start");
	            return [4 /*yield*/, this.sendTransaction(txParam, sig, myAddress, domainSeparator, mintApiId, "EIP712_SIGN")];
	          case 5:
	            receipt = _b.sent();
	            console.log("transaction end");
	            tokenId = parseToTokenId$2(receipt);
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.getOwnTokenIds = function () {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var walletSigner, myAddress, vwblMetaTxContract, balance;
	      var _this = this;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            walletSigner = this.walletProvider.getSigner();
	            return [4 /*yield*/, walletSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, walletSigner);
	            return [4 /*yield*/, vwblMetaTxContract.callStatic.balanceOf(myAddress)];
	          case 2:
	            balance = _a.sent();
	            return [4 /*yield*/, Promise.all(range$3(Number.parseInt(balance)).map(function (i) {
	              return __awaiter$a(_this, void 0, void 0, function () {
	                var ownTokenId;
	                return __generator$a(this, function (_a) {
	                  switch (_a.label) {
	                    case 0:
	                      return [4 /*yield*/, vwblMetaTxContract.callStatic.tokenOfOwnerByIndex(myAddress, i)];
	                    case 1:
	                      ownTokenId = _a.sent();
	                      return [2 /*return*/, Number.parseInt(ownTokenId)];
	                  }
	                });
	              });
	            }))];
	          case 3:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.getTokenByMinter = function (address) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var vwblMetaTxContract;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, this.walletProvider.getSigner());
	            return [4 /*yield*/, vwblMetaTxContract.callStatic.getTokenByMinter(address)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.getMetadataUrl = function (tokenId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var vwblMetaTxContract;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, this.walletProvider.getSigner());
	            return [4 /*yield*/, vwblMetaTxContract.callStatic.tokenURI(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.getOwner = function (tokenId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var vwblMetaTxContract;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, this.walletProvider.getSigner());
	            return [4 /*yield*/, vwblMetaTxContract.callStatic.ownerOf(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.getMinter = function (tokenId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var vwblMetaTxContract;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, this.walletProvider.getSigner());
	            return [4 /*yield*/, vwblMetaTxContract.callStatic.getMinter(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.isOwnerOf = function (tokenId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var walletSigner, myAddress, owner;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            walletSigner = this.walletProvider.getSigner();
	            return [4 /*yield*/, walletSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.getOwner(tokenId)];
	          case 2:
	            owner = _a.sent();
	            return [2 /*return*/, myAddress === owner];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.isMinterOf = function (tokenId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var walletSigner, myAddress, minter;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            walletSigner = this.walletProvider.getSigner();
	            return [4 /*yield*/, walletSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.getMinter(tokenId)];
	          case 2:
	            minter = _a.sent();
	            return [2 /*return*/, myAddress === minter];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.getFee = function () {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var vwblMetaTxContract;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, this.walletProvider.getSigner());
	            return [4 /*yield*/, vwblMetaTxContract.callStatic.getFee()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.getTokenInfo = function (tokenId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var vwblMetaTxContract;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, this.walletProvider.getSigner());
	            return [4 /*yield*/, vwblMetaTxContract.callStatic.tokenIdToTokenInfo(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.approve = function (operator, tokenId, approveApiId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var walletSigner, myAddress, vwblMetaTxContract, data, chainId, _a, txParam, sig, domainSeparator;
	      return __generator$a(this, function (_b) {
	        switch (_b.label) {
	          case 0:
	            walletSigner = this.walletProvider.getSigner();
	            return [4 /*yield*/, walletSigner.getAddress()];
	          case 1:
	            myAddress = _b.sent();
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, walletSigner);
	            return [4 /*yield*/, vwblMetaTxContract.populateTransaction.approve(operator, tokenId)];
	          case 2:
	            data = _b.sent().data;
	            return [4 /*yield*/, walletSigner.getChainId()];
	          case 3:
	            chainId = _b.sent();
	            return [4 /*yield*/, this.constructMetaTx(myAddress, data, chainId)];
	          case 4:
	            _a = _b.sent(), txParam = _a.txParam, sig = _a.sig, domainSeparator = _a.domainSeparator;
	            console.log("transaction start");
	            return [4 /*yield*/, this.sendTransaction(txParam, sig, myAddress, domainSeparator, approveApiId, "EIP712_SIGN")];
	          case 5:
	            _b.sent();
	            console.log("transaction end");
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLNFTMetaTx.prototype.getApproved = function (tokenId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var vwblMetaTxContract;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, this.walletProvider.getSigner());
	            return [4 /*yield*/, vwblMetaTxContract.callStatic.getApproved(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.setApprovalForAll = function (operator, setApprovalForAllApiId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var walletSigner, myAddress, vwblMetaTxContract, data, chainId, _a, txParam, sig, domainSeparator;
	      return __generator$a(this, function (_b) {
	        switch (_b.label) {
	          case 0:
	            walletSigner = this.walletProvider.getSigner();
	            return [4 /*yield*/, walletSigner.getAddress()];
	          case 1:
	            myAddress = _b.sent();
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, walletSigner);
	            return [4 /*yield*/, vwblMetaTxContract.populateTransaction.setApprovalForAll(operator)];
	          case 2:
	            data = _b.sent().data;
	            return [4 /*yield*/, walletSigner.getChainId()];
	          case 3:
	            chainId = _b.sent();
	            return [4 /*yield*/, this.constructMetaTx(myAddress, data, chainId)];
	          case 4:
	            _a = _b.sent(), txParam = _a.txParam, sig = _a.sig, domainSeparator = _a.domainSeparator;
	            console.log("transaction start");
	            return [4 /*yield*/, this.sendTransaction(txParam, sig, myAddress, domainSeparator, setApprovalForAllApiId, "EIP712_SIGN")];
	          case 5:
	            _b.sent();
	            console.log("transaction end");
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLNFTMetaTx.prototype.isApprovedForAll = function (owner, operator) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var vwblMetaTxContract;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, this.walletProvider.getSigner());
	            return [4 /*yield*/, vwblMetaTxContract.callStatic.isApprovedForAll(owner, operator)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.safeTransfer = function (to, tokenId, safeTransferFromApiId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var walletSigner, myAddress, vwblMetaTxContract, data, chainId, _a, txParam, sig, domainSeparator;
	      return __generator$a(this, function (_b) {
	        switch (_b.label) {
	          case 0:
	            walletSigner = this.walletProvider.getSigner();
	            return [4 /*yield*/, walletSigner.getAddress()];
	          case 1:
	            myAddress = _b.sent();
	            vwblMetaTxContract = new ethers_1$5.ethers.Contract(this.nftAddress, vwblMetaTxIpfs.abi, walletSigner);
	            return [4 /*yield*/, vwblMetaTxContract.populateTransaction.safeTransferFrom(myAddress, to, tokenId)];
	          case 2:
	            data = _b.sent().data;
	            return [4 /*yield*/, walletSigner.getChainId()];
	          case 3:
	            chainId = _b.sent();
	            return [4 /*yield*/, this.constructMetaTx(myAddress, data, chainId)];
	          case 4:
	            _a = _b.sent(), txParam = _a.txParam, sig = _a.sig, domainSeparator = _a.domainSeparator;
	            console.log("transaction start");
	            return [4 /*yield*/, this.sendTransaction(txParam, sig, myAddress, domainSeparator, safeTransferFromApiId, "EIP712_SIGN")];
	          case 5:
	            _b.sent();
	            console.log("transaction end");
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLNFTMetaTx.prototype.constructMetaTx = function (myAddress, data, chainId) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var gasLimit, forwarderContract, batchNonce, txParam, domainSeparator, dataToSign, sig;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.walletProvider.estimateGas({
	              to: this.nftAddress,
	              from: myAddress,
	              data: data
	            })];
	          case 1:
	            gasLimit = _a.sent();
	            forwarderContract = new ethers_1$5.ethers.Contract(this.forwarderAddress, forwarder.abi, this.walletProvider.getSigner());
	            return [4 /*yield*/, forwarderContract.getNonce(myAddress, 0)];
	          case 2:
	            batchNonce = _a.sent();
	            txParam = (0, biconomyHelper_1.buildForwardTxRequest)(myAddress, this.nftAddress, Number(gasLimit.toNumber().toString()), batchNonce, data);
	            domainSeparator = (0, biconomyHelper_1.getDomainSeparator)(this.forwarderAddress, chainId);
	            dataToSign = (0, biconomyHelper_1.getDataToSignForEIP712)(txParam, this.forwarderAddress, chainId);
	            return [4 /*yield*/, this.walletProvider.send("eth_signTypedData_v3", [myAddress, dataToSign])];
	          case 3:
	            sig = _a.sent();
	            return [2 /*return*/, {
	              txParam: txParam,
	              sig: sig,
	              domainSeparator: domainSeparator
	            }];
	        }
	      });
	    });
	  };
	  VWBLNFTMetaTx.prototype.sendTransaction = function (request, sig, myAddress, domainSeparator, methodApiId, signatureType) {
	    return __awaiter$a(this, void 0, void 0, function () {
	      var params, headers, data, receipt, error_1;
	      return __generator$a(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            params = [request, domainSeparator, sig];
	            _a.label = 1;
	          case 1:
	            _a.trys.push([1, 4,, 5]);
	            headers = {
	              "x-api-key": this.biconomyAPIKey,
	              "content-Type": "application/json;charset=utf-8"
	            };
	            return [4 /*yield*/, axios_1$6.default.post("https://api.biconomy.io/api/v2/meta-tx/native", {
	              to: this.nftAddress,
	              apiId: methodApiId,
	              params: params,
	              from: myAddress,
	              signatureType: signatureType
	            }, {
	              headers: headers
	            })];
	          case 2:
	            data = _a.sent().data;
	            console.log("post meta tx resp", data);
	            return [4 /*yield*/, this.walletProvider.waitForTransaction(data.txHash)];
	          case 3:
	            receipt = _a.sent();
	            console.log("confirmed:", data.txHash);
	            return [2 /*return*/, receipt];
	          case 4:
	            error_1 = _a.sent();
	            throw new Error("post meta tx error");
	          case 5:
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  return VWBLNFTMetaTx;
	}();
	VWBLNFTMetaTx_1 = VWBLMetaTxProtocol.VWBLNFTMetaTx = VWBLNFTMetaTx;
	var range$3 = function (length) {
	  return Array.from(Array(length).keys());
	};
	var parseToTokenId$2 = function (receipt) {
	  var eventInterface = new ethers_1$5.ethers.utils.Interface(["event nftDataRegistered(address contractAddress, uint256 tokenId)"]);
	  var tokenId = 0;
	  receipt.logs.forEach(function (log) {
	    // check whether topic is nftDataRegistered(address contractAddress, uint256 tokenId)
	    if (log.topics[0] === "0x957e0e652e4d598197f2c5b25940237e404f3899238efb6f64df2377e9aaf36c") {
	      var description = eventInterface.parseLog({
	        topics: log.topics,
	        data: log.data
	      });
	      tokenId = description.args[1].toNumber();
	    }
	  });
	  return tokenId;
	};

	var VWBLProtocolEthers$1 = {};

	"use strict";
	var __createBinding$4 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$4 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$4 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
	  __setModuleDefault$4(result, mod);
	  return result;
	};
	var __awaiter$9 = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$9 = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	Object.defineProperty(VWBLProtocolEthers$1, "__esModule", {
	  value: true
	});
	var VWBLNFTEthers_1 = VWBLProtocolEthers$1.VWBLNFTEthers = void 0;
	var ethers_1$4 = lib$v;
	var vwbl = __importStar$4(require$$1$3);
	var vwblIPFS = __importStar$4(require$$2$2);
	var VWBLNFTEthers = /** @class */function () {
	  function VWBLNFTEthers(address, isIpfs, ethersProvider, ethersSigner) {
	    this.ethersProvider = ethersProvider;
	    this.ethersSigner = ethersSigner;
	    this.contract = isIpfs ? new ethers_1$4.ethers.Contract(address, vwblIPFS.abi, ethersSigner) : new ethers_1$4.ethers.Contract(address, vwbl.abi, ethersSigner);
	  }
	  VWBLNFTEthers.prototype.mintToken = function (decryptUrl, royaltiesPercentage, documentId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      var fee, tx, receipt, tokenId;
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.getFee()];
	          case 1:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.mint(decryptUrl, royaltiesPercentage, documentId, {
	              value: fee
	            })];
	          case 2:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenId = parseToTokenId$1(receipt);
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.mintTokenForIPFS = function (metadataUrl, decryptUrl, royaltiesPercentage, documentId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      var fee, tx, receipt, tokenId;
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.getFee()];
	          case 1:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.mint(metadataUrl, decryptUrl, royaltiesPercentage, documentId, {
	              value: fee
	            })];
	          case 2:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenId = parseToTokenId$1(receipt);
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.getOwnTokenIds = function () {
	    return __awaiter$9(this, void 0, void 0, function () {
	      var myAddress, balance;
	      var _this = this;
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.ethersSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.contract.callStatic.balanceOf(myAddress)];
	          case 2:
	            balance = _a.sent();
	            return [4 /*yield*/, Promise.all(range$2(Number.parseInt(balance)).map(function (i) {
	              return __awaiter$9(_this, void 0, void 0, function () {
	                var ownTokenId;
	                return __generator$9(this, function (_a) {
	                  switch (_a.label) {
	                    case 0:
	                      return [4 /*yield*/, this.contract.callStatic.tokenOfOwnerByIndex(myAddress, i)];
	                    case 1:
	                      ownTokenId = _a.sent();
	                      return [2 /*return*/, Number.parseInt(ownTokenId)];
	                  }
	                });
	              });
	            }))];
	          case 3:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.getTokenByMinter = function (address) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.getTokenByMinter(address)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.getMetadataUrl = function (tokenId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.tokenURI(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.getOwner = function (tokenId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.ownerOf(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.getMinter = function (tokenId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.getMinter(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.isOwnerOf = function (tokenId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      var myAddress, owner;
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.ethersSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.getOwner(tokenId)];
	          case 2:
	            owner = _a.sent();
	            return [2 /*return*/, myAddress === owner];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.isMinterOf = function (tokenId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      var myAddress, minter;
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.ethersSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.getMinter(tokenId)];
	          case 2:
	            minter = _a.sent();
	            return [2 /*return*/, myAddress === minter];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.getFee = function () {
	    return __awaiter$9(this, void 0, void 0, function () {
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.getFee()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.getTokenInfo = function (tokenId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.tokenIdToTokenInfo(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.approve = function (operator, tokenId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      var tx;
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.approve(operator, tokenId)];
	          case 1:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 2:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLNFTEthers.prototype.getApproved = function (tokenId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.getApproved(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.setApprovalForAll = function (operator) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      var tx;
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.setApprovalForAll(operator, true)];
	          case 1:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 2:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLNFTEthers.prototype.isApprovedForAll = function (owner, operator) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.isApprovedForAll(owner, operator)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLNFTEthers.prototype.safeTransfer = function (to, tokenId) {
	    return __awaiter$9(this, void 0, void 0, function () {
	      var myAddress, tx;
	      return __generator$9(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.ethersSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.contract.safeTransferFrom(myAddress, to, tokenId)];
	          case 2:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 3:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  return VWBLNFTEthers;
	}();
	VWBLNFTEthers_1 = VWBLProtocolEthers$1.VWBLNFTEthers = VWBLNFTEthers;
	var range$2 = function (length) {
	  return Array.from(Array(length).keys());
	};
	var parseToTokenId$1 = function (receipt) {
	  var eventInterface = new ethers_1$4.ethers.utils.Interface(["event nftDataRegistered(address contractAddress, uint256 tokenId)"]);
	  var tokenId = 0;
	  receipt.logs.forEach(function (log) {
	    // check whether topic is nftDataRegistered(address contractAddress, uint256 tokenId)
	    if (log.topics[0] === "0x957e0e652e4d598197f2c5b25940237e404f3899238efb6f64df2377e9aaf36c") {
	      var description = eventInterface.parseLog({
	        topics: log.topics,
	        data: log.data
	      });
	      tokenId = description.args[1].toNumber();
	    }
	  });
	  return tokenId;
	};

	var VWBLProtocol = {};

	var contractName$2 = "VWBLERC1155";
	var abi$2 = [
		{
			inputs: [
				{
					internalType: "string",
					name: "_baseURI",
					type: "string"
				},
				{
					internalType: "address",
					name: "_gatewayProxy",
					type: "address"
				},
				{
					internalType: "address",
					name: "_accessCheckerContract",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: false,
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "ApprovalForAll",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "previousOwner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "OwnershipTransferred",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					indexed: false,
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				},
				{
					indexed: false,
					internalType: "uint256[]",
					name: "values",
					type: "uint256[]"
				}
			],
			name: "TransferBatch",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					indexed: false,
					internalType: "uint256",
					name: "id",
					type: "uint256"
				},
				{
					indexed: false,
					internalType: "uint256",
					name: "value",
					type: "uint256"
				}
			],
			name: "TransferSingle",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "string",
					name: "value",
					type: "string"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "id",
					type: "uint256"
				}
			],
			name: "URI",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "address",
					name: "oldAccessCheckerContract",
					type: "address"
				},
				{
					indexed: false,
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "accessCheckerContractChanged",
			type: "event"
		},
		{
			inputs: [
			],
			name: "INVERSE_BASIS_POINT",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "_tokenIdToTokenBalance",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "accessCheckerContract",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "id",
					type: "uint256"
				}
			],
			name: "balanceOf",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address[]",
					name: "accounts",
					type: "address[]"
				},
				{
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				}
			],
			name: "balanceOfBatch",
			outputs: [
				{
					internalType: "uint256[]",
					name: "",
					type: "uint256[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "id",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "value",
					type: "uint256"
				}
			],
			name: "burn",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				},
				{
					internalType: "uint256[]",
					name: "values",
					type: "uint256[]"
				}
			],
			name: "burnBatch",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "counter",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "gatewayProxy",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getFee",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getGatewayAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getMinter",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "minter",
					type: "address"
				}
			],
			name: "getTokenByMinter",
			outputs: [
				{
					components: [
						{
							internalType: "bytes32",
							name: "documentId",
							type: "bytes32"
						},
						{
							internalType: "address",
							name: "minterAddress",
							type: "address"
						},
						{
							internalType: "string",
							name: "getKeyURl",
							type: "string"
						}
					],
					internalType: "struct VWBLERC1155.TokenInfo[]",
					name: "",
					type: "tuple[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					internalType: "address",
					name: "operator",
					type: "address"
				}
			],
			name: "isApprovedForAll",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_getKeyURl",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_amount",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_royaltiesPercentage",
					type: "uint256"
				},
				{
					internalType: "bytes32",
					name: "_documentId",
					type: "bytes32"
				}
			],
			name: "mint",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_getKeyURl",
					type: "string"
				},
				{
					internalType: "uint256[]",
					name: "_amounts",
					type: "uint256[]"
				},
				{
					internalType: "uint256[]",
					name: "_royaltiesPercentages",
					type: "uint256[]"
				},
				{
					internalType: "bytes32[]",
					name: "_documentIds",
					type: "bytes32[]"
				}
			],
			name: "mintBatch",
			outputs: [
				{
					internalType: "uint256[]",
					name: "",
					type: "uint256[]"
				}
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "owner",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "renounceOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_tokenId",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_salePrice",
					type: "uint256"
				}
			],
			name: "royaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "receiver",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltyAmount",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				},
				{
					internalType: "uint256[]",
					name: "amounts",
					type: "uint256[]"
				},
				{
					internalType: "bytes",
					name: "data",
					type: "bytes"
				}
			],
			name: "safeBatchTransferAndPayFee",
			outputs: [
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				},
				{
					internalType: "uint256[]",
					name: "amounts",
					type: "uint256[]"
				},
				{
					internalType: "bytes",
					name: "data",
					type: "bytes"
				}
			],
			name: "safeBatchTransferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "id",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "amount",
					type: "uint256"
				},
				{
					internalType: "bytes",
					name: "data",
					type: "bytes"
				}
			],
			name: "safeTransferAndPayFee",
			outputs: [
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "id",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "amount",
					type: "uint256"
				},
				{
					internalType: "bytes",
					name: "data",
					type: "bytes"
				}
			],
			name: "safeTransferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "setAccessCheckerContract",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "setApprovalForAll",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "newBaseURI",
					type: "string"
				}
			],
			name: "setBaseURI",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "bytes4",
					name: "interfaceId",
					type: "bytes4"
				}
			],
			name: "supportsInterface",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				}
			],
			name: "tokenCountOfOwner",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToRoyaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "recipient",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltiesPercentage",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToTokenInfo",
			outputs: [
				{
					internalType: "bytes32",
					name: "documentId",
					type: "bytes32"
				},
				{
					internalType: "address",
					name: "minterAddress",
					type: "address"
				},
				{
					internalType: "string",
					name: "getKeyURl",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenOfOwnerByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "totalSupply",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "transferOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "uri",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		}
	];
	var bytecode$2 = "0x60a060405260006080908152600a906200001a908262000226565b506000600d553480156200002d57600080fd5b5060405162003b1a38038062003b1a83398101604081905262000050916200030f565b826200005c33620000a6565b6200006781620000f6565b50620000738362000108565b600b80546001600160a01b039384166001600160a01b031991821617909155600c80549290931691161790555062000409565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600362000104828262000226565b5050565b6200011262000120565b600a62000104828262000226565b6000546001600160a01b031633146200017f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001ac57607f821691505b602082108103620001cd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022157600081815260208120601f850160051c81016020861015620001fc5750805b601f850160051c820191505b818110156200021d5782815560010162000208565b5050505b505050565b81516001600160401b0381111562000242576200024262000181565b6200025a8162000253845462000197565b84620001d3565b602080601f831160018114620002925760008415620002795750858301515b600019600386901b1c1916600185901b1785556200021d565b600085815260208120601f198616915b82811015620002c357888601518255948401946001909101908401620002a2565b5085821015620002e25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80516001600160a01b03811681146200030a57600080fd5b919050565b6000806000606084860312156200032557600080fd5b83516001600160401b03808211156200033d57600080fd5b818601915086601f8301126200035257600080fd5b81518181111562000367576200036762000181565b604051601f8201601f19908116603f0116810190838211818310171562000392576200039262000181565b81604052828152602093508984848701011115620003af57600080fd5b600091505b82821015620003d35784820184015181830185015290830190620003b4565b6000848483010152809750505050620003ee818701620002f2565b935050506200040060408501620002f2565b90509250925092565b61370180620004196000396000f3fe6080604052600436106102035760003560e01c806365b8fe2e11610118578063b41bde13116100a0578063e597e9981161006f578063e597e99814610637578063e985e9c51461064a578063f242432a14610693578063f2fde38b146106b3578063f5298aca146106d357600080fd5b8063b41bde13146105bf578063cae6047f146105df578063ce5af336146105f5578063ced72f871461062257600080fd5b8063715018a6116100e7578063715018a61461051f5780638840fc9d146105345780638da5cb5b1461056157806393fab57b1461057f578063a22cb4651461059f57600080fd5b806365b8fe2e146104b957806368e586e8146104cc5780636ab29c08146104ec5780636b20c454146104ff57600080fd5b80632f745c591161019b57806355f804b31161016a57806355f804b3146104085780635b7121f8146104285780635c330f83146104615780635fb8bcd51461047457806361bc221a146104a357600080fd5b80632f745c591461036e578063357113461461038e5780634e1273f4146103bb5780634f6ccce7146103e857600080fd5b806319daf1bf116101d757806319daf1bf146102ad5780632812a3d21461030c5780632a55205a1461032e5780632eb2c2d61461034e57600080fd5b8062fdd58e1461020857806301ffc9a71461023b5780630e89341c1461026b57806318160ddd14610298575b600080fd5b34801561021457600080fd5b5061022861022336600461281a565b6106f3565b6040519081526020015b60405180910390f35b34801561024757600080fd5b5061025b61025636600461285c565b61078e565b6040519015158152602001610232565b34801561027757600080fd5b5061028b610286366004612880565b6107b3565b60405161023291906128e9565b3480156102a457600080fd5b50600854610228565b3480156102b957600080fd5b506102ed6102c8366004612880565b600f60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610232565b34801561031857600080fd5b5061032c6103273660046128fc565b610811565b005b34801561033a57600080fd5b506102ed610349366004612919565b610895565b34801561035a57600080fd5b5061032c610369366004612a84565b6108f1565b34801561037a57600080fd5b5061022861038936600461281a565b61093d565b34801561039a57600080fd5b506103a36109d4565b6040516001600160a01b039091168152602001610232565b3480156103c757600080fd5b506103db6103d6366004612b31565b610a47565b6040516102329190612c38565b3480156103f457600080fd5b50610228610403366004612880565b610b70565b34801561041457600080fd5b5061032c610423366004612c4b565b610c04565b34801561043457600080fd5b506103a3610443366004612880565b6000908152600e60205260409020600101546001600160a01b031690565b61032c61046f366004612a84565b610c1c565b34801561048057600080fd5b5061049461048f366004612880565b610d22565b60405161023293929190612c87565b3480156104af57600080fd5b50610228600d5481565b6102286104c7366004612cba565b610dd7565b3480156104d857600080fd5b506102286104e73660046128fc565b610ec7565b61032c6104fa366004612d0d565b610f4f565b34801561050b57600080fd5b5061032c61051a366004612d75565b610fe2565b34801561052b57600080fd5b5061032c61102a565b34801561054057600080fd5b5061022861054f366004612880565b60076020526000908152604090205481565b34801561056d57600080fd5b506000546001600160a01b03166103a3565b34801561058b57600080fd5b50600c546103a3906001600160a01b031681565b3480156105ab57600080fd5b5061032c6105ba366004612dea565b61103e565b3480156105cb57600080fd5b50600b546103a3906001600160a01b031681565b3480156105eb57600080fd5b5061022861271081565b34801561060157600080fd5b506106156106103660046128fc565b611049565b6040516102329190612e28565b34801561062e57600080fd5b506102286111f0565b6103db610645366004612eb0565b61125b565b34801561065657600080fd5b5061025b610665366004612fba565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561069f57600080fd5b5061032c6106ae366004612d0d565b611580565b3480156106bf57600080fd5b5061032c6106ce3660046128fc565b6115c5565b3480156106df57600080fd5b5061032c6106ee366004612fe8565b61163e565b60006001600160a01b0383166107635760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b1480610788575061078882611681565b60606000600a80546107c49061301d565b9050116107e05760405180602001604052806000815250610788565b600a6107eb836116d1565b6040516020016107fc929190613057565b60405160208183030381529060405292915050565b610819611763565b600c546001600160a01b039081169082160361083457600080fd5b600c80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9aaef5934caac7bf8ee7de13d1a1e98122180cb78e64abeae728ad559df64a66910160405180910390a15050565b6000828152600f60209081526040808320815180830190925280546001600160a01b031682526001015491810182905282918290612710906108d790876130f4565b6108e19190613121565b91519350909150505b9250929050565b6001600160a01b03851633148061090d575061090d8533610665565b6109295760405162461bcd60e51b815260040161075a90613143565b61093685858585856117bd565b5050505050565b600061094883610ec7565b82106109ab5760405162461bcd60e51b815260206004820152602c60248201527f45524331313535456e756d657261626c653a206f776e657220696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161075a565b506001600160a01b03919091166000908152600560209081526040808320938352929052205490565b600b5460408051631ab889a360e11b815290516000926001600160a01b03169163357113469160048083019260209291908290030181865afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190613191565b905090565b60608151835114610aac5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161075a565b600083516001600160401b03811115610ac757610ac761293b565b604051908082528060200260200182016040528015610af0578160200160208202803683370190505b50905060005b8451811015610b6857610b3b858281518110610b1457610b146131ae565b6020026020010151858381518110610b2e57610b2e6131ae565b60200260200101516106f3565b828281518110610b4d57610b4d6131ae565b6020908102919091010152610b61816131c4565b9050610af6565b509392505050565b6000610b7b60085490565b8210610bdf5760405162461bcd60e51b815260206004820152602d60248201527f45524331313535456e756d657261626c653a20676c6f62616c20696e6465782060448201526c6f7574206f6620626f756e647360981b606482015260840161075a565b60088281548110610bf257610bf26131ae565b90600052602060002001549050919050565b610c0c611763565b600a610c188282613223565b5050565b610c2985858585856108f1565b600080610c4085513461196a90919063ffffffff16565b9150915060005b85518163ffffffff161015610d1857610c5e6109d4565b6001600160a01b031663febaa13483600e60008a8663ffffffff1681518110610c8957610c896131ae565b60200260200101518152602001908152602001600020600001548a6040518463ffffffff1660e01b8152600401610cd39291909182526001600160a01b0316602082015260400190565b6000604051808303818588803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b50505050508080610d10906132e2565b915050610c47565b5050505050505050565b600e6020526000908152604090208054600182015460028301805492936001600160a01b0390921692610d549061301d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d809061301d565b8015610dcd5780601f10610da257610100808354040283529160200191610dcd565b820191906000526020600020905b815481529060010190602001808311610db057829003601f168201915b5050505050905083565b600080600d60008154610de9906131c4565b91829055506000818152600e602052604090208481556001810180546001600160a01b03191633179055909150600201610e238782613223565b50610e3f3382876040518060200160405280600081525061199d565b8315610e5057610e50813386611a88565b600c54604051633dcc3df560e11b815260048101859052306024820152604481018390526001600160a01b0390911690637b987bea9034906064016000604051808303818588803b158015610ea457600080fd5b505af1158015610eb8573d6000803e3d6000fd5b50939998505050505050505050565b60006001600160a01b038216610f335760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b606482015260840161075a565b506001600160a01b031660009081526004602052604090205490565b610f5c8585858585611580565b610f646109d4565b6000848152600e602052604090819020549051633faea84d60e21b815260048101919091526001600160a01b038681166024830152919091169063febaa1349034906044016000604051808303818588803b158015610fc257600080fd5b505af1158015610fd6573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b038316331480610ffe5750610ffe8333610665565b61101a5760405162461bcd60e51b815260040161075a90613143565b611025838383611abb565b505050565b611032611763565b61103c6000611c5b565b565b610c18338383611cab565b6060600080600d546001600160401b038111156110685761106861293b565b6040519080825280602002602001820160405280156110b557816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816110865790505b50905060015b600d548111610b68576000818152600e60205260409020600101546001600160a01b038087169116036111de576000818152600e602090815260409182902082516060810184528154815260018201546001600160a01b03169281019290925260028101805492939192918401916111329061301d565b80601f016020809104026020016040519081016040528092919081815260200182805461115e9061301d565b80156111ab5780601f10611180576101008083540402835291602001916111ab565b820191906000526020600020905b81548152906001019060200180831161118e57829003601f168201915b5050505050815250508284806111c0906131c4565b9550815181106111d2576111d26131ae565b60200260200101819052505b806111e8816131c4565b9150506110bb565b60006111fa6109d4565b6001600160a01b031663428c090b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190613305565b60608251845114801561126f575081518351145b6112b25760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840c2e4e4c2f240d8cadccee8d60631b604482015260640161075a565b600084516001600160401b038111156112cd576112cd61293b565b6040519080825280602002602001820160405280156112f6578160200160208202803683370190505b50905060005b85518163ffffffff161015611406576000600d6000815461131c906131c4565b919050819055905080838363ffffffff168151811061133d5761133d6131ae565b602002602001018181525050848263ffffffff1681518110611361576113616131ae565b6020908102919091018101516000838152600e90925260409091209081556001810180546001600160a01b031916331790556002016113a08982613223565b506000868363ffffffff16815181106113bb576113bb6131ae565b602002602001015111156113f3576113f38133888563ffffffff16815181106113e6576113e66131ae565b6020026020010151611a88565b50806113fe816132e2565b9150506112fc565b5061142233828760405180602001604052806000815250611d8b565b60008061143987513461196a90919063ffffffff16565b915091508161148a5760405162461bcd60e51b815260206004820152601860248201527f43616c63756c6174696f6e206572726f72206f66206469760000000000000000604482015260640161075a565b60005b87518163ffffffff16101561157357600c5486516001600160a01b0390911690637b987bea908490899063ffffffff86169081106114cd576114cd6131ae565b602002602001015130888663ffffffff16815181106114ee576114ee6131ae565b60200260200101516040518563ffffffff1660e01b815260040161152e939291909283526001600160a01b03919091166020830152604082015260600190565b6000604051808303818588803b15801561154757600080fd5b505af115801561155b573d6000803e3d6000fd5b5050505050808061156b906132e2565b91505061148d565b5091979650505050505050565b6001600160a01b03851633148061159c575061159c8533610665565b6115b85760405162461bcd60e51b815260040161075a90613143565b6109368585858585611ee6565b6115cd611763565b6001600160a01b0381166116325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161075a565b61163b81611c5b565b50565b6001600160a01b03831633148061165a575061165a8333610665565b6116765760405162461bcd60e51b815260040161075a90613143565b611025838383612022565b60006001600160e01b03198216636cdb3d1360e11b14806116b257506001600160e01b031982166303a24d0760e21b145b8061078857506301ffc9a760e01b6001600160e01b0319831614610788565b606060006116de8361213e565b60010190506000816001600160401b038111156116fd576116fd61293b565b6040519080825280601f01601f191660200182016040528015611727576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461173157509392505050565b6000546001600160a01b0316331461103c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075a565b81518351146117de5760405162461bcd60e51b815260040161075a9061331e565b6001600160a01b0384166118045760405162461bcd60e51b815260040161075a90613366565b33611813818787878787612216565b60005b84518110156118fc576000858281518110611833576118336131ae565b602002602001015190506000858381518110611851576118516131ae565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156118a25760405162461bcd60e51b815260040161075a906133ab565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906118e19084906133f5565b92505081905550505050806118f5906131c4565b9050611816565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161194c929190613408565b60405180910390a4611962818787878787612224565b505050505050565b60008082600003611980575060009050806108ea565b60018385816119915761199161310b565b04915091509250929050565b6001600160a01b0384166119c35760405162461bcd60e51b815260040161075a9061342d565b3360006119cf8561237f565b905060006119dc8561237f565b90506119ed83600089858589612216565b60008681526001602090815260408083206001600160a01b038b16845290915281208054879290611a1f9084906133f5565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611a7f836000898989896123ca565b50505050505050565b6000928352600f602052604090922080546001600160a01b0319166001600160a01b039290921691909117815560010155565b6001600160a01b038316611ae15760405162461bcd60e51b815260040161075a9061346e565b8051825114611b025760405162461bcd60e51b815260040161075a9061331e565b6000339050611b2581856000868660405180602001604052806000815250612216565b60005b8351811015611bed576000848281518110611b4557611b456131ae565b602002602001015190506000848381518110611b6357611b636131ae565b60209081029190910181015160008481526001835260408082206001600160a01b038c168352909352919091205490915081811015611bb45760405162461bcd60e51b815260040161075a906134b1565b60009283526001602090815260408085206001600160a01b038b1686529091529092209103905580611be5816131c4565b915050611b28565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611c3e929190613408565b60405180910390a460408051602081019091526000905250505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603611d1e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161075a565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611db15760405162461bcd60e51b815260040161075a9061342d565b8151835114611dd25760405162461bcd60e51b815260040161075a9061331e565b33611de281600087878787612216565b60005b8451811015611e7e57838181518110611e0057611e006131ae565b602002602001015160016000878481518110611e1e57611e1e6131ae565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611e6691906133f5565b90915550819050611e76816131c4565b915050611de5565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611ecf929190613408565b60405180910390a461093681600087878787612224565b6001600160a01b038416611f0c5760405162461bcd60e51b815260040161075a90613366565b336000611f188561237f565b90506000611f258561237f565b9050611f35838989858589612216565b60008681526001602090815260408083206001600160a01b038c16845290915290205485811015611f785760405162461bcd60e51b815260040161075a906133ab565b60008781526001602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611fb79084906133f5565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612017848a8a8a8a8a6123ca565b505050505050505050565b6001600160a01b0383166120485760405162461bcd60e51b815260040161075a9061346e565b3360006120548461237f565b905060006120618461237f565b905061208183876000858560405180602001604052806000815250612216565b60008581526001602090815260408083206001600160a01b038a168452909152902054848110156120c45760405162461bcd60e51b815260040161075a906134b1565b60008681526001602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611a7f565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061217d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106121a9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106121c757662386f26fc10000830492506010015b6305f5e10083106121df576305f5e100830492506008015b61271083106121f357612710830492506004015b60648310612205576064830492506002015b600a83106107885760010192915050565b611962868686868686612485565b6001600160a01b0384163b156119625760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061226890899089908890889088906004016134f5565b6020604051808303816000875af19250505080156122a3575060408051601f3d908101601f191682019092526122a091810190613553565b60015b61234f576122af613570565b806308c379a0036122e857506122c361358c565b806122ce57506122ea565b8060405162461bcd60e51b815260040161075a91906128e9565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161075a565b6001600160e01b0319811663bc197c8160e01b14611a7f5760405162461bcd60e51b815260040161075a90613615565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106123b9576123b96131ae565b602090810291909101015292915050565b6001600160a01b0384163b156119625760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061240e908990899088908890889060040161365d565b6020604051808303816000875af1925050508015612449575060408051601f3d908101601f1916820190925261244691810190613553565b60015b612455576122af613570565b6001600160e01b0319811663f23a6e6160e01b14611a7f5760405162461bcd60e51b815260040161075a90613615565b60005b83518163ffffffff161015611a7f576000848263ffffffff16815181106124b1576124b16131ae565b602002602001015190506000848363ffffffff16815181106124d5576124d56131ae565b6020026020010151905060006001600160a01b0316886001600160a01b0316036125465761254182600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6125ae565b866001600160a01b0316886001600160a01b03161415801561257057508061256e89846106f3565b145b156125ae5761257f8883612675565b6001600160a01b03881660009081526004602052604081208054600192906125a89084906136a2565b90915550505b876001600160a01b0316876001600160a01b0316141580156125d857506001600160a01b03871615155b80156125eb57506125e987836106f3565b155b1561262e576125fa8783612712565b6001600160a01b03871660009081526004602052604081208054600192906126239084906133f5565b909155506126609050565b6001600160a01b038716158015612652575060008281526007602052604090205481145b156126605761266082612756565b5050808061266d906132e2565b915050612488565b6000600161268284610ec7565b61268c91906136a2565b6000838152600660205260409020549091508082146126df576001600160a01b03841660009081526005602090815260408083208584528252808320548484528184208190558352600690915290208190555b5060009182526006602090815260408084208490556001600160a01b039094168352600581528383209183525290812055565b600061271d83610ec7565b6001600160a01b039093166000908152600560209081526040808320868452825280832085905593825260069052919091209190915550565b600854600090612768906001906136a2565b60008381526009602052604081205460088054939450909284908110612790576127906131ae565b9060005260206000200154905080600883815481106127b1576127b16131ae565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806127e9576127e96136b5565b6001900381819060005260206000200160009055905550505050565b6001600160a01b038116811461163b57600080fd5b6000806040838503121561282d57600080fd5b823561283881612805565b946020939093013593505050565b6001600160e01b03198116811461163b57600080fd5b60006020828403121561286e57600080fd5b813561287981612846565b9392505050565b60006020828403121561289257600080fd5b5035919050565b60005b838110156128b457818101518382015260200161289c565b50506000910152565b600081518084526128d5816020860160208601612899565b601f01601f19169290920160200192915050565b60208152600061287960208301846128bd565b60006020828403121561290e57600080fd5b813561287981612805565b6000806040838503121561292c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156129765761297661293b565b6040525050565b60006001600160401b038211156129965761299661293b565b5060051b60200190565b600082601f8301126129b157600080fd5b813560206129be8261297d565b6040516129cb8282612951565b83815260059390931b85018201928281019150868411156129eb57600080fd5b8286015b84811015612a0657803583529183019183016129ef565b509695505050505050565b600082601f830112612a2257600080fd5b81356001600160401b03811115612a3b57612a3b61293b565b604051612a52601f8301601f191660200182612951565b818152846020838601011115612a6757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612a9c57600080fd5b8535612aa781612805565b94506020860135612ab781612805565b935060408601356001600160401b0380821115612ad357600080fd5b612adf89838a016129a0565b94506060880135915080821115612af557600080fd5b612b0189838a016129a0565b93506080880135915080821115612b1757600080fd5b50612b2488828901612a11565b9150509295509295909350565b60008060408385031215612b4457600080fd5b82356001600160401b0380821115612b5b57600080fd5b818501915085601f830112612b6f57600080fd5b81356020612b7c8261297d565b604051612b898282612951565b83815260059390931b8501820192828101915089841115612ba957600080fd5b948201945b83861015612bd0578535612bc181612805565b82529482019490820190612bae565b96505086013592505080821115612be657600080fd5b50612bf3858286016129a0565b9150509250929050565b600081518084526020808501945080840160005b83811015612c2d57815187529582019590820190600101612c11565b509495945050505050565b6020815260006128796020830184612bfd565b600060208284031215612c5d57600080fd5b81356001600160401b03811115612c7357600080fd5b612c7f84828501612a11565b949350505050565b8381526001600160a01b0383166020820152606060408201819052600090612cb1908301846128bd565b95945050505050565b60008060008060808587031215612cd057600080fd5b84356001600160401b03811115612ce657600080fd5b612cf287828801612a11565b97602087013597506040870135966060013595509350505050565b600080600080600060a08688031215612d2557600080fd5b8535612d3081612805565b94506020860135612d4081612805565b9350604086013592506060860135915060808601356001600160401b03811115612d6957600080fd5b612b2488828901612a11565b600080600060608486031215612d8a57600080fd5b8335612d9581612805565b925060208401356001600160401b0380821115612db157600080fd5b612dbd878388016129a0565b93506040860135915080821115612dd357600080fd5b50612de0868287016129a0565b9150509250925092565b60008060408385031215612dfd57600080fd5b8235612e0881612805565b915060208301358015158114612e1d57600080fd5b809150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612ea257888303603f19018552815180518452878101516001600160a01b0316888501528601516060878501819052612e8e818601836128bd565b968901969450505090860190600101612e4f565b509098975050505050505050565b60008060008060808587031215612ec657600080fd5b84356001600160401b0380821115612edd57600080fd5b612ee988838901612a11565b9550602091508187013581811115612f0057600080fd5b612f0c89828a016129a0565b955050604087013581811115612f2157600080fd5b612f2d89828a016129a0565b945050606087013581811115612f4257600080fd5b87019050601f81018813612f5557600080fd5b8035612f608161297d565b604051612f6d8282612951565b82815260059290921b830184019184810191508a831115612f8d57600080fd5b928401925b82841015612fab57833582529284019290840190612f92565b979a9699509497505050505050565b60008060408385031215612fcd57600080fd5b8235612fd881612805565b91506020830135612e1d81612805565b600080600060608486031215612ffd57600080fd5b833561300881612805565b95602085013595506040909401359392505050565b600181811c9082168061303157607f821691505b60208210810361305157634e487b7160e01b600052602260045260246000fd5b50919050565b60008084546130658161301d565b6001828116801561307d5760018114613092576130c1565b60ff19841687528215158302870194506130c1565b8860005260208060002060005b858110156130b85781548a82015290840190820161309f565b50505082870194505b5050505083516130d5818360208801612899565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610788576107886130de565b634e487b7160e01b600052601260045260246000fd5b60008261313e57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6000602082840312156131a357600080fd5b815161287981612805565b634e487b7160e01b600052603260045260246000fd5b6000600182016131d6576131d66130de565b5060010190565b601f82111561102557600081815260208120601f850160051c810160208610156132045750805b601f850160051c820191505b8181101561196257828155600101613210565b81516001600160401b0381111561323c5761323c61293b565b6132508161324a845461301d565b846131dd565b602080601f831160018114613285576000841561326d5750858301515b600019600386901b1c1916600185901b178555611962565b600085815260208120601f198616915b828110156132b457888601518255948401946001909101908401613295565b50858210156132d25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600063ffffffff8083168181036132fb576132fb6130de565b6001019392505050565b60006020828403121561331757600080fd5b5051919050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b80820180821115610788576107886130de565b60408152600061341b6040830185612bfd565b8281036020840152612cb18185612bfd565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061352190830186612bfd565b82810360608401526135338186612bfd565b9050828103608084015261354781856128bd565b98975050505050505050565b60006020828403121561356557600080fd5b815161287981612846565b600060033d11156135895760046000803e5060005160e01c5b90565b600060443d101561359a5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156135c957505050505090565b82850191508151818111156135e15750505050505090565b843d87010160208285010111156135fb5750505050505090565b61360a60208286010187612951565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613697908301846128bd565b979650505050505050565b81810381811115610788576107886130de565b634e487b7160e01b600052603160045260246000fdfea264697066735822122048554269e400d5edec73f449a1a20593328634695ef588da16ed802b1542451d64736f6c63430008110033";
	var deployedBytecode$2 = "0x6080604052600436106102035760003560e01c806365b8fe2e11610118578063b41bde13116100a0578063e597e9981161006f578063e597e99814610637578063e985e9c51461064a578063f242432a14610693578063f2fde38b146106b3578063f5298aca146106d357600080fd5b8063b41bde13146105bf578063cae6047f146105df578063ce5af336146105f5578063ced72f871461062257600080fd5b8063715018a6116100e7578063715018a61461051f5780638840fc9d146105345780638da5cb5b1461056157806393fab57b1461057f578063a22cb4651461059f57600080fd5b806365b8fe2e146104b957806368e586e8146104cc5780636ab29c08146104ec5780636b20c454146104ff57600080fd5b80632f745c591161019b57806355f804b31161016a57806355f804b3146104085780635b7121f8146104285780635c330f83146104615780635fb8bcd51461047457806361bc221a146104a357600080fd5b80632f745c591461036e578063357113461461038e5780634e1273f4146103bb5780634f6ccce7146103e857600080fd5b806319daf1bf116101d757806319daf1bf146102ad5780632812a3d21461030c5780632a55205a1461032e5780632eb2c2d61461034e57600080fd5b8062fdd58e1461020857806301ffc9a71461023b5780630e89341c1461026b57806318160ddd14610298575b600080fd5b34801561021457600080fd5b5061022861022336600461281a565b6106f3565b6040519081526020015b60405180910390f35b34801561024757600080fd5b5061025b61025636600461285c565b61078e565b6040519015158152602001610232565b34801561027757600080fd5b5061028b610286366004612880565b6107b3565b60405161023291906128e9565b3480156102a457600080fd5b50600854610228565b3480156102b957600080fd5b506102ed6102c8366004612880565b600f60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610232565b34801561031857600080fd5b5061032c6103273660046128fc565b610811565b005b34801561033a57600080fd5b506102ed610349366004612919565b610895565b34801561035a57600080fd5b5061032c610369366004612a84565b6108f1565b34801561037a57600080fd5b5061022861038936600461281a565b61093d565b34801561039a57600080fd5b506103a36109d4565b6040516001600160a01b039091168152602001610232565b3480156103c757600080fd5b506103db6103d6366004612b31565b610a47565b6040516102329190612c38565b3480156103f457600080fd5b50610228610403366004612880565b610b70565b34801561041457600080fd5b5061032c610423366004612c4b565b610c04565b34801561043457600080fd5b506103a3610443366004612880565b6000908152600e60205260409020600101546001600160a01b031690565b61032c61046f366004612a84565b610c1c565b34801561048057600080fd5b5061049461048f366004612880565b610d22565b60405161023293929190612c87565b3480156104af57600080fd5b50610228600d5481565b6102286104c7366004612cba565b610dd7565b3480156104d857600080fd5b506102286104e73660046128fc565b610ec7565b61032c6104fa366004612d0d565b610f4f565b34801561050b57600080fd5b5061032c61051a366004612d75565b610fe2565b34801561052b57600080fd5b5061032c61102a565b34801561054057600080fd5b5061022861054f366004612880565b60076020526000908152604090205481565b34801561056d57600080fd5b506000546001600160a01b03166103a3565b34801561058b57600080fd5b50600c546103a3906001600160a01b031681565b3480156105ab57600080fd5b5061032c6105ba366004612dea565b61103e565b3480156105cb57600080fd5b50600b546103a3906001600160a01b031681565b3480156105eb57600080fd5b5061022861271081565b34801561060157600080fd5b506106156106103660046128fc565b611049565b6040516102329190612e28565b34801561062e57600080fd5b506102286111f0565b6103db610645366004612eb0565b61125b565b34801561065657600080fd5b5061025b610665366004612fba565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561069f57600080fd5b5061032c6106ae366004612d0d565b611580565b3480156106bf57600080fd5b5061032c6106ce3660046128fc565b6115c5565b3480156106df57600080fd5b5061032c6106ee366004612fe8565b61163e565b60006001600160a01b0383166107635760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b1480610788575061078882611681565b60606000600a80546107c49061301d565b9050116107e05760405180602001604052806000815250610788565b600a6107eb836116d1565b6040516020016107fc929190613057565b60405160208183030381529060405292915050565b610819611763565b600c546001600160a01b039081169082160361083457600080fd5b600c80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9aaef5934caac7bf8ee7de13d1a1e98122180cb78e64abeae728ad559df64a66910160405180910390a15050565b6000828152600f60209081526040808320815180830190925280546001600160a01b031682526001015491810182905282918290612710906108d790876130f4565b6108e19190613121565b91519350909150505b9250929050565b6001600160a01b03851633148061090d575061090d8533610665565b6109295760405162461bcd60e51b815260040161075a90613143565b61093685858585856117bd565b5050505050565b600061094883610ec7565b82106109ab5760405162461bcd60e51b815260206004820152602c60248201527f45524331313535456e756d657261626c653a206f776e657220696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161075a565b506001600160a01b03919091166000908152600560209081526040808320938352929052205490565b600b5460408051631ab889a360e11b815290516000926001600160a01b03169163357113469160048083019260209291908290030181865afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190613191565b905090565b60608151835114610aac5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161075a565b600083516001600160401b03811115610ac757610ac761293b565b604051908082528060200260200182016040528015610af0578160200160208202803683370190505b50905060005b8451811015610b6857610b3b858281518110610b1457610b146131ae565b6020026020010151858381518110610b2e57610b2e6131ae565b60200260200101516106f3565b828281518110610b4d57610b4d6131ae565b6020908102919091010152610b61816131c4565b9050610af6565b509392505050565b6000610b7b60085490565b8210610bdf5760405162461bcd60e51b815260206004820152602d60248201527f45524331313535456e756d657261626c653a20676c6f62616c20696e6465782060448201526c6f7574206f6620626f756e647360981b606482015260840161075a565b60088281548110610bf257610bf26131ae565b90600052602060002001549050919050565b610c0c611763565b600a610c188282613223565b5050565b610c2985858585856108f1565b600080610c4085513461196a90919063ffffffff16565b9150915060005b85518163ffffffff161015610d1857610c5e6109d4565b6001600160a01b031663febaa13483600e60008a8663ffffffff1681518110610c8957610c896131ae565b60200260200101518152602001908152602001600020600001548a6040518463ffffffff1660e01b8152600401610cd39291909182526001600160a01b0316602082015260400190565b6000604051808303818588803b158015610cec57600080fd5b505af1158015610d00573d6000803e3d6000fd5b50505050508080610d10906132e2565b915050610c47565b5050505050505050565b600e6020526000908152604090208054600182015460028301805492936001600160a01b0390921692610d549061301d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d809061301d565b8015610dcd5780601f10610da257610100808354040283529160200191610dcd565b820191906000526020600020905b815481529060010190602001808311610db057829003601f168201915b5050505050905083565b600080600d60008154610de9906131c4565b91829055506000818152600e602052604090208481556001810180546001600160a01b03191633179055909150600201610e238782613223565b50610e3f3382876040518060200160405280600081525061199d565b8315610e5057610e50813386611a88565b600c54604051633dcc3df560e11b815260048101859052306024820152604481018390526001600160a01b0390911690637b987bea9034906064016000604051808303818588803b158015610ea457600080fd5b505af1158015610eb8573d6000803e3d6000fd5b50939998505050505050505050565b60006001600160a01b038216610f335760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b606482015260840161075a565b506001600160a01b031660009081526004602052604090205490565b610f5c8585858585611580565b610f646109d4565b6000848152600e602052604090819020549051633faea84d60e21b815260048101919091526001600160a01b038681166024830152919091169063febaa1349034906044016000604051808303818588803b158015610fc257600080fd5b505af1158015610fd6573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b038316331480610ffe5750610ffe8333610665565b61101a5760405162461bcd60e51b815260040161075a90613143565b611025838383611abb565b505050565b611032611763565b61103c6000611c5b565b565b610c18338383611cab565b6060600080600d546001600160401b038111156110685761106861293b565b6040519080825280602002602001820160405280156110b557816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816110865790505b50905060015b600d548111610b68576000818152600e60205260409020600101546001600160a01b038087169116036111de576000818152600e602090815260409182902082516060810184528154815260018201546001600160a01b03169281019290925260028101805492939192918401916111329061301d565b80601f016020809104026020016040519081016040528092919081815260200182805461115e9061301d565b80156111ab5780601f10611180576101008083540402835291602001916111ab565b820191906000526020600020905b81548152906001019060200180831161118e57829003601f168201915b5050505050815250508284806111c0906131c4565b9550815181106111d2576111d26131ae565b60200260200101819052505b806111e8816131c4565b9150506110bb565b60006111fa6109d4565b6001600160a01b031663428c090b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190613305565b60608251845114801561126f575081518351145b6112b25760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840c2e4e4c2f240d8cadccee8d60631b604482015260640161075a565b600084516001600160401b038111156112cd576112cd61293b565b6040519080825280602002602001820160405280156112f6578160200160208202803683370190505b50905060005b85518163ffffffff161015611406576000600d6000815461131c906131c4565b919050819055905080838363ffffffff168151811061133d5761133d6131ae565b602002602001018181525050848263ffffffff1681518110611361576113616131ae565b6020908102919091018101516000838152600e90925260409091209081556001810180546001600160a01b031916331790556002016113a08982613223565b506000868363ffffffff16815181106113bb576113bb6131ae565b602002602001015111156113f3576113f38133888563ffffffff16815181106113e6576113e66131ae565b6020026020010151611a88565b50806113fe816132e2565b9150506112fc565b5061142233828760405180602001604052806000815250611d8b565b60008061143987513461196a90919063ffffffff16565b915091508161148a5760405162461bcd60e51b815260206004820152601860248201527f43616c63756c6174696f6e206572726f72206f66206469760000000000000000604482015260640161075a565b60005b87518163ffffffff16101561157357600c5486516001600160a01b0390911690637b987bea908490899063ffffffff86169081106114cd576114cd6131ae565b602002602001015130888663ffffffff16815181106114ee576114ee6131ae565b60200260200101516040518563ffffffff1660e01b815260040161152e939291909283526001600160a01b03919091166020830152604082015260600190565b6000604051808303818588803b15801561154757600080fd5b505af115801561155b573d6000803e3d6000fd5b5050505050808061156b906132e2565b91505061148d565b5091979650505050505050565b6001600160a01b03851633148061159c575061159c8533610665565b6115b85760405162461bcd60e51b815260040161075a90613143565b6109368585858585611ee6565b6115cd611763565b6001600160a01b0381166116325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161075a565b61163b81611c5b565b50565b6001600160a01b03831633148061165a575061165a8333610665565b6116765760405162461bcd60e51b815260040161075a90613143565b611025838383612022565b60006001600160e01b03198216636cdb3d1360e11b14806116b257506001600160e01b031982166303a24d0760e21b145b8061078857506301ffc9a760e01b6001600160e01b0319831614610788565b606060006116de8361213e565b60010190506000816001600160401b038111156116fd576116fd61293b565b6040519080825280601f01601f191660200182016040528015611727576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461173157509392505050565b6000546001600160a01b0316331461103c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161075a565b81518351146117de5760405162461bcd60e51b815260040161075a9061331e565b6001600160a01b0384166118045760405162461bcd60e51b815260040161075a90613366565b33611813818787878787612216565b60005b84518110156118fc576000858281518110611833576118336131ae565b602002602001015190506000858381518110611851576118516131ae565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156118a25760405162461bcd60e51b815260040161075a906133ab565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906118e19084906133f5565b92505081905550505050806118f5906131c4565b9050611816565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161194c929190613408565b60405180910390a4611962818787878787612224565b505050505050565b60008082600003611980575060009050806108ea565b60018385816119915761199161310b565b04915091509250929050565b6001600160a01b0384166119c35760405162461bcd60e51b815260040161075a9061342d565b3360006119cf8561237f565b905060006119dc8561237f565b90506119ed83600089858589612216565b60008681526001602090815260408083206001600160a01b038b16845290915281208054879290611a1f9084906133f5565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611a7f836000898989896123ca565b50505050505050565b6000928352600f602052604090922080546001600160a01b0319166001600160a01b039290921691909117815560010155565b6001600160a01b038316611ae15760405162461bcd60e51b815260040161075a9061346e565b8051825114611b025760405162461bcd60e51b815260040161075a9061331e565b6000339050611b2581856000868660405180602001604052806000815250612216565b60005b8351811015611bed576000848281518110611b4557611b456131ae565b602002602001015190506000848381518110611b6357611b636131ae565b60209081029190910181015160008481526001835260408082206001600160a01b038c168352909352919091205490915081811015611bb45760405162461bcd60e51b815260040161075a906134b1565b60009283526001602090815260408085206001600160a01b038b1686529091529092209103905580611be5816131c4565b915050611b28565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611c3e929190613408565b60405180910390a460408051602081019091526000905250505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603611d1e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161075a565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611db15760405162461bcd60e51b815260040161075a9061342d565b8151835114611dd25760405162461bcd60e51b815260040161075a9061331e565b33611de281600087878787612216565b60005b8451811015611e7e57838181518110611e0057611e006131ae565b602002602001015160016000878481518110611e1e57611e1e6131ae565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611e6691906133f5565b90915550819050611e76816131c4565b915050611de5565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611ecf929190613408565b60405180910390a461093681600087878787612224565b6001600160a01b038416611f0c5760405162461bcd60e51b815260040161075a90613366565b336000611f188561237f565b90506000611f258561237f565b9050611f35838989858589612216565b60008681526001602090815260408083206001600160a01b038c16845290915290205485811015611f785760405162461bcd60e51b815260040161075a906133ab565b60008781526001602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611fb79084906133f5565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612017848a8a8a8a8a6123ca565b505050505050505050565b6001600160a01b0383166120485760405162461bcd60e51b815260040161075a9061346e565b3360006120548461237f565b905060006120618461237f565b905061208183876000858560405180602001604052806000815250612216565b60008581526001602090815260408083206001600160a01b038a168452909152902054848110156120c45760405162461bcd60e51b815260040161075a906134b1565b60008681526001602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611a7f565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061217d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106121a9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106121c757662386f26fc10000830492506010015b6305f5e10083106121df576305f5e100830492506008015b61271083106121f357612710830492506004015b60648310612205576064830492506002015b600a83106107885760010192915050565b611962868686868686612485565b6001600160a01b0384163b156119625760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061226890899089908890889088906004016134f5565b6020604051808303816000875af19250505080156122a3575060408051601f3d908101601f191682019092526122a091810190613553565b60015b61234f576122af613570565b806308c379a0036122e857506122c361358c565b806122ce57506122ea565b8060405162461bcd60e51b815260040161075a91906128e9565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161075a565b6001600160e01b0319811663bc197c8160e01b14611a7f5760405162461bcd60e51b815260040161075a90613615565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106123b9576123b96131ae565b602090810291909101015292915050565b6001600160a01b0384163b156119625760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061240e908990899088908890889060040161365d565b6020604051808303816000875af1925050508015612449575060408051601f3d908101601f1916820190925261244691810190613553565b60015b612455576122af613570565b6001600160e01b0319811663f23a6e6160e01b14611a7f5760405162461bcd60e51b815260040161075a90613615565b60005b83518163ffffffff161015611a7f576000848263ffffffff16815181106124b1576124b16131ae565b602002602001015190506000848363ffffffff16815181106124d5576124d56131ae565b6020026020010151905060006001600160a01b0316886001600160a01b0316036125465761254182600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6125ae565b866001600160a01b0316886001600160a01b03161415801561257057508061256e89846106f3565b145b156125ae5761257f8883612675565b6001600160a01b03881660009081526004602052604081208054600192906125a89084906136a2565b90915550505b876001600160a01b0316876001600160a01b0316141580156125d857506001600160a01b03871615155b80156125eb57506125e987836106f3565b155b1561262e576125fa8783612712565b6001600160a01b03871660009081526004602052604081208054600192906126239084906133f5565b909155506126609050565b6001600160a01b038716158015612652575060008281526007602052604090205481145b156126605761266082612756565b5050808061266d906132e2565b915050612488565b6000600161268284610ec7565b61268c91906136a2565b6000838152600660205260409020549091508082146126df576001600160a01b03841660009081526005602090815260408083208584528252808320548484528184208190558352600690915290208190555b5060009182526006602090815260408084208490556001600160a01b039094168352600581528383209183525290812055565b600061271d83610ec7565b6001600160a01b039093166000908152600560209081526040808320868452825280832085905593825260069052919091209190915550565b600854600090612768906001906136a2565b60008381526009602052604081205460088054939450909284908110612790576127906131ae565b9060005260206000200154905080600883815481106127b1576127b16131ae565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806127e9576127e96136b5565b6001900381819060005260206000200160009055905550505050565b6001600160a01b038116811461163b57600080fd5b6000806040838503121561282d57600080fd5b823561283881612805565b946020939093013593505050565b6001600160e01b03198116811461163b57600080fd5b60006020828403121561286e57600080fd5b813561287981612846565b9392505050565b60006020828403121561289257600080fd5b5035919050565b60005b838110156128b457818101518382015260200161289c565b50506000910152565b600081518084526128d5816020860160208601612899565b601f01601f19169290920160200192915050565b60208152600061287960208301846128bd565b60006020828403121561290e57600080fd5b813561287981612805565b6000806040838503121561292c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156129765761297661293b565b6040525050565b60006001600160401b038211156129965761299661293b565b5060051b60200190565b600082601f8301126129b157600080fd5b813560206129be8261297d565b6040516129cb8282612951565b83815260059390931b85018201928281019150868411156129eb57600080fd5b8286015b84811015612a0657803583529183019183016129ef565b509695505050505050565b600082601f830112612a2257600080fd5b81356001600160401b03811115612a3b57612a3b61293b565b604051612a52601f8301601f191660200182612951565b818152846020838601011115612a6757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612a9c57600080fd5b8535612aa781612805565b94506020860135612ab781612805565b935060408601356001600160401b0380821115612ad357600080fd5b612adf89838a016129a0565b94506060880135915080821115612af557600080fd5b612b0189838a016129a0565b93506080880135915080821115612b1757600080fd5b50612b2488828901612a11565b9150509295509295909350565b60008060408385031215612b4457600080fd5b82356001600160401b0380821115612b5b57600080fd5b818501915085601f830112612b6f57600080fd5b81356020612b7c8261297d565b604051612b898282612951565b83815260059390931b8501820192828101915089841115612ba957600080fd5b948201945b83861015612bd0578535612bc181612805565b82529482019490820190612bae565b96505086013592505080821115612be657600080fd5b50612bf3858286016129a0565b9150509250929050565b600081518084526020808501945080840160005b83811015612c2d57815187529582019590820190600101612c11565b509495945050505050565b6020815260006128796020830184612bfd565b600060208284031215612c5d57600080fd5b81356001600160401b03811115612c7357600080fd5b612c7f84828501612a11565b949350505050565b8381526001600160a01b0383166020820152606060408201819052600090612cb1908301846128bd565b95945050505050565b60008060008060808587031215612cd057600080fd5b84356001600160401b03811115612ce657600080fd5b612cf287828801612a11565b97602087013597506040870135966060013595509350505050565b600080600080600060a08688031215612d2557600080fd5b8535612d3081612805565b94506020860135612d4081612805565b9350604086013592506060860135915060808601356001600160401b03811115612d6957600080fd5b612b2488828901612a11565b600080600060608486031215612d8a57600080fd5b8335612d9581612805565b925060208401356001600160401b0380821115612db157600080fd5b612dbd878388016129a0565b93506040860135915080821115612dd357600080fd5b50612de0868287016129a0565b9150509250925092565b60008060408385031215612dfd57600080fd5b8235612e0881612805565b915060208301358015158114612e1d57600080fd5b809150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612ea257888303603f19018552815180518452878101516001600160a01b0316888501528601516060878501819052612e8e818601836128bd565b968901969450505090860190600101612e4f565b509098975050505050505050565b60008060008060808587031215612ec657600080fd5b84356001600160401b0380821115612edd57600080fd5b612ee988838901612a11565b9550602091508187013581811115612f0057600080fd5b612f0c89828a016129a0565b955050604087013581811115612f2157600080fd5b612f2d89828a016129a0565b945050606087013581811115612f4257600080fd5b87019050601f81018813612f5557600080fd5b8035612f608161297d565b604051612f6d8282612951565b82815260059290921b830184019184810191508a831115612f8d57600080fd5b928401925b82841015612fab57833582529284019290840190612f92565b979a9699509497505050505050565b60008060408385031215612fcd57600080fd5b8235612fd881612805565b91506020830135612e1d81612805565b600080600060608486031215612ffd57600080fd5b833561300881612805565b95602085013595506040909401359392505050565b600181811c9082168061303157607f821691505b60208210810361305157634e487b7160e01b600052602260045260246000fd5b50919050565b60008084546130658161301d565b6001828116801561307d5760018114613092576130c1565b60ff19841687528215158302870194506130c1565b8860005260208060002060005b858110156130b85781548a82015290840190820161309f565b50505082870194505b5050505083516130d5818360208801612899565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610788576107886130de565b634e487b7160e01b600052601260045260246000fd5b60008261313e57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6000602082840312156131a357600080fd5b815161287981612805565b634e487b7160e01b600052603260045260246000fd5b6000600182016131d6576131d66130de565b5060010190565b601f82111561102557600081815260208120601f850160051c810160208610156132045750805b601f850160051c820191505b8181101561196257828155600101613210565b81516001600160401b0381111561323c5761323c61293b565b6132508161324a845461301d565b846131dd565b602080601f831160018114613285576000841561326d5750858301515b600019600386901b1c1916600185901b178555611962565b600085815260208120601f198616915b828110156132b457888601518255948401946001909101908401613295565b50858210156132d25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600063ffffffff8083168181036132fb576132fb6130de565b6001019392505050565b60006020828403121561331757600080fd5b5051919050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b80820180821115610788576107886130de565b60408152600061341b6040830185612bfd565b8281036020840152612cb18185612bfd565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061352190830186612bfd565b82810360608401526135338186612bfd565b9050828103608084015261354781856128bd565b98975050505050505050565b60006020828403121561356557600080fd5b815161287981612846565b600060033d11156135895760046000803e5060005160e01c5b90565b600060443d101561359a5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156135c957505050505090565b82850191508151818111156135e15750505050505090565b843d87010160208285010111156135fb5750505050505090565b61360a60208286010187612951565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613697908301846128bd565b979650505050505050565b81810381811115610788576107886130de565b634e487b7160e01b600052603160045260246000fdfea264697066735822122048554269e400d5edec73f449a1a20593328634695ef588da16ed802b1542451d64736f6c63430008110033";
	var linkReferences$2 = {
	};
	var deployedLinkReferences$2 = {
	};
	var require$$1$1 = {
		contractName: contractName$2,
		abi: abi$2,
		bytecode: bytecode$2,
		deployedBytecode: deployedBytecode$2,
		linkReferences: linkReferences$2,
		deployedLinkReferences: deployedLinkReferences$2
	};

	var contractName$1 = "VWBLERC1155Metadata";
	var abi$1 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_gatewayProxy",
					type: "address"
				},
				{
					internalType: "address",
					name: "_accessCheckerContract",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: false,
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "ApprovalForAll",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "previousOwner",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "OwnershipTransferred",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					indexed: false,
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				},
				{
					indexed: false,
					internalType: "uint256[]",
					name: "values",
					type: "uint256[]"
				}
			],
			name: "TransferBatch",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					indexed: true,
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					indexed: false,
					internalType: "uint256",
					name: "id",
					type: "uint256"
				},
				{
					indexed: false,
					internalType: "uint256",
					name: "value",
					type: "uint256"
				}
			],
			name: "TransferSingle",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "string",
					name: "value",
					type: "string"
				},
				{
					indexed: true,
					internalType: "uint256",
					name: "id",
					type: "uint256"
				}
			],
			name: "URI",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "address",
					name: "oldAccessCheckerContract",
					type: "address"
				},
				{
					indexed: false,
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "accessCheckerContractChanged",
			type: "event"
		},
		{
			inputs: [
			],
			name: "INVERSE_BASIS_POINT",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "_tokenIdToTokenBalance",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "accessCheckerContract",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "id",
					type: "uint256"
				}
			],
			name: "balanceOf",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address[]",
					name: "accounts",
					type: "address[]"
				},
				{
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				}
			],
			name: "balanceOfBatch",
			outputs: [
				{
					internalType: "uint256[]",
					name: "",
					type: "uint256[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "id",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "value",
					type: "uint256"
				}
			],
			name: "burn",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				},
				{
					internalType: "uint256[]",
					name: "values",
					type: "uint256[]"
				}
			],
			name: "burnBatch",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "counter",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "gatewayProxy",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getFee",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getGatewayAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getMinter",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "minter",
					type: "address"
				}
			],
			name: "getTokenByMinter",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "minterAddress",
							type: "address"
						},
						{
							internalType: "bytes32",
							name: "documentId",
							type: "bytes32"
						},
						{
							internalType: "string",
							name: "getKeyURl",
							type: "string"
						}
					],
					internalType: "struct VWBLERC1155Metadata.TokenInfo[]",
					name: "",
					type: "tuple[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "account",
					type: "address"
				},
				{
					internalType: "address",
					name: "operator",
					type: "address"
				}
			],
			name: "isApprovedForAll",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_metadataURl",
					type: "string"
				},
				{
					internalType: "string",
					name: "_getKeyURl",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_amount",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_royaltiesPercentage",
					type: "uint256"
				},
				{
					internalType: "bytes32",
					name: "_documentId",
					type: "bytes32"
				}
			],
			name: "mint",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_metadataURl",
					type: "string"
				},
				{
					internalType: "string",
					name: "_getKeyURl",
					type: "string"
				},
				{
					internalType: "uint256[]",
					name: "_amounts",
					type: "uint256[]"
				},
				{
					internalType: "uint256[]",
					name: "_royaltiesPercentages",
					type: "uint256[]"
				},
				{
					internalType: "bytes32[]",
					name: "_documentIds",
					type: "bytes32[]"
				}
			],
			name: "mintBatch",
			outputs: [
				{
					internalType: "uint256[]",
					name: "",
					type: "uint256[]"
				}
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "owner",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "renounceOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_tokenId",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_salePrice",
					type: "uint256"
				}
			],
			name: "royaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "receiver",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltyAmount",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				},
				{
					internalType: "uint256[]",
					name: "amounts",
					type: "uint256[]"
				},
				{
					internalType: "bytes",
					name: "data",
					type: "bytes"
				}
			],
			name: "safeBatchTransferAndPayFee",
			outputs: [
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256[]",
					name: "ids",
					type: "uint256[]"
				},
				{
					internalType: "uint256[]",
					name: "amounts",
					type: "uint256[]"
				},
				{
					internalType: "bytes",
					name: "data",
					type: "bytes"
				}
			],
			name: "safeBatchTransferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "id",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "amount",
					type: "uint256"
				},
				{
					internalType: "bytes",
					name: "data",
					type: "bytes"
				}
			],
			name: "safeTransferAndPayFee",
			outputs: [
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "from",
					type: "address"
				},
				{
					internalType: "address",
					name: "to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "id",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "amount",
					type: "uint256"
				},
				{
					internalType: "bytes",
					name: "data",
					type: "bytes"
				}
			],
			name: "safeTransferFrom",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newAccessCheckerContract",
					type: "address"
				}
			],
			name: "setAccessCheckerContract",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "operator",
					type: "address"
				},
				{
					internalType: "bool",
					name: "approved",
					type: "bool"
				}
			],
			name: "setApprovalForAll",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "bytes4",
					name: "interfaceId",
					type: "bytes4"
				}
			],
			name: "supportsInterface",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				}
			],
			name: "tokenCountOfOwner",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToRoyaltyInfo",
			outputs: [
				{
					internalType: "address",
					name: "recipient",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "royaltiesPercentage",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "tokenIdToTokenInfo",
			outputs: [
				{
					internalType: "address",
					name: "minterAddress",
					type: "address"
				},
				{
					internalType: "bytes32",
					name: "documentId",
					type: "bytes32"
				},
				{
					internalType: "string",
					name: "getKeyURl",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "owner",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "tokenOfOwnerByIndex",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "totalSupply",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "newOwner",
					type: "address"
				}
			],
			name: "transferOwnership",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "uri",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		}
	];
	var bytecode$1 = "0x60806040526000600c553480156200001657600080fd5b506040516200382d3803806200382d833981016040819052620000399162000110565b604080516020810190915260008152620000533362000091565b6200005e81620000e1565b50600a80546001600160a01b039384166001600160a01b031991821617909155600b8054929093169116179055620002b9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6003620000ef8282620001ed565b5050565b80516001600160a01b03811681146200010b57600080fd5b919050565b600080604083850312156200012457600080fd5b6200012f83620000f3565b91506200013f60208401620000f3565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200017357607f821691505b6020821081036200019457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e857600081815260208120601f850160051c81016020861015620001c35750805b601f850160051c820191505b81811015620001e457828155600101620001cf565b5050505b505050565b81516001600160401b0381111562000209576200020962000148565b62000221816200021a84546200015e565b846200019a565b602080601f831160018114620002595760008415620002405750858301515b600019600386901b1c1916600185901b178555620001e4565b600085815260208120601f198616915b828110156200028a5788860151825594840194600190910190840162000269565b5085821015620002a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61356480620002c96000396000f3fe6080604052600436106101f85760003560e01c806368e586e81161010d578063b41bde13116100a0578063ced72f871161006f578063ced72f8714610607578063e985e9c51461061c578063f242432a14610665578063f2fde38b14610685578063f5298aca146106a557600080fd5b8063b41bde1314610591578063cae6047f146105b1578063cbbe7cb8146105c7578063ce5af336146105da57600080fd5b80638840fc9d116100dc5780638840fc9d146105065780638da5cb5b1461053357806393fab57b14610551578063a22cb4651461057157600080fd5b806368e586e81461049e5780636ab29c08146104be5780636b20c454146104d1578063715018a6146104f157600080fd5b80632eb2c2d6116101905780634f6ccce71161015f5780634f6ccce7146103f05780635b7121f8146104105780635c330f83146104465780635fb8bcd51461045957806361bc221a1461048857600080fd5b80632eb2c2d6146103635780632f745c591461038357806335711346146103a35780634e1273f4146103d057600080fd5b806319daf1bf116101cc57806319daf1bf146102a25780632812a3d2146103015780632a55205a146103235780632d4e6ddb1461034357600080fd5b8062fdd58e146101fd57806301ffc9a7146102305780630e89341c1461026057806318160ddd1461028d575b600080fd5b34801561020957600080fd5b5061021d610218366004612768565b6106c5565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b3660046127aa565b610760565b6040519015158152602001610227565b34801561026c57600080fd5b5061028061027b3660046127ce565b610785565b604051610227919061282d565b34801561029957600080fd5b5060085461021d565b3480156102ae57600080fd5b506102e26102bd3660046127ce565b600f60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610227565b34801561030d57600080fd5b5061032161031c366004612840565b610891565b005b34801561032f57600080fd5b506102e261033e36600461285d565b610915565b6103566103513660046129c8565b610971565b6040516102279190612ad4565b34801561036f57600080fd5b5061032161037e366004612ae7565b610cb1565b34801561038f57600080fd5b5061021d61039e366004612768565b610cfd565b3480156103af57600080fd5b506103b8610d94565b6040516001600160a01b039091168152602001610227565b3480156103dc57600080fd5b506103566103eb366004612b87565b610e07565b3480156103fc57600080fd5b5061021d61040b3660046127ce565b610f30565b34801561041c57600080fd5b506103b861042b3660046127ce565b6000908152600e60205260409020546001600160a01b031690565b610321610454366004612ae7565b610fc4565b34801561046557600080fd5b506104796104743660046127ce565b6110ca565b60405161022793929190612c53565b34801561049457600080fd5b5061021d600c5481565b3480156104aa57600080fd5b5061021d6104b9366004612840565b61117f565b6103216104cc366004612c83565b611207565b3480156104dd57600080fd5b506103216104ec366004612ceb565b61129d565b3480156104fd57600080fd5b506103216112e5565b34801561051257600080fd5b5061021d6105213660046127ce565b60076020526000908152604090205481565b34801561053f57600080fd5b506000546001600160a01b03166103b8565b34801561055d57600080fd5b50600b546103b8906001600160a01b031681565b34801561057d57600080fd5b5061032161058c366004612d60565b6112f9565b34801561059d57600080fd5b50600a546103b8906001600160a01b031681565b3480156105bd57600080fd5b5061021d61271081565b61021d6105d5366004612d9e565b611308565b3480156105e657600080fd5b506105fa6105f5366004612840565b611391565b6040516102279190612e1c565b34801561061357600080fd5b5061021d611535565b34801561062857600080fd5b50610250610637366004612ea4565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561067157600080fd5b50610321610680366004612c83565b6115a0565b34801561069157600080fd5b506103216106a0366004612840565b6115e5565b3480156106b157600080fd5b506103216106c0366004612ed2565b61165e565b60006001600160a01b0383166107355760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b148061075a575061075a826116a1565b6000818152600d602052604090208054606091906107a290612f07565b90506000036107f35760405162461bcd60e51b815260206004820152601960248201527f455243313135353a20696e76616c696420746f6b656e20494400000000000000604482015260640161072c565b6000828152600d60205260409020805461080c90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461083890612f07565b80156108855780601f1061085a57610100808354040283529160200191610885565b820191906000526020600020905b81548152906001019060200180831161086857829003601f168201915b50505050509050919050565b6108996116f1565b600b546001600160a01b03908116908216036108b457600080fd5b600b80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9aaef5934caac7bf8ee7de13d1a1e98122180cb78e64abeae728ad559df64a66910160405180910390a15050565b6000828152600f60209081526040808320815180830190925280546001600160a01b031682526001015491810182905282918290612710906109579087612f57565b6109619190612f84565b91519350909150505b9250929050565b606082518451148015610985575081518351145b6109c85760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840c2e4e4c2f240d8cadccee8d60631b604482015260640161072c565b600084516001600160401b038111156109e3576109e361287f565b604051908082528060200260200182016040528015610a0c578160200160208202803683370190505b50905060005b85518163ffffffff161015610b36576000600c60008154610a3290612fa6565b919050819055905080838363ffffffff1681518110610a5357610a53612fbf565b602002602001018181525050848263ffffffff1681518110610a7757610a77612fbf565b6020908102919091018101516000838152600e9092526040909120600181019190915580546001600160a01b03191633178155600201610ab7898261301b565b506000818152600d60205260409020610ad08a8261301b565b506000868363ffffffff1681518110610aeb57610aeb612fbf565b60200260200101511115610b2357610b238133888563ffffffff1681518110610b1657610b16612fbf565b602002602001015161174b565b5080610b2e816130da565b915050610a12565b50610b523382876040518060200160405280600081525061177e565b600080610b698751346118d990919063ffffffff16565b9150915081610bba5760405162461bcd60e51b815260206004820152601860248201527f43616c63756c6174696f6e206572726f72206f66206469760000000000000000604482015260640161072c565b60005b87518163ffffffff161015610ca357600b5486516001600160a01b0390911690637b987bea908490899063ffffffff8616908110610bfd57610bfd612fbf565b602002602001015130888663ffffffff1681518110610c1e57610c1e612fbf565b60200260200101516040518563ffffffff1660e01b8152600401610c5e939291909283526001600160a01b03919091166020830152604082015260600190565b6000604051808303818588803b158015610c7757600080fd5b505af1158015610c8b573d6000803e3d6000fd5b50505050508080610c9b906130da565b915050610bbd565b509198975050505050505050565b6001600160a01b038516331480610ccd5750610ccd8533610637565b610ce95760405162461bcd60e51b815260040161072c906130fd565b610cf6858585858561190c565b5050505050565b6000610d088361117f565b8210610d6b5760405162461bcd60e51b815260206004820152602c60248201527f45524331313535456e756d657261626c653a206f776e657220696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161072c565b506001600160a01b03919091166000908152600560209081526040808320938352929052205490565b600a5460408051631ab889a360e11b815290516000926001600160a01b03169163357113469160048083019260209291908290030181865afa158015610dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e02919061314b565b905090565b60608151835114610e6c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161072c565b600083516001600160401b03811115610e8757610e8761287f565b604051908082528060200260200182016040528015610eb0578160200160208202803683370190505b50905060005b8451811015610f2857610efb858281518110610ed457610ed4612fbf565b6020026020010151858381518110610eee57610eee612fbf565b60200260200101516106c5565b828281518110610f0d57610f0d612fbf565b6020908102919091010152610f2181612fa6565b9050610eb6565b509392505050565b6000610f3b60085490565b8210610f9f5760405162461bcd60e51b815260206004820152602d60248201527f45524331313535456e756d657261626c653a20676c6f62616c20696e6465782060448201526c6f7574206f6620626f756e647360981b606482015260840161072c565b60088281548110610fb257610fb2612fbf565b90600052602060002001549050919050565b610fd18585858585610cb1565b600080610fe88551346118d990919063ffffffff16565b9150915060005b85518163ffffffff1610156110c057611006610d94565b6001600160a01b031663febaa13483600e60008a8663ffffffff168151811061103157611031612fbf565b60200260200101518152602001908152602001600020600101548a6040518463ffffffff1660e01b815260040161107b9291909182526001600160a01b0316602082015260400190565b6000604051808303818588803b15801561109457600080fd5b505af11580156110a8573d6000803e3d6000fd5b505050505080806110b8906130da565b915050610fef565b5050505050505050565b600e602052600090815260409020805460018201546002830180546001600160a01b039093169391926110fc90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461112890612f07565b80156111755780601f1061114a57610100808354040283529160200191611175565b820191906000526020600020905b81548152906001019060200180831161115857829003601f168201915b5050505050905083565b60006001600160a01b0382166111eb5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b606482015260840161072c565b506001600160a01b031660009081526004602052604090205490565b61121485858585856115a0565b61121c610d94565b6000848152600e602052604090819020600101549051633faea84d60e21b815260048101919091526001600160a01b038681166024830152919091169063febaa1349034906044016000604051808303818588803b15801561127d57600080fd5b505af1158015611291573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b0383163314806112b957506112b98333610637565b6112d55760405162461bcd60e51b815260040161072c906130fd565b6112e0838383611ab9565b505050565b6112ed6116f1565b6112f76000611c59565b565b611304338383611ca9565b5050565b6000806113188787878787611d89565b600b54604051633dcc3df560e11b815260048101869052306024820152604481018390529192506001600160a01b031690637b987bea9034906064016000604051808303818588803b15801561136d57600080fd5b505af1158015611381573d6000803e3d6000fd5b50939a9950505050505050505050565b6060600080600c546001600160401b038111156113b0576113b061287f565b6040519080825280602002602001820160405280156113fd57816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816113ce5790505b50905060015b600c548111610f28576000818152600e60205260409020546001600160a01b03808716911603611523576000818152600e6020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600281018054929391929184019161147790612f07565b80601f01602080910402602001604051908101604052809291908181526020018280546114a390612f07565b80156114f05780601f106114c5576101008083540402835291602001916114f0565b820191906000526020600020905b8154815290600101906020018083116114d357829003601f168201915b50505050508152505082848061150590612fa6565b95508151811061151757611517612fbf565b60200260200101819052505b8061152d81612fa6565b915050611403565b600061153f610d94565b6001600160a01b031663428c090b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561157c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e029190613168565b6001600160a01b0385163314806115bc57506115bc8533610637565b6115d85760405162461bcd60e51b815260040161072c906130fd565b610cf68585858585611e25565b6115ed6116f1565b6001600160a01b0381166116525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161072c565b61165b81611c59565b50565b6001600160a01b03831633148061167a575061167a8333610637565b6116965760405162461bcd60e51b815260040161072c906130fd565b6112e0838383611f61565b60006001600160e01b03198216636cdb3d1360e11b14806116d257506001600160e01b031982166303a24d0760e21b145b8061075a57506301ffc9a760e01b6001600160e01b031983161461075a565b6000546001600160a01b031633146112f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161072c565b6000928352600f602052604090922080546001600160a01b0319166001600160a01b039290921691909117815560010155565b6001600160a01b0384166117a45760405162461bcd60e51b815260040161072c90613181565b81518351146117c55760405162461bcd60e51b815260040161072c906131c2565b336117d581600087878787612082565b60005b8451811015611871578381815181106117f3576117f3612fbf565b60200260200101516001600087848151811061181157611811612fbf565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611859919061320a565b9091555081905061186981612fa6565b9150506117d8565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118c292919061321d565b60405180910390a4610cf681600087878787612090565b600080826000036118ef5750600090508061096a565b600183858161190057611900612f6e565b04915091509250929050565b815183511461192d5760405162461bcd60e51b815260040161072c906131c2565b6001600160a01b0384166119535760405162461bcd60e51b815260040161072c90613242565b33611962818787878787612082565b60005b8451811015611a4b57600085828151811061198257611982612fbf565b6020026020010151905060008583815181106119a0576119a0612fbf565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156119f15760405162461bcd60e51b815260040161072c90613287565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a3090849061320a565b9250508190555050505080611a4490612fa6565b9050611965565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a9b92919061321d565b60405180910390a4611ab1818787878787612090565b505050505050565b6001600160a01b038316611adf5760405162461bcd60e51b815260040161072c906132d1565b8051825114611b005760405162461bcd60e51b815260040161072c906131c2565b6000339050611b2381856000868660405180602001604052806000815250612082565b60005b8351811015611beb576000848281518110611b4357611b43612fbf565b602002602001015190506000848381518110611b6157611b61612fbf565b60209081029190910181015160008481526001835260408082206001600160a01b038c168352909352919091205490915081811015611bb25760405162461bcd60e51b815260040161072c90613314565b60009283526001602090815260408085206001600160a01b038b1686529091529092209103905580611be381612fa6565b915050611b26565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611c3c92919061321d565b60405180910390a460408051602081019091526000905250505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603611d1c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161072c565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600080600c60008154611d9b90612fa6565b91829055506000818152600e6020526040902080546001600160a01b0319163317815560018101859055909150600201611dd5878261301b565b50611df1338287604051806020016040528060008152506121eb565b6000818152600d60205260409020611e09888261301b565b508315611e1b57611e1b81338661174b565b9695505050505050565b6001600160a01b038416611e4b5760405162461bcd60e51b815260040161072c90613242565b336000611e57856122cd565b90506000611e64856122cd565b9050611e74838989858589612082565b60008681526001602090815260408083206001600160a01b038c16845290915290205485811015611eb75760405162461bcd60e51b815260040161072c90613287565b60008781526001602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611ef690849061320a565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611f56848a8a8a8a8a612318565b505050505050505050565b6001600160a01b038316611f875760405162461bcd60e51b815260040161072c906132d1565b336000611f93846122cd565b90506000611fa0846122cd565b9050611fc083876000858560405180602001604052806000815250612082565b60008581526001602090815260408083206001600160a01b038a168452909152902054848110156120035760405162461bcd60e51b815260040161072c90613314565b60008681526001602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b611ab18686868686866123d3565b6001600160a01b0384163b15611ab15760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906120d49089908990889088908890600401613358565b6020604051808303816000875af192505050801561210f575060408051601f3d908101601f1916820190925261210c918101906133b6565b60015b6121bb5761211b6133d3565b806308c379a003612154575061212f6133ef565b8061213a5750612156565b8060405162461bcd60e51b815260040161072c919061282d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161072c565b6001600160e01b0319811663bc197c8160e01b146120795760405162461bcd60e51b815260040161072c90613478565b6001600160a01b0384166122115760405162461bcd60e51b815260040161072c90613181565b33600061221d856122cd565b9050600061222a856122cd565b905061223b83600089858589612082565b60008681526001602090815260408083206001600160a01b038b1684529091528120805487929061226d90849061320a565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461207983600089898989612318565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061230757612307612fbf565b602090810291909101015292915050565b6001600160a01b0384163b15611ab15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061235c90899089908890889088906004016134c0565b6020604051808303816000875af1925050508015612397575060408051601f3d908101601f19168201909252612394918101906133b6565b60015b6123a35761211b6133d3565b6001600160e01b0319811663f23a6e6160e01b146120795760405162461bcd60e51b815260040161072c90613478565b60005b83518163ffffffff161015612079576000848263ffffffff16815181106123ff576123ff612fbf565b602002602001015190506000848363ffffffff168151811061242357612423612fbf565b6020026020010151905060006001600160a01b0316886001600160a01b0316036124945761248f82600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6124fc565b866001600160a01b0316886001600160a01b0316141580156124be5750806124bc89846106c5565b145b156124fc576124cd88836125c3565b6001600160a01b03881660009081526004602052604081208054600192906124f6908490613505565b90915550505b876001600160a01b0316876001600160a01b03161415801561252657506001600160a01b03871615155b8015612539575061253787836106c5565b155b1561257c576125488783612660565b6001600160a01b038716600090815260046020526040812080546001929061257190849061320a565b909155506125ae9050565b6001600160a01b0387161580156125a0575060008281526007602052604090205481145b156125ae576125ae826126a4565b505080806125bb906130da565b9150506123d6565b600060016125d08461117f565b6125da9190613505565b60008381526006602052604090205490915080821461262d576001600160a01b03841660009081526005602090815260408083208584528252808320548484528184208190558352600690915290208190555b5060009182526006602090815260408084208490556001600160a01b039094168352600581528383209183525290812055565b600061266b8361117f565b6001600160a01b039093166000908152600560209081526040808320868452825280832085905593825260069052919091209190915550565b6008546000906126b690600190613505565b600083815260096020526040812054600880549394509092849081106126de576126de612fbf565b9060005260206000200154905080600883815481106126ff576126ff612fbf565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061273757612737613518565b6001900381819060005260206000200160009055905550505050565b6001600160a01b038116811461165b57600080fd5b6000806040838503121561277b57600080fd5b823561278681612753565b946020939093013593505050565b6001600160e01b03198116811461165b57600080fd5b6000602082840312156127bc57600080fd5b81356127c781612794565b9392505050565b6000602082840312156127e057600080fd5b5035919050565b6000815180845260005b8181101561280d576020818501810151868301820152016127f1565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006127c760208301846127e7565b60006020828403121561285257600080fd5b81356127c781612753565b6000806040838503121561287057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156128ba576128ba61287f565b6040525050565b600082601f8301126128d257600080fd5b81356001600160401b038111156128eb576128eb61287f565b604051612902601f8301601f191660200182612895565b81815284602083860101111561291757600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b0382111561294d5761294d61287f565b5060051b60200190565b600082601f83011261296857600080fd5b8135602061297582612934565b6040516129828282612895565b83815260059390931b85018201928281019150868411156129a257600080fd5b8286015b848110156129bd57803583529183019183016129a6565b509695505050505050565b600080600080600060a086880312156129e057600080fd5b85356001600160401b03808211156129f757600080fd5b612a0389838a016128c1565b96506020880135915080821115612a1957600080fd5b612a2589838a016128c1565b95506040880135915080821115612a3b57600080fd5b612a4789838a01612957565b94506060880135915080821115612a5d57600080fd5b612a6989838a01612957565b93506080880135915080821115612a7f57600080fd5b50612a8c88828901612957565b9150509295509295909350565b600081518084526020808501945080840160005b83811015612ac957815187529582019590820190600101612aad565b509495945050505050565b6020815260006127c76020830184612a99565b600080600080600060a08688031215612aff57600080fd5b8535612b0a81612753565b94506020860135612b1a81612753565b935060408601356001600160401b0380821115612b3657600080fd5b612b4289838a01612957565b94506060880135915080821115612b5857600080fd5b612b6489838a01612957565b93506080880135915080821115612b7a57600080fd5b50612a8c888289016128c1565b60008060408385031215612b9a57600080fd5b82356001600160401b0380821115612bb157600080fd5b818501915085601f830112612bc557600080fd5b81356020612bd282612934565b604051612bdf8282612895565b83815260059390931b8501820192828101915089841115612bff57600080fd5b948201945b83861015612c26578535612c1781612753565b82529482019490820190612c04565b96505086013592505080821115612c3c57600080fd5b50612c4985828601612957565b9150509250929050565b60018060a01b0384168152826020820152606060408201526000612c7a60608301846127e7565b95945050505050565b600080600080600060a08688031215612c9b57600080fd5b8535612ca681612753565b94506020860135612cb681612753565b9350604086013592506060860135915060808601356001600160401b03811115612cdf57600080fd5b612a8c888289016128c1565b600080600060608486031215612d0057600080fd5b8335612d0b81612753565b925060208401356001600160401b0380821115612d2757600080fd5b612d3387838801612957565b93506040860135915080821115612d4957600080fd5b50612d5686828701612957565b9150509250925092565b60008060408385031215612d7357600080fd5b8235612d7e81612753565b915060208301358015158114612d9357600080fd5b809150509250929050565b600080600080600060a08688031215612db657600080fd5b85356001600160401b0380821115612dcd57600080fd5b612dd989838a016128c1565b96506020880135915080821115612def57600080fd5b50612dfc888289016128c1565b959895975050505060408401359360608101359360809091013592509050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612e9657888303603f19018552815180516001600160a01b0316845287810151888501528601516060878501819052612e82818601836127e7565b968901969450505090860190600101612e43565b509098975050505050505050565b60008060408385031215612eb757600080fd5b8235612ec281612753565b91506020830135612d9381612753565b600080600060608486031215612ee757600080fd5b8335612ef281612753565b95602085013595506040909401359392505050565b600181811c90821680612f1b57607f821691505b602082108103612f3b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761075a5761075a612f41565b634e487b7160e01b600052601260045260246000fd5b600082612fa157634e487b7160e01b600052601260045260246000fd5b500490565b600060018201612fb857612fb8612f41565b5060010190565b634e487b7160e01b600052603260045260246000fd5b601f8211156112e057600081815260208120601f850160051c81016020861015612ffc5750805b601f850160051c820191505b81811015611ab157828155600101613008565b81516001600160401b038111156130345761303461287f565b613048816130428454612f07565b84612fd5565b602080601f83116001811461307d57600084156130655750858301515b600019600386901b1c1916600185901b178555611ab1565b600085815260208120601f198616915b828110156130ac5788860151825594840194600190910190840161308d565b50858210156130ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600063ffffffff8083168181036130f3576130f3612f41565b6001019392505050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60006020828403121561315d57600080fd5b81516127c781612753565b60006020828403121561317a57600080fd5b5051919050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b8082018082111561075a5761075a612f41565b6040815260006132306040830185612a99565b8281036020840152612c7a8185612a99565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061338490830186612a99565b82810360608401526133968186612a99565b905082810360808401526133aa81856127e7565b98975050505050505050565b6000602082840312156133c857600080fd5b81516127c781612794565b600060033d11156133ec5760046000803e5060005160e01c5b90565b600060443d10156133fd5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561342c57505050505090565b82850191508151818111156134445750505050505090565b843d870101602082850101111561345e5750505050505090565b61346d60208286010187612895565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906134fa908301846127e7565b979650505050505050565b8181038181111561075a5761075a612f41565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200deff5c245694b267224615cf5f9f8599fa8bb9ac8495a0d4a88ab829f2c0bd964736f6c63430008110033";
	var deployedBytecode$1 = "0x6080604052600436106101f85760003560e01c806368e586e81161010d578063b41bde13116100a0578063ced72f871161006f578063ced72f8714610607578063e985e9c51461061c578063f242432a14610665578063f2fde38b14610685578063f5298aca146106a557600080fd5b8063b41bde1314610591578063cae6047f146105b1578063cbbe7cb8146105c7578063ce5af336146105da57600080fd5b80638840fc9d116100dc5780638840fc9d146105065780638da5cb5b1461053357806393fab57b14610551578063a22cb4651461057157600080fd5b806368e586e81461049e5780636ab29c08146104be5780636b20c454146104d1578063715018a6146104f157600080fd5b80632eb2c2d6116101905780634f6ccce71161015f5780634f6ccce7146103f05780635b7121f8146104105780635c330f83146104465780635fb8bcd51461045957806361bc221a1461048857600080fd5b80632eb2c2d6146103635780632f745c591461038357806335711346146103a35780634e1273f4146103d057600080fd5b806319daf1bf116101cc57806319daf1bf146102a25780632812a3d2146103015780632a55205a146103235780632d4e6ddb1461034357600080fd5b8062fdd58e146101fd57806301ffc9a7146102305780630e89341c1461026057806318160ddd1461028d575b600080fd5b34801561020957600080fd5b5061021d610218366004612768565b6106c5565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b3660046127aa565b610760565b6040519015158152602001610227565b34801561026c57600080fd5b5061028061027b3660046127ce565b610785565b604051610227919061282d565b34801561029957600080fd5b5060085461021d565b3480156102ae57600080fd5b506102e26102bd3660046127ce565b600f60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610227565b34801561030d57600080fd5b5061032161031c366004612840565b610891565b005b34801561032f57600080fd5b506102e261033e36600461285d565b610915565b6103566103513660046129c8565b610971565b6040516102279190612ad4565b34801561036f57600080fd5b5061032161037e366004612ae7565b610cb1565b34801561038f57600080fd5b5061021d61039e366004612768565b610cfd565b3480156103af57600080fd5b506103b8610d94565b6040516001600160a01b039091168152602001610227565b3480156103dc57600080fd5b506103566103eb366004612b87565b610e07565b3480156103fc57600080fd5b5061021d61040b3660046127ce565b610f30565b34801561041c57600080fd5b506103b861042b3660046127ce565b6000908152600e60205260409020546001600160a01b031690565b610321610454366004612ae7565b610fc4565b34801561046557600080fd5b506104796104743660046127ce565b6110ca565b60405161022793929190612c53565b34801561049457600080fd5b5061021d600c5481565b3480156104aa57600080fd5b5061021d6104b9366004612840565b61117f565b6103216104cc366004612c83565b611207565b3480156104dd57600080fd5b506103216104ec366004612ceb565b61129d565b3480156104fd57600080fd5b506103216112e5565b34801561051257600080fd5b5061021d6105213660046127ce565b60076020526000908152604090205481565b34801561053f57600080fd5b506000546001600160a01b03166103b8565b34801561055d57600080fd5b50600b546103b8906001600160a01b031681565b34801561057d57600080fd5b5061032161058c366004612d60565b6112f9565b34801561059d57600080fd5b50600a546103b8906001600160a01b031681565b3480156105bd57600080fd5b5061021d61271081565b61021d6105d5366004612d9e565b611308565b3480156105e657600080fd5b506105fa6105f5366004612840565b611391565b6040516102279190612e1c565b34801561061357600080fd5b5061021d611535565b34801561062857600080fd5b50610250610637366004612ea4565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561067157600080fd5b50610321610680366004612c83565b6115a0565b34801561069157600080fd5b506103216106a0366004612840565b6115e5565b3480156106b157600080fd5b506103216106c0366004612ed2565b61165e565b60006001600160a01b0383166107355760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663152a902d60e11b148061075a575061075a826116a1565b6000818152600d602052604090208054606091906107a290612f07565b90506000036107f35760405162461bcd60e51b815260206004820152601960248201527f455243313135353a20696e76616c696420746f6b656e20494400000000000000604482015260640161072c565b6000828152600d60205260409020805461080c90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461083890612f07565b80156108855780601f1061085a57610100808354040283529160200191610885565b820191906000526020600020905b81548152906001019060200180831161086857829003601f168201915b50505050509050919050565b6108996116f1565b600b546001600160a01b03908116908216036108b457600080fd5b600b80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9aaef5934caac7bf8ee7de13d1a1e98122180cb78e64abeae728ad559df64a66910160405180910390a15050565b6000828152600f60209081526040808320815180830190925280546001600160a01b031682526001015491810182905282918290612710906109579087612f57565b6109619190612f84565b91519350909150505b9250929050565b606082518451148015610985575081518351145b6109c85760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840c2e4e4c2f240d8cadccee8d60631b604482015260640161072c565b600084516001600160401b038111156109e3576109e361287f565b604051908082528060200260200182016040528015610a0c578160200160208202803683370190505b50905060005b85518163ffffffff161015610b36576000600c60008154610a3290612fa6565b919050819055905080838363ffffffff1681518110610a5357610a53612fbf565b602002602001018181525050848263ffffffff1681518110610a7757610a77612fbf565b6020908102919091018101516000838152600e9092526040909120600181019190915580546001600160a01b03191633178155600201610ab7898261301b565b506000818152600d60205260409020610ad08a8261301b565b506000868363ffffffff1681518110610aeb57610aeb612fbf565b60200260200101511115610b2357610b238133888563ffffffff1681518110610b1657610b16612fbf565b602002602001015161174b565b5080610b2e816130da565b915050610a12565b50610b523382876040518060200160405280600081525061177e565b600080610b698751346118d990919063ffffffff16565b9150915081610bba5760405162461bcd60e51b815260206004820152601860248201527f43616c63756c6174696f6e206572726f72206f66206469760000000000000000604482015260640161072c565b60005b87518163ffffffff161015610ca357600b5486516001600160a01b0390911690637b987bea908490899063ffffffff8616908110610bfd57610bfd612fbf565b602002602001015130888663ffffffff1681518110610c1e57610c1e612fbf565b60200260200101516040518563ffffffff1660e01b8152600401610c5e939291909283526001600160a01b03919091166020830152604082015260600190565b6000604051808303818588803b158015610c7757600080fd5b505af1158015610c8b573d6000803e3d6000fd5b50505050508080610c9b906130da565b915050610bbd565b509198975050505050505050565b6001600160a01b038516331480610ccd5750610ccd8533610637565b610ce95760405162461bcd60e51b815260040161072c906130fd565b610cf6858585858561190c565b5050505050565b6000610d088361117f565b8210610d6b5760405162461bcd60e51b815260206004820152602c60248201527f45524331313535456e756d657261626c653a206f776e657220696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161072c565b506001600160a01b03919091166000908152600560209081526040808320938352929052205490565b600a5460408051631ab889a360e11b815290516000926001600160a01b03169163357113469160048083019260209291908290030181865afa158015610dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e02919061314b565b905090565b60608151835114610e6c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161072c565b600083516001600160401b03811115610e8757610e8761287f565b604051908082528060200260200182016040528015610eb0578160200160208202803683370190505b50905060005b8451811015610f2857610efb858281518110610ed457610ed4612fbf565b6020026020010151858381518110610eee57610eee612fbf565b60200260200101516106c5565b828281518110610f0d57610f0d612fbf565b6020908102919091010152610f2181612fa6565b9050610eb6565b509392505050565b6000610f3b60085490565b8210610f9f5760405162461bcd60e51b815260206004820152602d60248201527f45524331313535456e756d657261626c653a20676c6f62616c20696e6465782060448201526c6f7574206f6620626f756e647360981b606482015260840161072c565b60088281548110610fb257610fb2612fbf565b90600052602060002001549050919050565b610fd18585858585610cb1565b600080610fe88551346118d990919063ffffffff16565b9150915060005b85518163ffffffff1610156110c057611006610d94565b6001600160a01b031663febaa13483600e60008a8663ffffffff168151811061103157611031612fbf565b60200260200101518152602001908152602001600020600101548a6040518463ffffffff1660e01b815260040161107b9291909182526001600160a01b0316602082015260400190565b6000604051808303818588803b15801561109457600080fd5b505af11580156110a8573d6000803e3d6000fd5b505050505080806110b8906130da565b915050610fef565b5050505050505050565b600e602052600090815260409020805460018201546002830180546001600160a01b039093169391926110fc90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461112890612f07565b80156111755780601f1061114a57610100808354040283529160200191611175565b820191906000526020600020905b81548152906001019060200180831161115857829003601f168201915b5050505050905083565b60006001600160a01b0382166111eb5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b606482015260840161072c565b506001600160a01b031660009081526004602052604090205490565b61121485858585856115a0565b61121c610d94565b6000848152600e602052604090819020600101549051633faea84d60e21b815260048101919091526001600160a01b038681166024830152919091169063febaa1349034906044016000604051808303818588803b15801561127d57600080fd5b505af1158015611291573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b0383163314806112b957506112b98333610637565b6112d55760405162461bcd60e51b815260040161072c906130fd565b6112e0838383611ab9565b505050565b6112ed6116f1565b6112f76000611c59565b565b611304338383611ca9565b5050565b6000806113188787878787611d89565b600b54604051633dcc3df560e11b815260048101869052306024820152604481018390529192506001600160a01b031690637b987bea9034906064016000604051808303818588803b15801561136d57600080fd5b505af1158015611381573d6000803e3d6000fd5b50939a9950505050505050505050565b6060600080600c546001600160401b038111156113b0576113b061287f565b6040519080825280602002602001820160405280156113fd57816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816113ce5790505b50905060015b600c548111610f28576000818152600e60205260409020546001600160a01b03808716911603611523576000818152600e6020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600281018054929391929184019161147790612f07565b80601f01602080910402602001604051908101604052809291908181526020018280546114a390612f07565b80156114f05780601f106114c5576101008083540402835291602001916114f0565b820191906000526020600020905b8154815290600101906020018083116114d357829003601f168201915b50505050508152505082848061150590612fa6565b95508151811061151757611517612fbf565b60200260200101819052505b8061152d81612fa6565b915050611403565b600061153f610d94565b6001600160a01b031663428c090b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561157c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e029190613168565b6001600160a01b0385163314806115bc57506115bc8533610637565b6115d85760405162461bcd60e51b815260040161072c906130fd565b610cf68585858585611e25565b6115ed6116f1565b6001600160a01b0381166116525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161072c565b61165b81611c59565b50565b6001600160a01b03831633148061167a575061167a8333610637565b6116965760405162461bcd60e51b815260040161072c906130fd565b6112e0838383611f61565b60006001600160e01b03198216636cdb3d1360e11b14806116d257506001600160e01b031982166303a24d0760e21b145b8061075a57506301ffc9a760e01b6001600160e01b031983161461075a565b6000546001600160a01b031633146112f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161072c565b6000928352600f602052604090922080546001600160a01b0319166001600160a01b039290921691909117815560010155565b6001600160a01b0384166117a45760405162461bcd60e51b815260040161072c90613181565b81518351146117c55760405162461bcd60e51b815260040161072c906131c2565b336117d581600087878787612082565b60005b8451811015611871578381815181106117f3576117f3612fbf565b60200260200101516001600087848151811061181157611811612fbf565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611859919061320a565b9091555081905061186981612fa6565b9150506117d8565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118c292919061321d565b60405180910390a4610cf681600087878787612090565b600080826000036118ef5750600090508061096a565b600183858161190057611900612f6e565b04915091509250929050565b815183511461192d5760405162461bcd60e51b815260040161072c906131c2565b6001600160a01b0384166119535760405162461bcd60e51b815260040161072c90613242565b33611962818787878787612082565b60005b8451811015611a4b57600085828151811061198257611982612fbf565b6020026020010151905060008583815181106119a0576119a0612fbf565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156119f15760405162461bcd60e51b815260040161072c90613287565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a3090849061320a565b9250508190555050505080611a4490612fa6565b9050611965565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a9b92919061321d565b60405180910390a4611ab1818787878787612090565b505050505050565b6001600160a01b038316611adf5760405162461bcd60e51b815260040161072c906132d1565b8051825114611b005760405162461bcd60e51b815260040161072c906131c2565b6000339050611b2381856000868660405180602001604052806000815250612082565b60005b8351811015611beb576000848281518110611b4357611b43612fbf565b602002602001015190506000848381518110611b6157611b61612fbf565b60209081029190910181015160008481526001835260408082206001600160a01b038c168352909352919091205490915081811015611bb25760405162461bcd60e51b815260040161072c90613314565b60009283526001602090815260408085206001600160a01b038b1686529091529092209103905580611be381612fa6565b915050611b26565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611c3c92919061321d565b60405180910390a460408051602081019091526000905250505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603611d1c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161072c565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600080600c60008154611d9b90612fa6565b91829055506000818152600e6020526040902080546001600160a01b0319163317815560018101859055909150600201611dd5878261301b565b50611df1338287604051806020016040528060008152506121eb565b6000818152600d60205260409020611e09888261301b565b508315611e1b57611e1b81338661174b565b9695505050505050565b6001600160a01b038416611e4b5760405162461bcd60e51b815260040161072c90613242565b336000611e57856122cd565b90506000611e64856122cd565b9050611e74838989858589612082565b60008681526001602090815260408083206001600160a01b038c16845290915290205485811015611eb75760405162461bcd60e51b815260040161072c90613287565b60008781526001602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611ef690849061320a565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611f56848a8a8a8a8a612318565b505050505050505050565b6001600160a01b038316611f875760405162461bcd60e51b815260040161072c906132d1565b336000611f93846122cd565b90506000611fa0846122cd565b9050611fc083876000858560405180602001604052806000815250612082565b60008581526001602090815260408083206001600160a01b038a168452909152902054848110156120035760405162461bcd60e51b815260040161072c90613314565b60008681526001602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b611ab18686868686866123d3565b6001600160a01b0384163b15611ab15760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906120d49089908990889088908890600401613358565b6020604051808303816000875af192505050801561210f575060408051601f3d908101601f1916820190925261210c918101906133b6565b60015b6121bb5761211b6133d3565b806308c379a003612154575061212f6133ef565b8061213a5750612156565b8060405162461bcd60e51b815260040161072c919061282d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161072c565b6001600160e01b0319811663bc197c8160e01b146120795760405162461bcd60e51b815260040161072c90613478565b6001600160a01b0384166122115760405162461bcd60e51b815260040161072c90613181565b33600061221d856122cd565b9050600061222a856122cd565b905061223b83600089858589612082565b60008681526001602090815260408083206001600160a01b038b1684529091528120805487929061226d90849061320a565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461207983600089898989612318565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061230757612307612fbf565b602090810291909101015292915050565b6001600160a01b0384163b15611ab15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061235c90899089908890889088906004016134c0565b6020604051808303816000875af1925050508015612397575060408051601f3d908101601f19168201909252612394918101906133b6565b60015b6123a35761211b6133d3565b6001600160e01b0319811663f23a6e6160e01b146120795760405162461bcd60e51b815260040161072c90613478565b60005b83518163ffffffff161015612079576000848263ffffffff16815181106123ff576123ff612fbf565b602002602001015190506000848363ffffffff168151811061242357612423612fbf565b6020026020010151905060006001600160a01b0316886001600160a01b0316036124945761248f82600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6124fc565b866001600160a01b0316886001600160a01b0316141580156124be5750806124bc89846106c5565b145b156124fc576124cd88836125c3565b6001600160a01b03881660009081526004602052604081208054600192906124f6908490613505565b90915550505b876001600160a01b0316876001600160a01b03161415801561252657506001600160a01b03871615155b8015612539575061253787836106c5565b155b1561257c576125488783612660565b6001600160a01b038716600090815260046020526040812080546001929061257190849061320a565b909155506125ae9050565b6001600160a01b0387161580156125a0575060008281526007602052604090205481145b156125ae576125ae826126a4565b505080806125bb906130da565b9150506123d6565b600060016125d08461117f565b6125da9190613505565b60008381526006602052604090205490915080821461262d576001600160a01b03841660009081526005602090815260408083208584528252808320548484528184208190558352600690915290208190555b5060009182526006602090815260408084208490556001600160a01b039094168352600581528383209183525290812055565b600061266b8361117f565b6001600160a01b039093166000908152600560209081526040808320868452825280832085905593825260069052919091209190915550565b6008546000906126b690600190613505565b600083815260096020526040812054600880549394509092849081106126de576126de612fbf565b9060005260206000200154905080600883815481106126ff576126ff612fbf565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061273757612737613518565b6001900381819060005260206000200160009055905550505050565b6001600160a01b038116811461165b57600080fd5b6000806040838503121561277b57600080fd5b823561278681612753565b946020939093013593505050565b6001600160e01b03198116811461165b57600080fd5b6000602082840312156127bc57600080fd5b81356127c781612794565b9392505050565b6000602082840312156127e057600080fd5b5035919050565b6000815180845260005b8181101561280d576020818501810151868301820152016127f1565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006127c760208301846127e7565b60006020828403121561285257600080fd5b81356127c781612753565b6000806040838503121561287057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156128ba576128ba61287f565b6040525050565b600082601f8301126128d257600080fd5b81356001600160401b038111156128eb576128eb61287f565b604051612902601f8301601f191660200182612895565b81815284602083860101111561291757600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b0382111561294d5761294d61287f565b5060051b60200190565b600082601f83011261296857600080fd5b8135602061297582612934565b6040516129828282612895565b83815260059390931b85018201928281019150868411156129a257600080fd5b8286015b848110156129bd57803583529183019183016129a6565b509695505050505050565b600080600080600060a086880312156129e057600080fd5b85356001600160401b03808211156129f757600080fd5b612a0389838a016128c1565b96506020880135915080821115612a1957600080fd5b612a2589838a016128c1565b95506040880135915080821115612a3b57600080fd5b612a4789838a01612957565b94506060880135915080821115612a5d57600080fd5b612a6989838a01612957565b93506080880135915080821115612a7f57600080fd5b50612a8c88828901612957565b9150509295509295909350565b600081518084526020808501945080840160005b83811015612ac957815187529582019590820190600101612aad565b509495945050505050565b6020815260006127c76020830184612a99565b600080600080600060a08688031215612aff57600080fd5b8535612b0a81612753565b94506020860135612b1a81612753565b935060408601356001600160401b0380821115612b3657600080fd5b612b4289838a01612957565b94506060880135915080821115612b5857600080fd5b612b6489838a01612957565b93506080880135915080821115612b7a57600080fd5b50612a8c888289016128c1565b60008060408385031215612b9a57600080fd5b82356001600160401b0380821115612bb157600080fd5b818501915085601f830112612bc557600080fd5b81356020612bd282612934565b604051612bdf8282612895565b83815260059390931b8501820192828101915089841115612bff57600080fd5b948201945b83861015612c26578535612c1781612753565b82529482019490820190612c04565b96505086013592505080821115612c3c57600080fd5b50612c4985828601612957565b9150509250929050565b60018060a01b0384168152826020820152606060408201526000612c7a60608301846127e7565b95945050505050565b600080600080600060a08688031215612c9b57600080fd5b8535612ca681612753565b94506020860135612cb681612753565b9350604086013592506060860135915060808601356001600160401b03811115612cdf57600080fd5b612a8c888289016128c1565b600080600060608486031215612d0057600080fd5b8335612d0b81612753565b925060208401356001600160401b0380821115612d2757600080fd5b612d3387838801612957565b93506040860135915080821115612d4957600080fd5b50612d5686828701612957565b9150509250925092565b60008060408385031215612d7357600080fd5b8235612d7e81612753565b915060208301358015158114612d9357600080fd5b809150509250929050565b600080600080600060a08688031215612db657600080fd5b85356001600160401b0380821115612dcd57600080fd5b612dd989838a016128c1565b96506020880135915080821115612def57600080fd5b50612dfc888289016128c1565b959895975050505060408401359360608101359360809091013592509050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612e9657888303603f19018552815180516001600160a01b0316845287810151888501528601516060878501819052612e82818601836127e7565b968901969450505090860190600101612e43565b509098975050505050505050565b60008060408385031215612eb757600080fd5b8235612ec281612753565b91506020830135612d9381612753565b600080600060608486031215612ee757600080fd5b8335612ef281612753565b95602085013595506040909401359392505050565b600181811c90821680612f1b57607f821691505b602082108103612f3b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761075a5761075a612f41565b634e487b7160e01b600052601260045260246000fd5b600082612fa157634e487b7160e01b600052601260045260246000fd5b500490565b600060018201612fb857612fb8612f41565b5060010190565b634e487b7160e01b600052603260045260246000fd5b601f8211156112e057600081815260208120601f850160051c81016020861015612ffc5750805b601f850160051c820191505b81811015611ab157828155600101613008565b81516001600160401b038111156130345761303461287f565b613048816130428454612f07565b84612fd5565b602080601f83116001811461307d57600084156130655750858301515b600019600386901b1c1916600185901b178555611ab1565b600085815260208120601f198616915b828110156130ac5788860151825594840194600190910190840161308d565b50858210156130ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600063ffffffff8083168181036130f3576130f3612f41565b6001019392505050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60006020828403121561315d57600080fd5b81516127c781612753565b60006020828403121561317a57600080fd5b5051919050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b8082018082111561075a5761075a612f41565b6040815260006132306040830185612a99565b8281036020840152612c7a8185612a99565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061338490830186612a99565b82810360608401526133968186612a99565b905082810360808401526133aa81856127e7565b98975050505050505050565b6000602082840312156133c857600080fd5b81516127c781612794565b600060033d11156133ec5760046000803e5060005160e01c5b90565b600060443d10156133fd5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561342c57505050505090565b82850191508151818111156134445750505050505090565b843d870101602082850101111561345e5750505050505090565b61346d60208286010187612895565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906134fa908301846127e7565b979650505050505050565b8181038181111561075a5761075a612f41565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200deff5c245694b267224615cf5f9f8599fa8bb9ac8495a0d4a88ab829f2c0bd964736f6c63430008110033";
	var linkReferences$1 = {
	};
	var deployedLinkReferences$1 = {
	};
	var require$$2 = {
		contractName: contractName$1,
		abi: abi$1,
		bytecode: bytecode$1,
		deployedBytecode: deployedBytecode$1,
		linkReferences: linkReferences$1,
		deployedLinkReferences: deployedLinkReferences$1
	};

	"use strict";
	var __createBinding$3 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$3 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$3 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
	  __setModuleDefault$3(result, mod);
	  return result;
	};
	var __awaiter$8 = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$8 = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	Object.defineProperty(VWBLProtocol, "__esModule", {
	  value: true
	});
	var VWBLERC1155Contract_1 = VWBLProtocol.VWBLERC1155Contract = void 0;
	var vwbl1155$1 = __importStar$3(require$$1$1);
	var vwbl1155IPFS$1 = __importStar$3(require$$2);
	var VWBLERC1155Contract = /** @class */function () {
	  function VWBLERC1155Contract(web3, address, isIpfs) {
	    this.web3 = web3;
	    this.contract = isIpfs ? new web3.eth.Contract(vwbl1155IPFS$1.abi, address) : new web3.eth.Contract(vwbl1155$1.abi, address);
	  }
	  VWBLERC1155Contract.prototype.mintToken = function (decryptUrl, amount, royaltiesPercentage, documentId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress, fee, receipt, tokenId;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getFee()];
	          case 2:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.methods.mint(decryptUrl, amount, royaltiesPercentage, documentId).send({
	              from: myAddress,
	              value: fee,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenId = receipt.events.TransferSingle.returnValues.id;
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.batchMintToken = function (decryptUrl, amount, royaltiesPercentage, documentId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress, fee, receipt, tokenIds;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getFee()];
	          case 2:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.methods.mintBatch(decryptUrl, amount, royaltiesPercentage, documentId).send({
	              from: myAddress,
	              value: fee,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenIds = receipt.events.TransferBatch.returnValues.ids;
	            return [2 /*return*/, tokenIds];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.mintTokenForIPFS = function (metadataUrl, decryptUrl, amount, royaltiesPercentage, documentId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress, fee, receipt, tokenId;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getFee()];
	          case 2:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.methods.mint(metadataUrl, decryptUrl, amount, royaltiesPercentage, documentId).send({
	              from: myAddress,
	              value: fee,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenId = receipt.events.TransferSingle.returnValues.id;
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.batchMintTokenForIPFS = function (metadataUrl, decryptUrl, amount, royaltiesPercentage, documentId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress, fee, receipt, tokenIds;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getFee()];
	          case 2:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.methods.mintBatch(metadataUrl, decryptUrl, amount, royaltiesPercentage, documentId).send({
	              from: myAddress,
	              value: fee,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenIds = receipt.events.TransferBatch.returnValues.ids;
	            return [2 /*return*/, tokenIds];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.getOwnTokenIds = function () {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress, balance;
	      var _this = this;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.contract.methods.tokenCountOfOwner(myAddress).call()];
	          case 2:
	            balance = _a.sent();
	            return [4 /*yield*/, Promise.all(range$1(Number.parseInt(balance)).map(function (i) {
	              return __awaiter$8(_this, void 0, void 0, function () {
	                var ownTokenId;
	                return __generator$8(this, function (_a) {
	                  switch (_a.label) {
	                    case 0:
	                      return [4 /*yield*/, this.contract.methods.tokenOfOwnerByIndex(myAddress, i).call()];
	                    case 1:
	                      ownTokenId = _a.sent();
	                      return [2 /*return*/, Number.parseInt(ownTokenId)];
	                  }
	                });
	              });
	            }))];
	          case 3:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.getTokenByMinter = function (address) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.getTokenByMinter(address).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.getMetadataUrl = function (tokenId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.uri(tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.getOwner = function (tokenId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.ownerOf(tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.getMinter = function (tokenId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.getMinter(tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.isOwnerOf = function (tokenId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress, owner;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getOwner(tokenId)];
	          case 2:
	            owner = _a.sent();
	            return [2 /*return*/, myAddress === owner];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.isMinterOf = function (tokenId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress, minter;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.getMinter(tokenId)];
	          case 2:
	            minter = _a.sent();
	            return [2 /*return*/, myAddress === minter];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.getFee = function () {
	    return __awaiter$8(this, void 0, void 0, function () {
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.getFee().call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.getTokenInfo = function (tokenId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.tokenIdToTokenInfo(tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.setApprovalForAll = function (operator) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.contract.methods.setApprovalForAll(operator, true).send({
	              from: myAddress,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 2:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLERC1155Contract.prototype.isApprovedForAll = function (owner, operator) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.isApprovedForAll(owner, operator).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.safeTransfer = function (to, tokenId, amount, data) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.contract.methods.safeTransferFrom(myAddress, to, tokenId, amount, data).send({
	              from: myAddress,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 2:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.balanceOf = function (owner, tokenId) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.balanceOf(owner, tokenId).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.balanceOfBatch = function (owners, tokenIds) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.methods.balanceOfBatch(owners, tokenIds).call()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.burn = function (owner, tokenId, amount) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.contract.methods.burn(owner, tokenId, amount).send({
	              from: myAddress,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 2:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155Contract.prototype.burnBatch = function (owner, tokenIds, amount) {
	    return __awaiter$8(this, void 0, void 0, function () {
	      var myAddress;
	      return __generator$8(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.web3.eth.getAccounts()];
	          case 1:
	            myAddress = _a.sent()[0];
	            return [4 /*yield*/, this.contract.methods.burnBatch(owner, tokenIds, amount).send({
	              from: myAddress,
	              maxPriorityFeePerGas: null,
	              maxFeePerGas: null
	            })];
	          case 2:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  return VWBLERC1155Contract;
	}();
	VWBLERC1155Contract_1 = VWBLProtocol.VWBLERC1155Contract = VWBLERC1155Contract;
	var range$1 = function (length) {
	  return Array.from(Array(length).keys());
	};

	var VWBLProtocolEthers = {};

	"use strict";
	var __createBinding$2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$2 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
	  __setModuleDefault$2(result, mod);
	  return result;
	};
	var __awaiter$7 = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$7 = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	Object.defineProperty(VWBLProtocolEthers, "__esModule", {
	  value: true
	});
	var VWBLERC1155EthersContract_1 = VWBLProtocolEthers.VWBLERC1155EthersContract = void 0;
	var ethers_1$3 = lib$v;
	var vwbl1155 = __importStar$2(require$$1$1);
	var vwbl1155IPFS = __importStar$2(require$$2);
	var VWBLERC1155EthersContract = /** @class */function () {
	  function VWBLERC1155EthersContract(address, isIpfs, ethersProvider, ethersSigner) {
	    this.ethersProvider = ethersProvider;
	    this.ethersSigner = ethersSigner;
	    this.contract = isIpfs ? new ethers_1$3.ethers.Contract(address, vwbl1155IPFS.abi, ethersSigner) : new ethers_1$3.ethers.Contract(address, vwbl1155.abi, ethersSigner);
	  }
	  VWBLERC1155EthersContract.prototype.mintToken = function (decryptUrl, amount, royaltiesPercentage, documentId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var fee, tx, receipt, tokenId;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.getFee()];
	          case 1:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.mint(decryptUrl, amount, royaltiesPercentage, documentId, {
	              value: fee
	            })];
	          case 2:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenId = parseToTokenId(receipt);
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.batchMintToken = function (decryptUrl, amount, royaltiesPercentage, documentId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var fee, tx, receipt, tokenIds;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.getFee()];
	          case 1:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.mintBatch(decryptUrl, amount, royaltiesPercentage, documentId, {
	              value: fee
	            })];
	          case 2:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenIds = parseToTokenIds(receipt);
	            return [2 /*return*/, tokenIds];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.mintTokenForIPFS = function (metadataUrl, decryptUrl, amount, royaltiesPercentage, documentId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var fee, tx, receipt, tokenId;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.getFee()];
	          case 1:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.mint(metadataUrl, decryptUrl, amount, royaltiesPercentage, documentId, {
	              value: fee
	            })];
	          case 2:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenId = parseToTokenId(receipt);
	            return [2 /*return*/, tokenId];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.batchMintTokenForIPFS = function (metadataUrl, decryptUrl, amount, royaltiesPercentage, documentId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var fee, tx, receipt, tokenIds;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.getFee()];
	          case 1:
	            fee = _a.sent();
	            console.log("transaction start");
	            return [4 /*yield*/, this.contract.mintBatch(metadataUrl, decryptUrl, amount, royaltiesPercentage, documentId, {
	              value: fee
	            })];
	          case 2:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 3:
	            receipt = _a.sent();
	            console.log("transaction end");
	            tokenIds = parseToTokenIds(receipt);
	            return [2 /*return*/, tokenIds];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.getOwnTokenIds = function () {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var myAddress, balance;
	      var _this = this;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.ethersSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.contract.callStatic.tokenCountOfOwner(myAddress)];
	          case 2:
	            balance = _a.sent();
	            return [4 /*yield*/, Promise.all(range(Number.parseInt(balance)).map(function (i) {
	              return __awaiter$7(_this, void 0, void 0, function () {
	                var ownTokenId;
	                return __generator$7(this, function (_a) {
	                  switch (_a.label) {
	                    case 0:
	                      return [4 /*yield*/, this.contract.callStatic.tokenOfOwnerByIndex(myAddress, i)];
	                    case 1:
	                      ownTokenId = _a.sent();
	                      return [2 /*return*/, Number.parseInt(ownTokenId)];
	                  }
	                });
	              });
	            }))];
	          case 3:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.getTokenByMinter = function (address) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.getTokenByMinter(address)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.getMetadataUrl = function (tokenId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.uri(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.getOwner = function (tokenId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.ownerOf(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.getMinter = function (tokenId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.getMinter(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.isOwnerOf = function (tokenId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var myAddress, owner;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.ethersSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.getOwner(tokenId)];
	          case 2:
	            owner = _a.sent();
	            return [2 /*return*/, myAddress === owner];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.isMinterOf = function (tokenId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var myAddress, minter;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.ethersSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.getMinter(tokenId)];
	          case 2:
	            minter = _a.sent();
	            return [2 /*return*/, myAddress === minter];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.getFee = function () {
	    return __awaiter$7(this, void 0, void 0, function () {
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.getFee()];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.getTokenInfo = function (tokenId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.tokenIdToTokenInfo(tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.setApprovalForAll = function (operator) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var tx;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.setApprovalForAll(operator, true)];
	          case 1:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 2:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLERC1155EthersContract.prototype.isApprovedForAll = function (owner, operator) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.isApprovedForAll(owner, operator)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.safeTransfer = function (to, tokenId, amount, data) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var myAddress, tx;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.ethersSigner.getAddress()];
	          case 1:
	            myAddress = _a.sent();
	            return [4 /*yield*/, this.contract.safeTransferFrom(myAddress, to, tokenId, amount, data)];
	          case 2:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 3:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLERC1155EthersContract.prototype.balanceOf = function (owner, tokenId) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.balanceOf(owner, tokenId)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.balanceOfBatch = function (owners, tokenIds) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.callStatic.balanceOfBatch(owners, tokenIds)];
	          case 1:
	            return [2 /*return*/, _a.sent()];
	        }
	      });
	    });
	  };
	  VWBLERC1155EthersContract.prototype.burn = function (owner, tokenId, amount) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var tx;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.burn(owner, tokenId, amount)];
	          case 1:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 2:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  VWBLERC1155EthersContract.prototype.burnBatch = function (owner, tokenIds, amount) {
	    return __awaiter$7(this, void 0, void 0, function () {
	      var tx;
	      return __generator$7(this, function (_a) {
	        switch (_a.label) {
	          case 0:
	            return [4 /*yield*/, this.contract.burnBatch(owner, tokenIds, amount)];
	          case 1:
	            tx = _a.sent();
	            return [4 /*yield*/, this.ethersProvider.waitForTransaction(tx.hash)];
	          case 2:
	            _a.sent();
	            return [2 /*return*/];
	        }
	      });
	    });
	  };

	  return VWBLERC1155EthersContract;
	}();
	VWBLERC1155EthersContract_1 = VWBLProtocolEthers.VWBLERC1155EthersContract = VWBLERC1155EthersContract;
	var range = function (length) {
	  return Array.from(Array(length).keys());
	};
	var parseToTokenId = function (receipt) {
	  var eventInterface = new ethers_1$3.ethers.utils.Interface(["event erc1155DataRegistered(address contractAddress, uint256 tokenId)"]);
	  var tokenId = 0;
	  receipt.logs.forEach(function (log) {
	    // check whether topic is erc1155DataRegistered(address contractAddress, uint256 tokenId)
	    if (log.topics[0] === "0xf30a336bd6229f1e88c41eeaad2c5fa73b69e4ec90773a67af474031d64fe32f") {
	      var description = eventInterface.parseLog({
	        topics: log.topics,
	        data: log.data
	      });
	      tokenId = description.args[1].toNumber();
	    }
	  });
	  return tokenId;
	};
	var parseToTokenIds = function (receipt) {
	  var eventInterface = new ethers_1$3.ethers.utils.Interface(["event erc1155DataRegistered(address contractAddress, uint256 tokenId)"]);
	  var tokenIds = [];
	  receipt.logs.forEach(function (log) {
	    // check whether topic is erc1155DataRegistered(address contractAddress, uint256 tokenId)
	    if (log.topics[0] === "0xf30a336bd6229f1e88c41eeaad2c5fa73b69e4ec90773a67af474031d64fe32f") {
	      var description = eventInterface.parseLog({
	        topics: log.topics,
	        data: log.data
	      });
	      tokenIds.push(description.args[1].toNumber());
	    }
	  });
	  return tokenIds;
	};

	(function (exports) {
	  "use strict";

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(Sign, exports);
	  __exportStar(VWBLProtocol$1, exports);
	  __exportStar(VWBLMetaTxProtocol, exports);
	  __exportStar(VWBLProtocolEthers$1, exports);
	  __exportStar(VWBLProtocol, exports);
	  __exportStar(VWBLProtocolEthers, exports);
	})(blockchain);
	var index$4 = /*@__PURE__*/getDefaultExportFromCjs(blockchain);

	var types = {};

	var ManageKeyType$1 = {};

	(function (exports) {
	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.ManageKeyType = void 0;
	  var ManageKeyType;
	  (function (ManageKeyType) {
	    ManageKeyType[ManageKeyType["VWBL_NETWORK_SERVER"] = 0] = "VWBL_NETWORK_SERVER";
	    // VWBL_NETWROK_SERVER is only in use now
	    ManageKeyType[ManageKeyType["VWBL_NETWORK_CONSORTIUM"] = 1] = "VWBL_NETWORK_CONSORTIUM";
	    ManageKeyType[ManageKeyType["MY_SERVER"] = 2] = "MY_SERVER";
	  })(ManageKeyType = exports.ManageKeyType || (exports.ManageKeyType = {}));
	})(ManageKeyType$1);
	var ManageKeyType = /*@__PURE__*/getDefaultExportFromCjs(ManageKeyType$1);

	var UploadContentType$1 = {};

	(function (exports) {
	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.UploadContentType = void 0;
	  var UploadContentType;
	  (function (UploadContentType) {
	    UploadContentType[UploadContentType["S3"] = 0] = "S3";
	    UploadContentType[UploadContentType["IPFS"] = 1] = "IPFS";
	    UploadContentType[UploadContentType["CUSTOM"] = 2] = "CUSTOM";
	  })(UploadContentType = exports.UploadContentType || (exports.UploadContentType = {}));
	})(UploadContentType$1);
	var UploadContentType = /*@__PURE__*/getDefaultExportFromCjs(UploadContentType$1);

	var UploadMetadataType$1 = {};

	(function (exports) {
	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.UploadMetadataType = void 0;
	  var UploadMetadataType;
	  (function (UploadMetadataType) {
	    UploadMetadataType[UploadMetadataType["S3"] = 0] = "S3";
	    UploadMetadataType[UploadMetadataType["IPFS"] = 1] = "IPFS";
	    UploadMetadataType[UploadMetadataType["CUSTOM"] = 2] = "CUSTOM";
	  })(UploadMetadataType = exports.UploadMetadataType || (exports.UploadMetadataType = {}));
	})(UploadMetadataType$1);
	var UploadMetadataType = /*@__PURE__*/getDefaultExportFromCjs(UploadMetadataType$1);

	var File = {};

	"use strict";
	Object.defineProperty(File, "__esModule", {
	  value: true
	});

	var EncryptLogic = {};

	"use strict";
	Object.defineProperty(EncryptLogic, "__esModule", {
	  value: true
	});

	var ProgressSubscriber$1 = {};

	(function (exports) {
	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.StepStatus = void 0;
	  var StepStatus;
	  (function (StepStatus) {
	    StepStatus["MINT_TOKEN"] = "MINT_TOKEN";
	    StepStatus["CREATE_KEY"] = "CREATE_KEY";
	    StepStatus["ENCRYPT_DATA"] = "ENCRYPT_DATA";
	    StepStatus["UPLOAD_CONTENT"] = "UPLOAD_CONTENT";
	    StepStatus["UPLOAD_METADATA"] = "UPLOAD_METADATA";
	    StepStatus["SET_KEY"] = "SET_KEY";
	  })(StepStatus = exports.StepStatus || (exports.StepStatus = {}));
	})(ProgressSubscriber$1);
	var ProgressSubscriber = /*@__PURE__*/getDefaultExportFromCjs(ProgressSubscriber$1);

	var BiconomyConfigType = {};

	"use strict";
	Object.defineProperty(BiconomyConfigType, "__esModule", {
	  value: true
	});

	var ConstructorPropsType = {};

	"use strict";
	Object.defineProperty(ConstructorPropsType, "__esModule", {
	  value: true
	});

	(function (exports) {
	  "use strict";

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(ManageKeyType$1, exports);
	  __exportStar(UploadContentType$1, exports);
	  __exportStar(UploadMetadataType$1, exports);
	  __exportStar(File, exports);
	  __exportStar(EncryptLogic, exports);
	  __exportStar(ProgressSubscriber$1, exports);
	  __exportStar(BiconomyConfigType, exports);
	  __exportStar(ConstructorPropsType, exports);
	})(types);
	var index$3 = /*@__PURE__*/getDefaultExportFromCjs(types);

	"use strict";
	var __createBinding$1 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault$1 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar$1 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
	  __setModuleDefault$1(result, mod);
	  return result;
	};
	var __awaiter$6 = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$6 = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	Object.defineProperty(base$2, "__esModule", {
	  value: true
	});
	var VWBLBase_1 = base$2.VWBLBase = void 0;
	var AWS = __importStar$1(require$$0$4);
	var upload_1$5 = upload;
	var cryptoHelper_1$6 = cryptoHelper$1;
	var fileHelper_1$5 = fileHelper;
	var api_1 = api;
	var blockchain_1$5 = blockchain;
	var types_1$5 = types;
	var VWBLBase = /** @class */function () {
	  // eslint-disable-next-line @typescript-eslint/no-empty-function
	  function VWBLBase(props) {
	    var _this = this;
	    /**
	     * Sign to VWBL
	     *
	     * @remarks
	     * You need to call this method before you send a transaction（eg. mint NFT）
	     */
	    this._sign = function (signer) {
	      return __awaiter$6(_this, void 0, void 0, function () {
	        var _a;
	        return __generator$6(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              _a = this;
	              return [4 /*yield*/, (0, blockchain_1$5.signToProtocol)(signer)];
	            case 1:
	              _a.signature = _b.sent();
	              console.log("signed");
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Create a key used for encryption and decryption
	     *
	     * @returns Random string generated by uuid
	     */
	    this.createKey = function () {
	      return (0, cryptoHelper_1$6.createRandomKey)();
	    };
	    /**
	     * Set key to VWBL Network
	     *
	     * @param documentId - DocumentId
	     * @param chainId - The indentifier of blockchain
	     * @param key - The key generated by {@link VWBL.createKey}
	     * @param hasNonce
	     * @param autoMigration
	     *
	     */
	    this._setKey = function (documentId, chainId, key, hasNonce, autoMigration) {
	      return __awaiter$6(_this, void 0, void 0, function () {
	        return __generator$6(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Encode `plainData` to Base64 and encrypt it
	     *
	     * @param plainData - The data that only NFT owner can view
	     * @param key - The key generated by {@link VWBL.createKey}
	     * @returns Encrypted file data
	     */
	    this.encryptDataViaBase64 = function (plainData, key) {
	      return __awaiter$6(_this, void 0, void 0, function () {
	        var content;
	        return __generator$6(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, (0, fileHelper_1$5.toBase64FromBlob)(plainData)];
	            case 1:
	              content = _a.sent();
	              return [2 /*return*/, (0, cryptoHelper_1$6.encryptString)(content, key)];
	          }
	        });
	      });
	    };
	    /**
	     * Encrypt `plainData`
	     *
	     * @param plainFile - The data that only NFT owner can view
	     * @param key - The key generated by {@link VWBL.createKey}
	     * @returns Encrypted file data
	     */
	    this.encryptFile = function (plainFile, key) {
	      return __awaiter$6(_this, void 0, void 0, function () {
	        return __generator$6(this, function (_a) {
	          return [2 /*return*/, (0, cryptoHelper_1$6.encryptFile)(plainFile, key)];
	        });
	      });
	    };
	    /**
	     * Decrypt `encryptFile`
	     *
	     * @param encryptFile - The data that only NFT owner can view
	     * @param key - The key generated by {@link VWBL.createKey}
	     * @returns Encrypted file data
	     */
	    this.decryptFile = function (encryptFile, key) {
	      return __awaiter$6(_this, void 0, void 0, function () {
	        return __generator$6(this, function (_a) {
	          return [2 /*return*/, (0, cryptoHelper_1$6.decryptFile)(encryptFile, key)];
	        });
	      });
	    };
	    var uploadContentType = props.uploadContentType,
	      uploadMetadataType = props.uploadMetadataType,
	      awsConfig = props.awsConfig,
	      vwblNetworkUrl = props.vwblNetworkUrl,
	      ipfsNftStorageKey = props.ipfsNftStorageKey;
	    this.api = new api_1.VWBLApi(vwblNetworkUrl);
	    if (uploadContentType === types_1$5.UploadContentType.S3 || uploadMetadataType === types_1$5.UploadMetadataType.S3) {
	      if (!awsConfig) {
	        throw new Error("please specify S3 bucket.");
	      }
	      AWS.config.update({
	        region: awsConfig.region,
	        credentials: new AWS.CognitoIdentityCredentials({
	          IdentityPoolId: awsConfig.idPoolId
	        })
	      });
	    } else if (uploadContentType === types_1$5.UploadContentType.IPFS || uploadMetadataType === types_1$5.UploadMetadataType.IPFS) {
	      if (!ipfsNftStorageKey) {
	        throw new Error("please specify nftstorage config of IPFS.");
	      }
	      this.uploadToIpfs = new upload_1$5.UploadToIPFS(ipfsNftStorageKey);
	    }
	  }
	  return VWBLBase;
	}();
	VWBLBase_1 = base$2.VWBLBase = VWBLBase;

	"use strict";
	var __extends$5 = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var extendStatics = function (d, b) {
	    extendStatics = Object.setPrototypeOf || {
	      __proto__: []
	    } instanceof Array && function (d, b) {
	      d.__proto__ = b;
	    } || function (d, b) {
	      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
	    };
	    return extendStatics(d, b);
	  };
	  return function (d, b) {
	    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() {
	      this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();
	var __assign$4 = commonjsGlobal && commonjsGlobal.__assign || function () {
	  __assign$4 = Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	      s = arguments[i];
	      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	    }
	    return t;
	  };
	  return __assign$4.apply(this, arguments);
	};
	var __awaiter$5 = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$5 = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	var __importDefault$5 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(VWBL$2, "__esModule", {
	  value: true
	});
	var VWBL_2 = VWBL$2.VWBL = void 0;
	var axios_1$5 = __importDefault$5(axiosExports$1);
	var upload_1$4 = upload$1;
	var cryptoHelper_1$5 = cryptoHelper$1;
	var fileHelper_1$4 = fileHelper;
	var base_1$5 = base$2;
	var blockchain_1$4 = blockchain;
	var types_1$4 = types;
	var VWBL$1 = /** @class */function (_super) {
	  __extends$5(VWBL, _super);
	  function VWBL(props) {
	    var _this = _super.call(this, props) || this;
	    /**
	     * Sign to VWBL
	     *
	     * @remarks
	     * You need to call this method before you send a transaction（eg. mint NFT）
	     */
	    _this.sign = function () {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this._sign(this.opts.web3)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBL NFT
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param uploadEncryptedFileCallback - Optional: the function for uploading encrypted data
	     * @param uploadThumbnailCallback - Optional: the function for uploading thumbnail
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateToken = function (name, description, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, uploadEncryptedFileCallback, uploadThumbnailCallback, uploadMetadataCallBack, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var _a, uploadContentType, uploadMetadataType, awsConfig, vwblNetworkUrl, documentId, tokenId, key, plainFileArray, uuid, uploadEncryptedFunction, uploadThumbnailFunction, encryptedDataUrls, thumbnailImageUrl, uploadMetadataFunction, mimeType, chainId;
	        var _this = this;
	        return __generator$5(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              _a = this.opts, uploadContentType = _a.uploadContentType, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig, vwblNetworkUrl = _a.vwblNetworkUrl;
	              documentId = this.opts.web3.utils.randomHex(32);
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, royaltiesPercentage, documentId)];
	            case 1:
	              tokenId = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.MINT_TOKEN);
	              key = (0, cryptoHelper_1$5.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.CREATE_KEY);
	              // 3. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              uuid = (0, cryptoHelper_1$5.createRandomKey)();
	              uploadEncryptedFunction = uploadContentType === types_1$4.UploadContentType.S3 ? upload_1$4.uploadEncryptedFile : uploadEncryptedFileCallback;
	              uploadThumbnailFunction = uploadContentType === types_1$4.UploadContentType.S3 ? upload_1$4.uploadThumbnail : uploadThumbnailCallback;
	              if (!uploadEncryptedFunction || !uploadThumbnailFunction) {
	                throw new Error("please specify upload file type or give callback");
	              }
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.ENCRYPT_DATA);
	              // 4. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$5(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  return __generator$5(this, function (_c) {
	                    switch (_c.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$5.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1$4.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_c.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$5.encryptFile)(file, key)];
	                      case 3:
	                        _a = _c.sent();
	                        _c.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        return [4 /*yield*/, uploadEncryptedFunction(file.name, encryptedContent, uuid, awsConfig)];
	                      case 5:
	                        return [2 /*return*/, _c.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              encryptedDataUrls = _b.sent();
	              return [4 /*yield*/, uploadThumbnailFunction(thumbnailImage, uuid, awsConfig)];
	            case 3:
	              thumbnailImageUrl = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.UPLOAD_CONTENT);
	              // 5. upload metadata
	              console.log("upload meta data");
	              uploadMetadataFunction = uploadMetadataType === types_1$4.UploadMetadataType.S3 ? upload_1$4.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              mimeType = (0, fileHelper_1$4.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 4:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.UPLOAD_METADATA);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.opts.web3.eth.getChainId()];
	            case 5:
	              chainId = _b.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBL NFT which metadata on IPFS.
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * metadata will be uploaded to IPFS.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateTokenForIPFS = function (name, description, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, key, plainFileArray, encryptedDataUrls, thumbnailImageUrl, mimeType, metadataUrl, documentId, tokenId, chainId;
	        var _this = this;
	        var _a, _b;
	        return __generator$5(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              key = (0, cryptoHelper_1$5.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.CREATE_KEY);
	              // 2. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.ENCRYPT_DATA);
	              // 3. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$5(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  var _c;
	                  return __generator$5(this, function (_d) {
	                    switch (_d.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$5.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1$4.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_d.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$5.encryptFile)(file, key)];
	                      case 3:
	                        _a = _d.sent();
	                        _d.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        console.log(typeof encryptedContent);
	                        return [4 /*yield*/, (_c = this.uploadToIpfs) === null || _c === void 0 ? void 0 : _c.uploadEncryptedFile(encryptedContent)];
	                      case 5:
	                        return [2 /*return*/, _d.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 1:
	              encryptedDataUrls = _c.sent();
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadThumbnail(thumbnailImage)];
	            case 2:
	              thumbnailImageUrl = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.UPLOAD_CONTENT);
	              // 4. upload metadata
	              console.log("upload meta data");
	              mimeType = (0, fileHelper_1$4.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, (_b = this.uploadToIpfs) === null || _b === void 0 ? void 0 : _b.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 3:
	              metadataUrl = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.UPLOAD_METADATA);
	              documentId = this.opts.web3.utils.randomHex(32);
	              return [4 /*yield*/, this.nft.mintTokenForIPFS(metadataUrl, vwblNetworkUrl, royaltiesPercentage, documentId)];
	            case 4:
	              tokenId = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.MINT_TOKEN);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.opts.web3.eth.getChainId()];
	            case 5:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$4.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Set key to VWBL Network
	     *
	     * @param tokenId - The ID of NFT
	     * @param key - The key generated by {@link VWBL.createKey}
	     * @param hasNonce
	     * @param autoMigration
	     *
	     */
	    _this.setKey = function (tokenId, key, hasNonce, autoMigration) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var documentId, chainId;
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 1:
	              documentId = _a.sent().documentId;
	              return [4 /*yield*/, this.opts.web3.eth.getChainId()];
	            case 2:
	              chainId = _a.sent();
	              return [4 /*yield*/, this._setKey(documentId, chainId, key, hasNonce, autoMigration)];
	            case 3:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Mint new NFT
	     *
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @returns The ID of minted NFT
	     */
	    _this.mintToken = function (royaltiesPercentage) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, documentId;
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              documentId = this.opts.web3.utils.randomHex(32);
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, royaltiesPercentage, documentId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Approves `operator` to transfer the given `tokenId`
	     *
	     * @param operator - The wallet address
	     * @param tokenId - The ID of NFT
	     */
	    _this.approve = function (operator, tokenId) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.approve(operator, tokenId)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Get the approved address for a `tokenId`
	     *
	     * @param tokenId - The ID of NFT
	     * @return The Wallet address that was approved
	     */
	    _this.getApproved = function (tokenId) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getApproved(tokenId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Allows `operator` to transfer all tokens that a person who calls this function
	     *
	     * @param operator - The wallet address
	     */
	    _this.setApprovalForAll = function (operator) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.setApprovalForAll(operator)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Tells whether an `operator` is approved by a given `owner`
	     *
	     * @param owner - The wallet address of a NFT owner
	     * @param operator - The wallet address of an operator
	     * @returns
	     */
	    _this.isApprovedForAll = function (owner, operator) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.isApprovedForAll(owner, operator)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Transfer NFT
	     *
	     * @param to - The address that NFT will be transfered
	     * @param tokenId - The ID of NFT
	     */
	    _this.safeTransfer = function (to, tokenId) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.safeTransfer(to, tokenId)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata
	     *
	     * @remarks
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     */
	    _this.uploadMetadata = function (tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, uploadMetadataCallBack) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var _a, uploadMetadataType, awsConfig, uploadMetadataFunction;
	        return __generator$5(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              _a = this.opts, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig;
	              uploadMetadataFunction = uploadMetadataType === types_1$4.UploadMetadataType.S3 ? upload_1$4.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 1:
	              _b.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata to IPFS
	     *
	     * @remarks
	     * Metadata will be uploaded to IPFS.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     */
	    _this.uploadMetadataToIPFS = function (name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var metadataUrl;
	        var _a;
	        return __generator$5(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [2 /*return*/, metadataUrl];
	          }
	        });
	      });
	    };
	    /**
	     * Get all NFT metadata owned by a person who call this method
	     *
	     * @returns Array of token metadata
	     */
	    _this.getOwnTokens = function () {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var ownTokenIds;
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              ownTokenIds = _a.sent();
	              return [4 /*yield*/, Promise.all(ownTokenIds.map(this.getMetadata.bind(this)))];
	            case 2:
	              return [2 /*return*/, _a.sent().filter(function (extractMetadata) {
	                return extractMetadata !== undefined;
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token IDs owned by someone who called this function
	     *
	     * @returns Array of token IDs
	     */
	    _this.getOwnTokenIds = function () {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * Check if a person call this method is a NFT owner, and if so, return a decrypted data.
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata and an address of NFT owner
	     */
	    _this.getTokenById = function (tokenId) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var isOwnerOrMinter, _a, owner, metadata, _b;
	        return __generator$5(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.isOwnerOf(tokenId)];
	            case 1:
	              _a = _c.sent();
	              if (_a) return [3 /*break*/, 3];
	              return [4 /*yield*/, this.nft.isMinterOf(tokenId)];
	            case 2:
	              _a = _c.sent();
	              _c.label = 3;
	            case 3:
	              isOwnerOrMinter = _a;
	              return [4 /*yield*/, this.nft.getOwner(tokenId)];
	            case 4:
	              owner = _c.sent();
	              if (!isOwnerOrMinter) return [3 /*break*/, 6];
	              return [4 /*yield*/, this.extractMetadata(tokenId)];
	            case 5:
	              _b = _c.sent();
	              return [3 /*break*/, 8];
	            case 6:
	              return [4 /*yield*/, this.getMetadata(tokenId)];
	            case 7:
	              _b = _c.sent();
	              _c.label = 8;
	            case 8:
	              metadata = _b;
	              if (!metadata) {
	                throw new Error("metadata not found");
	              }
	              return [2 /*return*/, __assign$4(__assign$4({}, metadata), {
	                owner: owner
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token ids by minter address
	     * @param address - minter address
	     * @returns Token ids
	     */
	    _this.getTokenByMinter = function (address) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        return __generator$5(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenByMinter(address)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata
	     */
	    _this.getMetadata = function (tokenId) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var metadataUrl, metadata;
	        var _a;
	        return __generator$5(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [4 /*yield*/, axios_1$5.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic
	              }];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * This method should be called by NFT owner.
	     *
	     * @param tokenId The ID of NFT
	     * @returns Token metadata
	     */
	    _this.extractMetadata = function (tokenId) {
	      return __awaiter$5(_this, void 0, void 0, function () {
	        var metadataUrl, metadata, documentId, chainId, decryptKey, encryptedDataUrls, isRunningOnBrowser, encryptLogic, ownDataArray, ownFiles, ownDataBase64, fileName;
	        var _this = this;
	        var _a, _b;
	        return __generator$5(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _c.sent();
	              return [4 /*yield*/, axios_1$5.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _c.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 3:
	              documentId = _c.sent().documentId;
	              return [4 /*yield*/, this.opts.web3.eth.getChainId()];
	            case 4:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.getKey(documentId, chainId, this.signature)];
	            case 5:
	              decryptKey = _c.sent();
	              encryptedDataUrls = metadata.encrypted_data;
	              isRunningOnBrowser = typeof window !== "undefined";
	              encryptLogic = (_b = metadata.encrypt_logic) !== null && _b !== void 0 ? _b : "base64";
	              return [4 /*yield*/, Promise.all(encryptedDataUrls.map(function (encryptedDataUrl) {
	                return __awaiter$5(_this, void 0, void 0, function () {
	                  var encryptedData, _a;
	                  return __generator$5(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1$5.default.get(encryptedDataUrl, {
	                          responseType: encryptLogic === "base64" ? "text" : isRunningOnBrowser ? "arraybuffer" : "stream"
	                        })];
	                      case 1:
	                        encryptedData = _b.sent().data;
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _a = (0, cryptoHelper_1$5.decryptString)(encryptedData, decryptKey);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$5.decryptFile)(encryptedData, decryptKey)];
	                      case 3:
	                        _a = _b.sent();
	                        _b.label = 4;
	                      case 4:
	                        return [2 /*return*/, _a];
	                    }
	                  });
	                });
	              }))];
	            case 6:
	              ownDataArray = _c.sent();
	              ownFiles = ownDataArray.filter(function (ownData) {
	                return typeof ownData !== "string";
	              });
	              ownDataBase64 = ownDataArray.filter(function (ownData) {
	                return typeof ownData === "string";
	              });
	              fileName = encryptedDataUrls[0].split("/").slice(-1)[0].replace(/\.vwbl/, "");
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic,
	                ownDataBase64: ownDataBase64,
	                ownFiles: ownFiles,
	                fileName: fileName
	              }];
	          }
	        });
	      });
	    };
	    _this.opts = props;
	    var web3 = props.web3,
	      contractAddress = props.contractAddress,
	      uploadMetadataType = props.uploadMetadataType;
	    _this.nft = new blockchain_1$4.VWBLNFT(web3, contractAddress, uploadMetadataType === types_1$4.UploadMetadataType.IPFS);
	    return _this;
	  }
	  return VWBL;
	}(base_1$5.VWBLBase);
	VWBL_2 = VWBL$2.VWBL = VWBL$1;

	var VWBLMetaTx$1 = {};

	"use strict";
	var __extends$4 = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var extendStatics = function (d, b) {
	    extendStatics = Object.setPrototypeOf || {
	      __proto__: []
	    } instanceof Array && function (d, b) {
	      d.__proto__ = b;
	    } || function (d, b) {
	      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
	    };
	    return extendStatics(d, b);
	  };
	  return function (d, b) {
	    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() {
	      this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();
	var __assign$3 = commonjsGlobal && commonjsGlobal.__assign || function () {
	  __assign$3 = Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	      s = arguments[i];
	      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	    }
	    return t;
	  };
	  return __assign$3.apply(this, arguments);
	};
	var __awaiter$4 = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$4 = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	var __importDefault$4 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(VWBLMetaTx$1, "__esModule", {
	  value: true
	});
	var VWBLMetaTx_2 = VWBLMetaTx$1.VWBLMetaTx = void 0;
	var axios_1$4 = __importDefault$4(axiosExports$1);
	var ethers_1$2 = lib$v;
	var upload_1$3 = upload$1;
	var cryptoHelper_1$4 = cryptoHelper$1;
	var fileHelper_1$3 = fileHelper;
	var base_1$4 = base$2;
	var blockchain_1$3 = blockchain;
	var types_1$3 = types;
	var VWBLMetaTx = /** @class */function (_super) {
	  __extends$4(VWBLMetaTx, _super);
	  function VWBLMetaTx(props) {
	    var _this = _super.call(this, props) || this;
	    /**
	     * Sign to VWBL
	     *
	     * @remarks
	     * You need to call this method before you send a transaction（eg. mint NFT）
	     */
	    _this.sign = function () {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this._sign(this.signer)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBL NFT
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param mintApiId - The mint method api id of biconomy
	     * @param uploadEncryptedFileCallback - Optional: the function for uploading encrypted data
	     * @param uploadThumbnailCallback - Optional: the function for uploading thumbnail
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateToken = function (name, description, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, mintApiId, uploadEncryptedFileCallback, uploadThumbnailCallback, uploadMetadataCallBack, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var _a, uploadContentType, uploadMetadataType, awsConfig, vwblNetworkUrl, documentId, tokenId, key, plainFileArray, uuid, uploadEncryptedFunction, uploadThumbnailFunction, encryptedDataUrls, thumbnailImageUrl, uploadMetadataFunction, mimeType, chainId;
	        var _this = this;
	        return __generator$4(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              _a = this.opts, uploadContentType = _a.uploadContentType, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig, vwblNetworkUrl = _a.vwblNetworkUrl;
	              documentId = ethers_1$2.utils.hexlify(ethers_1$2.utils.randomBytes(32));
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, royaltiesPercentage, documentId, mintApiId)];
	            case 1:
	              tokenId = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.MINT_TOKEN);
	              key = (0, cryptoHelper_1$4.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.CREATE_KEY);
	              // 3. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              uuid = (0, cryptoHelper_1$4.createRandomKey)();
	              uploadEncryptedFunction = uploadContentType === types_1$3.UploadContentType.S3 ? upload_1$3.uploadEncryptedFile : uploadEncryptedFileCallback;
	              uploadThumbnailFunction = uploadContentType === types_1$3.UploadContentType.S3 ? upload_1$3.uploadThumbnail : uploadThumbnailCallback;
	              if (!uploadEncryptedFunction || !uploadThumbnailFunction) {
	                throw new Error("please specify upload file type or give callback");
	              }
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.ENCRYPT_DATA);
	              // 4. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$4(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  return __generator$4(this, function (_c) {
	                    switch (_c.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$4.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1$3.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_c.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$4.encryptFile)(file, key)];
	                      case 3:
	                        _a = _c.sent();
	                        _c.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        return [4 /*yield*/, uploadEncryptedFunction(file.name, encryptedContent, uuid, awsConfig)];
	                      case 5:
	                        return [2 /*return*/, _c.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              encryptedDataUrls = _b.sent();
	              return [4 /*yield*/, uploadThumbnailFunction(thumbnailImage, uuid, awsConfig)];
	            case 3:
	              thumbnailImageUrl = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.UPLOAD_CONTENT);
	              // 5. upload metadata
	              console.log("upload meta data");
	              uploadMetadataFunction = uploadMetadataType === types_1$3.UploadMetadataType.S3 ? upload_1$3.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              mimeType = (0, fileHelper_1$3.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 4:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.UPLOAD_METADATA);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.signer.getChainId()];
	            case 5:
	              chainId = _b.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBL NFT which metadata on IPFS.
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * metadata will be uploaded to IPFS.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param mintApiId - The mint method api id of biconomy
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateTokenForIPFS = function (name, description, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, mintApiId, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, key, plainFileArray, encryptedDataUrls, thumbnailImageUrl, mimeType, metadataUrl, documentId, tokenId, chainId;
	        var _this = this;
	        var _a, _b;
	        return __generator$4(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              key = (0, cryptoHelper_1$4.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.CREATE_KEY);
	              // 2. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.ENCRYPT_DATA);
	              // 3. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$4(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  var _c;
	                  return __generator$4(this, function (_d) {
	                    switch (_d.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$4.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1$3.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_d.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$4.encryptFile)(file, key)];
	                      case 3:
	                        _a = _d.sent();
	                        _d.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        console.log(typeof encryptedContent);
	                        return [4 /*yield*/, (_c = this.uploadToIpfs) === null || _c === void 0 ? void 0 : _c.uploadEncryptedFile(encryptedContent)];
	                      case 5:
	                        return [2 /*return*/, _d.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 1:
	              encryptedDataUrls = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.UPLOAD_CONTENT);
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadThumbnail(thumbnailImage)];
	            case 2:
	              thumbnailImageUrl = _c.sent();
	              // 4. upload metadata
	              console.log("upload meta data");
	              mimeType = (0, fileHelper_1$3.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, (_b = this.uploadToIpfs) === null || _b === void 0 ? void 0 : _b.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 3:
	              metadataUrl = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.UPLOAD_METADATA);
	              documentId = ethers_1$2.utils.hexlify(ethers_1$2.utils.randomBytes(32));
	              return [4 /*yield*/, this.nft.mintTokenForIPFS(metadataUrl, vwblNetworkUrl, royaltiesPercentage, documentId, mintApiId)];
	            case 4:
	              tokenId = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.MINT_TOKEN);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.signer.getChainId()];
	            case 5:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$3.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Set key to VWBL Network
	     *
	     * @param tokenId - The ID of NFT
	     * @param key - The key generated by {@link VWBL.createKey}
	     * @param hasNonce
	     * @param autoMigration
	     *
	     */
	    _this.setKey = function (tokenId, key, hasNonce, autoMigration) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var documentId, chainId;
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 1:
	              documentId = _a.sent().documentId;
	              return [4 /*yield*/, this.signer.getChainId()];
	            case 2:
	              chainId = _a.sent();
	              return [4 /*yield*/, this._setKey(documentId, chainId, key, hasNonce, autoMigration)];
	            case 3:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Mint new NFT
	     *
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param mintApiId - The mint method api id of biconomy
	     * @returns The ID of minted NFT
	     */
	    _this.mintToken = function (royaltiesPercentage, mintApiId) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, documentId;
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              documentId = ethers_1$2.utils.hexlify(ethers_1$2.utils.randomBytes(32));
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, royaltiesPercentage, documentId, mintApiId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Approves `operator` to transfer the given `tokenId`
	     *
	     * @param operator - The wallet address
	     * @param tokenId - The ID of NFT
	     * @param approveApiId - The approve method api id of biconomy
	     */
	    _this.approve = function (operator, tokenId, approveApiId) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.approve(operator, tokenId, approveApiId)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Get the approved address for a `tokenId`
	     *
	     * @param tokenId - The ID of NFT
	     * @return The Wallet address that was approved
	     */
	    _this.getApproved = function (tokenId) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getApproved(tokenId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Allows `operator` to transfer all tokens that a person who calls this function
	     *
	     * @param operator - The wallet address
	     * @param setApprovalForAllApiId - The setApprovalForAll method api id of biconomy
	     */
	    _this.setApprovalForAll = function (operator, setApprovalForAllApiId) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.setApprovalForAll(operator, setApprovalForAllApiId)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Tells whether an `operator` is approved by a given `owner`
	     *
	     * @param owner - The wallet address of a NFT owner
	     * @param operator - The wallet address of an operator
	     * @returns
	     */
	    _this.isApprovedForAll = function (owner, operator) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.isApprovedForAll(owner, operator)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Transfer NFT
	     *
	     * @param to - The address that NFT will be transfered
	     * @param tokenId - The ID of NFT
	     * @param safeTransferFromApiId - The safeTransferFrom api id of biconomy
	     */
	    _this.safeTransfer = function (to, tokenId, safeTransferFromApiId) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.safeTransfer(to, tokenId, safeTransferFromApiId)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata
	     *
	     * @remarks
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     */
	    _this.uploadMetadata = function (tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, uploadMetadataCallBack) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var _a, uploadMetadataType, awsConfig, uploadMetadataFunction;
	        return __generator$4(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              _a = this.opts, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig;
	              uploadMetadataFunction = uploadMetadataType === types_1$3.UploadMetadataType.S3 ? upload_1$3.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 1:
	              _b.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata to IPFS
	     *
	     * @remarks
	     * Metadata will be uploaded to IPFS.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     */
	    _this.uploadMetadataToIPFS = function (name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var metadataUrl;
	        var _a;
	        return __generator$4(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [2 /*return*/, metadataUrl];
	          }
	        });
	      });
	    };
	    /**
	     * Get all NFT metadata owned by a person who call this method
	     *
	     * @returns Array of token metadata
	     */
	    _this.getOwnTokens = function () {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var ownTokenIds;
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              ownTokenIds = _a.sent();
	              return [4 /*yield*/, Promise.all(ownTokenIds.map(this.getMetadata.bind(this)))];
	            case 2:
	              return [2 /*return*/, _a.sent().filter(function (extractMetadata) {
	                return extractMetadata !== undefined;
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token IDs owned by someone who called this function
	     *
	     * @returns Array of token IDs
	     */
	    _this.getOwnTokenIds = function () {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * Check if a person call this method is a NFT owner, and if so, return a decrypted data.
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata and an address of NFT owner
	     */
	    _this.getTokenById = function (tokenId) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var isOwnerOrMinter, _a, owner, metadata, _b;
	        return __generator$4(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.isOwnerOf(tokenId)];
	            case 1:
	              _a = _c.sent();
	              if (_a) return [3 /*break*/, 3];
	              return [4 /*yield*/, this.nft.isMinterOf(tokenId)];
	            case 2:
	              _a = _c.sent();
	              _c.label = 3;
	            case 3:
	              isOwnerOrMinter = _a;
	              return [4 /*yield*/, this.nft.getOwner(tokenId)];
	            case 4:
	              owner = _c.sent();
	              if (!isOwnerOrMinter) return [3 /*break*/, 6];
	              return [4 /*yield*/, this.extractMetadata(tokenId)];
	            case 5:
	              _b = _c.sent();
	              return [3 /*break*/, 8];
	            case 6:
	              return [4 /*yield*/, this.getMetadata(tokenId)];
	            case 7:
	              _b = _c.sent();
	              _c.label = 8;
	            case 8:
	              metadata = _b;
	              if (!metadata) {
	                throw new Error("metadata not found");
	              }
	              return [2 /*return*/, __assign$3(__assign$3({}, metadata), {
	                owner: owner
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token ids by minter address
	     * @param address - minter address
	     * @returns Token ids
	     */
	    _this.getTokenByMinter = function (address) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        return __generator$4(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenByMinter(address)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata
	     */
	    _this.getMetadata = function (tokenId) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var metadataUrl, metadata;
	        var _a;
	        return __generator$4(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [4 /*yield*/, axios_1$4.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic
	              }];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * This method should be called by NFT owner.
	     *
	     * @param tokenId The ID of NFT
	     * @returns Token metadata
	     */
	    _this.extractMetadata = function (tokenId) {
	      return __awaiter$4(_this, void 0, void 0, function () {
	        var metadataUrl, metadata, documentId, chainId, decryptKey, encryptedDataUrls, isRunningOnBrowser, encryptLogic, ownDataArray, ownFiles, ownDataBase64, fileName;
	        var _this = this;
	        var _a, _b;
	        return __generator$4(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _c.sent();
	              return [4 /*yield*/, axios_1$4.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _c.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 3:
	              documentId = _c.sent().documentId;
	              return [4 /*yield*/, this.signer.getChainId()];
	            case 4:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.getKey(documentId, chainId, this.signature)];
	            case 5:
	              decryptKey = _c.sent();
	              encryptedDataUrls = metadata.encrypted_data;
	              isRunningOnBrowser = typeof window !== "undefined";
	              encryptLogic = (_b = metadata.encrypt_logic) !== null && _b !== void 0 ? _b : "base64";
	              return [4 /*yield*/, Promise.all(encryptedDataUrls.map(function (encryptedDataUrl) {
	                return __awaiter$4(_this, void 0, void 0, function () {
	                  var encryptedData, _a;
	                  return __generator$4(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1$4.default.get(encryptedDataUrl, {
	                          responseType: encryptLogic === "base64" ? "text" : isRunningOnBrowser ? "arraybuffer" : "stream"
	                        })];
	                      case 1:
	                        encryptedData = _b.sent().data;
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _a = (0, cryptoHelper_1$4.decryptString)(encryptedData, decryptKey);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$4.decryptFile)(encryptedData, decryptKey)];
	                      case 3:
	                        _a = _b.sent();
	                        _b.label = 4;
	                      case 4:
	                        return [2 /*return*/, _a];
	                    }
	                  });
	                });
	              }))];
	            case 6:
	              ownDataArray = _c.sent();
	              ownFiles = ownDataArray.filter(function (ownData) {
	                return typeof ownData !== "string";
	              });
	              ownDataBase64 = ownDataArray.filter(function (ownData) {
	                return typeof ownData === "string";
	              });
	              fileName = encryptedDataUrls[0].split("/").slice(-1)[0].replace(/\.vwbl/, "");
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic,
	                ownDataBase64: ownDataBase64,
	                ownFiles: ownFiles,
	                fileName: fileName
	              }];
	          }
	        });
	      });
	    };
	    _this.opts = props;
	    var bcProvider = props.bcProvider,
	      contractAddress = props.contractAddress,
	      biconomyConfig = props.biconomyConfig;
	    var walletProvider = new ethers_1$2.ethers.providers.Web3Provider(bcProvider);
	    _this.signer = walletProvider.getSigner();
	    _this.nft = new blockchain_1$3.VWBLNFTMetaTx(biconomyConfig.apiKey, walletProvider, contractAddress, biconomyConfig.forwarderAddress);
	    return _this;
	  }
	  return VWBLMetaTx;
	}(base_1$4.VWBLBase);
	VWBLMetaTx_2 = VWBLMetaTx$1.VWBLMetaTx = VWBLMetaTx;

	var VWBLEthers$2 = {};

	"use strict";
	var __extends$3 = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var extendStatics = function (d, b) {
	    extendStatics = Object.setPrototypeOf || {
	      __proto__: []
	    } instanceof Array && function (d, b) {
	      d.__proto__ = b;
	    } || function (d, b) {
	      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
	    };
	    return extendStatics(d, b);
	  };
	  return function (d, b) {
	    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() {
	      this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();
	var __assign$2 = commonjsGlobal && commonjsGlobal.__assign || function () {
	  __assign$2 = Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	      s = arguments[i];
	      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	    }
	    return t;
	  };
	  return __assign$2.apply(this, arguments);
	};
	var __awaiter$3 = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$3 = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	var __importDefault$3 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(VWBLEthers$2, "__esModule", {
	  value: true
	});
	var VWBLEthers_2 = VWBLEthers$2.VWBLEthers = void 0;
	var axios_1$3 = __importDefault$3(axiosExports$1);
	var ethers_1$1 = lib$v;
	var upload_1$2 = upload$1;
	var cryptoHelper_1$3 = cryptoHelper$1;
	var fileHelper_1$2 = fileHelper;
	var base_1$3 = base$2;
	var blockchain_1$2 = blockchain;
	var types_1$2 = types;
	var VWBLEthers$1 = /** @class */function (_super) {
	  __extends$3(VWBLEthers, _super);
	  function VWBLEthers(props) {
	    var _this = _super.call(this, props) || this;
	    /**
	     * Sign to VWBL
	     *
	     * @remarks
	     * You need to call this method before you send a transaction（eg. mint NFT）
	     */
	    _this.sign = function () {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this._sign(this.opts.ethersSigner)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBL NFT
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param uploadEncryptedFileCallback - Optional: the function for uploading encrypted data
	     * @param uploadThumbnailCallback - Optional: the function for uploading thumbnail
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateToken = function (name, description, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, uploadEncryptedFileCallback, uploadThumbnailCallback, uploadMetadataCallBack, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var _a, uploadContentType, uploadMetadataType, awsConfig, vwblNetworkUrl, documentId, tokenId, key, plainFileArray, uuid, uploadEncryptedFunction, uploadThumbnailFunction, encryptedDataUrls, thumbnailImageUrl, uploadMetadataFunction, mimeType, chainId;
	        var _this = this;
	        return __generator$3(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              _a = this.opts, uploadContentType = _a.uploadContentType, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig, vwblNetworkUrl = _a.vwblNetworkUrl;
	              documentId = ethers_1$1.utils.hexlify(ethers_1$1.utils.randomBytes(32));
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, royaltiesPercentage, documentId)];
	            case 1:
	              tokenId = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.MINT_TOKEN);
	              key = (0, cryptoHelper_1$3.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.CREATE_KEY);
	              // 3. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              uuid = (0, cryptoHelper_1$3.createRandomKey)();
	              uploadEncryptedFunction = uploadContentType === types_1$2.UploadContentType.S3 ? upload_1$2.uploadEncryptedFile : uploadEncryptedFileCallback;
	              uploadThumbnailFunction = uploadContentType === types_1$2.UploadContentType.S3 ? upload_1$2.uploadThumbnail : uploadThumbnailCallback;
	              if (!uploadEncryptedFunction || !uploadThumbnailFunction) {
	                throw new Error("please specify upload file type or give callback");
	              }
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.ENCRYPT_DATA);
	              // 4. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$3(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  return __generator$3(this, function (_c) {
	                    switch (_c.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$3.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1$2.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_c.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$3.encryptFile)(file, key)];
	                      case 3:
	                        _a = _c.sent();
	                        _c.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        return [4 /*yield*/, uploadEncryptedFunction(file.name, encryptedContent, uuid, awsConfig)];
	                      case 5:
	                        return [2 /*return*/, _c.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              encryptedDataUrls = _b.sent();
	              return [4 /*yield*/, uploadThumbnailFunction(thumbnailImage, uuid, awsConfig)];
	            case 3:
	              thumbnailImageUrl = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.UPLOAD_CONTENT);
	              // 5. upload metadata
	              console.log("upload meta data");
	              uploadMetadataFunction = uploadMetadataType === types_1$2.UploadMetadataType.S3 ? upload_1$2.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              mimeType = (0, fileHelper_1$2.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 4:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.UPLOAD_METADATA);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.opts.ethersSigner.getChainId()];
	            case 5:
	              chainId = _b.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBL NFT which metadata on IPFS.
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * metadata will be uploaded to IPFS.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateTokenForIPFS = function (name, description, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, key, plainFileArray, encryptedDataUrls, thumbnailImageUrl, mimeType, metadataUrl, documentId, tokenId, chainId;
	        var _this = this;
	        var _a, _b;
	        return __generator$3(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              key = (0, cryptoHelper_1$3.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.CREATE_KEY);
	              // 2. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.ENCRYPT_DATA);
	              // 3. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$3(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  var _c;
	                  return __generator$3(this, function (_d) {
	                    switch (_d.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$3.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1$2.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_d.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$3.encryptFile)(file, key)];
	                      case 3:
	                        _a = _d.sent();
	                        _d.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        console.log(typeof encryptedContent);
	                        return [4 /*yield*/, (_c = this.uploadToIpfs) === null || _c === void 0 ? void 0 : _c.uploadEncryptedFile(encryptedContent)];
	                      case 5:
	                        return [2 /*return*/, _d.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 1:
	              encryptedDataUrls = _c.sent();
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadThumbnail(thumbnailImage)];
	            case 2:
	              thumbnailImageUrl = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.UPLOAD_CONTENT);
	              // 4. upload metadata
	              console.log("upload meta data");
	              mimeType = (0, fileHelper_1$2.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, (_b = this.uploadToIpfs) === null || _b === void 0 ? void 0 : _b.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 3:
	              metadataUrl = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.UPLOAD_METADATA);
	              documentId = ethers_1$1.utils.hexlify(ethers_1$1.utils.randomBytes(32));
	              return [4 /*yield*/, this.nft.mintTokenForIPFS(metadataUrl, vwblNetworkUrl, royaltiesPercentage, documentId)];
	            case 4:
	              tokenId = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.MINT_TOKEN);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.opts.ethersSigner.getChainId()];
	            case 5:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$2.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Set key to VWBL Network
	     *
	     * @param tokenId - The ID of NFT
	     * @param key - The key generated by {@link VWBL.createKey}
	     * @param hasNonce
	     * @param autoMigration
	     *
	     */
	    _this.setKey = function (tokenId, key, hasNonce, autoMigration) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var documentId, chainId;
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 1:
	              documentId = _a.sent().documentId;
	              return [4 /*yield*/, this.opts.ethersSigner.getChainId()];
	            case 2:
	              chainId = _a.sent();
	              return [4 /*yield*/, this._setKey(documentId, chainId, key, hasNonce, autoMigration)];
	            case 3:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Mint new NFT
	     *
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @returns The ID of minted NFT
	     */
	    _this.mintToken = function (royaltiesPercentage) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, documentId;
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              documentId = ethers_1$1.utils.hexlify(ethers_1$1.utils.randomBytes(32));
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, royaltiesPercentage, documentId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Approves `operator` to transfer the given `tokenId`
	     *
	     * @param operator - The wallet address
	     * @param tokenId - The ID of NFT
	     */
	    _this.approve = function (operator, tokenId) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.approve(operator, tokenId)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Get the approved address for a `tokenId`
	     *
	     * @param tokenId - The ID of NFT
	     * @return The Wallet address that was approved
	     */
	    _this.getApproved = function (tokenId) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getApproved(tokenId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Allows `operator` to transfer all tokens that a person who calls this function
	     *
	     * @param operator - The wallet address
	     */
	    _this.setApprovalForAll = function (operator) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.setApprovalForAll(operator)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Tells whether an `operator` is approved by a given `owner`
	     *
	     * @param owner - The wallet address of a NFT owner
	     * @param operator - The wallet address of an operator
	     * @returns
	     */
	    _this.isApprovedForAll = function (owner, operator) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.isApprovedForAll(owner, operator)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Transfer NFT
	     *
	     * @param to - The address that NFT will be transfered
	     * @param tokenId - The ID of NFT
	     */
	    _this.safeTransfer = function (to, tokenId) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.safeTransfer(to, tokenId)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata
	     *
	     * @remarks
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     */
	    _this.uploadMetadata = function (tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, uploadMetadataCallBack) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var _a, uploadMetadataType, awsConfig, uploadMetadataFunction;
	        return __generator$3(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              _a = this.opts, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig;
	              uploadMetadataFunction = uploadMetadataType === types_1$2.UploadMetadataType.S3 ? upload_1$2.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 1:
	              _b.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata to IPFS
	     *
	     * @remarks
	     * Metadata will be uploaded to IPFS.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     */
	    _this.uploadMetadataToIPFS = function (name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var metadataUrl;
	        var _a;
	        return __generator$3(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [2 /*return*/, metadataUrl];
	          }
	        });
	      });
	    };
	    /**
	     * Get all NFT metadata owned by a person who call this method
	     *
	     * @returns Array of token metadata
	     */
	    _this.getOwnTokens = function () {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var ownTokenIds;
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              ownTokenIds = _a.sent();
	              return [4 /*yield*/, Promise.all(ownTokenIds.map(this.getMetadata.bind(this)))];
	            case 2:
	              return [2 /*return*/, _a.sent().filter(function (extractMetadata) {
	                return extractMetadata !== undefined;
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token IDs owned by someone who called this function
	     *
	     * @returns Array of token IDs
	     */
	    _this.getOwnTokenIds = function () {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * Check if a person call this method is a NFT owner, and if so, return a decrypted data.
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata and an address of NFT owner
	     */
	    _this.getTokenById = function (tokenId) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var isOwnerOrMinter, _a, owner, metadata, _b;
	        return __generator$3(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.isOwnerOf(tokenId)];
	            case 1:
	              _a = _c.sent();
	              if (_a) return [3 /*break*/, 3];
	              return [4 /*yield*/, this.nft.isMinterOf(tokenId)];
	            case 2:
	              _a = _c.sent();
	              _c.label = 3;
	            case 3:
	              isOwnerOrMinter = _a;
	              return [4 /*yield*/, this.nft.getOwner(tokenId)];
	            case 4:
	              owner = _c.sent();
	              if (!isOwnerOrMinter) return [3 /*break*/, 6];
	              return [4 /*yield*/, this.extractMetadata(tokenId)];
	            case 5:
	              _b = _c.sent();
	              return [3 /*break*/, 8];
	            case 6:
	              return [4 /*yield*/, this.getMetadata(tokenId)];
	            case 7:
	              _b = _c.sent();
	              _c.label = 8;
	            case 8:
	              metadata = _b;
	              if (!metadata) {
	                throw new Error("metadata not found");
	              }
	              return [2 /*return*/, __assign$2(__assign$2({}, metadata), {
	                owner: owner
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token ids by minter address
	     * @param address - minter address
	     * @returns Token ids
	     */
	    _this.getTokenByMinter = function (address) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        return __generator$3(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenByMinter(address)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata
	     */
	    _this.getMetadata = function (tokenId) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var metadataUrl, metadata;
	        var _a;
	        return __generator$3(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [4 /*yield*/, axios_1$3.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic
	              }];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * This method should be called by NFT owner.
	     *
	     * @param tokenId The ID of NFT
	     * @returns Token metadata
	     */
	    _this.extractMetadata = function (tokenId) {
	      return __awaiter$3(_this, void 0, void 0, function () {
	        var metadataUrl, metadata, documentId, chainId, decryptKey, encryptedDataUrls, isRunningOnBrowser, encryptLogic, ownDataArray, ownFiles, ownDataBase64, fileName;
	        var _this = this;
	        var _a, _b;
	        return __generator$3(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _c.sent();
	              return [4 /*yield*/, axios_1$3.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _c.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 3:
	              documentId = _c.sent().documentId;
	              return [4 /*yield*/, this.opts.ethersSigner.getChainId()];
	            case 4:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.getKey(documentId, chainId, this.signature)];
	            case 5:
	              decryptKey = _c.sent();
	              encryptedDataUrls = metadata.encrypted_data;
	              isRunningOnBrowser = typeof window !== "undefined";
	              encryptLogic = (_b = metadata.encrypt_logic) !== null && _b !== void 0 ? _b : "base64";
	              return [4 /*yield*/, Promise.all(encryptedDataUrls.map(function (encryptedDataUrl) {
	                return __awaiter$3(_this, void 0, void 0, function () {
	                  var encryptedData, _a;
	                  return __generator$3(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1$3.default.get(encryptedDataUrl, {
	                          responseType: encryptLogic === "base64" ? "text" : isRunningOnBrowser ? "arraybuffer" : "stream"
	                        })];
	                      case 1:
	                        encryptedData = _b.sent().data;
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _a = (0, cryptoHelper_1$3.decryptString)(encryptedData, decryptKey);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$3.decryptFile)(encryptedData, decryptKey)];
	                      case 3:
	                        _a = _b.sent();
	                        _b.label = 4;
	                      case 4:
	                        return [2 /*return*/, _a];
	                    }
	                  });
	                });
	              }))];
	            case 6:
	              ownDataArray = _c.sent();
	              ownFiles = ownDataArray.filter(function (ownData) {
	                return typeof ownData !== "string";
	              });
	              ownDataBase64 = ownDataArray.filter(function (ownData) {
	                return typeof ownData === "string";
	              });
	              fileName = encryptedDataUrls[0].split("/").slice(-1)[0].replace(/\.vwbl/, "");
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic,
	                ownDataBase64: ownDataBase64,
	                ownFiles: ownFiles,
	                fileName: fileName
	              }];
	          }
	        });
	      });
	    };
	    _this.opts = props;
	    var contractAddress = props.contractAddress,
	      ethersProvider = props.ethersProvider,
	      ethersSigner = props.ethersSigner,
	      uploadMetadataType = props.uploadMetadataType;
	    _this.nft = new blockchain_1$2.VWBLNFTEthers(contractAddress, uploadMetadataType === types_1$2.UploadMetadataType.IPFS, ethersProvider, ethersSigner);
	    return _this;
	  }
	  return VWBLEthers;
	}(base_1$3.VWBLBase);
	VWBLEthers_2 = VWBLEthers$2.VWBLEthers = VWBLEthers$1;

	var VWBL = {};

	"use strict";
	var __extends$2 = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var extendStatics = function (d, b) {
	    extendStatics = Object.setPrototypeOf || {
	      __proto__: []
	    } instanceof Array && function (d, b) {
	      d.__proto__ = b;
	    } || function (d, b) {
	      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
	    };
	    return extendStatics(d, b);
	  };
	  return function (d, b) {
	    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() {
	      this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();
	var __assign$1 = commonjsGlobal && commonjsGlobal.__assign || function () {
	  __assign$1 = Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	      s = arguments[i];
	      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	    }
	    return t;
	  };
	  return __assign$1.apply(this, arguments);
	};
	var __awaiter$2 = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$2 = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	var __importDefault$2 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(VWBL, "__esModule", {
	  value: true
	});
	var VWBLERC1155_1 = VWBL.VWBLERC1155 = void 0;
	var axios_1$2 = __importDefault$2(axiosExports$1);
	var upload_1$1 = upload$1;
	var cryptoHelper_1$2 = cryptoHelper$1;
	var fileHelper_1$1 = fileHelper;
	var base_1$2 = base$2;
	var blockchain_1$1 = blockchain;
	var types_1$1 = types;
	var VWBLERC1155 = /** @class */function (_super) {
	  __extends$2(VWBLERC1155, _super);
	  function VWBLERC1155(props) {
	    var _this = _super.call(this, props) || this;
	    _this.sign = function () {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this._sign(this.opts.web3)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBLERC1155 NFT
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * * @param amount - The amount of erc1155 tokens to be minted
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param uploadEncryptedFileCallback - Optional: the function for uploading encrypted data
	     * @param uploadThumbnailCallback - Optional: the function for uploading thumbnail
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateToken = function (name, description, amount, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, uploadEncryptedFileCallback, uploadThumbnailCallback, uploadMetadataCallBack, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var _a, uploadContentType, uploadMetadataType, awsConfig, vwblNetworkUrl, documentId, tokenId, key, plainFileArray, uuid, uploadEncryptedFunction, uploadThumbnailFunction, encryptedDataUrls, thumbnailImageUrl, uploadMetadataFunction, mimeType, chainId;
	        var _this = this;
	        return __generator$2(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              _a = this.opts, uploadContentType = _a.uploadContentType, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig, vwblNetworkUrl = _a.vwblNetworkUrl;
	              documentId = this.opts.web3.utils.randomHex(32);
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, amount, royaltiesPercentage, documentId)];
	            case 1:
	              tokenId = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.MINT_TOKEN);
	              key = (0, cryptoHelper_1$2.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.CREATE_KEY);
	              // 3. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              uuid = (0, cryptoHelper_1$2.createRandomKey)();
	              uploadEncryptedFunction = uploadContentType === types_1$1.UploadContentType.S3 ? upload_1$1.uploadEncryptedFile : uploadEncryptedFileCallback;
	              uploadThumbnailFunction = uploadContentType === types_1$1.UploadContentType.S3 ? upload_1$1.uploadThumbnail : uploadThumbnailCallback;
	              if (!uploadEncryptedFunction || !uploadThumbnailFunction) {
	                throw new Error("please specify upload file type or give callback");
	              }
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.ENCRYPT_DATA);
	              // 4. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$2(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  return __generator$2(this, function (_c) {
	                    switch (_c.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$2.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1$1.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_c.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$2.encryptFile)(file, key)];
	                      case 3:
	                        _a = _c.sent();
	                        _c.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        return [4 /*yield*/, uploadEncryptedFunction(file.name, encryptedContent, uuid, awsConfig)];
	                      case 5:
	                        return [2 /*return*/, _c.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              encryptedDataUrls = _b.sent();
	              return [4 /*yield*/, uploadThumbnailFunction(thumbnailImage, uuid, awsConfig)];
	            case 3:
	              thumbnailImageUrl = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.UPLOAD_CONTENT);
	              // 5. upload metadata
	              console.log("upload meta data");
	              uploadMetadataFunction = uploadMetadataType === types_1$1.UploadMetadataType.S3 ? upload_1$1.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              mimeType = (0, fileHelper_1$1.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 4:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.UPLOAD_METADATA);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.opts.web3.eth.getChainId()];
	            case 5:
	              chainId = _b.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBLERC1155 NFT which metadata on IPFS.
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * metadata will be uploaded to IPFS.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param amount - The amount of erc1155 tokens to be minted
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateTokenForIPFS = function (name, description, amount, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, key, plainFileArray, encryptedDataUrls, thumbnailImageUrl, mimeType, metadataUrl, documentId, tokenId, chainId;
	        var _this = this;
	        var _a, _b;
	        return __generator$2(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              key = (0, cryptoHelper_1$2.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.CREATE_KEY);
	              // 2. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.ENCRYPT_DATA);
	              // 3. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$2(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  var _c;
	                  return __generator$2(this, function (_d) {
	                    switch (_d.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$2.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1$1.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_d.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$2.encryptFile)(file, key)];
	                      case 3:
	                        _a = _d.sent();
	                        _d.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        console.log(typeof encryptedContent);
	                        return [4 /*yield*/, (_c = this.uploadToIpfs) === null || _c === void 0 ? void 0 : _c.uploadEncryptedFile(encryptedContent)];
	                      case 5:
	                        return [2 /*return*/, _d.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 1:
	              encryptedDataUrls = _c.sent();
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadThumbnail(thumbnailImage)];
	            case 2:
	              thumbnailImageUrl = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.UPLOAD_CONTENT);
	              // 4. upload metadata
	              console.log("upload meta data");
	              mimeType = (0, fileHelper_1$1.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, (_b = this.uploadToIpfs) === null || _b === void 0 ? void 0 : _b.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 3:
	              metadataUrl = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.UPLOAD_METADATA);
	              documentId = this.opts.web3.utils.randomHex(32);
	              return [4 /*yield*/, this.nft.mintTokenForIPFS(metadataUrl, vwblNetworkUrl, amount, royaltiesPercentage, documentId)];
	            case 4:
	              tokenId = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.MINT_TOKEN);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.opts.web3.eth.getChainId()];
	            case 5:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1$1.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Mint new ERC1155 NFT
	     *
	     * @param amount - The amount of erc1155 tokens to be minted
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @returns The ID of minted NFT
	     */
	    _this.mintToken = function (amount, royaltiesPercentage) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, documentId;
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              documentId = this.opts.web3.utils.randomHex(32);
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, amount, royaltiesPercentage, documentId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Transfer NFT
	     *
	     * @param to - The address that NFT will be transferred
	     * @param tokenId - The ID of NFT
	     * @param amount - The amount of erc1155 tokens to be transferred
	     */
	    _this.safeTransfer = function (to, tokenId, amount, data) {
	      if (data === void 0) {
	        data = "0x00";
	      }
	      return __awaiter$2(_this, void 0, void 0, function () {
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.safeTransfer(to, tokenId, amount, data)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Burn NFT
	     *
	     * @param owner - The address of nft owner
	     * @param tokenId - The ID of NFT
	     * @param amount - The amount of erc1155 tokens to be burnt
	     */
	    _this.burn = function (owner, tokenId, amount) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.burn(owner, tokenId, amount)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get balance of nft
	     *
	     * @param owner - The address of nft owner
	     * @param tokenId - The ID of NFT
	     */
	    _this.balanceOf = function (owner, tokenId) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.balanceOf(owner, tokenId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    _this.getOwner = function (tokenId) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getOwner(tokenId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata
	     *
	     * @remarks
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     */
	    _this.uploadMetadata = function (tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, uploadMetadataCallBack) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var _a, uploadMetadataType, awsConfig, uploadMetadataFunction;
	        return __generator$2(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              _a = this.opts, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig;
	              uploadMetadataFunction = uploadMetadataType === types_1$1.UploadMetadataType.S3 ? upload_1$1.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 1:
	              _b.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata to IPFS
	     *
	     * @remarks
	     * Metadata will be uploaded to IPFS.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     */
	    _this.uploadMetadataToIPFS = function (name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var metadataUrl;
	        var _a;
	        return __generator$2(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [2 /*return*/, metadataUrl];
	          }
	        });
	      });
	    };
	    /**
	     * Set key to VWBL Network
	     *
	     * @param tokenId - The ID of NFT
	     * @param key - The key generated by {@link VWBL.createKey}
	     * @param hasNonce
	     * @param autoMigration
	     *
	     */
	    _this.setKey = function (tokenId, key, hasNonce, autoMigration) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var documentId, chainId;
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 1:
	              documentId = _a.sent().documentId;
	              return [4 /*yield*/, this.opts.web3.eth.getChainId()];
	            case 2:
	              chainId = _a.sent();
	              return [4 /*yield*/, this._setKey(documentId, chainId, key, hasNonce, autoMigration)];
	            case 3:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get all NFT metadata owned by a person who call this method
	     *
	     * @returns Array of token metadata
	     */
	    _this.getOwnTokens = function () {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var ownTokenIds;
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              ownTokenIds = _a.sent();
	              return [4 /*yield*/, Promise.all(ownTokenIds.map(this.getMetadata.bind(this)))];
	            case 2:
	              return [2 /*return*/, _a.sent().filter(function (extractMetadata) {
	                return extractMetadata !== undefined;
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token IDs owned by someone who called this function
	     *
	     * @returns Array of token IDs
	     */
	    _this.getOwnTokenIds = function () {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * Check if a person call this method is a NFT owner, and if so, return a decrypted data.
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata and an address of NFT owner
	     */
	    _this.getTokenById = function (tokenId) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var isOwnerOrMinter, _a, owner, metadata, _b;
	        return __generator$2(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.isOwnerOf(tokenId)];
	            case 1:
	              _a = _c.sent();
	              if (_a) return [3 /*break*/, 3];
	              return [4 /*yield*/, this.nft.isMinterOf(tokenId)];
	            case 2:
	              _a = _c.sent();
	              _c.label = 3;
	            case 3:
	              isOwnerOrMinter = _a;
	              return [4 /*yield*/, this.nft.getOwner(tokenId)];
	            case 4:
	              owner = _c.sent();
	              if (!isOwnerOrMinter) return [3 /*break*/, 6];
	              return [4 /*yield*/, this.extractMetadata(tokenId)];
	            case 5:
	              _b = _c.sent();
	              return [3 /*break*/, 8];
	            case 6:
	              return [4 /*yield*/, this.getMetadata(tokenId)];
	            case 7:
	              _b = _c.sent();
	              _c.label = 8;
	            case 8:
	              metadata = _b;
	              if (!metadata) {
	                throw new Error("metadata not found");
	              }
	              return [2 /*return*/, __assign$1(__assign$1({}, metadata), {
	                owner: owner
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token ids by minter address
	     * @param address - minter address
	     * @returns Token ids
	     */
	    _this.getTokenByMinter = function (address) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        return __generator$2(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenByMinter(address)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata
	     */
	    _this.getMetadata = function (tokenId) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var metadataUrl, metadata;
	        var _a;
	        return __generator$2(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [4 /*yield*/, axios_1$2.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic
	              }];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * This method should be called by NFT owner.
	     *
	     * @param tokenId The ID of NFT
	     * @returns Token metadata
	     */
	    _this.extractMetadata = function (tokenId) {
	      return __awaiter$2(_this, void 0, void 0, function () {
	        var metadataUrl, metadata, documentId, chainId, decryptKey, encryptedDataUrls, isRunningOnBrowser, encryptLogic, ownDataArray, ownFiles, ownDataBase64, fileName;
	        var _this = this;
	        var _a, _b;
	        return __generator$2(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _c.sent();
	              return [4 /*yield*/, axios_1$2.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _c.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 3:
	              documentId = _c.sent().documentId;
	              return [4 /*yield*/, this.opts.web3.eth.getChainId()];
	            case 4:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.getKey(documentId, chainId, this.signature)];
	            case 5:
	              decryptKey = _c.sent();
	              encryptedDataUrls = metadata.encrypted_data;
	              isRunningOnBrowser = typeof window !== "undefined";
	              encryptLogic = (_b = metadata.encrypt_logic) !== null && _b !== void 0 ? _b : "base64";
	              return [4 /*yield*/, Promise.all(encryptedDataUrls.map(function (encryptedDataUrl) {
	                return __awaiter$2(_this, void 0, void 0, function () {
	                  var encryptedData, _a;
	                  return __generator$2(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1$2.default.get(encryptedDataUrl, {
	                          responseType: encryptLogic === "base64" ? "text" : isRunningOnBrowser ? "arraybuffer" : "stream"
	                        })];
	                      case 1:
	                        encryptedData = _b.sent().data;
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _a = (0, cryptoHelper_1$2.decryptString)(encryptedData, decryptKey);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$2.decryptFile)(encryptedData, decryptKey)];
	                      case 3:
	                        _a = _b.sent();
	                        _b.label = 4;
	                      case 4:
	                        return [2 /*return*/, _a];
	                    }
	                  });
	                });
	              }))];
	            case 6:
	              ownDataArray = _c.sent();
	              ownFiles = ownDataArray.filter(function (ownData) {
	                return typeof ownData !== "string";
	              });
	              ownDataBase64 = ownDataArray.filter(function (ownData) {
	                return typeof ownData === "string";
	              });
	              fileName = encryptedDataUrls[0].split("/").slice(-1)[0].replace(/\.vwbl/, "");
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic,
	                ownDataBase64: ownDataBase64,
	                ownFiles: ownFiles,
	                fileName: fileName
	              }];
	          }
	        });
	      });
	    };
	    _this.opts = props;
	    var web3 = props.web3,
	      contractAddress = props.contractAddress,
	      uploadMetadataType = props.uploadMetadataType;
	    _this.nft = new blockchain_1$1.VWBLERC1155Contract(web3, contractAddress, uploadMetadataType === types_1$1.UploadMetadataType.IPFS);
	    return _this;
	  }
	  return VWBLERC1155;
	}(base_1$2.VWBLBase);
	VWBLERC1155_1 = VWBL.VWBLERC1155 = VWBLERC1155;

	var VWBLEthers = {};

	"use strict";
	var __extends$1 = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var extendStatics = function (d, b) {
	    extendStatics = Object.setPrototypeOf || {
	      __proto__: []
	    } instanceof Array && function (d, b) {
	      d.__proto__ = b;
	    } || function (d, b) {
	      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
	    };
	    return extendStatics(d, b);
	  };
	  return function (d, b) {
	    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() {
	      this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();
	var __assign = commonjsGlobal && commonjsGlobal.__assign || function () {
	  __assign = Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	      s = arguments[i];
	      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	    }
	    return t;
	  };
	  return __assign.apply(this, arguments);
	};
	var __awaiter$1 = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator$1 = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(VWBLEthers, "__esModule", {
	  value: true
	});
	var VWBLERC1155Ethers_1 = VWBLEthers.VWBLERC1155Ethers = void 0;
	var axios_1$1 = __importDefault$1(axiosExports$1);
	var ethers_1 = lib$v;
	var upload_1 = upload$1;
	var cryptoHelper_1$1 = cryptoHelper$1;
	var fileHelper_1 = fileHelper;
	var base_1$1 = base$2;
	var blockchain_1 = blockchain;
	var types_1 = types;
	var VWBLERC1155Ethers = /** @class */function (_super) {
	  __extends$1(VWBLERC1155Ethers, _super);
	  function VWBLERC1155Ethers(props) {
	    var _this = _super.call(this, props) || this;
	    _this.sign = function () {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this._sign(this.opts.ethersSigner)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBLERC1155 NFT
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * * @param amount - The amount of erc1155 tokens to be minted
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param uploadEncryptedFileCallback - Optional: the function for uploading encrypted data
	     * @param uploadThumbnailCallback - Optional: the function for uploading thumbnail
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateToken = function (name, description, amount, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, uploadEncryptedFileCallback, uploadThumbnailCallback, uploadMetadataCallBack, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var _a, uploadContentType, uploadMetadataType, awsConfig, vwblNetworkUrl, documentId, tokenId, key, plainFileArray, uuid, uploadEncryptedFunction, uploadThumbnailFunction, encryptedDataUrls, thumbnailImageUrl, uploadMetadataFunction, mimeType, chainId;
	        var _this = this;
	        return __generator$1(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              _a = this.opts, uploadContentType = _a.uploadContentType, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig, vwblNetworkUrl = _a.vwblNetworkUrl;
	              documentId = ethers_1.utils.hexlify(ethers_1.utils.randomBytes(32));
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, amount, royaltiesPercentage, documentId)];
	            case 1:
	              tokenId = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.MINT_TOKEN);
	              key = (0, cryptoHelper_1$1.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.CREATE_KEY);
	              // 3. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              uuid = (0, cryptoHelper_1$1.createRandomKey)();
	              uploadEncryptedFunction = uploadContentType === types_1.UploadContentType.S3 ? upload_1.uploadEncryptedFile : uploadEncryptedFileCallback;
	              uploadThumbnailFunction = uploadContentType === types_1.UploadContentType.S3 ? upload_1.uploadThumbnail : uploadThumbnailCallback;
	              if (!uploadEncryptedFunction || !uploadThumbnailFunction) {
	                throw new Error("please specify upload file type or give callback");
	              }
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.ENCRYPT_DATA);
	              // 4. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$1(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  return __generator$1(this, function (_c) {
	                    switch (_c.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$1.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_c.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$1.encryptFile)(file, key)];
	                      case 3:
	                        _a = _c.sent();
	                        _c.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        return [4 /*yield*/, uploadEncryptedFunction(file.name, encryptedContent, uuid, awsConfig)];
	                      case 5:
	                        return [2 /*return*/, _c.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              encryptedDataUrls = _b.sent();
	              return [4 /*yield*/, uploadThumbnailFunction(thumbnailImage, uuid, awsConfig)];
	            case 3:
	              thumbnailImageUrl = _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.UPLOAD_CONTENT);
	              // 5. upload metadata
	              console.log("upload meta data");
	              uploadMetadataFunction = uploadMetadataType === types_1.UploadMetadataType.S3 ? upload_1.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              mimeType = (0, fileHelper_1.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 4:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.UPLOAD_METADATA);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.opts.ethersSigner.getChainId()];
	            case 5:
	              chainId = _b.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _b.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Create VWBLERC1155 NFT which metadata on IPFS.
	     *
	     * @remarks
	     * The following happens: Minting NFT, Uploading encrypted data, Uploading metadata, Setting key to VWBL Network
	     * metadata will be uploaded to IPFS.
	     * You need to pass `uploadFileCallback` and `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param amount - The amount of erc1155 tokens to be minted
	     * @param plainFile - The data that only NFT owner can view
	     * @param thumbnailImage - The NFT image
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param subscriber - Optional: the subscriber for seeing progress
	     * @returns
	     */
	    _this.managedCreateTokenForIPFS = function (name, description, amount, plainFile, thumbnailImage, royaltiesPercentage, encryptLogic, subscriber) {
	      if (encryptLogic === void 0) {
	        encryptLogic = "base64";
	      }
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, key, plainFileArray, encryptedDataUrls, thumbnailImageUrl, mimeType, metadataUrl, documentId, tokenId, chainId;
	        var _this = this;
	        var _a, _b;
	        return __generator$1(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              key = (0, cryptoHelper_1$1.createRandomKey)();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.CREATE_KEY);
	              // 2. encrypt data
	              console.log("encrypt data");
	              plainFileArray = [plainFile].flat();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.ENCRYPT_DATA);
	              // 3. upload data
	              console.log("upload data");
	              return [4 /*yield*/, Promise.all(plainFileArray.map(function (file) {
	                return __awaiter$1(_this, void 0, void 0, function () {
	                  var encryptedContent, _a, _b;
	                  var _c;
	                  return __generator$1(this, function (_d) {
	                    switch (_d.label) {
	                      case 0:
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _b = cryptoHelper_1$1.encryptString;
	                        return [4 /*yield*/, (0, fileHelper_1.toBase64FromBlob)(file)];
	                      case 1:
	                        _a = _b.apply(void 0, [_d.sent(), key]);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$1.encryptFile)(file, key)];
	                      case 3:
	                        _a = _d.sent();
	                        _d.label = 4;
	                      case 4:
	                        encryptedContent = _a;
	                        console.log(typeof encryptedContent);
	                        return [4 /*yield*/, (_c = this.uploadToIpfs) === null || _c === void 0 ? void 0 : _c.uploadEncryptedFile(encryptedContent)];
	                      case 5:
	                        return [2 /*return*/, _d.sent()];
	                    }
	                  });
	                });
	              }))];
	            case 1:
	              encryptedDataUrls = _c.sent();
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadThumbnail(thumbnailImage)];
	            case 2:
	              thumbnailImageUrl = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.UPLOAD_CONTENT);
	              // 4. upload metadata
	              console.log("upload meta data");
	              mimeType = (0, fileHelper_1.getMimeType)(plainFileArray[0]);
	              return [4 /*yield*/, (_b = this.uploadToIpfs) === null || _b === void 0 ? void 0 : _b.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 3:
	              metadataUrl = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.UPLOAD_METADATA);
	              documentId = ethers_1.utils.hexlify(ethers_1.utils.randomBytes(32));
	              return [4 /*yield*/, this.nft.mintTokenForIPFS(metadataUrl, vwblNetworkUrl, amount, royaltiesPercentage, documentId)];
	            case 4:
	              tokenId = _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.MINT_TOKEN);
	              // 6. set key to vwbl-network
	              console.log("set key");
	              return [4 /*yield*/, this.opts.ethersSigner.getChainId()];
	            case 5:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.setKey(documentId, chainId, key, this.signature)];
	            case 6:
	              _c.sent();
	              subscriber === null || subscriber === void 0 ? void 0 : subscriber.kickStep(types_1.StepStatus.SET_KEY);
	              return [2 /*return*/, tokenId];
	          }
	        });
	      });
	    };
	    /**
	     * Mint new ERC1155 NFT
	     *
	     * @param amount - The amount of erc1155 tokens to be minted
	     * @param royaltiesPercentage - This percentage of the sale price will be paid to the NFT creator every time the NFT is sold or re-sold
	     * @returns The ID of minted NFT
	     */
	    _this.mintToken = function (amount, royaltiesPercentage) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var vwblNetworkUrl, documentId;
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              vwblNetworkUrl = this.opts.vwblNetworkUrl;
	              documentId = ethers_1.utils.hexlify(ethers_1.utils.randomBytes(32));
	              return [4 /*yield*/, this.nft.mintToken(vwblNetworkUrl, amount, royaltiesPercentage, documentId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Transfer NFT
	     *
	     * @param to - The address that NFT will be transferred
	     * @param tokenId - The ID of NFT
	     * @param amount - The amount of erc1155 tokens to be transferred
	     */
	    _this.safeTransfer = function (to, tokenId, amount, data) {
	      if (data === void 0) {
	        data = "0x00";
	      }
	      return __awaiter$1(_this, void 0, void 0, function () {
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.safeTransfer(to, tokenId, amount, data)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Burn NFT
	     *
	     * @param owner - The address of nft owner
	     * @param tokenId - The ID of NFT
	     * @param amount - The amount of erc1155 tokens to be burnt
	     */
	    _this.burn = function (owner, tokenId, amount) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.burn(owner, tokenId, amount)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get balance of nft
	     *
	     * @param owner - The address of nft owner
	     * @param tokenId - The ID of NFT
	     */
	    _this.balanceOf = function (owner, tokenId) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.balanceOf(owner, tokenId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    _this.getOwner = function (tokenId) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getOwner(tokenId)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata
	     *
	     * @remarks
	     * By default, metadata will be uploaded to Amazon S3.
	     * You need to pass `uploadMetadataCallBack` if you upload metadata to a storage other than Amazon S3.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     * @param uploadMetadataCallBack - Optional: the function for uploading metadata
	     */
	    _this.uploadMetadata = function (tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, uploadMetadataCallBack) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var _a, uploadMetadataType, awsConfig, uploadMetadataFunction;
	        return __generator$1(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              _a = this.opts, uploadMetadataType = _a.uploadMetadataType, awsConfig = _a.awsConfig;
	              uploadMetadataFunction = uploadMetadataType === types_1.UploadMetadataType.S3 ? upload_1.uploadMetadata : uploadMetadataCallBack;
	              if (!uploadMetadataFunction) {
	                throw new Error("please specify upload metadata type or give callback");
	              }
	              return [4 /*yield*/, uploadMetadataFunction(tokenId, name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic, awsConfig)];
	            case 1:
	              _b.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };
	    /**
	     * Uplod Metadata to IPFS
	     *
	     * @remarks
	     * Metadata will be uploaded to IPFS.
	     *
	     * @param tokenId - The ID of NFT
	     * @param name - The NFT name
	     * @param description - The NFT description
	     * @param thumbnailImageUrl - The URL of the thumbnail image
	     * @param encryptedDataUrls - The URL of the encrypted file data
	     * @param mimeType - The mime type of encrypted file data
	     * @param encryptLogic - Select ether "base64" or "binary". Selection criteria: "base64" -> sutable for small data. "binary" -> sutable for large data.
	     */
	    _this.uploadMetadataToIPFS = function (name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var metadataUrl;
	        var _a;
	        return __generator$1(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, (_a = this.uploadToIpfs) === null || _a === void 0 ? void 0 : _a.uploadMetadata(name, description, thumbnailImageUrl, encryptedDataUrls, mimeType, encryptLogic)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [2 /*return*/, metadataUrl];
	          }
	        });
	      });
	    };
	    /**
	     * Set key to VWBL Network
	     *
	     * @param tokenId - The ID of NFT
	     * @param key - The key generated by {@link VWBL.createKey}
	     * @param hasNonce
	     * @param autoMigration
	     *
	     */
	    _this.setKey = function (tokenId, key, hasNonce, autoMigration) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var documentId, chainId;
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 1:
	              documentId = _a.sent().documentId;
	              return [4 /*yield*/, this.opts.ethersSigner.getChainId()];
	            case 2:
	              chainId = _a.sent();
	              return [4 /*yield*/, this._setKey(documentId, chainId, key, hasNonce, autoMigration)];
	            case 3:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get all NFT metadata owned by a person who call this method
	     *
	     * @returns Array of token metadata
	     */
	    _this.getOwnTokens = function () {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var ownTokenIds;
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              ownTokenIds = _a.sent();
	              return [4 /*yield*/, Promise.all(ownTokenIds.map(this.getMetadata.bind(this)))];
	            case 2:
	              return [2 /*return*/, _a.sent().filter(function (extractMetadata) {
	                return extractMetadata !== undefined;
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token IDs owned by someone who called this function
	     *
	     * @returns Array of token IDs
	     */
	    _this.getOwnTokenIds = function () {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getOwnTokenIds()];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * Check if a person call this method is a NFT owner, and if so, return a decrypted data.
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata and an address of NFT owner
	     */
	    _this.getTokenById = function (tokenId) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var isOwnerOrMinter, _a, owner, metadata, _b;
	        return __generator$1(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.isOwnerOf(tokenId)];
	            case 1:
	              _a = _c.sent();
	              if (_a) return [3 /*break*/, 3];
	              return [4 /*yield*/, this.nft.isMinterOf(tokenId)];
	            case 2:
	              _a = _c.sent();
	              _c.label = 3;
	            case 3:
	              isOwnerOrMinter = _a;
	              return [4 /*yield*/, this.nft.getOwner(tokenId)];
	            case 4:
	              owner = _c.sent();
	              if (!isOwnerOrMinter) return [3 /*break*/, 6];
	              return [4 /*yield*/, this.extractMetadata(tokenId)];
	            case 5:
	              _b = _c.sent();
	              return [3 /*break*/, 8];
	            case 6:
	              return [4 /*yield*/, this.getMetadata(tokenId)];
	            case 7:
	              _b = _c.sent();
	              _c.label = 8;
	            case 8:
	              metadata = _b;
	              if (!metadata) {
	                throw new Error("metadata not found");
	              }
	              return [2 /*return*/, __assign(__assign({}, metadata), {
	                owner: owner
	              })];
	          }
	        });
	      });
	    };
	    /**
	     * Get token ids by minter address
	     * @param address - minter address
	     * @returns Token ids
	     */
	    _this.getTokenByMinter = function (address) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        return __generator$1(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getTokenByMinter(address)];
	            case 1:
	              return [2 /*return*/, _a.sent()];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @param tokenId - The ID of NFT
	     * @returns Token metadata
	     */
	    _this.getMetadata = function (tokenId) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var metadataUrl, metadata;
	        var _a;
	        return __generator$1(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _b.sent();
	              return [4 /*yield*/, axios_1$1.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic
	              }];
	          }
	        });
	      });
	    };
	    /**
	     * Get NFT metadata from given `tokenId`
	     *
	     * @remarks
	     * This method should be called by NFT owner.
	     *
	     * @param tokenId The ID of NFT
	     * @returns Token metadata
	     */
	    _this.extractMetadata = function (tokenId) {
	      return __awaiter$1(_this, void 0, void 0, function () {
	        var metadataUrl, metadata, documentId, chainId, decryptKey, encryptedDataUrls, isRunningOnBrowser, encryptLogic, ownDataArray, ownFiles, ownDataBase64, fileName;
	        var _this = this;
	        var _a, _b;
	        return __generator$1(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              if (!this.signature) {
	                throw "please sign first";
	              }
	              return [4 /*yield*/, this.nft.getMetadataUrl(tokenId)];
	            case 1:
	              metadataUrl = _c.sent();
	              return [4 /*yield*/, axios_1$1.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _c.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              // delete token if metadata is not found
	              if (!metadata) {
	                return [2 /*return*/, undefined];
	              }
	              return [4 /*yield*/, this.nft.getTokenInfo(tokenId)];
	            case 3:
	              documentId = _c.sent().documentId;
	              return [4 /*yield*/, this.opts.ethersSigner.getChainId()];
	            case 4:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.getKey(documentId, chainId, this.signature)];
	            case 5:
	              decryptKey = _c.sent();
	              encryptedDataUrls = metadata.encrypted_data;
	              isRunningOnBrowser = typeof window !== "undefined";
	              encryptLogic = (_b = metadata.encrypt_logic) !== null && _b !== void 0 ? _b : "base64";
	              return [4 /*yield*/, Promise.all(encryptedDataUrls.map(function (encryptedDataUrl) {
	                return __awaiter$1(_this, void 0, void 0, function () {
	                  var encryptedData, _a;
	                  return __generator$1(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1$1.default.get(encryptedDataUrl, {
	                          responseType: encryptLogic === "base64" ? "text" : isRunningOnBrowser ? "arraybuffer" : "stream"
	                        })];
	                      case 1:
	                        encryptedData = _b.sent().data;
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _a = (0, cryptoHelper_1$1.decryptString)(encryptedData, decryptKey);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1$1.decryptFile)(encryptedData, decryptKey)];
	                      case 3:
	                        _a = _b.sent();
	                        _b.label = 4;
	                      case 4:
	                        return [2 /*return*/, _a];
	                    }
	                  });
	                });
	              }))];
	            case 6:
	              ownDataArray = _c.sent();
	              ownFiles = ownDataArray.filter(function (ownData) {
	                return typeof ownData !== "string";
	              });
	              ownDataBase64 = ownDataArray.filter(function (ownData) {
	                return typeof ownData === "string";
	              });
	              fileName = encryptedDataUrls[0].split("/").slice(-1)[0].replace(/\.vwbl/, "");
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic,
	                ownDataBase64: ownDataBase64,
	                ownFiles: ownFiles,
	                fileName: fileName
	              }];
	          }
	        });
	      });
	    };
	    _this.opts = props;
	    var contractAddress = props.contractAddress,
	      ethersProvider = props.ethersProvider,
	      ethersSigner = props.ethersSigner,
	      uploadMetadataType = props.uploadMetadataType;
	    _this.nft = new blockchain_1.VWBLERC1155EthersContract(contractAddress, uploadMetadataType === types_1.UploadMetadataType.IPFS, ethersProvider, ethersSigner);
	    return _this;
	  }
	  return VWBLERC1155Ethers;
	}(base_1$1.VWBLBase);
	VWBLERC1155Ethers_1 = VWBLEthers.VWBLERC1155Ethers = VWBLERC1155Ethers;

	var metadata = {};

	var type = {};

	"use strict";
	Object.defineProperty(type, "__esModule", {
	  value: true
	});

	(function (exports) {
	  "use strict";

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(type, exports);
	})(metadata);
	var index$2 = /*@__PURE__*/getDefaultExportFromCjs(metadata);

	var viewer = {};

	var _format = "hh-sol-artifact-1";
	var contractName = "VWBLDataCollector";
	var sourceName = "contracts/VWBLDataCollector.sol";
	var abi = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_gatewayProxy",
					type: "address"
				},
				{
					internalType: "address",
					name: "_prevAccessChecker",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			inputs: [
			],
			name: "gatewayProxy",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "addr",
					type: "address"
				}
			],
			name: "getAccessCheckerType",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getAllAccessConditionContracts",
			outputs: [
				{
					internalType: "address[]",
					name: "",
					type: "address[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getAllERC1155Contracts",
			outputs: [
				{
					internalType: "address[]",
					name: "",
					type: "address[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getAllMintCount",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getAllMintedDocumentIds",
			outputs: [
				{
					internalType: "bytes32[]",
					name: "",
					type: "bytes32[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getAllMintedTokens",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "contractAddress",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						},
						{
							internalType: "string",
							name: "tokenURI",
							type: "string"
						}
					],
					internalType: "struct VWBLDataCollector.TokenInfo[]",
					name: "",
					type: "tuple[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getAllNFTContracts",
			outputs: [
				{
					internalType: "address[]",
					name: "",
					type: "address[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getAllOwnedDocumentIds",
			outputs: [
				{
					internalType: "bytes32[]",
					name: "",
					type: "bytes32[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getAllOwnedTokens",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "contractAddress",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						},
						{
							internalType: "string",
							name: "tokenURI",
							type: "string"
						}
					],
					internalType: "struct VWBLDataCollector.TokenInfo[]",
					name: "",
					type: "tuple[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "contractAddress",
					type: "address"
				}
			],
			name: "getAllTokensFromOptionalContract",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "contractAddress",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						},
						{
							internalType: "string",
							name: "tokenURI",
							type: "string"
						}
					],
					internalType: "struct VWBLDataCollector.TokenInfo[]",
					name: "",
					type: "tuple[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getAllVWBLContracts",
			outputs: [
				{
					internalType: "address[]",
					name: "",
					type: "address[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "contractAddress",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getDocumentId",
			outputs: [
				{
					internalType: "bytes32",
					name: "",
					type: "bytes32"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getERC1155AccessConditionContracts",
			outputs: [
				{
					internalType: "address[]",
					name: "",
					type: "address[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getGatewayAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "addr",
					type: "address"
				}
			],
			name: "getMintCount",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getMintedERC1155s",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "contractAddress",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						},
						{
							internalType: "string",
							name: "tokenURI",
							type: "string"
						}
					],
					internalType: "struct VWBLDataCollector.TokenInfo[]",
					name: "",
					type: "tuple[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getMintedNFTs",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "contractAddress",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						},
						{
							internalType: "string",
							name: "tokenURI",
							type: "string"
						}
					],
					internalType: "struct VWBLDataCollector.TokenInfo[]",
					name: "",
					type: "tuple[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getNFTAccessConditionContracts",
			outputs: [
				{
					internalType: "address[]",
					name: "",
					type: "address[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "contractAddress",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getNFTOwner",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getOwnedDocumentIdsOfERC1155",
			outputs: [
				{
					internalType: "bytes32[]",
					name: "",
					type: "bytes32[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getOwnedDocumentIdsOfNFT",
			outputs: [
				{
					internalType: "bytes32[]",
					name: "",
					type: "bytes32[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getOwnedERC1155s",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "contractAddress",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						},
						{
							internalType: "string",
							name: "tokenURI",
							type: "string"
						}
					],
					internalType: "struct VWBLDataCollector.TokenInfo[]",
					name: "",
					type: "tuple[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "user",
					type: "address"
				}
			],
			name: "getOwnedNFTs",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "contractAddress",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "tokenId",
							type: "uint256"
						},
						{
							internalType: "string",
							name: "tokenURI",
							type: "string"
						}
					],
					internalType: "struct VWBLDataCollector.TokenInfo[]",
					name: "",
					type: "tuple[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "contractAddress",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "tokenId",
					type: "uint256"
				}
			],
			name: "getTokenURI",
			outputs: [
				{
					internalType: "string",
					name: "",
					type: "string"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "addr",
					type: "address"
				}
			],
			name: "getVWBLContractsFromOptionalChecker",
			outputs: [
				{
					internalType: "address[]",
					name: "",
					type: "address[]"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "addr",
					type: "address"
				}
			],
			name: "getVWBLTokenType",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "prevAccessChecker",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		}
	];
	var bytecode = "0x60806040523480156200001157600080fd5b5060405162004af138038062004af1833981016040819052620000349162000083565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055620000bb565b80516001600160a01b03811681146200007e57600080fd5b919050565b600080604083850312156200009757600080fd5b620000a28362000066565b9150620000b26020840162000066565b90509250929050565b614a2680620000cb6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063693e50aa116100f9578063b88a921111610097578063c6444be411610071578063c6444be41461039c578063ca5a0958146103af578063cc6b69a6146103c2578063fb46b97c146103d557600080fd5b8063b88a92111461036e578063baaac99914610376578063bef145641461038957600080fd5b80639050f74d116100d35780639050f74d14610338578063a2801f5714610340578063aac6baea14610353578063b41bde131461035b57600080fd5b8063693e50aa14610320578063729963eb1461032857806375d5848e1461033057600080fd5b80632b0fe35911610166578063375175df11610140578063375175df146102d457806359ee0a8b146102e757806362766dec146102fa578063637dfb0c1461030d57600080fd5b80632b0fe3591461028c5780632e5ba2481461029f57806335711346146102b457600080fd5b806318148f1b116101a257806318148f1b146102255780631993db7c146102385780631b5fad47146102595780632844ddf21461026c57600080fd5b806303ed4264146101c95780630b63fd62146101f25780630f915c6414610212575b600080fd5b6101dc6101d7366004614405565b6103e8565b6040516101e99190614479565b60405180910390f35b610205610200366004614501565b6107e9565b6040516101e9919061452d565b6101dc610220366004614405565b61091c565b6101dc610233366004614405565b610cd8565b61024b610246366004614501565b610f67565b6040519081526020016101e9565b61024b610267366004614405565b61108f565b61027f61027a366004614405565b6111cc565b6040516101e99190614540565b61024b61029a366004614405565b611437565b6102a761155a565b6040516101e99190614584565b6102bc611835565b6040516001600160a01b0390911681526020016101e9565b6101dc6102e2366004614405565b6118b2565b61027f6102f5366004614405565b611c6e565b6101dc610308366004614405565b611f66565b6102bc61031b366004614501565b6122b5565b6102a76123af565b6102a76125df565b61024b612859565b6102a76128d0565b61024b61034e366004614405565b612b5d565b6102a7612bc1565b6000546102bc906001600160a01b031681565b6102a7612dda565b61027f610384366004614405565b612ff3565b6001546102bc906001600160a01b031681565b6101dc6103aa366004614405565b6132e5565b61027f6103bd366004614405565b613574565b6102a76103d0366004614405565b6138eb565b6101dc6103e3366004614405565b613f99565b606060006103f583611437565b9050806001036105d8576000836001600160a01b03166361bc221a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046391906145c5565b90506000816001600160401b0381111561047f5761047f6145de565b6040519080825280602002602001820160405280156104b857816020015b6104a56143c6565b81526020019060019003908161049d5790505b50905060005b828110156105cf5760006104d382600161460a565b9050868383815181106104e8576104e861461d565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508083838151811061051f5761051f61461d565b602090810291909101810151015260405163c87b56dd60e01b8152600481018290526001600160a01b0388169063c87b56dd90602401600060405180830381865afa158015610572573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261059a91908101906146ce565b8383815181106105ac576105ac61461d565b6020026020010151604001819052505080806105c790614702565b9150506104be565b50949350505050565b806002036107b0576000836001600160a01b03166361bc221a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064491906145c5565b90506000816001600160401b03811115610660576106606145de565b60405190808252806020026020018201604052801561069957816020015b6106866143c6565b81526020019060019003908161067e5790505b50905060005b828110156105cf5760006106b482600161460a565b9050868383815181106106c9576106c961461d565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050808383815181106107005761070061461d565b60209081029190910181015101526040516303a24d0760e21b8152600481018290526001600160a01b03881690630e89341c90602401600060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077b91908101906146ce565b83838151811061078d5761078d61461d565b6020026020010151604001819052505080806107a890614702565b91505061069f565b60408051600080825260208201909252906107e1565b6107ce6143c6565b8152602001906001900390816107c65790505b509392505050565b60405163c87b56dd60e01b8152600481018290526060906001600160a01b0384169063c87b56dd90602401600060405180830381865afa92505050801561085257506040513d6000823e601f3d908101601f1916820160405261084f91908101906146ce565b60015b610913576040516303a24d0760e21b8152600481018390526001600160a01b03841690630e89341c90602401600060405180830381865afa9250505080156108bc57506040513d6000823e601f3d908101601f191682016040526108b991908101906146ce565b60015b610913576108fe6040518060400160405280601a81526020017f696e76616c69642061646472657373206f7220746f6b656e49640000000000008152506142e8565b50604080516020810190915260008152610916565b90505b92915050565b6060600061092983613574565b9050600081516001600160401b03811115610946576109466145de565b60405190808252806020026020018201604052801561097f57816020015b61096c6143c6565b8152602001906001900390816109645790505b50905060005b82518110156107e1576000610998611835565b6001600160a01b031663c1e630318584815181106109b8576109b861461d565b60200260200101516040518263ffffffff1660e01b81526004016109de91815260200190565b602060405180830381865afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f919061471b565b9050600080826001600160a01b031663eecbc309878681518110610a4557610a4561461d565b60200260200101516040518263ffffffff1660e01b8152600401610a6b91815260200190565b6040805180830381865afa158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aab9190614738565b60405163c87b56dd60e01b81526004810182905291935091506001600160a01b0383169063c87b56dd90602401600060405180830381865afa925050508015610b1657506040513d6000823e601f3d908101601f19168201604052610b1391908101906146ce565b60015b610c44576040516303a24d0760e21b8152600481018290526001600160a01b03831690630e89341c90602401600060405180830381865afa925050508015610b8057506040513d6000823e601f3d908101601f19168201604052610b7d91908101906146ce565b60015b610bc257610bbd604051806040016040528060188152602001771d5b995e1c1958dd195908195c9c9bdc881bd8d8dd5c995960421b8152506142e8565b610cc2565b82868681518110610bd557610bd561461d565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505081868681518110610c0c57610c0c61461d565b6020026020010151602001818152505080868681518110610c2f57610c2f61461d565b60200260200101516040018190525050610cc2565b82868681518110610c5757610c5761461d565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505081868681518110610c8e57610c8e61461d565b6020026020010151602001818152505080868681518110610cb157610cb161461d565b602002602001015160400181905250505b5050508080610cd090614702565b915050610985565b60606000610ce583612ff3565b9050600081516001600160401b03811115610d0257610d026145de565b604051908082528060200260200182016040528015610d3b57816020015b610d286143c6565b815260200190600190039081610d205790505b50905060005b82518110156107e1576000610d54611835565b6001600160a01b031663c1e63031858481518110610d7457610d7461461d565b60200260200101516040518263ffffffff1660e01b8152600401610d9a91815260200190565b602060405180830381865afa158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb919061471b565b9050600080826001600160a01b031663eecbc309878681518110610e0157610e0161461d565b60200260200101516040518263ffffffff1660e01b8152600401610e2791815260200190565b6040805180830381865afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190614738565b9150915081858581518110610e7e57610e7e61461d565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505080858581518110610eb557610eb561461d565b602090810291909101810151015260405163c87b56dd60e01b8152600481018290526001600160a01b0383169063c87b56dd90602401600060405180830381865afa158015610f08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f3091908101906146ce565b858581518110610f4257610f4261461d565b6020026020010151604001819052505050508080610f5f90614702565b915050610d41565b604051635fb8bcd560e01b8152600481018290526000906001600160a01b03841690635fb8bcd590602401600060405180830381865afa925050508015610fd057506040513d6000823e601f3d908101601f19168201604052610fcd9190810190614766565b60015b61108457604051635fb8bcd560e01b8152600481018390526001600160a01b03841690635fb8bcd590602401600060405180830381865afa92505050801561103a57506040513d6000823e601f3d908101601f191682016040526110379190810190614766565b60015b6110845761107c6040518060400160405280601a81526020017f696e76616c69642061646472657373206f7220746f6b656e49640000000000008152506142e8565b506000610916565b829350505050610916565b6001546000906001600160a01b03908116908316036110b057506001919050565b816001600160a01b0316637e8d065c6040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561110f57506040513d6000823e601f3d908101601f1916820160405261110c91908101906148e9565b60015b6111c257816001600160a01b03166380ebb8c66040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561117257506040513d6000823e601f3d908101601f1916820160405261116f91908101906148e9565b60015b6111b8576111b06040518060400160405280601981526020017834b73b30b634b21030b2323932b9b9903bb0b99033b4bb32b760391b8152506142e8565b506000919050565b5060029392505050565b5060019392505050565b606060006111d8611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa158015611215573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261123d9190810190614960565b9050600081516001600160401b0381111561125a5761125a6145de565b604051908082528060200260200182016040528015611283578160200160208202803683370190505b5090506000805b835181101561139157856001600160a01b03166112a5611835565b6001600160a01b031663c6fd95ae8684815181106112c5576112c561461d565b60200260200101516040518263ffffffff1660e01b81526004016112eb91815260200190565b602060405180830381865afa158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c919061471b565b6001600160a01b03160361137f5783818151811061134c5761134c61461d565b60200260200101518383815181106113665761136661461d565b60209081029190910101528161137b81614702565b9250505b8061138981614702565b91505061128a565b6000826001600160401b038111156113ab576113ab6145de565b6040519080825280602002602001820160405280156113d4578160200160208202803683370190505b509050600091505b8282101561142d578382815181106113f6576113f661461d565b60200260200101518183815181106114105761141061461d565b60209081029190910101528161142581614702565b9250506113dc565b9695505050505050565b60405163c87b56dd60e01b8152600160048201526000906001600160a01b0383169063c87b56dd90602401600060405180830381865afa9250505080156114a057506040513d6000823e601f3d908101601f1916820160405261149d91908101906146ce565b60015b611551576040516303a24d0760e21b8152600160048201526001600160a01b03831690630e89341c90602401600060405180830381865afa92505050801561150a57506040513d6000823e601f3d908101601f1916820160405261150791908101906146ce565b60015b611548576111b06040518060400160405280601981526020017834b73b30b634b21030b2323932b9b9903bb0b99033b4bb32b760391b8152506142e8565b50600292915050565b50600192915050565b60606000611566611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa1580156115a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115cb9190810190614960565b9050600081516001600160401b038111156115e8576115e86145de565b604051908082528060200260200182016040528015611611578160200160208202803683370190505b5090506000805b835182101561173e57600061162b611835565b6001600160a01b031663c1e6303186858151811061164b5761164b61461d565b60200260200101516040518263ffffffff1660e01b815260040161167191815260200190565b602060405180830381865afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b2919061471b565b905060006116bf8261108f565b90508060011480156116d857506116d6858361432e565b155b1561172957826116e781614702565b9350829050856116f8600186614994565b815181106117085761170861461d565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5050818061173690614702565b925050611618565b600061174b82600161460a565b6001600160401b03811115611762576117626145de565b60405190808252806020026020018201604052801561178b578160200160208202803683370190505b509050600092505b818310156117f1578383815181106117ad576117ad61461d565b60200260200101518184815181106117c7576117c761461d565b6001600160a01b0390921660209283029190910190910152826117e981614702565b935050611793565b60015481516001600160a01b03909116908290849081106118145761181461461d565b6001600160a01b039092166020928302919091019091015295945050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663357113466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ad919061471b565b905090565b606060006118bf836111cc565b9050600081516001600160401b038111156118dc576118dc6145de565b60405190808252806020026020018201604052801561191557816020015b6119026143c6565b8152602001906001900390816118fa5790505b50905060005b82518110156107e157600061192e611835565b6001600160a01b031663c1e6303185848151811061194e5761194e61461d565b60200260200101516040518263ffffffff1660e01b815260040161197491815260200190565b602060405180830381865afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b5919061471b565b9050600080826001600160a01b031663eecbc3098786815181106119db576119db61461d565b60200260200101516040518263ffffffff1660e01b8152600401611a0191815260200190565b6040805180830381865afa158015611a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a419190614738565b60405163c87b56dd60e01b81526004810182905291935091506001600160a01b0383169063c87b56dd90602401600060405180830381865afa925050508015611aac57506040513d6000823e601f3d908101601f19168201604052611aa991908101906146ce565b60015b611bda576040516303a24d0760e21b8152600481018290526001600160a01b03831690630e89341c90602401600060405180830381865afa925050508015611b1657506040513d6000823e601f3d908101601f19168201604052611b1391908101906146ce565b60015b611b5857611b53604051806040016040528060188152602001771d5b995e1c1958dd195908195c9c9bdc881bd8d8dd5c995960421b8152506142e8565b611c58565b82868681518110611b6b57611b6b61461d565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505081868681518110611ba257611ba261461d565b6020026020010151602001818152505080868681518110611bc557611bc561461d565b60200260200101516040018190525050611c58565b82868681518110611bed57611bed61461d565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505081868681518110611c2457611c2461461d565b6020026020010151602001818152505080868681518110611c4757611c4761461d565b602002602001015160400181905250505b5050508080611c6690614702565b91505061191b565b60606000611c7a611835565b90506000816001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa158015611cbc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ce49190810190614960565b9050600081516001600160401b03811115611d0157611d016145de565b604051908082528060200260200182016040528015611d2a578160200160208202803683370190505b5090506000805b8351811015611ebf576000856001600160a01b031663c1e63031868481518110611d5d57611d5d61461d565b60200260200101516040518263ffffffff1660e01b8152600401611d8391815260200190565b602060405180830381865afa158015611da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc4919061471b565b9050806001600160a01b031663bc29f42a89878581518110611de857611de861461d565b60200260200101516040518363ffffffff1660e01b8152600401611e219291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6291906149a7565b15611eac57848281518110611e7957611e7961461d565b6020026020010151848481518110611e9357611e9361461d565b602090810291909101015282611ea881614702565b9350505b5080611eb781614702565b915050611d31565b6000826001600160401b03811115611ed957611ed96145de565b604051908082528060200260200182016040528015611f02578160200160208202803683370190505b509050600091505b82821015611f5b57838281518110611f2457611f2461461d565b6020026020010151818381518110611f3e57611f3e61461d565b602090810291909101015281611f5381614702565b925050611f0a565b979650505050505050565b60606000611f73836111cc565b9050600081516001600160401b03811115611f9057611f906145de565b604051908082528060200260200182016040528015611fc957816020015b611fb66143c6565b815260200190600190039081611fae5790505b5090506000805b8351811015612208576000611fe3611835565b6001600160a01b031663c1e630318684815181106120035761200361461d565b60200260200101516040518263ffffffff1660e01b815260040161202991815260200190565b602060405180830381865afa158015612046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206a919061471b565b9050600080826001600160a01b031663eecbc3098886815181106120905761209061461d565b60200260200101516040518263ffffffff1660e01b81526004016120b691815260200190565b6040805180830381865afa1580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f69190614738565b60405163c87b56dd60e01b81526004810182905291935091506001600160a01b0383169063c87b56dd90602401600060405180830381865afa92505050801561216157506040513d6000823e601f3d908101601f1916820160405261215e91908101906146ce565b60015b156121f257828787815181106121795761217961461d565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050818787815181106121b0576121b061461d565b60200260200101516020018181525050808787815181106121d3576121d361461d565b60200260200101516040018190525085806121ed90614702565b965050505b505050808061220090614702565b915050611fd0565b6000826001600160401b03811115612222576122226145de565b60405190808252806020026020018201604052801561225b57816020015b6122486143c6565b8152602001906001900390816122405790505b509050600091505b8282101561142d5783828151811061227d5761227d61461d565b60200260200101518183815181106122975761229761461d565b602002602001018190525081806122ad90614702565b925050612263565b6000806122c28484610f67565b905060006122ce611835565b6001600160a01b031663c1e63031836040518263ffffffff1660e01b81526004016122fb91815260200190565b602060405180830381865afa158015612318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233c919061471b565b604051626a1f6360e11b8152600481018490529091506001600160a01b0382169062d43ec690602401602060405180830381865afa158015612382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a6919061471b565b95945050505050565b606060006123bb6125df565b905060006123c7611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa158015612404573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261242c9190810190614960565b9050600081516001600160401b03811115612449576124496145de565b604051908082528060200260200182016040528015612472578160200160208202803683370190505b5090506000805b845181101561252d5760006124a68683815181106124995761249961461d565b60200260200101516138eb565b905060005b8151811015612518578181815181106124c6576124c661461d565b60200260200101518585815181106124e0576124e061461d565b6001600160a01b03909216602092830291909101909101528361250281614702565b945050808061251090614702565b9150506124ab565b5050808061252590614702565b915050612479565b506000816001600160401b03811115612548576125486145de565b604051908082528060200260200182016040528015612571578160200160208202803683370190505b50905060005b828110156125d5578381815181106125915761259161461d565b60200260200101518282815181106125ab576125ab61461d565b6001600160a01b0390921660209283029190910190910152806125cd81614702565b915050612577565b5095945050505050565b606060006125eb611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa158015612628573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126509190810190614960565b9050600081516001600160401b0381111561266d5761266d6145de565b604051908082528060200260200182016040528015612696578160200160208202803683370190505b5090506000805b83518210156127a65760006126b0611835565b6001600160a01b031663c1e630318685815181106126d0576126d061461d565b60200260200101516040518263ffffffff1660e01b81526004016126f691815260200190565b602060405180830381865afa158015612713573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612737919061471b565b9050612743848261432e565b612793578161275181614702565b925081905084612762600185614994565b815181106127725761277261461d565b60200260200101906001600160a01b031690816001600160a01b0316815250505b508161279e81614702565b92505061269d565b60006127b382600161460a565b6001600160401b038111156127ca576127ca6145de565b6040519080825280602002602001820160405280156127f3578160200160208202803683370190505b509050600092505b818310156117f1578383815181106128155761281561461d565b602002602001015181848151811061282f5761282f61461d565b6001600160a01b03909216602092830291909101909101528261285181614702565b9350506127fb565b600080612864611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa1580156128a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128c99190810190614960565b5192915050565b606060006128dc611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa158015612919573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129419190810190614960565b9050600081516001600160401b0381111561295e5761295e6145de565b604051908082528060200260200182016040528015612987578160200160208202803683370190505b5090506000805b8351821015612ab45760006129a1611835565b6001600160a01b031663c1e630318685815181106129c1576129c161461d565b60200260200101516040518263ffffffff1660e01b81526004016129e791815260200190565b602060405180830381865afa158015612a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a28919061471b565b90506000612a358261108f565b9050806002148015612a4e5750612a4c858361432e565b155b15612a9f5782612a5d81614702565b935082905085612a6e600186614994565b81518110612a7e57612a7e61461d565b60200260200101906001600160a01b031690816001600160a01b0316815250505b50508180612aac90614702565b92505061298e565b6000816001600160401b03811115612ace57612ace6145de565b604051908082528060200260200182016040528015612af7578160200160208202803683370190505b509050600092505b818310156123a657838381518110612b1957612b1961461d565b6020026020010151818481518110612b3357612b3361461d565b6001600160a01b039092166020928302919091019091015282612b5581614702565b935050612aff565b6000816001600160a01b03166361bc221a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b9d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091691906145c5565b60606000612bcd6128d0565b90506000612bd9611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa158015612c16573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c3e9190810190614960565b9050600081516001600160401b03811115612c5b57612c5b6145de565b604051908082528060200260200182016040528015612c84578160200160208202803683370190505b5090506000805b8451811015612d32576000612cab8683815181106124995761249961461d565b905060005b8151811015612d1d57818181518110612ccb57612ccb61461d565b6020026020010151858581518110612ce557612ce561461d565b6001600160a01b039092166020928302919091019091015283612d0781614702565b9450508080612d1590614702565b915050612cb0565b50508080612d2a90614702565b915050612c8b565b506000816001600160401b03811115612d4d57612d4d6145de565b604051908082528060200260200182016040528015612d76578160200160208202803683370190505b50905060005b828110156125d557838181518110612d9657612d9661461d565b6020026020010151828281518110612db057612db061461d565b6001600160a01b039092166020928302919091019091015280612dd281614702565b915050612d7c565b60606000612de661155a565b90506000612df2611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa158015612e2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e579190810190614960565b9050600081516001600160401b03811115612e7457612e746145de565b604051908082528060200260200182016040528015612e9d578160200160208202803683370190505b5090506000805b8451811015612f4b576000612ec48683815181106124995761249961461d565b905060005b8151811015612f3657818181518110612ee457612ee461461d565b6020026020010151858581518110612efe57612efe61461d565b6001600160a01b039092166020928302919091019091015283612f2081614702565b9450508080612f2e90614702565b915050612ec9565b50508080612f4390614702565b915050612ea4565b506000816001600160401b03811115612f6657612f666145de565b604051908082528060200260200182016040528015612f8f578160200160208202803683370190505b50905060005b828110156125d557838181518110612faf57612faf61461d565b6020026020010151828281518110612fc957612fc961461d565b6001600160a01b039092166020928302919091019091015280612feb81614702565b915050612f95565b60606000612fff611835565b90506000816001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa158015613041573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130699190810190614960565b9050600081516001600160401b03811115613086576130866145de565b6040519080825280602002602001820160405280156130af578160200160208202803683370190505b5090506000805b8351811015613249576000856001600160a01b031663c1e630318684815181106130e2576130e261461d565b60200260200101516040518263ffffffff1660e01b815260040161310891815260200190565b602060405180830381865afa158015613125573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613149919061471b565b90506000816001600160a01b031662d43ec687858151811061316d5761316d61461d565b60200260200101516040518263ffffffff1660e01b815260040161319391815260200190565b602060405180830381865afa1580156131b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d4919061471b565b9050886001600160a01b0316816001600160a01b031603613234578583815181106132015761320161461d565b602002602001015185858151811061321b5761321b61461d565b60209081029190910101528361323081614702565b9450505b5050808061324190614702565b9150506130b6565b6000826001600160401b03811115613263576132636145de565b60405190808252806020026020018201604052801561328c578160200160208202803683370190505b509050600091505b82821015611f5b578382815181106132ae576132ae61461d565b60200260200101518183815181106132c8576132c861461d565b6020908102919091010152816132dd81614702565b925050613294565b606060006132f283611c6e565b9050600081516001600160401b0381111561330f5761330f6145de565b60405190808252806020026020018201604052801561334857816020015b6133356143c6565b81526020019060019003908161332d5790505b50905060005b82518110156107e1576000613361611835565b6001600160a01b031663c1e630318584815181106133815761338161461d565b60200260200101516040518263ffffffff1660e01b81526004016133a791815260200190565b602060405180830381865afa1580156133c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e8919061471b565b9050600080826001600160a01b031663eecbc30987868151811061340e5761340e61461d565b60200260200101516040518263ffffffff1660e01b815260040161343491815260200190565b6040805180830381865afa158015613450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134749190614738565b915091508185858151811061348b5761348b61461d565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050808585815181106134c2576134c261461d565b60209081029190910181015101526040516303a24d0760e21b8152600481018290526001600160a01b03831690630e89341c90602401600060405180830381865afa158015613515573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261353d91908101906146ce565b85858151811061354f5761354f61461d565b602002602001015160400181905250505050808061356c90614702565b91505061334e565b60606000613580611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa1580156135bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135e59190810190614960565b9050600081516001600160401b03811115613602576136026145de565b60405190808252806020026020018201604052801561362b578160200160208202803683370190505b5090506000805b835182101561384f57600084838151811061364f5761364f61461d565b602002602001015190506000613663611835565b6001600160a01b031663c1e63031836040518263ffffffff1660e01b815260040161369091815260200190565b602060405180830381865afa1580156136ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d1919061471b565b604051626a1f6360e11b8152600481018490529091506000906001600160a01b0383169062d43ec690602401602060405180830381865afa15801561371a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373e919061471b565b9050886001600160a01b0316816001600160a01b031603613785578286858151811061376c5761376c61461d565b60209081029190910101528361378181614702565b9450505b6001600160a01b0381161580156138085750604051635e14fa1560e11b81526001600160a01b038a811660048301526024820185905283169063bc29f42a90604401602060405180830381865afa1580156137e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380891906149a7565b1561383957828685815181106138205761382061461d565b60209081029190910101528361383581614702565b9450505b505050818061384790614702565b925050613632565b6000816001600160401b03811115613869576138696145de565b604051908082528060200260200182016040528015613892578160200160208202803683370190505b509050600092505b8183101561142d578383815181106138b4576138b461461d565b60200260200101518184815181106138ce576138ce61461d565b6020908102919091010152826138e381614702565b93505061389a565b60015460609060009081906001600160a01b0390811690851603613b58576000613913611835565b6001600160a01b031663478f7a396040518163ffffffff1660e01b8152600401600060405180830381865afa158015613950573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139789190810190614960565b9050600081516001600160401b03811115613995576139956145de565b6040519080825280602002602001820160405280156139be578160200160208202803683370190505b509050600092505b8151831015613aaf57856001600160a01b031663eecbc3098385815181106139f0576139f061461d565b60200260200101516040518263ffffffff1660e01b8152600401613a1691815260200190565b6040805180830381865afa925050508015613a4e575060408051601f3d908101601f19168201909252613a4b91810190614738565b60015b15613a9d57613a5d838361432e565b613a9a5781838781518110613a7457613a7461461d565b6001600160a01b039092166020928302919091019091015285613a9681614702565b9650505b50505b82613aa781614702565b9350506139c6565b6000846001600160401b03811115613ac957613ac96145de565b604051908082528060200260200182016040528015613af2578160200160208202803683370190505b509050600093505b8484101561142d57818481518110613b1457613b1461461d565b6020026020010151818581518110613b2e57613b2e61461d565b6001600160a01b039092166020928302919091019091015283613b5081614702565b945050613afa565b836001600160a01b0316637e8d065c6040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015613bb757506040513d6000823e601f3d908101601f19168201604052613bb491908101906148e9565b60015b613e1957836001600160a01b03166380ebb8c66040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015613c1a57506040513d6000823e601f3d908101601f19168201604052613c1791908101906148e9565b60015b613c8857613c3f6040518060600160405280602781526020016149ca602791396142e8565b816001600160401b03811115613c5757613c576145de565b6040519080825280602002602001820160405280156105cf5781602001602082028036833701905050949350505050565b600081516001600160401b03811115613ca357613ca36145de565b604051908082528060200260200182016040528015613ccc578160200160208202803683370190505b509050600093505b8151841015613d7057613d0481838681518110613cf357613cf361461d565b60200260200101516000015161432e565b613d5e57818481518110613d1a57613d1a61461d565b602002602001015160000151818681518110613d3857613d3861461d565b6001600160a01b039092166020928302919091019091015284613d5a81614702565b9550505b83613d6881614702565b945050613cd4565b6000856001600160401b03811115613d8a57613d8a6145de565b604051908082528060200260200182016040528015613db3578160200160208202803683370190505b509050600094505b85851015611f5b57818581518110613dd557613dd561461d565b6020026020010151818681518110613def57613def61461d565b6001600160a01b039092166020928302919091019091015284613e1181614702565b955050613dbb565b600081516001600160401b03811115613e3457613e346145de565b604051908082528060200260200182016040528015613e5d578160200160208202803683370190505b509050600093505b8151841015613ef057613e8481838681518110613cf357613cf361461d565b613ede57818481518110613e9a57613e9a61461d565b602002602001015160000151818681518110613eb857613eb861461d565b6001600160a01b039092166020928302919091019091015284613eda81614702565b9550505b83613ee881614702565b945050613e65565b6000856001600160401b03811115613f0a57613f0a6145de565b604051908082528060200260200182016040528015613f33578160200160208202803683370190505b509050600094505b85851015611f5b57818581518110613f5557613f5561461d565b6020026020010151818681518110613f6f57613f6f61461d565b6001600160a01b039092166020928302919091019091015284613f9181614702565b955050613f3b565b60606000613fa6836111cc565b9050600081516001600160401b03811115613fc357613fc36145de565b604051908082528060200260200182016040528015613ffc57816020015b613fe96143c6565b815260200190600190039081613fe15790505b5090506000805b835181101561423b576000614016611835565b6001600160a01b031663c1e630318684815181106140365761403661461d565b60200260200101516040518263ffffffff1660e01b815260040161405c91815260200190565b602060405180830381865afa158015614079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061409d919061471b565b9050600080826001600160a01b031663eecbc3098886815181106140c3576140c361461d565b60200260200101516040518263ffffffff1660e01b81526004016140e991815260200190565b6040805180830381865afa158015614105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141299190614738565b6040516303a24d0760e21b81526004810182905291935091506001600160a01b03831690630e89341c90602401600060405180830381865afa92505050801561419457506040513d6000823e601f3d908101601f1916820160405261419191908101906146ce565b60015b1561422557828787815181106141ac576141ac61461d565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050818787815181106141e3576141e361461d565b60200260200101516020018181525050808787815181106142065761420661461d565b602002602001015160400181905250858061422090614702565b965050505b505050808061423390614702565b915050614003565b6000826001600160401b03811115614255576142556145de565b60405190808252806020026020018201604052801561428e57816020015b61427b6143c6565b8152602001906001900390816142735790505b509050600091505b8282101561142d578382815181106142b0576142b061461d565b60200260200101518183815181106142ca576142ca61461d565b602002602001018190525081806142e090614702565b925050614296565b61432b816040516024016142fc919061452d565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526143a5565b50565b6000825160000361434157506000610916565b60005b835181101561439b57826001600160a01b03168482815181106143695761436961461d565b60200260200101516001600160a01b031603614389576001915050610916565b8061439381614702565b915050614344565b5060009392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604051806060016040528060006001600160a01b0316815260200160008152602001606081525090565b6001600160a01b038116811461432b57600080fd5b60006020828403121561441757600080fd5b8135614422816143f0565b9392505050565b60005b8381101561444457818101518382015260200161442c565b50506000910152565b60008151808452614465816020860160208601614429565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156144f357888303603f19018552815180516001600160a01b03168452878101518885015286015160608785018190526144df8186018361444d565b9689019694505050908601906001016144a0565b509098975050505050505050565b6000806040838503121561451457600080fd5b823561451f816143f0565b946020939093013593505050565b602081526000614422602083018461444d565b6020808252825182820181905260009190848201906040850190845b818110156145785783518352928401929184019160010161455c565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156145785783516001600160a01b0316835292840192918401916001016145a0565b6000602082840312156145d757600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610916576109166145f4565b634e487b7160e01b600052603260045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561465b5761465b6145de565b604052919050565b600082601f83011261467457600080fd5b81516001600160401b0381111561468d5761468d6145de565b6146a0601f8201601f1916602001614633565b8181528460208386010111156146b557600080fd5b6146c6826020830160208701614429565b949350505050565b6000602082840312156146e057600080fd5b81516001600160401b038111156146f657600080fd5b6146c684828501614663565b600060018201614714576147146145f4565b5060010190565b60006020828403121561472d57600080fd5b8151614422816143f0565b6000806040838503121561474b57600080fd5b8251614756816143f0565b6020939093015192949293505050565b60008060006060848603121561477b57600080fd5b83519250602084015161478d816143f0565b60408501519092506001600160401b038111156147a957600080fd5b6147b586828701614663565b9150509250925092565b60006001600160401b038211156147d8576147d86145de565b5060051b60200190565b600082601f8301126147f357600080fd5b81516020614808614803836147bf565b614633565b82815260059290921b8401810191818101908684111561482757600080fd5b8286015b84811015614842578051835291830191830161482b565b509695505050505050565b600061485b614803846147bf565b8381529050602080820190600685901b84018681111561487a57600080fd5b845b818110156148de57604080828a0312156148965760008081fd5b80518181018181106001600160401b03821117156148b6576148b66145de565b9091528151906148c5826143f0565b908152818401518482015284529282019260400161487c565b505050509392505050565b600080604083850312156148fc57600080fd5b82516001600160401b038082111561491357600080fd5b61491f868387016147e2565b9350602085015191508082111561493557600080fd5b508301601f8101851361494757600080fd5b6149568582516020840161484d565b9150509250929050565b60006020828403121561497257600080fd5b81516001600160401b0381111561498857600080fd5b6146c6848285016147e2565b81810381811115610916576109166145f4565b6000602082840312156149b957600080fd5b8151801515811461442257600080fdfe7468652061646472657373206973206e6f74206e66742f6572633131353520636865636b65722ea26469706673582212204443f7408cb157669670548c9827e13a01dd3627ae037c786b7fdee431c2be6864736f6c63430008110033";
	var deployedBytecode = "";
	var linkReferences = {
	};
	var deployedLinkReferences = {
	};
	var require$$1 = {
		_format: _format,
		contractName: contractName,
		sourceName: sourceName,
		abi: abi,
		bytecode: bytecode,
		deployedBytecode: deployedBytecode,
		linkReferences: linkReferences,
		deployedLinkReferences: deployedLinkReferences
	};

	"use strict";
	var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {
	  var extendStatics = function (d, b) {
	    extendStatics = Object.setPrototypeOf || {
	      __proto__: []
	    } instanceof Array && function (d, b) {
	      d.__proto__ = b;
	    } || function (d, b) {
	      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
	    };
	    return extendStatics(d, b);
	  };
	  return function (d, b) {
	    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() {
	      this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	}();
	var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  var desc = Object.getOwnPropertyDescriptor(m, k);
	  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	    desc = {
	      enumerable: true,
	      get: function () {
	        return m[k];
	      }
	    };
	  }
	  Object.defineProperty(o, k2, desc);
	} : function (o, m, k, k2) {
	  if (k2 === undefined) k2 = k;
	  o[k2] = m[k];
	});
	var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
	  Object.defineProperty(o, "default", {
	    enumerable: true,
	    value: v
	  });
	} : function (o, v) {
	  o["default"] = v;
	});
	var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
	  if (mod && mod.__esModule) return mod;
	  var result = {};
	  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	  __setModuleDefault(result, mod);
	  return result;
	};
	var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
	  function adopt(value) {
	    return value instanceof P ? value : new P(function (resolve) {
	      resolve(value);
	    });
	  }
	  return new (P || (P = Promise))(function (resolve, reject) {
	    function fulfilled(value) {
	      try {
	        step(generator.next(value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function rejected(value) {
	      try {
	        step(generator["throw"](value));
	      } catch (e) {
	        reject(e);
	      }
	    }
	    function step(result) {
	      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
	    }
	    step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	};
	var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
	  var _ = {
	      label: 0,
	      sent: function () {
	        if (t[0] & 1) throw t[1];
	        return t[1];
	      },
	      trys: [],
	      ops: []
	    },
	    f,
	    y,
	    t,
	    g;
	  return g = {
	    next: verb(0),
	    "throw": verb(1),
	    "return": verb(2)
	  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	    return this;
	  }), g;
	  function verb(n) {
	    return function (v) {
	      return step([n, v]);
	    };
	  }
	  function step(op) {
	    if (f) throw new TypeError("Generator is already executing.");
	    while (g && (g = 0, op[0] && (_ = 0)), _) try {
	      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	      if (y = 0, t) op = [op[0] & 2, t.value];
	      switch (op[0]) {
	        case 0:
	        case 1:
	          t = op;
	          break;
	        case 4:
	          _.label++;
	          return {
	            value: op[1],
	            done: false
	          };
	        case 5:
	          _.label++;
	          y = op[1];
	          op = [0];
	          continue;
	        case 7:
	          op = _.ops.pop();
	          _.trys.pop();
	          continue;
	        default:
	          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	            _ = 0;
	            continue;
	          }
	          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	            _.label = op[1];
	            break;
	          }
	          if (op[0] === 6 && _.label < t[1]) {
	            _.label = t[1];
	            t = op;
	            break;
	          }
	          if (t && _.label < t[2]) {
	            _.label = t[2];
	            _.ops.push(op);
	            break;
	          }
	          if (t[2]) _.ops.pop();
	          _.trys.pop();
	          continue;
	      }
	      op = body.call(thisArg, _);
	    } catch (e) {
	      op = [6, e];
	      y = 0;
	    } finally {
	      f = t = 0;
	    }
	    if (op[0] & 5) throw op[1];
	    return {
	      value: op[0] ? op[1] : void 0,
	      done: true
	    };
	  }
	};
	var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
	  return mod && mod.__esModule ? mod : {
	    "default": mod
	  };
	};
	Object.defineProperty(viewer, "__esModule", {
	  value: true
	});
	var VWBLViewer_1 = viewer.VWBLViewer = void 0;
	var axios_1 = __importDefault(axiosExports$1);
	var vwblDataCollector = __importStar(require$$1);
	var cryptoHelper_1 = cryptoHelper$1;
	var base_1 = base$2;
	var VWBLViewer = /** @class */function (_super) {
	  __extends(VWBLViewer, _super);
	  function VWBLViewer(props) {
	    var _this = _super.call(this, props) || this;
	    _this.sign = function () {
	      return __awaiter(_this, void 0, void 0, function () {
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              return [4 /*yield*/, this._sign(this.opts.web3)];
	            case 1:
	              _a.sent();
	              return [2 /*return*/];
	          }
	        });
	      });
	    };

	    _this.getMetadata = function (contractAddress, tokenId) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var metadataUrl, metadata;
	        var _a;
	        return __generator(this, function (_b) {
	          switch (_b.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getTokenURI(contractAddress, tokenId).call()];
	            case 1:
	              metadataUrl = _b.sent();
	              if (!metadataUrl) return [2 /*return*/, undefined];
	              return [4 /*yield*/, axios_1.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              if (!metadata) return [2 /*return*/, undefined];
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic,
	                address: contractAddress
	              }];
	          }
	        });
	      });
	    };
	    _this.listMetadata = function (contractAddress) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var tokens, items;
	        var _this = this;
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getAllTokensFromOptionalContract(contractAddress).call()];
	            case 1:
	              tokens = _a.sent();
	              return [4 /*yield*/, Promise.all(tokens.map(function (token) {
	                return __awaiter(_this, void 0, void 0, function () {
	                  var metadata;
	                  var _a;
	                  return __generator(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1.default.get(token.tokenURI).catch(function () {
	                          return undefined;
	                        })];
	                      case 1:
	                        metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	                        if (!metadata) return [2 /*return*/, undefined];
	                        return [2 /*return*/, {
	                          id: token.tokenId,
	                          name: metadata.name,
	                          description: metadata.description,
	                          image: metadata.image,
	                          mimeType: metadata.mime_type,
	                          encryptLogic: metadata.encrypt_logic,
	                          address: contractAddress
	                        }];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              items = _a.sent();
	              return [2 /*return*/, items];
	          }
	        });
	      });
	    };
	    _this.listMetadataFormMultiContracts = function (contracts) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var allItems, _i, contracts_1, addr, items;
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              allItems = [];
	              _i = 0, contracts_1 = contracts;
	              _a.label = 1;
	            case 1:
	              if (!(_i < contracts_1.length)) return [3 /*break*/, 4];
	              addr = contracts_1[_i];
	              return [4 /*yield*/, this.listMetadata(addr)];
	            case 2:
	              items = _a.sent();
	              allItems.push.apply(allItems, items);
	              _a.label = 3;
	            case 3:
	              _i++;
	              return [3 /*break*/, 1];
	            case 4:
	              return [2 /*return*/, allItems];
	          }
	        });
	      });
	    };
	    _this.listAllOwnedMetadata = function (userAddress) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var tokens, items;
	        var _this = this;
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getAllOwnedTokens(userAddress).call()];
	            case 1:
	              tokens = _a.sent();
	              return [4 /*yield*/, Promise.all(tokens.map(function (token) {
	                return __awaiter(_this, void 0, void 0, function () {
	                  var metadata;
	                  var _a;
	                  return __generator(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1.default.get(token.tokenURI).catch(function () {
	                          return undefined;
	                        })];
	                      case 1:
	                        metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	                        if (!metadata) return [2 /*return*/, undefined];
	                        return [2 /*return*/, {
	                          id: token.tokenId,
	                          name: metadata.name,
	                          description: metadata.description,
	                          image: metadata.image,
	                          mimeType: metadata.mime_type,
	                          encryptLogic: metadata.encrypt_logic,
	                          address: token.contractAddress
	                        }];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              items = _a.sent();
	              return [2 /*return*/, items];
	          }
	        });
	      });
	    };
	    _this.listOwnedNFTMetadata = function (userAddress) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var tokens, items;
	        var _this = this;
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getOwnedNFTs(userAddress).call()];
	            case 1:
	              tokens = _a.sent();
	              return [4 /*yield*/, Promise.all(tokens.map(function (token) {
	                return __awaiter(_this, void 0, void 0, function () {
	                  var metadata;
	                  var _a;
	                  return __generator(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1.default.get(token.tokenURI).catch(function () {
	                          return undefined;
	                        })];
	                      case 1:
	                        metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	                        if (!metadata) return [2 /*return*/, undefined];
	                        return [2 /*return*/, {
	                          id: token.tokenId,
	                          name: metadata.name,
	                          description: metadata.description,
	                          image: metadata.image,
	                          mimeType: metadata.mime_type,
	                          encryptLogic: metadata.encrypt_logic,
	                          address: token.contractAddress
	                        }];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              items = _a.sent();
	              return [2 /*return*/, items];
	          }
	        });
	      });
	    };
	    _this.listOwnedERC1155Metadata = function (userAddress) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var tokens, items;
	        var _this = this;
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getOwnedERC1155s(userAddress).call()];
	            case 1:
	              tokens = _a.sent();
	              return [4 /*yield*/, Promise.all(tokens.map(function (token) {
	                return __awaiter(_this, void 0, void 0, function () {
	                  var metadata;
	                  var _a;
	                  return __generator(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1.default.get(token.tokenURI).catch(function () {
	                          return undefined;
	                        })];
	                      case 1:
	                        metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	                        if (!metadata) return [2 /*return*/, undefined];
	                        return [2 /*return*/, {
	                          id: token.tokenId,
	                          name: metadata.name,
	                          description: metadata.description,
	                          image: metadata.image,
	                          mimeType: metadata.mime_type,
	                          encryptLogic: metadata.encrypt_logic,
	                          address: token.contractAddress
	                        }];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              items = _a.sent();
	              return [2 /*return*/, items];
	          }
	        });
	      });
	    };
	    _this.listAllMintedMetadata = function (userAddress) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var tokens, items;
	        var _this = this;
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getAllMintedTokens(userAddress).call()];
	            case 1:
	              tokens = _a.sent();
	              return [4 /*yield*/, Promise.all(tokens.map(function (token) {
	                return __awaiter(_this, void 0, void 0, function () {
	                  var metadata;
	                  var _a;
	                  return __generator(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1.default.get(token.tokenURI).catch(function () {
	                          return undefined;
	                        })];
	                      case 1:
	                        metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	                        if (!metadata) return [2 /*return*/, undefined];
	                        return [2 /*return*/, {
	                          id: token.tokenId,
	                          name: metadata.name,
	                          description: metadata.description,
	                          image: metadata.image,
	                          mimeType: metadata.mime_type,
	                          encryptLogic: metadata.encrypt_logic,
	                          address: token.contractAddress
	                        }];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              items = _a.sent();
	              return [2 /*return*/, items];
	          }
	        });
	      });
	    };
	    _this.listMintedNFTMetadata = function (userAddress) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var tokens, items;
	        var _this = this;
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getMintedNFTs(userAddress).call()];
	            case 1:
	              tokens = _a.sent();
	              return [4 /*yield*/, Promise.all(tokens.map(function (token) {
	                return __awaiter(_this, void 0, void 0, function () {
	                  var metadata;
	                  var _a;
	                  return __generator(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1.default.get(token.tokenURI).catch(function () {
	                          return undefined;
	                        })];
	                      case 1:
	                        metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	                        if (!metadata) return [2 /*return*/, undefined];
	                        return [2 /*return*/, {
	                          id: token.tokenId,
	                          name: metadata.name,
	                          description: metadata.description,
	                          image: metadata.image,
	                          mimeType: metadata.mime_type,
	                          encryptLogic: metadata.encrypt_logic,
	                          address: token.contractAddress
	                        }];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              items = _a.sent();
	              return [2 /*return*/, items];
	          }
	        });
	      });
	    };
	    _this.listMintedERC1155Metadata = function (userAddress) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var tokens, items;
	        var _this = this;
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getMintedERC1155s(userAddress).call()];
	            case 1:
	              tokens = _a.sent();
	              return [4 /*yield*/, Promise.all(tokens.map(function (token) {
	                return __awaiter(_this, void 0, void 0, function () {
	                  var metadata;
	                  var _a;
	                  return __generator(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1.default.get(token.tokenURI).catch(function () {
	                          return undefined;
	                        })];
	                      case 1:
	                        metadata = (_a = _b.sent()) === null || _a === void 0 ? void 0 : _a.data;
	                        if (!metadata) return [2 /*return*/, undefined];
	                        return [2 /*return*/, {
	                          id: token.tokenId,
	                          name: metadata.name,
	                          description: metadata.description,
	                          image: metadata.image,
	                          mimeType: metadata.mime_type,
	                          encryptLogic: metadata.encrypt_logic,
	                          address: token.contractAddress
	                        }];
	                    }
	                  });
	                });
	              }))];
	            case 2:
	              items = _a.sent();
	              return [2 /*return*/, items];
	          }
	        });
	      });
	    };
	    _this.extractMetadata = function (contractAddress, tokenId, signature) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var sig, metadataUrl, metadata, documentId, chainId, decryptKey, encryptedDataUrls, isRunningOnBrowser, encryptLogic, ownDataArray, ownFiles, ownDataBase64, fileName;
	        var _this = this;
	        var _a, _b;
	        return __generator(this, function (_c) {
	          switch (_c.label) {
	            case 0:
	              sig = this.signature || signature;
	              if (!sig) throw new Error("please sign or set signature param");
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getTokenURI(contractAddress, tokenId).call()];
	            case 1:
	              metadataUrl = _c.sent();
	              if (!metadataUrl) return [2 /*return*/, undefined];
	              return [4 /*yield*/, axios_1.default.get(metadataUrl).catch(function () {
	                return undefined;
	              })];
	            case 2:
	              metadata = (_a = _c.sent()) === null || _a === void 0 ? void 0 : _a.data;
	              if (!metadata) return [2 /*return*/, undefined];
	              return [4 /*yield*/, this.dataCollector.methods.getDocumentId(contractAddress, tokenId).call()];
	            case 3:
	              documentId = _c.sent();
	              return [4 /*yield*/, this.opts.web3.eth.getChainId()];
	            case 4:
	              chainId = _c.sent();
	              return [4 /*yield*/, this.api.getKey(documentId, chainId, sig)];
	            case 5:
	              decryptKey = _c.sent();
	              encryptedDataUrls = metadata.encrypted_data;
	              isRunningOnBrowser = typeof window !== "undefined";
	              encryptLogic = (_b = metadata.encrypt_logic) !== null && _b !== void 0 ? _b : "base64";
	              return [4 /*yield*/, Promise.all(encryptedDataUrls.map(function (encryptedDataUrl) {
	                return __awaiter(_this, void 0, void 0, function () {
	                  var encryptedData, _a;
	                  return __generator(this, function (_b) {
	                    switch (_b.label) {
	                      case 0:
	                        return [4 /*yield*/, axios_1.default.get(encryptedDataUrl, {
	                          responseType: encryptLogic === "base64" ? "text" : isRunningOnBrowser ? "arraybuffer" : "stream"
	                        })];
	                      case 1:
	                        encryptedData = _b.sent().data;
	                        if (!(encryptLogic === "base64")) return [3 /*break*/, 2];
	                        _a = (0, cryptoHelper_1.decryptString)(encryptedData, decryptKey);
	                        return [3 /*break*/, 4];
	                      case 2:
	                        return [4 /*yield*/, (0, cryptoHelper_1.decryptFile)(encryptedData, decryptKey)];
	                      case 3:
	                        _a = _b.sent();
	                        _b.label = 4;
	                      case 4:
	                        return [2 /*return*/, _a];
	                    }
	                  });
	                });
	              }))];
	            case 6:
	              ownDataArray = _c.sent();
	              ownFiles = ownDataArray.filter(function (ownData) {
	                return typeof ownData !== "string";
	              });
	              ownDataBase64 = ownDataArray.filter(function (ownData) {
	                return typeof ownData === "string";
	              });
	              fileName = encryptedDataUrls[0].split("/").slice(-1)[0].replace(/\.vwbl/, "");
	              return [2 /*return*/, {
	                id: tokenId,
	                name: metadata.name,
	                description: metadata.description,
	                image: metadata.image,
	                mimeType: metadata.mime_type,
	                encryptLogic: metadata.encrypt_logic,
	                ownDataBase64: ownDataBase64,
	                ownFiles: ownFiles,
	                fileName: fileName
	              }];
	          }
	        });
	      });
	    };
	    _this.getNFTOwner = function (contractAddress, tokenId) {
	      return __awaiter(_this, void 0, void 0, function () {
	        var owner;
	        return __generator(this, function (_a) {
	          switch (_a.label) {
	            case 0:
	              if (!this.dataCollector) throw new Error("please set dataCollectorAddress");
	              return [4 /*yield*/, this.dataCollector.methods.getNFTOwner(contractAddress, tokenId).call()];
	            case 1:
	              owner = _a.sent();
	              return [2 /*return*/, owner];
	          }
	        });
	      });
	    };
	    _this.opts = props;
	    var web3 = props.web3,
	      dataCollectorAddress = props.dataCollectorAddress;
	    _this.dataCollector = new web3.eth.Contract(vwblDataCollector.abi, dataCollectorAddress);
	    return _this;
	  }
	  return VWBLViewer;
	}(base_1.VWBLBase);
	VWBLViewer_1 = viewer.VWBLViewer = VWBLViewer;

	(function (exports) {
	  "use strict";

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(VWBL$2, exports);
	  __exportStar(VWBLMetaTx$1, exports);
	  __exportStar(VWBLEthers$2, exports);
	  __exportStar(VWBL, exports);
	  __exportStar(VWBLEthers, exports);
	  __exportStar(metadata, exports);
	  __exportStar(types, exports);
	  __exportStar(blockchain, exports);
	  __exportStar(api, exports);
	  __exportStar(base$2, exports);
	  __exportStar(viewer, exports);
	})(vwbl$2);
	var index$1 = /*@__PURE__*/getDefaultExportFromCjs(vwbl$2);

	(function (exports) {
	  "use strict";

	  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = {
	        enumerable: true,
	        get: function () {
	          return m[k];
	        }
	      };
	    }
	    Object.defineProperty(o, k2, desc);
	  } : function (o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	  });
	  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	  };
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  __exportStar(vwbl$2, exports);
	})(src$3);
	var index = /*@__PURE__*/getDefaultExportFromCjs(src$3);

	return index;

}));
//# sourceMappingURL=vwbl.umd.js.map
